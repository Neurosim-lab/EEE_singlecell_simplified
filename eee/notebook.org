Author:  Joe Graham
E-mail:  joe.w.graham@gmail.com
Project: Embedded Ensemble Encoding (EEE) Theory

* 2016-12-05 -- Set up system in Neurosim style, learning new tools

** Change from Bash shell to tcsh shell:
http://osxdaily.com/2007/02/27/how-to-change-from-bash-to-tcsh-shell/

** Path trouble: ensure all Bash paths make it into Tcsh paths 

Bash path: /Applications/NEURON-7.4/nrn/x86_64/bin://anaconda/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/texbin
TCSH path: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/texbin

To add to Tcsh path: 
/Applications/NEURON-7.4/nrn/x86_64/bin
//anaconda/bin

BASH pythonpath: /Applications/NEURON-7.4/nrn/lib/python
TCSH pythonpath: none

Added the following to .tcshrc:
setenv PATH /anaconda/bin:${PATH}
setenv PATH /Applications/NEURON-7.4/nrn/x86_64/bin:${PATH}
setenv PYTHONPATH /Applications/NEURON-7.4/nrn/lib/python

** Adding aliases to .tcshrc

Normally I don't want to see hidden files in Finder, but sometimes it's necessary... Creating aliases to "hide" and "unhide" hidden files/dirs (added to .tcshrc):
alias unhide  'defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app; echo Hidden files unhidden.'
alias hide    'defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app; echo Hidden files hidden.'

Created a nice shortcut to connect to Neurosim:
alias sshno   'ssh -Y no.neurosim.downstate.edu'

** Setting up Neurosim directory structure

Info from wiki: https://docs.google.com/document/d/1t9o_3nuxzZ7lhr7-UW2D15PjCPuwoK3STH8ETpICT7w/

*** Can’t modify /usr, seems to be because of Apple’s new System Integrity Protrection

Solution: http://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11
Reboot your Mac into Recovery Mode by restarting your computer and holding down Command+R until the Apple logo appears on your screen.
Click Utilities > Terminal.
In the Terminal window, type in csrutil disable and press Enter.
Restart your Mac.
To restore, follow same procedure and type: csrutil enable

*** Added and owned paths

*** Checked out Hg repos

** Installed InterViews

** Installed NEURON

** Running simplified SPI cell

Compile the mod files:
graham-mac% cd /u/samn/evoizhi/mod
graham-mac% mkmod
/usr/site/scripts/mkmod: Permission denied.
Permissions
-rw-r--r--    1 graham  wheel      31 Dec  5 19:06 mkmod

So change ownership:
graham-mac% chmod 755 /usr/site/scripts/mkmod
-rwxr-xr-x    1 graham  wheel      31 Dec  5 19:06 mkmod*

Now it works!


* 2016-12-06 -- More setup, lab meeting

** Installed various necessary tools

NetPyne, PyNeuroML, LibNeuroML, open-mpi, and mpi4py

** Lab meeting

*** Don't be afraid to ask any and all questions on Slack

*** Get "ma" account from Salvador

*** EEE modeling plan
**** Begin with simplified single cell models
Six compartment M1 model.  
Cells tuned to experimental recordings.  
Add another basal dendrite and ensure spiking dynamics don't change.
CA3 model of Mohamed.
**** Add NMDA channels
Sam asks "exp2sym, nmda.mod?"
Yar & Stevens paper about NMDA channels in spike train
Guy Major has NMDA model, manually changed gamma factor.
Bill suggests trying Guy Major's model, since it has regenerative NMDA
Joe will have cells ready in two weeks
**** Tune cells to produce plateaus ("up states")
Srdjan doesn't call them "NMDA plateaus" as the plateus include AMPA and Calcium, he would call them "gaba plateaus".
**** Incorporate into network model
Salvador's work in NetPyne


* 2016-12-07 -- Exploring Moh's CA3 neuron

** CA3 is a good model to start exploring
Moh's CA3 model is here:
/u/mohdsh/Projects/ca3cannabisMTL

** Cloned Moh's model repo
hg clone ssh://no.neurosim.downstate.edu://u/mohdsh/Projects/ca3cannabisMTL /u/graham/projects/ca3cannabisMTL
Cloned Moh’s notebook repo: 
hg clone ssh://no.neurosim.downstate.edu://u/mohdsh/Projects/notebooksDir/ /u/graham/projects/MohNotebooks

Reading through relevant notebook: ca3cannabisMTL_mohdsh_notebook.dol

** Running simulations
Chatting with Moh:
To compile mod files: cd mod; mkmod
To run simulation: ipython -i runone.py
Parameters for this simulation will be in: netcfg.cfg
"This file contains code needed to get a single cell: singleBasketCells.py
it says basket cell, but it has lines for each kind
you can uncomment one that you want"


** Can run sims on zn, but ssh into zn from no


* 2016-12-08 -- Notebook and NEURON 

** Current goals
Move existing notes into lab notebook
Set up notebook figure grabbing
Initialize EEE project repo
Create functional sim (with minimal complexity)

** Notebook setup

*** Neurosim method
“How to keep a lab notebook” in wiki:
https://docs.google.com/document/d/1kdKEW8McsUI1nxuFftPI1F7LesGzkeflmt-lya3NpAU
Uses Emacs “dol mode” which is part of “org mode”
Places figures in a folder called “gif”
Can include small code/data snippets in main text
Larger chunks can be referred to by Hg file / version / line number

*** Ability to convert to/from org mode
Installed pandoc: brew install pandoc
Can now use markdown language in Sublime Text and convert to Emacs org mode (e.g. with each Hg commit)
Installed “org mode” in Sublime text… Easier and more familiar than Emacs

** Continuing NEURON tutorials

** Exploring Moh's model repo



* 2016-12-09 -- Notebook, project repo creation, initial Hg commits

** Current goals
Set up notebook figure grabbing
Initialize EEE project repo
Create functional sim (with minimal complexity)

** Notebook figure handling

*** How to take a screenshot with keyboard: https://support.apple.com/en-us/HT201361
Take a screenshot of your whole screen
Press Command (⌘)-Shift-3.
Find the screenshot as a .png file on your desktop.
Take a partial screenshot
Press Command-Shift-4. The pointer changes to a crosshair pointer.
Click and drag to highlight the screen area to capture, or 
Press the Space bar. The pointer changes to a camera pointer.
Move the camera pointer over a window to highlight it.
Click your mouse or trackpad. To cancel, press the Escape (esc) key before you click.
Find the screenshot as a .png file on your desktop.

But, this saves files to desktop as: “Screen Shot Date at Time”

*** How to take a screenshot from the terminal
usage: screencapture [-icMPmwsWxSCUtoa] [files]
  -c         force screen capture to go to the clipboard
  -C         capture the cursor as well as the screen. only in non-interactive modes
  -d         display errors to the user graphically
  -i         capture screen interactively, by selection or window
               control key - causes screen shot to go to clipboard
               space key   - toggle between mouse selection and
                             window selection modes
               escape key  - cancels interactive screen shot
  -m         only capture the main monitor, undefined if -i is set
  -M         screen capture output will go to a new Mail message
  -o         in window capture mode, do not capture the shadow of the window
  -P         screen capture output will open in Preview
  -s         only allow mouse selection mode
  -S         in window capture mode, capture the screen not the window
  -t<format> image format to create, default is png (other options include pdf, jpg, tiff and other formats)
  -T<seconds> Take the picture after a delay of <seconds>, default is 5
  -w         only allow window selection mode
  -W         start interaction in window selection mode
  -x         do not play sounds
  -a         do not include windows attached to selected windows
  -r         do not add dpi meta data to image
  -l<windowid> capture this windowsid
  -R<x,y,w,h> capture screen rect
  -B<bundleid> screen capture output will open in app with bundleidBS
  files   where to save the screen capture, 1 file per screen

*** Creating an alias to grab figures
So, I want an alias that will capture the window I want, save it to my notebook’s gif directory, and name it after the date and/or figure number

The following command prints the date/time: 
`date "+%Y%m%d_%H%M%S"`

The following command opens an interactive screen capture and saves the file to the desktop named with date and time:
screencapture -i ~/Desktop/`date "+%Y%m%d_%H%M%S".png`

Now I want to copy the screencapture filename to the clipboard for easy insertion into notebook:
echo 'Text wanted in the clipboard' | pbcopy

*** Putting it all together, added these to .tcshrc:

alias sc      'echo; echo "Screen capture: click and drag to select area,"; echo "                press spacebar to select window,"; echo "                press esc to cancel."; set scfilename = "`date "+%Y%m%d_%H%M%S".png`"; screencapture -i /u/graham/projects/eee/gif/$scfilename; echo "Output file   : /u/graham/projects/eee/gif/$scfilename"; echo; echo -n $scfilename | pbcopy'

alias scd     'echo; echo "Screen capture: click and drag to select area,"; echo "                press spacebar to select window,"; echo "                press esc to cancel."; set scfilename = "`date "+%Y%m%d_%H%M%S".png`"; screencapture -i ~/Desktop/$scfilename; echo "Output file   : ~/Desktop/$scfilename"; echo; echo -n $scfilename | pbcopy'

Command ‘sc’ allows screen capture, saves figure to notebook gif directory, and copies the filename to the clipboard.

Command ‘scd’ does the same thing but to the desktop

*** Now to create a keyboard shortcut to activate ‘sc’
Create new “service” in automator
Use “run bash script” where script is just “sc”
Save in ~/Library/Services (saved as screen_capture)
System Preferences → Keyboard → Shortcuts, under “General” find “screen_capture”
Assign keyboard shortcut [control]+[command]+4 (similar to native screen capture)

** Initialize EEE project repo

*** Contents of repo

**** README.txt 
Keep up to date so that anyone looking at the project dir at any time knows how to run everything.

**** notebook.org
Lab notebook for the project.

**** gif
Directory to hold figures and lengthy code pieces referenced in the notebook.

**** data
Directory to hold output of simulations.

**** sim
Simulation files.

*** Getting it into Mercurial 

**** Locally

graham-mac% cd /u/graham/projects/eee
graham-mac% hg init
graham-mac% hg status
? .DS_Store
? README.txt
? gif/.DS_Store
? notebook.org
graham-mac% echo '.DS_Store' > .hgignore
graham-mac% hg status
? .hgignore
? README.txt
? notebook.org
graham-mac% hg add .hgignore
graham-mac% hg add README.txt 
graham-mac% hg add notebook.org 
graham-mac% hg add data
graham-mac% hg add gif
graham-mac% hg add sim
graham-mac% hg commit -m "Initial commit of EEE project repo (to graham-mac)"
graham-mac% hg status
graham-mac% 
graham-mac% hg log
changeset:   0:f735d2d223c5
tag:         tip
user:        Joe Graham <joe.w.graham@gmail.com>
date:        Fri Dec 09 16:52:18 2016 -0700
summary:     Initial commit of EEE project repo (to graham-mac)

graham-mac% 

Success! Now to get it into neurosim...

**** Remotely

Having problems... Doesn't seem to appear on Neurosim server...

graham-mac% hg clone /u/graham/projects/eee/ ssh://graham@no.neurosim.downstate.edu://u/graham/projects/
graham@no.neurosim.downstate.edu's password: 
searching for changes
remote: adding changesets
remote: adding manifests
remote: adding file changes
remote: added 1 changesets with 3 changes to 3 files
graham-mac% 
graham-mac% ssh no.neurosim.downstate.edu
graham@no.neurosim.downstate.edu's password: 
Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-43-generic x86_64)
no% pwd
/u/graham
no% cd projects/
no% ls
ca3cannabisMTL/
no%

It seems like there should now be a dir "eee" in projects/...

After chatting with Ernie we determined that the remote folder must already exist.
Now, after "hg update", the files appear on Neurosim server.

Will now commit locally, and attempt to push to Neurosim.

graham-mac% hg status
M notebook.org
graham-mac% hg commit -m "Added to notebook, testing Hg"
graham-mac% hg log
changeset:   1:7188deb8f62e
tag:         tip
user:        Joe Graham <joe.w.graham@gmail.com>
date:        Sat Dec 10 14:57:41 2016 -0700
summary:     Added to notebook, testing Hg

changeset:   0:f735d2d223c5
user:        Joe Graham <joe.w.graham@gmail.com>
date:        Fri Dec 09 16:52:18 2016 -0700
summary:     Initial commit of EEE project repo (to graham-mac)

graham-mac% hg push ssh://no.neurosim.downstate.edu://u/graham/projects/eee/
pushing to ssh://no.neurosim.downstate.edu//u/graham/projects/eee/
graham@no.neurosim.downstate.edu's password: 
searching for changes
remote: adding changesets
remote: adding manifests
remote: adding file changes
remote: added 1 changesets with 1 changes to 1 files
graham-mac% 
graham-mac% sshno
graham@no.neurosim.downstate.edu's password: 
no% hg log
changeset:   1:7188deb8f62e
tag:         tip
user:        Joe Graham <joe.w.graham@gmail.com>
date:        Sat Dec 10 14:57:41 2016 -0700
summary:     Added to notebook, testing Hg

changeset:   0:f735d2d223c5
user:        Joe Graham <joe.w.graham@gmail.com>
date:        Fri Dec 09 16:52:18 2016 -0700
summary:     Initial commit of EEE project repo (to graham-mac)

no% 

Success!



* 2016-12-12 -- Exploring project directories to plan EEE dir

** Current Goals
Explore other project dirs to plan the EEE dir
  sal -- M1 Network Model
  sam -- spimodel
  ernie -- CA3 Ih demo
  moh -- CA3 cannabis model
Pull single cell code into EEE
Set up cell characterization simulations
Add basal dendrites
Characterize cells (should be very similar)

** Exploring other project dirs
Want to come up with some sort of "best practices" for the EEE project dir.
E.g.:
README constantly updated so that anyone can run existing code at any time.
Well-organized into subdirs (sim, sim/cells, sim/mod, data, etc.)

*** Sal -- M1NetworkModel

https://github.com/OpenSourceBrain/M1NetworkModel/tree/detailed
/u/graham/testing/M1NetworkModel-detailed/

**** Well-organized directory:
README, sim, data

From README execution instructions:
1. Type or `./compile or the equivalent `nrnivmodl mod`. This should create a directory called either i686 or x86_64, depending on your computer's architecture. 
2. To run type: `./runsim [num_proc]` or the equivalent `mpiexec -np [num_proc] nrniv -python -mpi init.py`

From README file structure:
/sim/init.py: Main executable; calls functions from other modules. Sets what parameter file to use.
/sim/M1_ynorm_izhi.py: Parameters file for M1 Network model. Includes simulation (simConfig) and network (netParams) parameters. 
/sim/cells/izhi2007.py: Python class (wrapper) for Izhikevich 2007 neuron model
/sim/mod/izhi2007b.mod: NMODL definition of Izhikevich 2007 neuron model
/data: where the model and simulation data is stored (eg. .pkl, .mat, .json files)

**** Compiling Simulation

graham-mac% cd /u/graham/testing/M1NetworkModel-detailed
graham-mac% nrnivmodl mod
Creating x86_64 directory for .o files.

/u/graham/testing/M1NetworkModel-detailed/sim
mod/A.mod mod/AMPA.mod mod/AMPAr.mod mod/GABAa.mod mod/GABAar.mod mod/GABAbr.mod mod/H.mod mod/HCN1.mod mod/IC.mod mod/IL.mod mod/IL3.mod mod/Iahp.mod mod/MyExp2SynBB.mod mod/MyExp2SynNMDABB.mod mod/NMDA.mod mod/NMDAr.mod mod/Nca.mod mod/OFThpo.mod mod/OFThresh.mod mod/ar_traub.mod mod/cadad.mod mod/cagk.mod mod/cal_mh.mod mod/cal_mig.mod mod/can_mig.mod mod/cat_mig.mod mod/cat_traub.mod mod/gabab.mod mod/h_BS.mod mod/h_harnett.mod mod/h_kole.mod mod/hsyn.mod mod/ican_sidi.mod mod/infot.mod mod/izhi2007a.mod mod/izhi2007b.mod mod/kBK.mod mod/kap_BS.mod mod/kca.mod mod/kdmc_BS.mod mod/kdr2.mod mod/kdr_BS.mod mod/km.mod mod/kmbg.mod mod/kv.mod mod/misc.mod mod/na2_mh.mod mod/naf2.mod mod/nap_sidi.mod mod/nax_BS.mod mod/naz.mod mod/nstim.mod mod/ntIh.mod mod/nthh.mod mod/ntt.mod mod/pregencv.mod mod/samnutils.mod mod/savedist.mod mod/stats.mod mod/vecst.mod
A.mod AMPA.mod AMPAr.mod GABAa.mod GABAar.mod GABAbr.mod H.mod HCN1.mod IC.mod IL.mod IL3.mod Iahp.mod MyExp2SynBB.mod MyExp2SynNMDABB.mod NMDA.mod NMDAr.mod Nca.mod OFThpo.mod OFThresh.mod ar_traub.mod cadad.mod cagk.mod cal_mh.mod cal_mig.mod can_mig.mod cat_mig.mod cat_traub.mod gabab.mod h_BS.mod h_harnett.mod h_kole.mod hsyn.mod ican_sidi.mod infot.mod izhi2007a.mod izhi2007b.mod kBK.mod kap_BS.mod kca.mod kdmc_BS.mod kdr2.mod kdr_BS.mod km.mod kmbg.mod kv.mod misc.mod na2_mh.mod naf2.mod nap_sidi.mod nax_BS.mod naz.mod nstim.mod ntIh.mod nthh.mod ntt.mod pregencv.mod samnutils.mod savedist.mod stats.mod vecst.mod
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" A
Translating A.mod into A.c
INCLUDEing ofc.inc
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o A.lo A.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c A.c  -fno-common -DPIC -o .libs/A.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" AMPA
Translating AMPA.mod into AMPA.c
INCLUDEing netcon.inc
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o AMPA.lo AMPA.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c AMPA.c  -fno-common -DPIC -o .libs/AMPA.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" AMPAr
Translating AMPAr.mod into AMPAr.c
INCLUDEing netrand.inc
Notice: VERBATIM blocks are not thread safe
Notice: Use of POINTER is not thread safe.
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o AMPAr.lo AMPAr.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c AMPAr.c  -fno-common -DPIC -o .libs/AMPAr.o
AMPAr.c:279:10: fatal error: 'misc.h' file not found
#include "misc.h"
         ^
1 error generated.
make: *** [AMPAr.lo] Error 1
graham-mac% 

***** Get an error when using command "nrnivmodl mod" from within sim directory.
But compilation works when using "nrnivmodl" from within sim/mod directory. 
Compilation also works when using "./compile" from sim directory.

**** Running simulation

graham-mac% cd /u/graham/testing/M1NetworkModel-detailed_compile/sim
graham-mac% ./runsim
rm: *.pyc: No such file or directory
numprocs=4
NEURON -- VERSION 7.5 (1484:2888e759fdfe) 2016-12-02
Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
See http://neuron.yale.edu/neuron/credits

Additional mechanisms from files
 A.mod AMPA.mod AMPAr.mod GABAa.mod GABAar.mod GABAbr.mod H.mod HCN1.mod IC.mod IL.mod IL3.mod Iahp.mod MyExp2SynBB.mod MyExp2SynNMDABB.mod NMDA.mod NMDAr.mod Nca.mod OFThpo.mod OFThresh.mod ar_traub.mod cadad.mod cagk.mod cal_mh.mod cal_mig.mod can_mig.mod cat_mig.mod cat_traub.mod gabab.mod h_BS.mod h_harnett.mod h_kole.mod hsyn.mod ican_sidi.mod infot.mod izhi2007a.mod izhi2007b.mod kBK.mod kap_BS.mod kca.mod kdmc_BS.mod kdr2.mod kdr_BS.mod km.mod kmbg.mod kv.mod misc.mod na2_mh.mod naf2.mod nap_sidi.mod nax_BS.mod naz.mod nstim.mod ntIh.mod nthh.mod ntt.mod pregencv.mod samnutils.mod savedist.mod stats.mod vecst.mod

*******
  Note: NeuroML import failed; import/export functions for NeuroML will not be available. 
  Install the pyNeuroML & libNeuroML Python packages: https://www.neuroml.org/getneuroml
*******


*******
  Note: NeuroML import failed; import/export functions for NeuroML will not be available. 
  Install the pyNeuroML & libNeuroML Python packages: https://www.neuroml.org/getneuroml
*******


*******
  Note: NeuroML import failed; import/export functions for NeuroML will not be available. 
  Install the pyNeuroML & libNeuroML Python packages: https://www.neuroml.org/getneuroml
*******


*******
  Note: NeuroML import failed; import/export functions for NeuroML will not be available. 
  Install the pyNeuroML & libNeuroML Python packages: https://www.neuroml.org/getneuroml
*******

Traceback (most recent call last):
  File "init.py", line 17, in <module>
    from netpyne import sim
  File "/Users/graham/anaconda/lib/python2.7/site-packages/netpyne/sim.py", line 19, in <module>
    import analysis
  File "/Users/graham/anaconda/lib/python2.7/site-packages/netpyne/analysis.py", line 12, in <module>
    from matplotlib.pylab import transpose, nanmax, nanmin, errstate, bar, histogram, floor, ceil, yticks, arange, gca, scatter, figure, hold, subplot, axes, shape, imshow, \
  File "/Users/graham/anaconda/lib/python2.7/site-packages/matplotlib/__init__.py", line 110, in <module>
    import io
  File "/Users/graham/anaconda/lib/python2.7/io.py", line 51, in <module>
    import _io
ImportError: dlopen(/Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so, 2): Symbol not found: __PyCodecInfo_GetIncrementalDecoder
  Referenced from: /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so
  Expected in: flat namespace
 in /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so
>>> 
Traceback (most recent call last):
  File "init.py", line 17, in <module>
    from netpyne import sim
  File "/Users/graham/anaconda/lib/python2.7/site-packages/netpyne/sim.py", line 19, in <module>
    import analysis
  File "/Users/graham/anaconda/lib/python2.7/site-packages/netpyne/analysis.py", line 12, in <module>
    from matplotlib.pylab import transpose, nanmax, nanmin, errstate, bar, histogram, floor, ceil, yticks, arange, gca, scatter, figure, hold, subplot, axes, shape, imshow, \
  File "/Users/graham/anaconda/lib/python2.7/site-packages/matplotlib/__init__.py", line 110, in <module>
    import io
  File "/Users/graham/anaconda/lib/python2.7/io.py", line 51, in <module>
    import _io
ImportError: dlopen(/Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so, 2): Symbol not found: __PyCodecInfo_GetIncrementalDecoder
  Referenced from: /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so
  Expected in: flat namespace
 in /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so
>>> Traceback (most recent call last):
  File "init.py", line 17, in <module>
    from netpyne import sim
  File "/Users/graham/anaconda/lib/python2.7/site-packages/netpyne/sim.py", line 19, in <module>
    import analysis
  File "/Users/graham/anaconda/lib/python2.7/site-packages/netpyne/analysis.py", line 12, in <module>
    from matplotlib.pylab import transpose, nanmax, nanmin, errstate, bar, histogram, floor, ceil, yticks, arange, gca, scatter, figure, hold, subplot, axes, shape, imshow, \
  File "/Users/graham/anaconda/lib/python2.7/site-packages/matplotlib/__init__.py", line 110, in <module>
    import io
  File "/Users/graham/anaconda/lib/python2.7/io.py", line 51, in <module>
    import _io
ImportError: dlopen(/Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so, 2): Symbol not found: __PyCodecInfo_GetIncrementalDecoder
  Referenced from: /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so
  Expected in: flat namespace
 in /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so
>>> 
Traceback (most recent call last):
  File "init.py", line 17, in <module>
    from netpyne import sim
  File "/Users/graham/anaconda/lib/python2.7/site-packages/netpyne/sim.py", line 19, in <module>
    import analysis
  File "/Users/graham/anaconda/lib/python2.7/site-packages/netpyne/analysis.py", line 12, in <module>
    from matplotlib.pylab import transpose, nanmax, nanmin, errstate, bar, histogram, floor, ceil, yticks, arange, gca, scatter, figure, hold, subplot, axes, shape, imshow, \
  File "/Users/graham/anaconda/lib/python2.7/site-packages/matplotlib/__init__.py", line 110, in <module>
    import io
  File "/Users/graham/anaconda/lib/python2.7/io.py", line 51, in <module>
    import _io
ImportError: dlopen(/Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so, 2): Symbol not found: __PyCodecInfo_GetIncrementalDecoder
  Referenced from: /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so
  Expected in: flat namespace
 in /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so
>>> 

>>> import neuroml
>>> import netpyne
>>> 

***** Contacted Salvador to ask for help 

He made some changes and now everything seems to work.

Salvador says """to change to the simplified model just `'cellModel':'HH_full'` to `'cellModel':'HH_reduced'` in line 66 of  M1_cell.py"""

Salvador recommends going through the NetPyne tutorial:
http://neurosimlab.org/netpyne/tutorial.html







*** Sam -- spimodel

https://senselab.med.yale.edu/modeldb/ShowModel.cshtml?model=195615
/u/graham/testing/spidemo

**** No sim directory: seems less organized
From README:
  Instructions to setup the model:
    unzip the file
    cd spidemo
    nrnivmodl
  Then execute this to run the simulations and draw Figure 6:
    python -i Fig6.py
  (To run the simulations of the simple and detailed cells separately:
    python sim.py SPI6.cfg
    python sim.py PTcell.cfg
  This will save output data to data/SPI6.pkl and data/morph.pkl.)

**** Compiling 

***** Got following error:
In file included from vecst.c:281:
../misc.h:8:10: fatal error: 'values.h' file not found
#include <values.h>
         ^
1 error generated.
make: *** [vecst.lo] Error 1

***** Editing spidemo/misc.h
Changed this: #include <values.h>
To this: //#include <values.h>

***** Success!

**** Running Simulation

Success! Code generated Figure 6.

*** Ernie -- ca3ihdemo

**** No sim dir, no data dir, less organized
From README:
  compile the mod files from the command line with:
  nrnivmodl *.mod
  To run the simulation from the command line use: 
  nrniv -python sim.py [simulation duration in milliseconds] 
  (note that the last argument is optional, default simulation duration is 1000.0 ms)

**** Compiling

Unsuccesful:

graham-mac% cd /u/eforzano/ca3ihdemo/
graham-mac% nrnivmodl *.mod
Creating x86_64 directory for .o files.

/u/eforzano/ca3ihdemo
CA3ih.mod CA3ika.mod CA3ikdr.mod CA3ina.mod HCN1.mod MyExp2SynBB.mod MyExp2SynNMDABB.mod caolmw.mod icaolmw.mod iholmw.mod ihstatic.mod kcaolmw.mod kdrbwb.mod misc.mod nafbwb.mod stats.mod vecst.mod
CA3ih.mod CA3ika.mod CA3ikdr.mod CA3ina.mod HCN1.mod MyExp2SynBB.mod MyExp2SynNMDABB.mod caolmw.mod icaolmw.mod iholmw.mod ihstatic.mod kcaolmw.mod kdrbwb.mod misc.mod nafbwb.mod stats.mod vecst.mod
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" CA3ih
Translating CA3ih.mod into CA3ih.c
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o CA3ih.lo CA3ih.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c CA3ih.c  -fno-common -DPIC -o .libs/CA3ih.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" CA3ika
Translating CA3ika.mod into CA3ika.c
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o CA3ika.lo CA3ika.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c CA3ika.c  -fno-common -DPIC -o .libs/CA3ika.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" CA3ikdr
Translating CA3ikdr.mod into CA3ikdr.c
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o CA3ikdr.lo CA3ikdr.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c CA3ikdr.c  -fno-common -DPIC -o .libs/CA3ikdr.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" CA3ina
Translating CA3ina.mod into CA3ina.c
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o CA3ina.lo CA3ina.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c CA3ina.c  -fno-common -DPIC -o .libs/CA3ina.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" HCN1
Translating HCN1.mod into HCN1.c
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o HCN1.lo HCN1.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c HCN1.c  -fno-common -DPIC -o .libs/HCN1.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" MyExp2SynBB
Translating MyExp2SynBB.mod into MyExp2SynBB.c
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o MyExp2SynBB.lo MyExp2SynBB.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c MyExp2SynBB.c  -fno-common -DPIC -o .libs/MyExp2SynBB.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" MyExp2SynNMDABB
Translating MyExp2SynNMDABB.mod into MyExp2SynNMDABB.c
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o MyExp2SynNMDABB.lo MyExp2SynNMDABB.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c MyExp2SynNMDABB.c  -fno-common -DPIC -o .libs/MyExp2SynNMDABB.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" caolmw
Translating caolmw.mod into caolmw.c
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o caolmw.lo caolmw.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c caolmw.c  -fno-common -DPIC -o .libs/caolmw.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" icaolmw
Translating icaolmw.mod into icaolmw.c
INCLUDEing aux_fun.inc
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o icaolmw.lo icaolmw.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c icaolmw.c  -fno-common -DPIC -o .libs/icaolmw.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" iholmw
Translating iholmw.mod into iholmw.c
INCLUDEing aux_fun.inc
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o iholmw.lo iholmw.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c iholmw.c  -fno-common -DPIC -o .libs/iholmw.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" ihstatic
Translating ihstatic.mod into ihstatic.c
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o ihstatic.lo ihstatic.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c ihstatic.c  -fno-common -DPIC -o .libs/ihstatic.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" kcaolmw
Translating kcaolmw.mod into kcaolmw.c
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o kcaolmw.lo kcaolmw.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c kcaolmw.c  -fno-common -DPIC -o .libs/kcaolmw.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" kdrbwb
Translating kdrbwb.mod into kdrbwb.c
INCLUDEing aux_fun.inc
Thread Safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o kdrbwb.lo kdrbwb.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c kdrbwb.c  -fno-common -DPIC -o .libs/kdrbwb.o
"/usr/site/../arch/nrn/x86_64/bin/nocmodl" misc
Translating misc.mod into misc.c
Notice: VERBATIM blocks are not thread safe
"/usr/site/../arch/nrn/share/nrn/libtool" --tag=CC --mode=compile mpicc -DHAVE_CONFIG_H  -I. -I.. -I"/usr/site/../arch/nrn/include/nrn" -I"/usr/site/../arch/nrn/x86_64/lib"      -g -O2 -c -o misc.lo misc.c
libtool: compile:  mpicc -DHAVE_CONFIG_H -I. -I.. -I/usr/site/../arch/nrn/include/nrn -I/usr/site/../arch/nrn/x86_64/lib -g -O2 -c misc.c  -fno-common -DPIC -o .libs/misc.o
misc.c:235:14: warning: implicit declaration of function 'hoc_is_tempobj_arg' is invalid in C99 [-Wimplicit-function-declaration]
  _listmpobj=hoc_is_tempobj_arg(1);
             ^
misc.c:258:9: error: non-void function 'sassign_' should return a value [-Wreturn-type]
        return; 
        ^
misc.c:263:25: error: non-void function 'sassign_' should return a value [-Wreturn-type]
        pclose(pipein); return;
                        ^
misc.c:292:9: error: non-void function 'dassign_' should return a value [-Wreturn-type]
        return; 
        ^
misc.c:297:26: error: non-void function 'dassign_' should return a value [-Wreturn-type]
        fclose(outfile); return; 
                         ^
misc.c:302:42: error: non-void function 'dassign_' should return a value [-Wreturn-type]
        fclose(outfile); pclose(pipein); return; 
                                         ^
misc.c:406:28: warning: format specifies type 'unsigned int' but the argument has type 'char *' [-Wformat]
  printf("Did %ld: %x\n",x,pmlc);
                   ~~      ^~~~
                   %s
2 warnings and 5 errors generated.
make: *** [misc.lo] Error 1
graham-mac% 

***** Editing ca3ihdemo/misc.h
Changed this: #include <values.h>
To this: //#include <values.h>

Getting the same errors.  Changing misc.h back to default.

**** mkmod doesn't compile correctly either:

graham-mac% mkmod
misc.c:235:14: warning: implicit declaration of function 'hoc_is_tempobj_arg' is invalid in C99 [-Wimplicit-function-declaration]
  _listmpobj=hoc_is_tempobj_arg(1);
             ^
misc.c:258:9: error: non-void function 'sassign_' should return a value [-Wreturn-type]
        return; 
        ^
misc.c:263:25: error: non-void function 'sassign_' should return a value [-Wreturn-type]
        pclose(pipein); return;
                        ^
misc.c:292:9: error: non-void function 'dassign_' should return a value [-Wreturn-type]
        return; 
        ^
misc.c:297:26: error: non-void function 'dassign_' should return a value [-Wreturn-type]
        fclose(outfile); return; 
                         ^
misc.c:302:42: error: non-void function 'dassign_' should return a value [-Wreturn-type]
        fclose(outfile); pclose(pipein); return; 
                                         ^
misc.c:406:28: warning: format specifies type 'unsigned int' but the argument has type 'char *' [-Wformat]
  printf("Did %ld: %x\n",x,pmlc);
                   ~~      ^~~~
                   %s
2 warnings and 5 errors generated.
make: *** [misc.lo] Error 1

Leaving this model aside for now -- should follow up on fixing problem.

*** Moh -- CA3 cannabis model

Skipping going through this for now.  Going to go through NetPyNN tutorial.

** NetPyNN Tutorial

Will be useful when building networks, not necessary for now.

** Get cells into EEE project

*** Copied SPI6.py from spidemo to eee/sim/cells
Looking into sim.py from spidemo, which runs the simulation to make Figure 6
command is: ipython -i sim.py SPI6.cfg

*** Running just the cell file gives an error:
graham-mac% cd /u/graham/projects/eee/sim/cells/
graham-mac% ipython -i SPI6.py
---------------------------------------------------------------------------
LookupError                               Traceback (most recent call last)
/u/graham/projects/eee/sim/cells/SPI6.py in <module>()
      5 
      6 Vrest       = -88.5366550238
----> 7 h.v_init    = -75.0413649414
      8 h.celsius   = 34.0 # for in vitro opt
      9 

LookupError: 'v_init' is not a defined hoc variable name.

Solved error by including "h.load_file("stdrun.hoc")" in SPI6.py

*** New error

---------------------------------------------------------------------------
LookupError                               Traceback (most recent call last)
/u/graham/projects/eee/sim/cells/SPI6.py in <module>()
     35 p_ena = 42.0
     36 # h-current
---> 37 h.erev_ih = -37.0 # global
     38 gbar_h = 0.000140956438043
     39 h_gbar_tuft = 0.00565 # mho/cm^2 (based on Harnett 2015 J Neurosci)

LookupError: 'erev_ih' is not a defined hoc variable name.

Commenting out line 37 in SPI6.py for now... and there are no more errors.

** Miscellanea
*** Added Mercurial push to EEE to ~/.tcshrc:
alias hgpush  'hg push ssh://no.neurosim.downstate.edu://u/graham/projects/eee/'
Now I can just type hgpush to send EEE repo changes to Neurosim

* 2016-12-13 -- Working with SPI6 and Lab Meeting

** Current goals
Pull single cell code into EEE
Set up cell characterization simulations
Add basal dendrites
Characterize cells (should be very similar)

** Get cell into EEE 
Working with spidemo from here:
https://senselab.med.yale.edu/modeldb/ShowModel.cshtml?model=195615

*** Working with spidemo/sim.py
The following command runs the simplified cell: python sim.py SPI6.cfg

The data in file SPI6.cfg seems to all be included in SPI6.py, so for simplicity's sake, I will leave out the config file for now.

sim.py uses the Python module "conf", which I don't have installed.
graham-mac% sudo pip install conf
Seems to install correctly, but Python can't find the module:
In [1]: import conf
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-1-e5da81f0d76e> in <module>()
----> 1 import conf

ImportError: No module named conf

Skipping conf module for now.

Attempting to initialize an SPI6 cell:
In [17]: import SPI6

In [18]: cell = SPI6.SPI6()
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-18-464b32a9d7cc> in <module>()
----> 1 cell = SPI6.SPI6()

/u/graham/projects/eee/sim/cells/SPI6.py in __init__(self, x, y, z, ID)
     81     self.add_comp('soma')
     82     self.set_morphology()
---> 83     self.insert_conductances()
     84     self.set_props()
     85     self.calc_area()

/u/graham/projects/eee/sim/cells/SPI6.py in insert_conductances(self)
    194       sec.insert('na_ion')
    195       sec.insert('pas') # passive
--> 196       sec.insert('nax') # Na current
    197       sec.insert('kdr') # K delayed rectifier current
    198       sec.insert('kap') # K-A current

ValueError: argument not a density mechanism name.

Copying nax_BS.mod from "spidemo" to eee/sim/mod and compiling.
That seems to have worked.

** Adding "compile" Python script to eee project dir.

It removes old x86_64 and i386 dirs of compiled NEURON code
It compiles using nrnivmodl
It creates a symlink from sim dir to mod dir

** Problem with erev_ih
---------------------------------------------------------------------------
LookupError                               Traceback (most recent call last)
<ipython-input-7-5edc9a54af43> in <module>()
----> 1 from cells.SPI6 import SPI6

/u/graham/projects/eee/sim/cells/SPI6.py in <module>()
     39 p_ena = 42.0
     40 # h-current
---> 41 h.erev_ih = -37.0 # global
     42 gbar_h = 0.000140956438043
     43 h_gbar_tuft = 0.00565 # mho/cm^2 (based on Harnett 2015 J Neurosci)

LookupError: 'erev_ih' is not a defined hoc variable name.

Will just comment out that line for now...
41 # h.erev_ih = -37.0 # global

** Adding necessary mod files as the import of SPI6 fails without them
--> 196       sec.insert('cal') # cal_mig.mod
--> 197       sec.insert('kdr') # K delayed rectifier current
--> 198       sec.insert('kap') # K-A current
--> 200       sec.insert('ih') # h-current
--> 204       sec.insert('cadad') # cadad.mod - calcium decay
--> 205       sec.insert('kBK') # kBK.mod - ca and v dependent k channel
--> 206     for sec in [self.soma, self.axon]: sec.insert('kdmc')  # K-D current in soma & axon only

Now I can generate an SPI6 cell.  From command line:
cd /u/graham/projects/eee/sim; ipython -i init.py

* 2016-12-14 -- Adding stim simulations to EEE

** Current goals
Set up cell characterization simulations
Add basal dendrite(s)
Characterize cells (should be very similar)

** Add series of pulse stimulations
Mimic data from BS0284_tracedata_10KHz.npy from spidemo
Copying data into EEE data directory

Researching how to add a stimulation pulse...

*** IClamp:
delay -- ms
dur -- ms
amp -- nA
i -- nA

Example:

>>> soma = h.Section()
>>> i = h.IClamp(soma(0.5))

Will put code into init.py for now, later perhaps in a "stims.py" file.
Want a function to run a single IClamp stim 
Then call that function in a loop for all stim amplitudes 

*** Succesfully plotted segment voltages during single stim pulse

**** Commands to create figure:

graham-mac% cd /u/graham/projects/eee/sim/
graham-mac% ipython -i init.py
Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul  2 2016, 17:43:17) 
Type "copyright", "credits" or "license" for more information.

IPython 5.1.0 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.
NEURON -- VERSION 7.5 (1484:2888e759fdfe) 2016-12-02
Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
See http://neuron.yale.edu/neuron/credits

loading membrane mechanisms from x86_64/.libs/libnrnmech.so
Additional mechanisms from files
 cadad.mod cal_mig.mod can_mig.mod h_kole.mod kBK.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod

In [1]: stim_pulse(cell, delay=100, dur=100, amp=0.3, tstop=300, plot=True)
Out[1]: 
[['time', 'soma', 'axon', 'Bdend', 'Adend1', 'Adend2', 'Adend3'],
 [Vector[0], Vector[1], Vector[2], Vector[3], Vector[4], Vector[5], Vector[6]]]

In [2]: 


**** Output:
20161214_122952.png

Will commit now and push.


* 2016-12-14 -- Coding figures to allow comparison between model/experiment

** Current goals
Code figures to allow comparisons
  stim pulses
  frequency-current relationship
Add dendrite to SPI6
Add NMDA to models

** Finished code to generate all comparisons between model and experiment

*** Running the following:
    graham-mac% cd /u/graham/projects/eee/sim/
    graham-mac% ipython -i init.py
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul  2 2016, 17:43:17) 
    NEURON -- VERSION 7.5 (1484:2888e759fdfe) 2016-12-02
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     cadad.mod cal_mig.mod can_mig.mod h_kole.mod kBK.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod

    In [1]: cell = initializeSPI6()
    In [2]: amps = np.load("../data/BS0284_lstimamp.npy")
    In [3]: expdata = np.load("../data/BS0284_tracedata_10KHz.npy")
    In [4]: plot_comp_exp_stim_pulse(cell, amps, expdata)

*** Gives the following output:

file:gif/20161215_215700.png
file:gif/20161215_215723.png
file:gif/20161215_215736.png
file:gif/20161215_215752.png
file:gif/20161215_215805.png
file:gif/20161215_215820.png
file:gif/20161215_215838.png
file:gif/20161215_215849.png
file:gif/20161215_215906.png
file:gif/20161215_215918.png
file:gif/20161215_215929.png
file:gif/20161215_215940.png
file:gif/20161215_215949.png
file:gif/20161215_215959.png


*** Now to work on saving the plots to the data dir

** Miscellaneous

*** Was getting None output when trying to use section.cell() in SPI6 model.

Found solution here:
https://www.neuron.yale.edu/neuron/static/new_doc/programming/python.html#neuron.h.Section
Changed the following line of code in SPI6:
  self.__dict__[name] = h.Section(name=name)#,cell=self)     
To:
  self.__dict__[name] = h.Section(name=name, cell=self)     
Why was the cell=self commented out in the first place?


* 2016-12-15 -- Added a dendrite, compared stim pulse behavior

** Current goals
Code figures to allow comparisons
  stim pulses -- multiple model comparison
  frequency-current relationship
Add dendrite to SPI6
Add NMDA to models

** Add dendrite to SPI6

Created new cell "SPI7" with an additional basal dendrite with the same properties as the existing.
Added self.name to SPI6 and SPI7 for use in plotting.

** Figure coding

*** Coding figure to allow multiple model cells to be compared to the experimental.
plot_comp_exp_stim_pulse now accepts a list of cell models and compares all of them to experimental data.

*** Running the following code:

    graham-mac% cd /u/graham/projects/eee/sim/
    graham-mac% ipython -i init.py
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul  2 2016, 17:43:17) 
    NEURON -- VERSION 7.5 (1484:2888e759fdfe) 2016-12-02
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     cadad.mod cal_mig.mod can_mig.mod h_kole.mod kBK.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod

    In [1]: spi6 = initcell("SPI6")
    In [2]: spi7 = initcell("SPI7")
    In [3]: plot_comp_exp_stim_pulse([spi6, spi7])

*** Generates the following figures (leaving out every other for brevity):
file:gif/20161216_110728.png
file:gif/20161216_110742.png
file:gif/20161216_110753.png
file:gif/20161216_110804.png
file:gif/20161216_110816.png
file:gif/20161216_110825.png
file:gif/20161216_110836.png

Adding a basal dendrite slightly decreased the resting membrane potential.
As I expected, adding a basal dendrite decreased the input resistance, resulting in:
  Smaller membrane potential changes for a given current
  A higher spiking threshold
  I would expect a lower fI slope, will now code fI figure.

Will commit now.
 
* 2016-12-16 -- Completed multiplot for stim pulse series comparisons

** Figure-generating functions now have the ability to save plots to output dir

** Now to make one figure out of the multiple pulse stim figures

It's working. plot_comp_exp_stim_pulse() now outputs one figure for the series of stims.
Optionally it can also put out a figure for each amplitude individually.

*** For example:
  /u/graham/projects/eee/sim
  graham-mac% ipython -i init.py
  In [1]: spi6 = initcell("SPI6") 
  In [2]: out = plot_comp_exp_stim_pulse(spi6, plotind=True, save=True)

*** Compares the spi6 model to experimental data and:
    Creates 14 individual plots (e.g. file:gif/20161218_162517.png )
    Creates 1 combined plot (file:gif/20161218_162948.png )
    Saves all plots to the eee/output directory

*** Another example:
  In [3]: spi7 = initcell("SPI7")
  In [4]: cols = [1,3,4,14]
  In [5]: for col in cols:
   ...:     plot_comp_exp_stim_pulse([spi6, spi7], cols=col)
   ...:     

*** Compares the spi6 and spi7 models to experimental data and:
    Creates 4 plots with different numbers of columns
    file:gif/20161218_164530.png
    file:gif/20161218_164552.png
    file:gif/20161218_164604.png
    file:gif/20161218_164615.png

Committing now.

** Now to code a figure for frequency-current (fI) relationship

**** First to figure out how to count spikes in NEURON and experimental data


* 2016-12-19 -- Spike detection and Frequency-current analysis

** Current goals
Figure out spike detection in sims and in data
Implement frequency-current plots
Figure out how to add NMDA channels

** Spike Detection in NEURON

*** Accomplished using NetCons:
https://www.neuron.yale.edu/neuron/static/new_doc/modelspec/programmatic/network/netcon.html

Specifically, using netcon.record:
https://www.neuron.yale.edu/neuron/static/new_doc/modelspec/programmatic/network/netcon.html#NetCon.record

Found this useful: https://www.neuron.yale.edu/phpBB/viewtopic.php?f=2&t=3555

Specifically:

"""
The cell class that specified the properties of the cell instances in the network contained these statements to ensure that each cell instance would capture its own spike times to its own numpy array:
CODE: SELECT ALL
    # NetCon to monitor membrane potential at the soma (i.e APs)
    self._nc = h.NetCon( self.soma(0.5)._ref_v, None, sec = self.soma )
    self._nc.threshold = 0.0

    self._spk_times = h.Vector()
    self._nc.record(self._spk_times) # spike times
    spk_times  = property(lambda self: np.array(self._spk_times))
"""

Created a new function to set up recording of spike times:
    def record_spike_times(cell):
        """
        """
        cell._nc = h.NetCon(cell.soma(0.5)._ref_v, None, sec=cell.soma)
        cell._nc.threshold = 10.0
        cell._spike_times = h.Vector()
        cell._nc.record(cell._spike_times)

Now to see how it works...  Ran into some problems. 

Final version:
    def record_spike_times(cell):
      """Prepares a cell to record spike times, saved in cell._spike_times as a 
         numpy array."""
      cell._nc = h.NetCon(cell.soma(0.5)._ref_v, None, sec=cell.soma)
      cell._nc.threshold = 10.0
      spike_times = h.Vector()
      cell._nc.record(spike_times)
      cell._spike_times = spike_times.to_python()

Example:
    graham-mac% ipython -i init.py
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul  2 2016, 17:43:17) 
    NEURON -- VERSION 7.5 (1484:2888e759fdfe) 2016-12-02

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     cadad.mod cal_mig.mod can_mig.mod h_kole.mod kBK.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod

    In [1]: len(spi6._spike_times)
    Out[1]: 0

    In [2]: stim_pulse(spi6.soma, amp=0.5, plot=True)
    Out[2]: [['time', 'soma'], [Vector[2], Vector[3]]]

    In [3]: len(spi6._spike_times)
    Out[3]: 29


*** Function record_spike_times now runs automatically on each cell when running init.py

*** Going through SpikePlot Demo
http://neuron.yale.edu/neuron/static/docs/neuronpython/spikeplot.html
http://pythonhosted.org/neuronpy/examples/spikeplotdemo.html (more complete)
installed neuronpy using: pip install neuronpy
may be useful at some point for raster plots or spike time histograms

*** Now to work on spike detection from experimental traces

http://www.neuron.yale.edu/phpbb/viewtopic.php?f=8&t=468

"""
Hi, I would like to know if Neuron is capable of finding the spike frequency of a stimulation. If yes, how? 

all things are possible through programming
Postby ted » Fri Jun 16, 2006 3:43 pm

Use the NetCon class's record() method (read about it here: 
http://www.neuron.yale.edu/neuron/static/ ... tml#record ) 
to count the number of spikes N that occur over an interval T. Frequency = N/T
"""

So, to look at NetCon.record:
http://www.neuron.yale.edu/neuron/static/docs/help/neuron/neuron/classes/netcon.html#record

Actually, that seems to be for recording from a cell model...  Doing more digging...

It seems like I will want to load the experimental trace into a hoc vector, 
then play that vector into a NetCon...

``vsrc.play(var_reference, tvec)`` where vsrc is an h.Vector()

*** Asked for help in Slack

**** Sam says not to bother using NEURON to get spike times.  He pointed me to a function he uses:

    def GetSpikeTimes (dat,th,dt,mindiff=1.0,mint=-1e9,maxt=1e9): # mint,maxt are in seconds; mindiff is in ms
      lspkt = []; 
      idx = 1; 
      mintms,maxtms=mint*1e3,maxt*1e3
      while idx < len(dat):
        if dat[idx] >= th and dat[idx-1] < th:
          t1,t2 = (idx-1)*dt, idx*dt # time in milliseconds
          if t2 < mintms or t1 > maxtms:
            idx += 1
            continue
          v1,v2 = dat[idx-1],dat[idx]
          spkt = t1 
          if v2 != v1: spkt += ((th-v1)/(v2-v1))*(t2-t1) # linear interpolation
          #print v1,v2,'<,>',th,' at ',spkt
          lspkt.append(spkt)
          idx += int(mindiff / dt)
        else:
          idx += 1
      return lspkt

**** Created get_spike_times()

    def get_spike_times(data=None, samprate=None, threshold=0.0):
      """Returns a list of lists of spike times for experimental voltage traces."""
      
      alldata = np.load("../data/BS0284_tracedata_10KHz.npy")
      data = alldata[:,10]
      samprate = 10 # samprate in kHz
      spike_times = []

      dt = (1.0/samprate) # dt in ms
      idx = 1
      while idx < len(data):

        if data[idx] >= threshold and data[idx-1] < threshold:
          t1 = (idx-1) * dt
          t2 = idx * dt
          v1 = data[idx-1]
          v2 = data[idx]
          spike_time = t1
          print("spike_time: " + str(spike_time)) 
          
          if v2 != v1: 
            spike_time += ((threshold-v1)/(v2-v1))*(t2-t1) # linear interpolation
            print("  spike_time: " + str(spike_time))
            
          spike_times.append(spike_time)

        idx += 1
      return spike_times

**** Now to test get_spike_times() with output data and spike times from NEURON

Developed test script in eee/sim/test.py:test_get_spike_times(cell)
The spike detector code based on Sam's works well.

** Generating frequency/current analysis

Completed.  The following command:

stim_pulse_series([spi6, spi7], amps=expamps, delay=500, dur=1000, tstop=2000, plotind=False, plotall=True, plotfi=True, cols=2, expname="BS0284", expdata=expdata, samprate=expsamp, save=True)

Generated the following figure:
file:gif/20161219_192703.png

Now that I have some analyses in place, I can start adding channels to the models.

Committing now.

** Adding another SPI7 cell with an extra basal dendrite attached to the end of the existing one.

Now we have SPI7a with two separate basal dendrites and SPI7b with one double-long basal dendrite.

Let's see what happens!

SPI7b seems to fall in between SPI7a and the experimental traces.
file:gif/20161219_205627.png
file:gif/20161219_205638.png


* 2016-12-20 -- Neurosim machines, MPI, and NMDA

** Current goals
Get code operational on neurosim machines 
Get code working with mpi
Implement NMDA channels
Try for dendritic "gaba plateaus"

** First, try to run on no.neurosim.downstate.edu

    no% cd projects/eee/sim/
    no% python compile.py

*** Compiling works.  Now to run init.py

    no% ipython -i init.py
    Python 2.7.6 (default, Oct 26 2016, 20:30:19) 
    NEURON -- VERSION 7.5 (1482:5fb6a5cbbdb7) 2016-11-25

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     cadad.mod cal_mig.mod can_mig.mod h_kole.mod kBK.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod

    In [1]: whos
    Interactive namespace is empty.

*** Hmmm... NEURON loads, but the rest of the file doesn't execute...

    In [2]: execfile("init.py")
    ---------------------------------------------------------------------------
    NameError                                 Traceback (most recent call last)
    <ipython-input-2-680843ab98d9> in <module>()
    ----> 1 execfile("init.py")

    /u/graham/projects/eee/sim/init.py in <module>()
         23 plt.ion()
         24 
    ---> 25 simdir = os.path.dirname(os.path.abspath(__file__))
         26 eeedir = os.path.abspath(os.path.join(simdir, os.pardir))
         27 outputdir = os.path.join(eeedir, "output")

    NameError: name '__file__' is not defined

    In [3]: 

*** Other people have had this problem:
http://stackoverflow.com/questions/2632199/how-do-i-get-the-path-of-the-current-executed-file-in-python

Trying this solution:
"""
    First, you need to import from inspect and os

    from inspect import getsourcefile
    from os.path import abspath
    Next, wherever you want to find the source file from you just use

    abspath(getsourcefile(lambda:0))
"""

*** Now getting an inscrutably long error message:

    no% ipython init.py
    NEURON -- VERSION 7.5 (1482:5fb6a5cbbdb7) 2016-11-25
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     cadad.mod cal_mig.mod can_mig.mod h_kole.mod kBK.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod
    ---------------------------------------------------------------------------
    IOError                                   Traceback (most recent call last)
    /usr/lib/python2.7/dist-packages/IPython/utils/py3compat.pyc in execfile(fname, *where)
        202             else:
        203                 filename = fname
    --> 204             __builtin__.execfile(filename, *where)

    /u/graham/projects/eee/sim/init.py in <module>()
        337 
        338         # Load a series of experimental stim pulses and compare experimental to models
    --> 339         output = stim_pulse_series([spi6, spi7a, spi7b], amps=expamps, delay=500, dur=1000, tstop=2000, plotind=True, plotall=True, plotfi=True, cols=4, expname="BS0284", expdata=expdata, samprate=expsamp, save=True)

    /u/graham/projects/eee/sim/init.py in stim_pulse_series(cells, amps, delay, dur, tstop, plotind, plotall, plotfi, cols, expname, expdata, samprate, save)
        234 
        235                         if save:
    --> 236                                 plt.savefig(os.path.join(outputdir, "Stim_pulse_series_" + expname + simname + "_" + str(ampindex+1) + ".png"))
        237 
        238         # Plot the trace data for every amplitude on one figure

    /usr/lib/pymodules/python2.7/matplotlib/pyplot.pyc in savefig(*args, **kwargs)
        559 def savefig(*args, **kwargs):
        560     fig = gcf()
    --> 561     return fig.savefig(*args, **kwargs)
        562 
        563 

    /usr/lib/pymodules/python2.7/matplotlib/figure.pyc in savefig(self, *args, **kwargs)
       1419             self.set_frameon(frameon)
       1420 
    -> 1421         self.canvas.print_figure(*args, **kwargs)
       1422 
       1423         if frameon:

    /usr/lib/pymodules/python2.7/matplotlib/backend_bases.pyc in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, **kwargs)
       2218                 orientation=orientation,
       2219                 bbox_inches_restore=_bbox_inches_restore,
    -> 2220                 **kwargs)
       2221         finally:
       2222             if bbox_inches and restore_bbox:

    /usr/lib/pymodules/python2.7/matplotlib/backends/backend_agg.pyc in print_png(self, filename_or_obj, *args, **kwargs)
        508         renderer.dpi = self.figure.dpi
        509         if is_string_like(filename_or_obj):
    --> 510             filename_or_obj = open(filename_or_obj, 'wb')
        511             close = True
        512         else:

    IOError: [Errno 2] No such file or directory: '/u/graham/projects/eee/sim/output/Stim_pulse_series_BS0284_SPI6_SPI7a_SPI7b_1.png'
    no% 

*** Will run the code line by line to home in on the problem -- Success!

Had the same problem locally, the solution was to improve the directory identification code.

From: simdir = os.path.dirname(os.path.abspath(__file__))
To  : simdir = os.path.dirname(os.path.abspath(getsourcefile(lambda:0)))

Will now push to neurosim and try it there again...

Success!

** Trying to run locally on multiple cores with:
mpiexec -n 4 nrniv -python -mpi init.py

*** I get the following error:
    Traceback (most recent call last):
      File "init.py", line 18, in <module>
        import matplotlib.pyplot as plt
      File "/Users/graham/anaconda/lib/python2.7/site-packages/matplotlib/__init__.py", line 110, in <module>
        import io
      File "/Users/graham/anaconda/lib/python2.7/io.py", line 51, in <module>
        import _io
    ImportError: dlopen(/Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so, 2): Symbol not found: __PyCodecInfo_GetIncrementalDecoder
      Referenced from: /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so
      Expected in: flat namespace
     in /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so

*** Possible solution:
http://stackoverflow.com/questions/34589056/conda-and-pip-not-working-at-all

"""
    I had the same issue, it is successfully fixed by just replacing the _io.so file.

    sudo find / -name _io.so
    copy the path of the _io.so file which DOES NOT belong to python-2.7.11. For example, copy the path of _io.so which is under python-2.7.5: /usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_io.so

    Replace the '/Users/Can/anaconda/lib/python2.7/lib-dynload/_io.so' file with the _io.so that you just found.

    cp /usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_io.so /Users/Can/anaconda/lib/python2.7/lib-dynload/
    Then it will work.
"""

**** When I run: sudo find / -name _io.so
    /Applications/Dropbox.app/Contents/Resources/lib/python2.7/lib-dynload/_io.so
    /Applications/Google Drive.app/Contents/Resources/lib/python2.7/lib-dynload/_io.so
    /Applications/Plex Media Server.app/Contents/Resources/Python/lib/python2.7/lib-dynload/_io.so
    find: /dev/fd/3: Not a directory
    find: /dev/fd/4: Not a directory
    /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_io.so
    /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so
    /Users/graham/anaconda/pkgs/python-2.7.12-1/lib/python2.7/lib-dynload/_io.so

**** So it seems like the bad _io is:
/Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so

**** First back this one up:
mv /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so_backup

**** Then copy over another:
cp /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_io.so /Users/graham/anaconda/lib/python2.7/lib-dynload/_io.so

*** And now try again -- Success!
    graham-mac% mpiexec -n 4 nrniv -python -mpi init.py
    numprocs=4
    NEURON -- VERSION 7.5 (1484:2888e759fdfe) 2016-12-02
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    Additional mechanisms from files
     cadad.mod cal_mig.mod can_mig.mod h_kole.mod kBK.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod
    Running analysis in init.py.
    Loading model cells.
    Running analysis in init.py.
    Loading model cells.
    Running analysis in init.py.
    Loading model cells.
    Running analysis in init.py.
    Loading model cells.
    Loading experimental data.
    Loading experimental data.
    Loading experimental data.
    Loading experimental data.
    Running stim pulse series.
    Running stim pulse series.
    Running stim pulse series.
    Running stim pulse series.
    Analysis in init.py completed.
    >>> 
    Analysis in init.py completed.
    >>> 
    Analysis in init.py completed.
    >>> 
    Analysis in init.py completed.
    >>> 

Success!

*** A quick timing comparison between single and multiple cores

ipython -i init.py
Duration (s): 82.6780941486

mpiexec -n 4 nrniv -python -mpi init.py
Duration (s): 86.268846035

mpiexec -n 1 nrniv -python -mpi init.py
Duration (s): 84.0332651138

Hmmm... I'll have to look into optimizing for multicore...
http://mpi4py.readthedocs.io/en/stable/
http://materials.jeremybejarano.com/MPIwithPython/


** Adding NMDA channels
Reading up on the literature and the grant proposal.


* 2016-12-22 -- NMDA channels

** Current goals
Implement NMDA channels
Try for dendritic "gaba plateaus"
Utilize and build on Netpyne
Prepare abstract for IMAG/MSM Meeting 
    https://imagwiki.nibib.nih.gov/imag-events/register-imag-10th-anniversary-multiscale-modeling-consortium-meeting[1]


** Reading through grant proposal


** Chatting with Bill about mean field and EEE implications

*** Chat:

billl [10:30 AM]  
@joe

[10:30]  
how's it coming

[10:31]  
was just thinking that EEE could allow us to relate meanfield theory to single unit theories if postulate as srdjan tends to that neural mass action is locatlized rather than distributed

[10:31]  
latter is apparently called K-sets hypotehsis of Freeman

[10:31]  
(been reading virtual brain stuff)

joe [10:32 AM]  
It’s coming along. I’d love it if you checked out the project directory and let me know what you think (/u/graham/projects/eee).

[10:33]  
Could you dumb it down a little for me?  [Frantically googling]

billl [10:34 AM]  
sure - just putting in the notes before i forget

[10:34]  
so we are already suggesting that EEE helps reconcile rate coding with temporal coding

joe [10:35 AM]  
Understood.

billl [10:35 AM]  
rate coding implies that one can define a single state to a neuron (the rate) and then from that can define a state of a group of neurons at a location baed on nearby cells firing together so that there is a rate assoicated with that region - the mean field

[10:36]  
this works pretty well as long as stuff is lumped but maybe not so well if these ensembles are widely distributed which was apparently called K-sets by Walter Freeman in his 1975 Mass Action in the Nervous System book (i haven't read or even heard the term before that i recall)

[10:37]  
anyway ignoring k-sets we have one of our standby ensembles that would relate to this macroscopic measure and relate to fMRI BOLD

[10:37]  
so a macroscopic equiv of our microscopic assertion about the embedding of EEE

[10:37]  
that could relate our type of modeling (tiny) to the fat mean field modeling of eg Virtual Brain

[10:37]  
(http://www.thevirtualbrain.org/tvb/zwei/neuroscience-simulation)

[10:38]  
and other meanfield guys -- lopes da silva, jack cowan, peter robinson ...

--snip--

oh ok -- well i've been reading some of this chapter right now which is basic intro to dynamics -- /u/billl/articles/breakspear07.pdf  the stuff that i'm looking at now starts on pdfp19 in R column

[10:56]  
before that is giong thru hopf bifucs and fitzhugh nogumo etc

[10:57]  
have a bunch of virtual brain/epileptor papers trying to catch up with

*** Highlights

well i've been reading some of this chapter right now which is basic intro to dynamics: /u/billl/articles/breakspear07.pdf  the stuff that i'm looking at now starts on pdfp19 in R column

** Chatting about EEE and NMDA

*** Chat:
joe [10:47 AM]  
I’ve been reading up on NMDA today, delayed implementing it to finalize some analysis and figure code. But that’s all done now, so plateaus are first on the agenda today and going forward.

billl [10:48 AM]  
great! -- so someone perhaps you suggested that we need to make it a steeper pos feedback relative to the standard nmda

joe [10:49 AM]  
We discussed that in a meeting a couple weeks ago…  I believe we thought to start with Guy Major’s modified NMDA?

billl [10:50 AM]  
right -- i need to take notes here during phone convos since harder to sesarch my limited memory registers :)

joe [10:51 AM]  
Got it. Can you recommend a paper that might hive me a little more background?

billl [10:53 AM]  
on my lack of personal memory?

[10:53]  
haven't written it up yet -- forgot to

[10:53]  
on Guy Major's version?  - not sure where that came from

[10:53]  
want to  email srdjan on that?

joe [10:54 AM]  
Hahaha! Will do.

billl [10:54 AM]  
think was a modeldb actually -- lms

joe [10:54 AM]  
But really I was looking for a paper on the meanfield / single field stuff.

billl [10:54 AM]  
https://senselab.med.yale.edu/ModelDB/showmodel.cshtml?model=169985

[10:56]  
oh ok -- well i've been reading some of this chapter right now which is basic intro to dynamics -- /u/billl/articles/breakspear07.pdf  the stuff that i'm looking at now starts on pdfp19 in R column

[10:56]  
before that is giong thru hopf bifucs and fitzhugh nogumo etc

[10:57]  
have a bunch of virtual brain/epileptor papers trying to catch up with

joe [10:58 AM]  
Thanks, I’ll take a look!

[10:59]  
Here’s a quick update on EEE modeling.

[11:01]  
It should run on Neurosim machines (it works on no).  Change dir to eee/sim and run:

[11:01]  
python init.py compile sim

[11:02]  
And the complete simulation should go, generating output figures in eee/output

[11:02]  
The complete simulation consists of:
1) instantiating three model cells: SPI6, SPI7a (two basal dendrites from soma) and SPI7b (one basal dendrite with two sections)

[11:03]  
2) Running the experimental series of pulses through the models

[11:03]  
3) Generates figures comparing models and exp

[11:04]  
4) Analyzes and plots frequency-current relationships for exp and models

[11:07]  
That’s it for now.  I’m working getting NMDA channels in.

billl [11:10 AM]  
running ...

[11:10]  
on no ... slowly ...

joe [11:11 AM]  
:grimacing: About 80 seconds on my machine.

[11:12]  
Perhaps people could review my code and suggest optimizations?

billl [11:14 AM]  
or i can run on a faster machine

[11:15]  
you running mpi on yours?

[11:15]  
'my' is faster i thnk

[11:16]  
voila -- a pic!

[11:16]  
and an error -- looks like it tried to write a png into your dir?

[11:16]  
anyway this is great -- i'll look more thru your nb once the NMDA results start pouring in!

joe [11:17 AM]  
Thanks! Any tips or improvements would be much appreciated.

billl [11:19 AM]  
think the most py fluent guys are robert and salva (not me so much) so could bug one of them some time if want particular suggestions -- guess we should get salva to take a look so that all this will be setup properly for netpyne as we go into the network part

[11:22]  
@salvadord

joe [11:22 AM]  
It’d be great if @salvadord would take a look. I’ve been through the Netpyne tutorial, but that’s about it...

*** Highlights

We need to make it a steeper pos feedback relative to the standard nmda
Guy Major's nmda is a good place ot start:
    https://senselab.med.yale.edu/ModelDB/showmodel.cshtml?model=169985


** Chatting about EEE and Netpyne

*** Chat:

joe [11:22 AM]  
It’d be great if @salvadord would take a look. I’ve been through the Netpyne tutorial, but that’s about it...

salvadord [11:34 AM]  
ok let me read

salvadord [11:40 AM]  
ok cloned ur repo

[11:42]  
interesting, u have py funcs to compile the mod files

[11:42]  
useful, I use a similar bash script

[11:43]  
if u make a bit more generic (eg. not just for “eee” folder) we could add to central repo

joe [11:45 AM]  
Sounds good. Where is the central repo?

billl [11:46 AM]  
this one i think  /usr/site/nrniv/local/python/

salvadord [11:46 AM]  
the code looks very nice and well organized

billl [11:46 AM]  
from /usr/site/nrniv/local/.hg

salvadord [11:47 AM]  
any new cells you make can be directly imported to netpyne from the cell class once you want to start implementing a network

[11:48]  
you can also do the single cell testing within the netpyne framework — I think I sent you the github repo with an example of jus a single cell right?

[11:49]  
maybe would be useful to add some of these single cell stim protocol funcs to netpyne — would be great if you want to add some of these features to netpyne yourself :slightly_smiling_face:  I can show you how to do :slightly_smiling_face:

joe [11:50 AM]  
Please! and Thanks!

billl [11:50 AM]  
sounds great -- joe will learn quicker by working within the code context

salvadord [11:51 AM]  
gdoc with instructions for collab dev via github: https://docs.google.com/document/d/1pSfHrdjwNSf6xpeV0F4bw3SGDdQmW7DTANtIjvA_G28/edit#heading=h.x4rmiflhgrsb

[11:52]  
https://github.com/Neurosim-lab/netpyne
 GitHub
Neurosim-lab/netpyne
netpyne - A python package to facilitate the development of biological neuronal networks in NEURON 
 
 

[11:52]  
to start with you should fork, and then add stuff via PR to the development branch

[11:53]  
once there are enough features or something urgent I release a new netpyne version which merges onto the master branch

joe [11:54 AM]  
:+1:

salvadord [11:55 AM]  
https://github.com/OpenSourceBrain/M1NetworkModel/tree/detailed/sim - example code to test single cell in netpyne (”detailed” branch)
 GitHub
OpenSourceBrain/M1NetworkModel
M1NetworkModel - A multiscale model of the M1 region of motor cortex 
 
 

[11:56]  
I’ve recently added support to run batch simulations to explore parameters (grid search for now) using either multiple cores via mpi or PBS Torque (queue system) on hpc (eg. ‘ma’)

[11:58]  
see batch.py in that repo

[12:00]  
any issues or requests for netpyne please add here: https://github.com/Neurosim-lab/netpyne/issues (and also feel free to fix any of the existing ones :wink: )
 GitHub
Neurosim-lab/netpyne
netpyne - A python package to facilitate the development of biological neuronal networks in NEURON 
 

*** Highlights

If EEE code is more generic (no hard links, etc.), it could be incorporated into central repo.
Central repo is here: 
    /usr/site/nrniv/local/python/
Any new cells made can be directly imported to netpyne from the cell class (for networks)
Single cell testing can be done in Netpyne
Example code to test single cell in netpyne (”detailed” branch):
    https://github.com/OpenSourceBrain/M1NetworkModel/tree/detailed/sim
Should add new functions to Netpyne. Fork, and then add stuff via PR to the development branch
How to work with Netpyne via Github:
    https://docs.google.com/document/d/1pSfHrdjwNSf6xpeV0F4bw3SGDdQmW7DTANtIjvA_G28/edit#heading=h.x4rmiflhgrsb
Netpyne repo is here:
    https://github.com/Neurosim-lab/netpyne/ 



** Guy Major's NMDA model with "steeper pos feedback relative to the standard nmda"

*** Guy Major's model:
NMDAR & GABAB/KIR Give Bistable Dendrites: Working Memory & Sequence Readout (Sanders et al., 2013)
https://senselab.med.yale.edu/ModelDB/showmodel.cshtml?model=169985
    Downloaded to graham/testing/NMDA_network_modelDB.zip

Relevant article: 
NMDA and GABAB (KIR) Conductances: The “Perfect Couple” for Bistability
http://www.jneurosci.org/content/33/2/424

Relevant article: 
A network that performs brute-force conversion of a temporal sequence to a spatial pattern: relevance to odor recognition
http://journal.frontiersin.org/article/10.3389/fncom.2014.00108/full

This model is written in C++, while the one below is in NEURON.  Will start with the NEURON model.

*** Another model that cites the above and may be of interest:
L5 PFC microcircuit used to study persistent activity (Papoutsi et al. 2014, 2013)
https://senselab.med.yale.edu/ModelDB/ShowModel.cshtml?model=155057
    Downloaded to: graham/testing/L5microcircuit.zip

Relevant article:
Induction and modulation of persistent activity in a layer V PFC microcircuit model
http://journal.frontiersin.org/article/10.3389/fncir.2013.00161/full

Relevant article:
Dendritic Nonlinearities Reduce Network Size Requirements and Mediate ON and OFF States of Persistent Activity in a PFC Microcircuit Model
http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003764

Will start with this model, as it is in NEURON.

*** Working on NMDA

So, I will need a NetCon (network connection) attached to:
Input to NetCon: NetStim
Output of NetCon: Synapse

(Committing now, before addition of NMDA stuff.)

Copying two files to eee/sim/mod:
L5microcircuit/mechanism/NMDA_syn.mod
L5microcircuit/mechanism/NMDA.mod

These both load point processes:
nmda_spike()
NMDA()

Everything compiled, and now NMDA.mod and NMDA_syn.mod show up when initializing the model.
h.NMDA() and h.nmda_spike() show up in tab completion. So far, so good.

Going to start a new function to add an NMDA synapse, the NetCon and NetStim.
Will need a function to run this sim and record the output.

Created dev.py for works in progress like this.

Running the following:
    spi6 = initcell("SPI6")
    add_NMDA_synapse(spi6.Bdend)
    output = set_recording_vectors([spi6.soma, spi6.Bdend, spi6.Adend1])
    simulate(tstop=2000)

Gives the following error:
    /u/graham/projects/eee/sim/init.py in add_NMDA_synapse(section, segment)
        315         """Adds NMDA synapse to cell section at the given segment."""
        316 
    --> 317         nmda_syn = h.nmda_spike(section(0.5), name='nmda_syn')
        318         stim = h.NetStim()
        319         stim.number = 10

    RuntimeError: invalid keyword argument

Going to remove the name= and try again.  
Works now, but nothing seems to happen.
There's no deflection in the output voltages at all...

Realized I probably have to also copy over other files...  
Searching for mentions of NMDA in the L5microcircuit project dir.


* 2016-12-26 -- NMDA channels and synapses

** Current goals
Implement NMDA channels
Try for dendritic "gaba plateaus"
Utilize and build on Netpyne
Prepare abstract for IMAG/MSM Meeting 
    https://imagwiki.nibib.nih.gov/imag-events/register-imag-10th-anniversary-multiscale-modeling-consortium-meeting[1]

** Questions arising
Compartment sizes were tuned during optimization?  
Is this quite different from equivalent cylinder simplification?
How will nsegs affect model?
How do I compare to data moving forward?

** NMDA receptors

Going to start with a mod file recommended in the NEURON forums:
https://senselab.med.yale.edu/ModelDB/ShowModel.cshtml?model=144054

Recommendation here:
https://www.neuron.yale.edu/phpBB/viewtopic.php?f=9&t=2800

    """
    What makes this particular synaptic mechanism attractive is that it:
    --includes both AMPAergic and NMDA-gated conductances, which are independently adjustable
    --includes Mg block of NMDA-gated conductance
    --correctly implements saturation of responses to events from a single input stream (i.e. "homosynaptic saturation caused by repeated activation of the same presynaptic terminal")
    --correctly implements linear summation of responses to inputs from different input streams (the computational equivalent of synaptic convergence i.e. a situation in which there are two or more presynaptic neurons, each driving its own synapse, and the synapses are electrically close to each other)

    One caveat: you may not want to use its synaptic plasticity rule, which is a "frequency-dependent potentiation/depression" rule rather than a Hebbian (spike-timing-dependent) rule. You can disable its plasticity rule by setting its ltpinvl and ltdinvl parameters to -1.
    """

Copying ampanmda.mod into eee/sim/mod dir
Setting ltpinvl and ltdinvl parameters to -1

*** Taking a detour; adding an ExpSyn to get a working synapse I can play around with

Finally got a synapse working, with the following code:
    spi6 = initcell("SPI6")

    stim = h.NetStim()
    stim.number = 1
    stim.start = 500
    exp_syn = h.ExpSyn(spi6.Bdend(0.5))
    ncstim = h.NetCon(stim, exp_syn)
    ncstim.delay = 0
    ncstim.weight[0] = 0.04

    time = h.Vector()
    time.record(h._ref_t)
    i_syn = h.Vector()
    i_syn.record(exp_syn._ref_i)
    v_soma = h.Vector()
    v_soma.record(spi6.soma(0.5)._ref_v)
    v_bdend = h.Vector()
    v_bdend.record(spi6.Bdend(0.5)._ref_v)

    h.tstop = 1000
    h.run()

    plt.figure()
    plt.subplot(211)
    plt.plot(time, i_syn, label = "i_syn")
    plt.subplot(212)
    plt.plot(time, v_soma, label = "v_soma")
    plt.plot(time, v_bdend, label = "v_bdend")
    plt.show()

*** With the ExpSyn synapse functional, replace it with the others

Both NMDA and nmda_spike failed: 
AttributeError: 'hoc.HocObject' object has no attribute '_ref_i'
    Sal: seems like its called iNMDA (for NMDA.mod) and inmda (for NMDA_syn.mod)
    

But, AmpaNmda works! Something I can play around with.

*** Start reading up on NMODL:
http://www.neuron.yale.edu/neuron/static/new_doc/modelspec/programmatic/mechanisms/nmodl.html

In a mod file:
  - Parameter: variables which are set by the user and not changed by the model itself
  - Assigned: variables which can be computed directly by assignment statements and are important enough that you may wish to know their value during a simulation.
  - Breakpoint: main computation block of the model. Any states are integrated by a SOLVE statement


*** Also, start reading The NEURON Book -- esp. ch9-10

  - The SUFFIX keyword has two consequences. First, it identifies this to be a distributed mechanism, which can be incorporated into a NEURON cable section by an insert statement. Second, it tells the NEURON interpreter that the names for variables and parameters that belong to this mechanism will include the suffix _leak, so there will be no conflict with similar names in other mechanisms.

*** Code stuff to explore different synapse mechanisms
    Create one or a number of synapses
    Connect them to a stim
    Run the simulation
    Plot the synaptic current
    Plot the soma and dendritic voltage
    Plot currents in the soma and/or dendrites?


* 2016-12-27 -- NMDA channels and lab meeting

** Current goals
Implement NMDA channels
Try for dendritic "gaba plateaus"
Utilize and build on Netpyne
Prepare abstract for IMAG/MSM Meeting 
    https://imagwiki.nibib.nih.gov/imag-events/register-imag-10th-anniversary-multiscale-modeling-consortium-meeting[1]

** Questions arising
Model geometry
- Compartment sizes were tuned during optimization?  
- Is this quite different from equivalent cylinder simplification?
- How to determine nsegs in model?
How do I compare to data moving forward?
What to put in abstract for MSM meeting? 

** Reading up on dendritic plateau potentials and NMDA

*** NMDA spikes in basal dendrites of cortical pyramidal neurons
Schiller J, Major G, Koester HJ, Schiller Y
Nature, 2000
https://paperpile.com/app/p/c1fa08e8-dc24-0653-889d-b48a88550242

Initiation of local basal dendritic spikes was limited to distal basal
dendrites (>70um away from the soma)

coactivation of clustered neighbouring basal inputs initiated local
dendritic spikes, which resulted in a 5.9 +- 1.5 mV (peak) and
64.4 +- 19.8 ms (half-width) cable-filtered voltage change at the
soma

spikes were accompanied by large calcium transients restricted to the 
activated dendritic segment

spikes were mediated mostly by NMDA (N-methyl-D-aspartate) receptor
channels, which contributed at least 80% of the total charge

hyperpolarization of the membrane potential reduced the amplitudes of 
the suprathreshold EPSLPs to subthreshold levels (Fig. 1c)

calcium imaging revealed that suprathreshold EPSLPs evoked a large 
localized increase in calcium influx limited to a roughly 20-mm stretch 
of the activated basal dendrite

Basal dendritic spikes could be reinitiated following blockade of
either VGSCs or VGCCs (voltage gated sodium and calcium channels)

VGSCs and VGCCs did not contribute to basal dendritic spikes (they do 
contribute to spike initiation)

local basal dendritic spikes are mediated for the most part by current 
flowing through NMDA receptor channels. Sodium and calcium channels assist 
in spike initiation, but are not necessary for it

Pre-bound glutamate on NMDA receptors will, in effect, temporarily turn 
them into purely voltage-gated channels, and will prime basal dendrites 
for initiation of NMDA spikes

simulations revealed that NMDA receptor channels contributed around 80% of
the charge mediating basal dendritic spikes, with sodium and
calcium channels together contributing around 20%

simulations revealed that NMDA spikes involved a
‘spike-chain’ mechanism: the AMPA response evoked a fast local
sodium ‘spikelet’, which elicited a slower calcium-mediated regenerative
response, which in turn initiated the full-blown NMDA
spike (Fig. 3d)

In the model we used fast sodium, intermediate speed low voltage-activated, 
T-type (CaT) calcium, high voltage-activated calcium (CaH), NMDA and AMPA 
conductances. A modified Hodgkin–Huxley scheme was used for voltage-sensitive 
conductances, and the parameters for the voltage gated and synaptic 
conductances were based on published experimental data

The maximum NMDA (nS), sodium and calcium (mS cm−2) conductance densities are
GNMDA 11; GNa 2, GCaH 0.02, GCaT 0.15.

See Figure 3d for a breakdown of dendritic currents responsible for NMDA spike.
file:gif/20161227_080149.png



*** Spatiotemporally graded NMDA spike/plateau potentials in basal dendrites of neocortical pyramidal neurons
Major G, Polsky A, Denk W, Schiller J, Tank DW
J Neurophysiol, 2008
https://paperpile.com/app/p/6f874288-2a31-03cb-934b-c43f831d0f04

It is harder to evoke proximal than distal NMDA spikes using
synaptic stimulation, and different plasticity rules seem to
apply to proximal and distal compartments of basal dendrites

An Ri of 100 ohm-cm in more proximal dendrites
with diameters >1.2 um after spine collapse procedure and 120 ohm-cm
in more distal dendrites was found to give the same spread of
spike/plateau amplitudes as observed experimentally. Higher Ri’s 
led to proximal plateaus that were too small at the soma, lower Ri’s 
led to distal plateaus that were too big. It was not possible in the purely
passive model to match the spatial gradient with a uniform Ri

NMDA model equation:
file:gif/20161227_081940.png

Somatic amplitudes of dendritic spike/plateaus decrease
strongly with input distance from the soma

the proximal-to-distal gradient in somatic amplitudes is highly
dependent on parameters such as specific membrane resistance
Rm and cytoplasmic resistivity Ri

A major finding of this study is that the spike/plateau
amplitude at the soma can increase more than sevenfold as the
input site is moved from distal to proximal along a given
terminal basal dendrite (3.2 to 23 mV as the
input site was moved proximally along the dendrite from 240
to 61 um away from the soma)

The glutamate threshold for spike/plateau initiation also
showed a fall-off with distance from the soma

** Implementing NMDA receptors and plotting

*** Got the following figure:
file:gif/20161227_112931.png

*** Using the following code (in dev.py):
    # Create plot to show all currents in dendrite during synaptic stimulation
    spi6 = initcell("SPI6")

    num_syns = 1
    nclist = []
    synlist = []

    stim = h.NetStim() 
    stim.number = 1
    stim.interval = 0.0
    stim.start = 201
    h.tstop = 400

    time = h.Vector()
    time.record(h._ref_t)
    v_soma = h.Vector()
    v_soma.record(spi6.soma(0.5)._ref_v)
    v_bdend = h.Vector()
    v_bdend.record(spi6.Bdend(0.5)._ref_v)

    # Currents in Bdend: ih, nax, kdr, kap, cal, can, kBk
    i_ih = h.Vector()
    i_ih.record(spi6.Bdend(0.5).ih._ref_i)
    i_na = h.Vector()
    i_na.record(spi6.Bdend(0.5)._ref_ina)
    i_k = h.Vector()
    i_k.record(spi6.Bdend(0.5)._ref_ik)
    i_ca = h.Vector()
    i_ca.record(spi6.Bdend(0.5)._ref_ica)

    for ind in range(num_syns):

      cur_syn = h.AmpaNmda(spi6.Bdend(0.5))
      nc_syn = h.NetCon(stim, cur_syn)
      nc_syn.weight[0] = 50000.0
      nc_syn.delay = np.random.random()
      synlist.append(cur_syn)
      nclist.append(nc_syn)

    i_syn = h.Vector()
    i_syn.record(synlist[0]._ref_i)
    i_nmda = h.Vector()
    i_nmda.record(synlist[0]._ref_inmda)
    i_ampa = h.Vector()
    i_ampa.record(synlist[0]._ref_iampa)

    h.run()

    plt.figure()
    ax1 = plt.subplot(311)
    plt.plot(time, v_soma, label = "Soma")
    plt.plot(time, v_bdend, label = "Bdend")
    plt.ylabel("Membrane Potential (mV)")
    plt.legend()

    ax2 = plt.subplot(312, sharex=ax1)
    plt.plot(time, i_syn, label="Syn")
    plt.plot(time, i_nmda, label="NMDA")
    plt.plot(time, i_ampa, label="AMPA")
    plt.ylabel("Synaptic Currents (nA)")
    plt.legend()

    ax3 = plt.subplot(313, sharex=ax1)
    plt.plot(time, i_ih, label="H")
    plt.plot(time, i_na, label="Na")
    plt.plot(time, i_k, label="K")
    plt.plot(time, i_ca, label="Ca")
    plt.ylabel("Membrane Currents (nA)")
    plt.xlabel("Time (ms)")
    plt.xlim([200, 250])
    plt.legend()
    plt.show()

*** Compare with Schiller et al., 2000
file:gif/20161227_112931.png
file:gif/20161227_080149.png

AMPA looks good as the first part of the "spike chain"
NMDA current must be far larger

Committing now before lab meeting.

** Lab Meeting

May be better to use separate AMPA and NMDA channels
Check Neurosim repo for these channel models
Get data from Srdjan (recordings and voltage sensitive dye)
  Bill: matching this data in a model would make a great poster
  Srdjan: VSD gives good timing but only relative amplitude within one trace
          (can't compare amplitude between traces)
Joe will pull together abstract on EEE for Multiscale Modeling Meeting
EEE meetings will now take place every other week (next meeting 10 January)


* 2016-12-29 -- Playing with channels

** Current goals
Get data from Srdjan
Implement separate NMDA and AMPA channels from Neurosim repo
Try for dendritic "gaba plateaus"
Utilize and build on Netpyne
Prepare abstract for IMAG/MSM Meeting 
    https://imagwiki.nibib.nih.gov/imag-events/register-imag-10th-anniversary-multiscale-modeling-consortium-meeting[1]
Add neurosim papers to PaperPile (/usr/site/config/papers)
    maybe through a Neurosim Google account?
    Bill has 3.6 gigs of pdfs also

** Questions arising
Model geometry
- Compartment sizes were tuned during optimization?  
- Is this quite different from equivalent cylinder simplification?
- How to determine nsegs in model?

** Requested data from Srdjan

Response:
    Dear Joe,

    I will send you somatic recordings first.

    To assemble traces with both somatic and dendritic voltage waveforms will take some time. Hopefully before 03-JAN.

    Srdjan 

** Paperpile shared folder for EEE
I’ve started a shared EEE folder in Paperpile where we can organize references:
https://paperpile.com/shared/xB0TIW

** Getting separate AMPA and NMDA receptors

Playing around with channels and their parameters...


* 2016-12-30 -- Learning Netpyne, playing with channels

** Current goals
Implement separate NMDA and AMPA channels
Try for dendritic "gaba plateaus"
Utilize and build on Netpyne
Prepare abstract for IMAG/MSM Meeting 
    https://imagwiki.nibib.nih.gov/imag-events/register-imag-10th-anniversary-multiscale-modeling-consortium-meeting[1]
Add neurosim papers to PaperPile (/usr/site/config/papers)
    maybe through a Neurosim Google account?
    Bill has 3.6 gigs of pdfs also

** Questions arising
Model geometry
- Compartment sizes were tuned during optimization?  
- Is this quite different from equivalent cylinder simplification?
- How to determine nsegs in model?

** Got a data figure from Srdjan
file:gif/20161230_PlateauFunction.jpg

*** His email:
Hi Joe,
Enclosed is my experiment with brain slices, glutamate iontophoresis and whole-cell recording from the cell body. Glutamate was released from a sharp glass pipette near basal dendrite. 
The intensity of the glutamate iontophoretic current was increased in several steps - all steps are shown. At one point, the membrane potential jumps, but it stays at saturated level of approx 20 mV. If we filter out fast action potentials, we get a plateau amplitude of approx 20 mV . Further increase in glut concentration produces no increase in plateau amplitude, but steady increase in plateau duration.
Can you reproduce this in a model?
Thanks,
Srdjan

** Learning about Netpyne and channels


* 2017-01-03 -- Netpyne and Git

** Current goals
Implement separate NMDA and AMPA channels
Try for dendritic "gaba plateaus"
Utilize and build on Netpyne
Prepare abstract for IMAG/MSM Meeting 
    https://imagwiki.nibib.nih.gov/imag-events/register-imag-10th-anniversary-multiscale-modeling-consortium-meeting[1]
Add neurosim papers to PaperPile (/usr/site/config/papers)
    maybe through a Neurosim Google account?
    Bill has 3.6 gigs of pdfs also

** Questions arising
Model geometry
- Compartment sizes were tuned during optimization?  
- Is this quite different from equivalent cylinder simplification?
- How to determine nsegs in model?

** Netpyne

From chats with Salvador:

    """
    netpyne tutorial: http://neurosimlab.org/netpyne/tutorial.html
    """

    """
    this file in netpyne which imports all the mechs etc from a cell might be useful to understand how some of these internals work: 
    https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/utils.py
    """
    
    """
    https://github.com/OpenSourceBrain/M1NetworkModel/tree/detailed/sim - example code to test single cell in netpyne (”detailed” branch)
    I’ve recently added support to run batch simulations to explore parameters (grid search for now) using either multiple cores via mpi or PBS Torque (queue system) on hpc (eg. ‘ma’)
    see batch.py in that repo
    """

    """
    btw in case useful this github repo contains single SPI cell as netpyne model  (+ all mod files required) — another student is using to test differnet stimuli and syn distributions: https://github.com/OpenSourceBrain/M1NetworkModel/tree/detailed  (note its in the “detailed” branch)
    """

    """
    Im about to release a new version with some changes on the way to implement netstims — I dont think it will affect much your current sim
    but just in case, if you use Netstims, add the using the `netParams.stimSourceParams` and `netParams.stimTargetParams` method (not as populations)
    """

    """
    - there are basically 2 way to contribute: by forking or by branching
    - forking is safer and can be used by anyone; branching requires that you get additional permissions and should only be used when you are confident enough of the procedure  
    - in both cases you have to do a pull request from your version to the `development` branch of netpyne
    - changes to the ‘master’ branch only happen when I release a new version — I then merge all the changes in the development branch (potentially from many different users) into master
    """

*** Netpyne Tutorial

**** To create, simulate and analyze a model:
  sim.createSimulateAnalyze(netParams = netParams, simConfig = simConfig)

**** It requires the following 2 arguments:
  1) netParams - an object of class NetParams to store network parameters (eg. cell properties, populations, connectivtiy)
  2) simConfig - an object of class SimConfig to store simulation options (eg. duration, dt, recording and plotting options, etc)

**** The netParams object includes all the information necessary to define your network. It is composed of the following 6 ordered dictionaries:

popParams - populations in the network and their parameters
cellParams - cell property rules and their associated parameters (eg. cell geometry)
synMechParams - synaptic mechanisms and their parameters
connParams - network connectivity rules and their associated parameters.
subConnParams - network subcellular connectivity rules and their associated parameters.
stimSourceParams - stimulation sources parameters.
stimTargetParams - mapping between stimulation sources and target cells .

To get a better intuition of the data structure, you can print netParams.popParams to see all the populations parameters, or print print netParams.popParams['M'] to see the parameters of population ‘M’.


** Using GitHub with Netpyne

How to fork a repo:
https://help.github.com/articles/fork-a-repo/

Workflow to change Netpyne for first time:
    [Click "fork" on https://github.com/Neurosim-lab/netpyne]
    cd /u/graham
    git clone https://github.com/joewgraham/netpyne
    git checkout development
    [make changes]
    git commit -a -m "Commit message."
    git push
    [Click "pull request" on Github]

Once already have Netpyne repo:
    cd /u/graham/netpyne
    git pull
    [make changes]
    git commit -a -m "Commit message."
    git fetch upstream
    git merge upstream/development
    git push
    [Click "pull request" on Github]

Question: how to work with a separate fork, new one for each change?
Answer (Sal):
    Merge any changes in development branch of main repo into your development branch
    git remote add upstream git@github.com:Neurosim-lab/netpyne.git OR
    git remote add upstream https://github.com/Neurosim-lab/netpyne.git 
    (NOTE: only have to do this once, to set up new remote upstream to the main repo)
    git fetch upstream
    git merge upstream/development


* 2017-01-04 -- Netpyne and start of literature review

** Current goals
Implement separate NMDA and AMPA channels
Try for dendritic "gaba plateaus"
Utilize and build on Netpyne
Prepare abstract for IMAG/MSM Meeting 
Add neurosim papers to PaperPile (/usr/site/config/papers)

** Questions arising
Model geometry
- Compartment sizes were tuned during optimization?  
- Is this quite different from equivalent cylinder simplification?
- How to determine nsegs in model?
Model currents
- Need to know AMPA / NMDA ratio
- Need Ca current caused by NMDA for Ca-dependent currents?

** Setting up EEE to use Netpyne

*** Process of creating a model in Netpyne:

Create populations --> Create cells --> Add cell properties
                                   \
                                    --> Create connections


*** Methods to add parameters to Netpyne:
From: http://neurosimlab.org/netpyne/reference.html#network-parameters

    from netpyne import specs
    netParams = specs.NetParams()

    # Method 1: direct
    netParams.popParams['Pop1'] = {'cellType': 'PYR', 'cellModel': 'HH''numCells': 20}

    # Method 2: using object method
    netParams.addPopParams(label='Pop1', params={'cellType': 'PYR', 'cellModel': 'HH''numCells': 20})

Method 2 is recommended as it checks the syntax.

*** Literature review of NMDA plateaus

Oikonomou, Katerina D., Mandakini B. Singh, Matthew T. Rich, Shaina M. Short, and Srdjan D. Antic. 2015. “Contribution of Extrasynaptic N-Methyl-D-Aspartate and Adenosine A1 Receptors in the Generation of Dendritic Glutamate-Mediated Plateau Potentials.” Philosophical Transactions of the Royal Society of London. Series B, Biological Sciences 370 (1672). doi:10.1098/rstb.2014.0193.

Castro-Alamancos, Manuel A., and Morgana Favero. 2015. “NMDA Receptors Are the Basis for Persistent Network Activity in Neocortex Slices.” Journal of Neurophysiology 113 (10): 3816–26.

Suter, Benjamin A., and Gordon M. G. Shepherd. 2015. “Reciprocal Interareal Connections to Corticospinal Neurons in Mouse M1 and S2.” The Journal of Neuroscience: The Official Journal of the Society for Neuroscience 35 (7): 2959–74.

Shai, Adam S., Christof Koch, and Costas A. Anastassiou. 2014. “Spike-Timing Control by Dendritic Plateau Potentials in the Presence of Synaptic Barrages.” Frontiers in Computational Neuroscience 8 (August): 89.

Papoutsi, Athanasia, Kyriaki Sidiropoulou, and Panayiota Poirazi. 2014. “Dendritic Nonlinearities Reduce Network Size Requirements and Mediate ON and OFF States of Persistent Activity in a PFC Microcircuit Model.” PLoS Computational Biology 10 (7): e1003764.

Papoutsi, Athanasia, Kyriaki Sidiropoulou, Vassilis Cutsuridis, and Panayiota Poirazi. 2013. “Induction and Modulation of Persistent Activity in a Layer V PFC Microcircuit Model.” Frontiers in Neural Circuits 7 (October): 161.

Major, Guy, Matthew E. Larkum, and Jackie Schiller. 2013. “Active Properties of Neocortical Pyramidal Neuron Dendrites.” Annual Review of Neuroscience 36 (July): 1–24.

Sanders, Honi, Michiel Berends, Guy Major, Mark S. Goldman, and John E. Lisman. 2013. “NMDA and GABAB (KIR) Conductances: The ‘Perfect Couple’ for Bistability.” The Journal of Neuroscience: The Official Journal of the Society for Neuroscience 33 (2): 424–29.

Oikonomou, Katerina D., Shaina M. Short, Matthew T. Rich, and Srdjan D. Antic. 2012. “Extrasynaptic Glutamate Receptor Activation as Cellular Bases for Dynamic Range Compression in Pyramidal Neurons.” Frontiers in Physiology 3 (August): 334.

Zhou, Wen-Liang, and Srdjan D. Antic. 2012. “Rapid Dopaminergic and GABAergic Modulation of Calcium and Voltage Transients in Dendrites of Prefrontal Cortex Pyramidal Neurons.” The Journal of Physiology 590 (16): 3891–3911.

Manita, Satoshi, Kenichi Miyazaki, and William N. Ross. 2011. “Synaptically Activated Ca2+ Waves and NMDA Spikes Locally Suppress Voltage-Dependent Ca2+ Signalling in Rat Pyramidal Cell Dendrites.” The Journal of Physiology 589 (Pt 20): 4903–20.

Antic, Srdjan D., Wen-Liang Zhou, Anna R. Moore, Shaina M. Short, and Katerina D. Ikonomu. 2010. “The Decade of the Dendritic NMDA Spike.” Journal of Neuroscience Research 88 (14): 2991–3001.

Jeun, Seung Hyun, Hyeong Seok Cho, Ki Jung Kim, Qing Zhong Li, and Ki-Wug Sung. 2009. “Electrophysiological Characterization of AMPA and NMDA Receptors in Rat Dorsal Striatum.” The Korean Journal of Physiology & Pharmacology: Official Journal of the Korean Physiological Society and the Korean Society of Pharmacology 13 (3): 209–14.

Major, Guy, Alon Polsky, Winfried Denk, Jackie Schiller, and David W. Tank. 2008. “Spatiotemporally Graded NMDA Spike/plateau Potentials in Basal Dendrites of Neocortical Pyramidal Neurons.” Journal of Neurophysiology 99 (5): 2584–2601.

Milojkovic, Bogdan A., Wen-Liang Zhou, and Srdjan D. Antic. 2007. “Voltage and Calcium Transients in Basal Dendrites of the Rat Prefrontal Cortex.” The Journal of Physiology 585 (Pt 2): 447–68.

Milojkovic, Bogdan A., Mihailo S. Radojicic, and Srdjan D. Antic. 2005. “A Strict Correlation between Dendritic and Somatic Plateau Depolarizations in the Rat Prefrontal Cortex Pyramidal Neurons.” The Journal of Neuroscience: The Official Journal of the Society for Neuroscience 25 (15): 3940–51.

Myme, Chaelon I. O., Ken Sugino, Gina G. Turrigiano, and Sacha B. Nelson. 2003. “The NMDA-to-AMPA Ratio at Synapses onto Layer 2/3 Pyramidal Neurons Is Conserved across Prefrontal and Visual Cortices.” Journal of Neurophysiology 90 (2): 771–79.

Cossart, Rosa, Dmitriy Aronov, and Rafael Yuste. 2003. “Attractor Dynamics of Network UP States in the Neocortex.” Nature 423 (6937): 283–88.

Golding, Nace L., Nathan P. Staff, and Nelson Spruston. 2002. “Dendritic Spikes as a Mechanism for Cooperative Long-Term Potentiation.” Nature 418 (6895): 326–31.

Schiller, J., G. Major, H. J. Koester, and Y. Schiller. 2000. “NMDA Spikes in Basal Dendrites of Cortical Pyramidal Neurons.” Nature 404 (6775): 285–89.

Lytton, W. W., and T. J. Sejnowski. 1991. “Simulations of Cortical Pyramidal Neurons Synchronized by Inhibitory Interneurons.” Journal of Neurophysiology 66 (3): 1059–79.

Hopfield, J. J. 1982. “Neural Networks and Physical Systems with Emergent Collective Computational Abilities.” Proceedings of the National Academy of Sciences 79 (8): 2554–58.


* 2017-01-05 -- EEE --> Netpyne

** Current goals
Implement separate NMDA and AMPA channels
Try for dendritic "gaba plateaus"
Utilize and build on Netpyne
Prepare abstract for IMAG/MSM Meeting 
Add neurosim papers to PaperPile (/usr/site/config/papers)

** Questions arising
Model geometry
- Compartment sizes were tuned during optimization?  
- Is this quite different from equivalent cylinder simplification?
- How to determine nsegs in model?
Model currents
- Need to know AMPA / NMDA ratio
- Need Ca current caused by NMDA for Ca-dependent currents?

** Going through Netpyne Package Reference

Once netParams and simConfig objects are created, run everything with:
createSimulateAnalyze(netParams, simConfig)



* 2017-01-09 -- Learning

** Current goals
Implement separate NMDA and AMPA channels
Try for dendritic "gaba plateaus"
Utilize and build on Netpyne
Prepare abstract for IMAG/MSM Meeting 
Add neurosim papers to PaperPile (/usr/site/config/papers)

** Questions arising
Model geometry
- Compartment sizes were tuned during optimization?  
- Is this quite different from equivalent cylinder simplification?
- How to determine nsegs in model?
Model currents
- Need to know AMPA / NMDA ratio
- Need Ca current caused by NMDA for Ca-dependent currents?

** How to sync a fork on Github:
https://help.github.com/articles/syncing-a-fork/

    Open Terminal.

    Change the current working directory to your local project.

    Fetch the branches and their respective commits from the upstream repository. Commits to master will be stored in a local branch, upstream/master.

    git fetch upstream
    git checkout master
    git merge upstream/master

** Reading up on channels in The NEURON Book.


* 2017-01-18 -- Learning

** Current goals
Implement separate NMDA and AMPA channels
Try for dendritic "glutamate plateaus"
Utilize and build on Netpyne
Prepare abstract for IMAG/MSM Meeting 
Add neurosim papers to PaperPile (/usr/site/config/papers)

** Goals for today
Go through the Channel Builder tutorials:
  https://www.neuron.yale.edu/neuron/static/docs/chanlbild/main.html
Read through The NEURON Book:
  - Chapter 6 for GUI -- probably easier to play with channels 
  - Chapter 9 for NMODL and adding mechanisms
  - Chapter 10 for synapses

** Questions arising
Model geometry
- Compartment sizes were tuned during optimization?  
- Is this quite different from equivalent cylinder simplification?
- How to determine nsegs in model?
Model currents
- Need to know AMPA / NMDA ratio
- Need Ca current caused by NMDA for Ca-dependent currents?


** Channel Builder tutorial

https://www.neuron.yale.edu/neuron/static/docs/chanlbild/main.html

Creating a channel from an HH-style specification
https://www.neuron.yale.edu/neuron/static/docs/chanlbild/hhstyle/outline.html

Creating a channel from a kinetic scheme specification 
https://www.neuron.yale.edu/neuron/static/docs/chanlbild/kinetic/outline.html

Creating a channel with stochastic gating 
https://www.neuron.yale.edu/neuron/static/docs/chanlbild/stochastic/outline.html


* 2017-01-23 -- Glutamate plateaus

** Goals for today
Implement separate NMDA and AMPA channels
Try for dendritic "glutamate plateaus"

** Receptors

Adding ampa.mod and nmda.mod from Destexhe
http://cns.iaf.cnrs-gif.fr/files/SYN_NEW.zip
https://senselab.med.yale.edu/ModelDB/showmodel.cshtml?model=18500

I've looked at a whole lot of mod files for AMPA and NMDA channels, and these seem to be the ones with a minimum of complexity.  
Now to clean them up and play around with them.

These mod files don't have a NET_RECEIVE, and require a pointer to connect to a presynaptic cell...  I will just play around with Neurosim nmda and ampa receptors to start...

Renaming the Destexhe receptors and copying in NMDA.mod, AMPA.mod, and netcon.inc from Salvador's M1NetworkModel.

Got an error on compilation, apparently due to extra nmda and ampa mod files.  Will remove Destexhe's versions and try again.

Yup, now it works.


* 2017-01-24 -- Glutamate plateaus and project meeting

** Goals for today
Work on dendritic "glutamate plateaus"
Lab meeting

** Questions arising
Model geometry
- Compartment sizes were tuned during optimization?  
- Is this quite different from equivalent cylinder simplification?
- How to determine appropriate nsegs in model?
Model currents
- Need Ca current caused by NMDA for Ca-dependent currents?
- How to model intensity of glutamate uncaging?  (activate more receptors?)

** Receptors

Need to record NMDA and AMPA currents.  Looks like I can access currents via:
PointProcess._ref_i

NMDA receptor is working, but need to figure out appropriate weight.
    1.0 too strong, forces Bdend voltage to new higher steady state
    0.1 too strong, forces Bdend voltage to new higher steady state
    0.01 looks more reasonable, some voltage deflection, no spikes though
    0.05 looks pretty good, seems to be a plateau, no spikes

Now to implement the AMPA receptor, and play with its weight.

Trying to mimic: 
  file:gif/20161227_080149.png 
from Guy Major paper:
  Schiller J, Major G, Koester HJ, Schiller Y, Nature, 2000
  https://paperpile.com/app/p/c1fa08e8-dc24-0653-889d-b48a88550242

*** Getting within the ballpark, I think.
    NMDA weight: 0.055
    AMPA weight: 0.005
    Produces: 
      file:gif/20170124_084818.png

Committing now to save current setup.

It seems that NMDA should activate a bit more slowly and deactivate a bit more quickly.

But I can't access the parameters I need to...  After chatting with Salvador, I will move the netcon.inc code into the NMDA and AMPA mod files and make the parameters I want to modify RANGE variables.

Posted on Slack asking for help.  Waiting for response before I modify anything too much.

Will explore what I've got now.

*** Scaling weights:
file:gif/20170124_112506.png  (subthreshold)
file:gif/20170124_112558.png  (one spike)
file:gif/20170124_112615.png  (three spikes)
file:gif/20170124_112630.png  (eleven spikes)

Not quite sure if these are looking as they should...  Will have to ask in EEE meeting today.

** EEE Meeting

Srdjan: there should be active Ca currents in the model
        L-type Ca is probably activated in plateau

Bill:   nsegs = 10 would be good for basal dendrite

Sal:    looks like there is too much sodium in dendrites (based on dendritic spiking,
        and the high interspike voltage)

Srdjan: huge spikes should be clipped in Fig 4 above, so smaller stuff can be seen

** mkmod and parameters.multi

*** mkmod is located: /usr/site/nrniv/local/bin/mkmod

mkmod is a neurosim-specific pre-processor for nrnivmodl
See here: 
  https://docs.google.com/document/d/1kaISS4NhNMVg_IR10yB-MqzcJ01NBkstmiTFr9KEdcg/edit?usp=sharing

To create Neurosim directory structure:
  https://docs.google.com/document/d/1t9o_3nuxzZ7lhr7-UW2D15PjCPuwoK3STH8ETpICT7w/edit?usp=sharing

I have already created the Neurosim structure, but it's hidden because of Apple's new System Integrity Protection (SIP). To update Hg repos, I must boot into recovery mode then type "csrutil disable" in ther terminal.  To get into recovery mode: reboot and hold down command+R until the Apple logo appears.

**** To update Neurosim directories, I do the following:
    Restart computer
      Hold down Command+R until the Apple logo appears
    Open terminal and enter: 
      csrutil disable
    Restart computer
    Enter the following in terminal:
      cd /usr/site/scripts; hg pull; hg update
      cd /usr/site/config; hg pull; hg update
      cd /usr/site/site-lisp; hg pull; hg update
      cd /usr/site/nrniv/simctrl; hg pull; hg update
      cd /usr/site/nrniv/local; hg pull; hg update
    Restart the computer
      Hold down Command+R until the Apple logo appears
    Open terminal and enter: 
      csrutil enable
    Restart computer


* 2017-01-26 -- mkmod and parameters.multi

** Goals for today
Use mkmod to compile mod files
Make nsegs = 10 in basal dendrite
Work on dendritic "glutamate plateaus"

** mkmod

location: /usr/site/nrniv/local/bin/mkmod

Ugh. Apple's SIP system integrity protection is a pain:
  graham-mac% which mkmod
  mkmod: Command not found.
  graham-mac% mkmod
  /usr/site/scripts/mkmod: Permission denied.

Going to try turning it off and running mkmod.
  Same problem.

Changed ownership
  graham-mac% ls -l mkmod
  -rw-r--r--  1 graham  wheel  31 Jan 26 11:01 mkmod
  graham-mac% chmod u=rwx mkmod
  graham-mac% ls -l mkmod
  -rwxr--r--  1 graham  wheel  31 Jan 26 11:01 mkmod*
  graham-mac% cd ~
  graham-mac% which mkmod
  /usr/site/scripts/mkmod

Now it seems to work.  I'll re-enable SIP and see if it still works...
  Still works. Whew!

Copying parameters.multi from Salvador's M1NetworkModel into EEE project.

Committing before using mkmod.

*** Modifying eee/sim/compile.py to use mkmod (or nrnivmodl optionally)

I get the following error:

      ---------------------------------------------------------------------------
      OSError                                   Traceback (most recent call last)
      /u/graham/projects/eee/sim/init.py in <module>()
          318 
          319         if "compile" in sys.argv:
      --> 320                 execfile("compile.py")
          321 
          322         if "sim" in sys.argv:

      compile.py in <module>()

      compile.py in compilemod(compiler)

      /Users/graham/anaconda/lib/python2.7/subprocess.pyc in call(*popenargs, **kwargs)
          521     retcode = call(["ls", "-l"])
          522     """
      --> 523     return Popen(*popenargs, **kwargs).wait()
          524 
          525 

      /Users/graham/anaconda/lib/python2.7/subprocess.pyc in __init__(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags)
          709                                 p2cread, p2cwrite,
          710                                 c2pread, c2pwrite,
      --> 711                                 errread, errwrite)
          712         except Exception:
          713             # Preserve original exception in case os.close raises.

      /Users/graham/anaconda/lib/python2.7/subprocess.pyc in _execute_child(self, args, executable, preexec_fn, close_fds, cwd, env, universal_newlines, startupinfo, creationflags, shell, to_close, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite)
         1341                         raise
         1342                 child_exception = pickle.loads(data)
      -> 1343                 raise child_exception
         1344 
         1345 

      OSError: [Errno 8] Exec format error


Trying to figure out why.

Using shell=True in subprocess.call prevents the above error, but generates a new one:

      ---------------------------------------------------------------------------
      OSError                                   Traceback (most recent call last)
      <ipython-input-3-00168abf9a24> in <module>()
      ----> 1 execfile("../compile.py")

      /u/graham/projects/eee/sim/compile.py in <module>()
           81         rmcompdir(comppath=eeedir)
           82         compilemod()
      ---> 83         linkmod()
           84 
           85 else:

      /u/graham/projects/eee/sim/compile.py in linkmod()
           44         """Symlinks the NEURON compiler output folder into the sim directory."""
           45         if os.path.isdir(os.path.join(moddir, "x86_64")):
      ---> 46                 os.symlink(os.path.join(moddir, "x86_64"), os.path.join(simdir, "x86_64"))
           47         elif os.path.isdir(os.path.join(moddir, "i386")):
           48                 os.symlink(os.path.join(moddir, "i386"), os.path.join(simdir, "i386"))

      OSError: [Errno 17] File exists

Ahhh, it's because mkmod creates the symlinks.  Changed compile.py to check if symlink exists before creating one.

Error when compiling with nrnivmodl: no misc.h file.  Adding a copy from Sal.

Everything seems to be working now.  Committing now.


* 2017-01-27 -- Documentation and model exploration

** Goals for today
Make nsegs = 10 in basal dendrite
Work on dendritic "glutamate plateaus"
Work on documentation for mkmod and parameters.multi

** Documentation for mkmod

    Commands for compiling NEURON NMODL (.mod) files

    Anyone can expand or modify NEURON’s channels and receptors (mechanisms) via “mod” files.  Before they can be used in models however, they must first be compiled into C code.  There are two standard programs included with NEURON to accomplish this:

    nrnivmodl - translates mod files into C source code, compiles the C source code, and puts output into a directory named x86_64 or i386, depending on your system architecture.
    nocmodl - translates mod files into C source code but does not compile the C source code. This is useful to see exactly what your mod files are doing at the C level and for debugging.

    Neurosim compiling: mkmod

    The Neurosim Lab has created a lab-specific script mkmod which performs compilation of mod files using nrnivmodl, but also allows an input configuration file called parameters.multi, which should be located in the same directory as the mod files.  The mkmod script is written in perl and is located in /usr/site/nrniv/local/bin.  To use mkmod, simply type mkmod in a terminal from a directory with mod files, or a directory containing a mod file directory.  If using a mod file directory, mkmod will create the necessary symlink to the x86_64 or i386 compiled mod file directory. 

    Use of mkmod allows for standardization of model components within Neurosim, which allows for thorough testing and validation.  Rather than each lab member creating, testing, and maintaining their own mod files, there is a central Neurosim mod file repository located in /usr/site/nrniv/local/mod.  

    Configuration file: parameters.multi 

    The following syntax used in parameters.multi allows specifying which mod files to compile:

    DEFAULT modfilenameA
    DEFAULT modfilenameB
       …
    DEFAULT modfilenameN


    Note that the modfilename does not have the .mod extension.  Standard Neurosim mod files from /usr/site/nrniv/local/mod are compiled unless there is a mod file by the same name in the local directory.  Additional mod file directories can be searched by adding them to the environment variable MODL_INCLUDE.

    Example:
    my% echo $MODL_INCLUDE
    /usr/site/nrniv/local/mod


    In the parameters.multi file, lines starting with “:” are comments (same as in mod files).  

    You can set the following options in parameters.multi:

    LDFLAGS - use this to specify which linker flags to use
    INCFLAGS - use this to specify which directories to use for includes

    You can embed C code directly in your mod files with the following syntax: 

    VERBATIM
      C-language statements
    ENDVERBATIM

    This is useful for optimizing code and accessing C-language libraries. This syntax is normally used when you have > 1 line of C-language code.

    Before compilation, mkmod searches for lines ending with //@ in your mod files and translates them to have a VERBATIM / ENDVERBATIM bracket around them. This is a shorthand to avoid extra typing. For example, if you have an if clause that makes use of C-language syntax (pointers, etc.) then you can avoid bracketing the line with VERBATIM/ENDVERBATIM and use:

    if ( mypointer->x) { //@

    instead of:

    VERBATIM
      if ( mypointer->x) {
    ENDVERBATIM
     
    The translated file, name.mod is saved as name_.mod and then translated to C by nocmodl before the final compilation.

    mkmod also allows you to include NMODL language commands. This can be used to generate additional mod files to compile. For example, including the following in parameters.multi:


    : AMPA SYNAPSE
    NEURON {  POINT_PROCESS AMPA }
    PARAMETER {
      Cdur    = 1       (ms)            : transmitter duration (rising phase)
      Alpha   = 1.      (/ms mM)    : forward (binding) rate
      Beta     = 0.5    (/ms)           : backward (unbinding) rate
      Erev     = 0       (mV)            : reversal potential
    }
    INCLUDE "netcon.inc"

    will produce a file AMPA.mod that will then be compiled for use in NEURON. Note that the INCLUDE syntax will copy/paste the contents of netcon.inc into the file.  The file netcon.inc is Neurosim-specific and provides standardized and validated NMODL code for synapses.

    Example parameters.multi file:

    : include flags
    INCFLAGS -I/usr/arch/EPD/include/python2.7

    : linker flags
    LDFLAGS -pthread -lpthread
    LDFLAGS -L/usr/local/src/mysql-5.0.37-linux-x86_64-glibc23/lib -lmysqlclient -lz

    DEFAULT vecst
    DEFAULT stats
    DEFAULT misc

    :** AMPA SYNAPSE
    NEURON {  POINT_PROCESS AMPA }
    PARAMETER {
      Cdur    = 1    (ms)      : transmitter duration (rising phase)
      Alpha    = 1.    (/ms mM)    : forward (binding) rate
      Beta    = 0.5    (/ms)     : backward (unbinding) rate
      Erev    = 0    (mV)      : reversal potential
    }
    INCLUDE "netcon.inc"

** Set nseg = 10 in basal dendrite

Modified SPI6.py 
Added at line 26: bdendnseg = 10
Added at line 124: self.Bdend.nseg = bdendnseg


* 2017-01-30 -- Cleaning up project and exploring receptor mod files

** Goals for today
Work on dendritic "glutamate plateaus"

** Modifying parameters.multi

Only compiling channels used in the SPI6 model:
      k_ion
      na_ion
      pas       # passive
      nax       # Na current
      kdr       # K delayed rectifier current
      kap       # K-A current
      ih        # h-current      
      ca_ion    # calcium channels
      cal       # cal_mig.mod
      can       # can_mig.mod
      cadad     # cadad.mod - calcium decay 
      kBK       # kBK.mod - ca and v dependent k channel
      kdmc      # K-D current in soma & axon only

Committing now, before removing local mod files

Removing:
    cadad.mod
    cal_mig.mod
    can_mig.mod
    h_kole.mod
    kap_BS.mod
    kBK.mod
    kdmc_BS.mod
    kdr_BS.mod
    nax_BS.mod

Compiled using mkmod, parameters.multi successfully pulled in repo mod files. :)

** Now to look into NMDA and AMPA synapses

Neurosim repo at /usr/site/nrniv/local/mod has the following mod files:

*** AMPA.mod

NEURON {  POINT_PROCESS AMPA }

PARAMETER {
  Cdur  = 1 (ms)    : transmitter duration (rising phase)
  Alpha = 1.  (/ms mM)  : forward (binding) rate
  Beta  = 0.5 (/ms)   : backward (unbinding) rate
  Erev  = 0 (mV)    : reversal potential
}

INCLUDE "netcon.inc"
 
:** NMDA


*** NMDA_.mod

NEURON{ POINT_PROCESS NMDA
  RANGE B 
  GLOBAL mg
}

PARAMETER {
  mg        = 1.    (mM)     : external magnesium concentration
  Cdur  = 1.  (ms)   : transmitter duration (rising phase)
  Alpha = 4.  (/ms mM) : forward (binding) rate
  Beta  = 0.0067 (/ms)   : backward (unbinding) rate 1/150
  Erev  = 0.  (mV)   : reversal potential
}

ASSIGNED { B }

INCLUDE "netcon.inc"
: EXTRA BREAKPOINT MUST BE BELOW THE INCLUDE
BREAKPOINT {
  rates(v)
  g = g * B : g = GMAX * R * B
  i = i * B : i = g*(v - Erev)
}

PROCEDURE rates(v(mV)) {
  TABLE B
  DEPEND mg
  FROM -100 TO 80 WITH 180
  B = 1 / (1 + exp(0.062 (/mV) * -v) * (mg / 3.57 (mM)))
}
 
:** GABAa


*** nmda.mod

: $Id: nmda.mod,v 1.5 1994/11/29 01:02:04 billl Exp $
COMMENT
-----------------------------------------------------------------------------
Simple synaptic mechanism derived for first order kinetics of
binding of transmitter to postsynaptic receptors.

A. Destexhe & Z. Mainen, The Salk Institute, March 12, 1993.

Last modif.  March 4th, 1994.


Reference:

Destexhe, A., Mainen, Z. and Sejnowski, T.J.  An efficient method for 
computing synaptic conductances based on a kinetic model of receptor binding.
Neural Computation, 6: 14-18, 1994.

-----------------------------------------------------------------------------
  Simple NMDA based on GABA SYNAPSE (GABA-A receptors) in gabalow.mod
-----------------------------------------------------------------------------
ENDCOMMENT

INDEPENDENT {t FROM 0 TO 1 WITH 1 (ms)}

NEURON {
  POINT_PROCESS NMDA
  POINTER pre
  RANGE C, R, R0, R1, g, gmax, lastrelease, B, spk
  NONSPECIFIC_CURRENT i
  GLOBAL Cmax, Cdur, Alpha, Beta, Erev, Prethresh, Deadtime, Rinf, Rtau
}

INCLUDE "queue.inc"  : queue routines

UNITS {
  (nA) = (nanoamp)
  (mV) = (millivolt)
  (umho) = (micromho)
  (mM) = (milli/liter)
}

PARAMETER {
  mg    = 1.    (mM)            : external magnesium concentration
  Cmax  = 1 (mM)    : max transmitter concentration
  Cdur  = 5.0 (ms)    : transmitter duration (rising phase)
  Alpha = 0.072 (/ms mM)  : forward (binding) rate
  Beta  = 0.0066 (/ms)    : backward (unbinding) rate 1/150
  Erev  = 0 (mV)    : reversal potential
  Prethresh = 0     : voltage level nec for release
  Deadtime = 1  (ms)    : mimimum time between release events
  gmax  = 0.001 (umho)    : maximum conductance
  vmin = -120     (mV)
  vmax = 100      (mV)
}


ASSIGNED {
  v   (mV)    : postsynaptic voltage
  i     (nA)    : current = g*(v - Erev)
  g     (umho)    : conductance
  C   (mM)    : transmitter concentration
  B                             : fraction free of Mg2+ block
  R       : fraction of open channels
  R0        : open channels at start of release
  R1        : open channels at end of release
  Rinf        : steady state channels open
  Rtau    (ms)    : time constant of channel binding
  pre         : pointer to presynaptic variable
  spk                           : flag for spk occuring
  lastrelease (ms)    : time of last spike
}

INITIAL {
  initq()                       : ****

  R = 0
  C = 0
  R0 = 0
  R1 = 0
  Rinf = Cmax*Alpha / (Cmax*Alpha + Beta)
  Rtau = 1 / ((Alpha * Cmax) + Beta)
  lastrelease = -9e4
  rates(v)
}

BREAKPOINT {
  rates(v)
  SOLVE release
  g = gmax * R * B
  i = g*(v - Erev)
}

PROCEDURE release() { LOCAL q
  :will crash if user hasn't set pre with the connect statement 

  if (! spk && pre > Prethresh) { : new spike occured?
    spk = 1
    pushq(t+delay) } 

  if (spk && pre < Prethresh) { : spike over?
    spk = 0 }

  q = ((t - lastrelease) - Cdur) : time since last release ended

  : ready for another release?
  if (q > Deadtime) {

    if (t >= queu[head]) {      : **** a current spike time
      popq()                    : ****
      C = Cmax      : start new release
      R0 = R
      lastrelease = t
    }
    
  } else if (q < 0) {   : still releasing?

    if (t > queu[head]) { popq() } : **** throw away value from missed spikes

  } else if (C == Cmax) { : in dead time after release
    R1 = R
    C = 0.
  }
  
  if (C > 0) {      : transmitter being released?
    R = Rinf + (R0 - Rinf) * exptable (- (t - lastrelease) / Rtau)
  } else {      : no release occuring
    R = R1 * exptable (- Beta * (t - (lastrelease + Cdur)))
  }
  
  VERBATIM
  return 0;
  ENDVERBATIM
}

FUNCTION exptable(x) { 
  TABLE  FROM -10 TO 10 WITH 2000
  
  if ((x > -10) && (x < 10)) {
    exptable = exp(x)
  } else {
    exptable = 0.
  }
}

PROCEDURE rates(v(mV)) {
  TABLE B
  DEPEND mg
  FROM vmin TO vmax WITH 200
  : Stevens & Jahr 1990a,b
  
  B = 1 / (1 + exp(0.062 (/mV) * -v) * (mg / 3.57 (mM)))
}

** Adding the following lines to parameters.multi:

DEFAULT AMPA
DEFAULT NMDA_
:DEFAULT nmda

Will have to keep one of the NMDAs commented out because otherwise they interfere with each other

Everything seems to compile correctly.  Will commit now.


* 2017-01-31 -- EEE meeting

** Goals for today
Work on dendritic "glutamate plateaus"
Figure out NMDA and AMPA receptor usage
Plan improvements to NMDA (Ca current, etc.)

** NMDA and AMPA receptors

Removed local copies of these mod files and recompiled
mkmod created links to the files in central repo

*** Notes concerning receptors

NMDA 

  Sanders et al, 2013
  https://paperpile.com/app/p/7c5c371a-677d-0287-986e-66ad70b81c6d

    - Voltage-dependence of NMDAr is vital to neuronal bistability (Mg block)
      Fortunately, most NMDAr mod files already seem to have Mg block
    - one limitation is that recurrent AMPA conductance must be very small 
      (a 75:1 NMDA/AMPA conductance ratio was used by Lisman et al., 1998)
    - NMDA time to peak of 10 ms and decay time constant of 100 ms
    - See Sanders et al p 425 for NMDA equations and values

  Major et al, 2013
  https://paperpile.com/app/p/e69526d3-8b92-008b-bd99-4920ed6840ad

    - 


** EEE Meeting

*** Neurosim has an NMDA receptor with Ca:
/usr/site/nrniv/local/mod/MyExp2SynNMDABB.mod

*** Joe helps supervise Sergio, who will help with sims

*** I'll use SPI7a (two separate basal dendrites) now instead of SPI6 
  (get rid of SPI7b and rename SPI7a just SPI7)
  Bill: i think 2 is what we want since notion was that 1 would create the 
        plateau and other would be the piano keyboard for the other inputs

*** I should run EEE sims on Neurosim machine to ensure functionality and so Sergio can hep run them.
  - install x2go
  - log into no, ag or fo
  - run sims on zn or my
  - see machines here: https://docs.google.com/document/d/1t9o_3nuxzZ7lhr7-UW2D15PjCPuwoK3STH8ETpICT7w/edit#
  - Sal: can create alias to log in directly to zn, eg. `alias szn 'ssh -t no "ssh zn"'`
  - I put the following in my .tcshrc file: alias sshzn 'ssh -t no.neurosim.downstate.edu "ssh zn"'
      After putting my password in twice, I am connected to zn

*** Short-term goals:
    
    Any kind of plateau
    See diff between NMDA spike and plateau (see Bart Mel papers for spike)
    Sergio and I work on doing exact same thing

    **** chat about goals
    joe [1:24 PM] 
    So in more general terms, what should I be trying to accomplish in the immediate future?  How do I tune NMDA?  Just try to match Srdjan’s figure?

    billl [1:25 PM] 
    sure that would be great

    [1:25]  
    but for starters any kind of plateau would be great

    [1:25]  
    then would like to see the diff between a NMDA spike and NMDA plateau

    [1:25]  
    did one of the bart mel papers have the NMDA spike -- can get params from there

    [1:25]  
    or from major?

    joe [1:25 PM] 
    Any idea how many synapses would be activated by glutamate uncaging? I assume one huge synapse would behave differently than many normal ones?

    billl [1:25 PM] 
    or maybe don't need any exact params from either since i'm pretty sure both empiricial anyway

    joe [1:26 PM] 
    Okay, so look for NMDA spike as well.

    billl [1:26 PM] 
    one huge != many - that's a nice thing to test

    [1:26]  
    one huge in the middle will be different but would want to show that

    [1:26]  
    for starters you and sergio can work entirely on trying to do same thing

*** Running batches of sims

Bill has: /usr/site/scripts/pbsb     
    "but Yuk"

Samn has: /u/samn/ca1d/batch.py 
          /usr/site/nrniv/local/python/batchutils.py

Sal will post an example batch file using Netpyne tonight.
  

*** Installing x2go (http://wiki.x2go.org/)

Got it installed and can connect to "no", but the keyboard mapping is all messed up
Seems to be a problem with Mac and x2go in certain situations. 
For today I will just ssh into no and then into zn to ensure everything works.

Just chatted with Moh, who recommended using XFCE as session type, and it works!

Committing now, will make sure I get EEE project directory updated remotely.
It worked.  Now to make sure everything runs on Neurosim machines.

*** Running EEE sims on Neurosim machine
Commands:
    cd /u/graham/projects/eee/sim
    ipython -i init.py compile

**** Gives an error:
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
/usr/lib/python2.7/dist-packages/IPython/utils/py3compat.pyc in execfile(fname, *where)
    202             else:
    203                 filename = fname
--> 204             __builtin__.execfile(filename, *where)

/u/graham/projects/eee/sim/init.py in <module>()
    318 
    319         if "compile" in sys.argv:
--> 320                 execfile("compile.py")
    321 
    322         if "sim" in sys.argv:

/u/graham/projects/eee/sim/compile.py in <module>()
     69         rmcompdir()
     70         rmcompdir(comppath=eeedir)
---> 71         rmcompdir(comppath=moddir)
     72         os.chdir(moddir)
     73         compilemod()

/u/graham/projects/eee/sim/compile.py in rmcompdir(comppath)
     24                         os.remove(path1)
     25                 else:
---> 26                         shutil.rmtree(path1)
     27                 print("Removing directory: " + path1)
     28         if os.path.isdir(path2):

/usr/lib/python2.7/shutil.pyc in rmtree(path, ignore_errors, onerror)
    245             mode = 0
    246         if stat.S_ISDIR(mode):
--> 247             rmtree(fullname, ignore_errors, onerror)
    248         else:
    249             try:

/usr/lib/python2.7/shutil.pyc in rmtree(path, ignore_errors, onerror)
    250                 os.remove(fullname)
    251             except os.error, err:
--> 252                 onerror(os.remove, fullname, sys.exc_info())
    253     try:
    254         os.rmdir(path)

/usr/lib/python2.7/shutil.pyc in rmtree(path, ignore_errors, onerror)
    248         else:
    249             try:
--> 250                 os.remove(fullname)
    251             except os.error, err:
    252                 onerror(os.remove, fullname, sys.exc_info())

OSError: [Errno 16] Device or resource busy: '/u/graham/projects/eee/sim/mod/x86_64/.libs/.nfs0000000400e5f8fc0019359e'

Was unable to delete this file yesterday, but it worked fine today.


* 2017-02-01 -- Ensuring EEE functionality on Neurosim machines

** Goals for today
Get EEE sims working on Neurosim machines
Give overview to Sergio
Work on dendritic "glutamate plateaus"

** First trying to run EEE sims on Neurosim machine (zn)

sshzn (in .tcshrc: alias sshzn 'ssh -t no.neurosim.downstate.edu "ssh zn"')
ipython -i init.py compile
execfile("sim.py")

    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    <ipython-input-1-f5385184fc31> in <module>()
    ----> 1 execfile("sim.py")

    /u/graham/projects/eee/sim/sim.py in <module>()
         14 # Load the model cells
         15 print("Loading model cells")
    ---> 16 spi6 = initcell("SPI6")
         17 spi7a = initcell("SPI7a")
         18 spi7b = initcell("SPI7b")

    /u/graham/projects/eee/sim/init.py in initcell(modelname)
         36 
         37         cellclass = getattr(importlib.import_module("cells." + modelname), modelname)
    ---> 38         instance = cellclass()
         39 
         40         return instance

    /u/graham/projects/eee/sim/cells/SPI6.py in __init__(self, x, y, z, ID)
         83     self.add_comp('soma')
         84     self.set_morphology()
    ---> 85     self.insert_conductances()
         86     self.set_props()
         87     self.calc_area()

    /u/graham/projects/eee/sim/cells/SPI6.py in insert_conductances(self)
        200       sec.insert('na_ion')
        201       sec.insert('pas') # passive
    --> 202       sec.insert('nax') # Na current
        203       sec.insert('kdr') # K delayed rectifier current
        204       sec.insert('kap') # K-A current

    ValueError: argument not a density mechanism name.

Strange that nax is not a density mechanism name... The mod file is there...  
I'll check the output of compiling and see if there's an error.
Everything seems fine...  I'll try recompiling.

    OSError: [Errno 39] Directory not empty: '/u/graham/projects/eee/sim/mod/x86_64/.libs'

zn% ls -a /u/graham/projects/eee/sim/mod/x86_64/.libs
./  ../
zn% rm /u/graham/projects/eee/sim/mod/x86_64/.libs
rm: cannot remove ‘/u/graham/projects/eee/sim/mod/x86_64/.libs’: Is a directory
zn% rm -r /u/graham/projects/eee/sim/mod/x86_64/.libs
zn% 

Try compiling again:
ipython -i init.py compile

Compilation was succesful.  Now trying to run sim...

execfile("sim.py")

Same problem with nax: 
ValueError: argument not a density mechanism name.

*** Try compiling and running locally

Compiling and running sim.py works fine...

*** The mechanism nax now mysteriously seems to work

Error on zn:

    /usr/local/lib/python2.7/dist-packages/matplotlib/backends/backend_qt5.pyc in _create_qApp()
       136                 display = os.environ.get('DISPLAY')
       137                 if display is None or not re.search(':\d', display):
    --> 138                     raise RuntimeError('Invalid DISPLAY variable')
       139
       140             qApp = QtWidgets.QApplication([str(" ")])

    RuntimeError: Invalid DISPLAY variable

Fixed it by changing my sshzn alias to:
alias sshzn   'ssh -t -Y no.neurosim.downstate.edu "ssh -Y zn"'

** Cleaning up EEE project dir before introducing to Sergio

Keeping only SPI model with two separate basal dendrites.
  Deleting SPI7b, renaming SPI7a to SPI7.
  Setting nseg=10 in both basal dendrites

hg remove sim/cells/SPI7.py
hg remove sim/cells/SPI7b.py
hg rename sim/cells/SPI7a.py sim/cells/SPI7.py

** Working on documentation for X2Go

https://docs.google.com/document/d/1u4E6PqCMbmzmc4RnvvC8fxWVQflVD2dm7IpMFvMD-K8/edit#

    Connecting to Neurosim with X2Go
    X2Go is a Remote Desktop solution which enables you to access a graphical desktop of a computer over a low or high bandwidth connection.  With X2Go, you mainly access Linux computers. The Linux computer you are accessing is the X2Go Server.  You can connect from a computer running Linux, Windows or Mac OS X. This computer is the X2Go Client.

    Multiple users/clients can access a single X2Go Server at the same time, with each user/client having an individual desktop session by default.  For the graphical part of remote desktop sessions, X2Go uses No Machine NX3 technology under the hood (see Connecting with NX).

    At Neurosim, X2Go servers are installed on the following machines:
    pt.neurosim.downstate.edu
    no.neurosim.downstate.edu

    Client installation instructions:
    The standard client should be installed with the following instructions:
    http://wiki.x2go.org/doku.php/doc:installation:x2goclient

    There are also Python applications you can install for a system tray applet or a command line interface CLI), though these are only available for Linux:
    http://wiki.x2go.org/doku.php/doc:installation:start

    Logging in:
    Use your normal Neurosim username and password to login

    Suggestion: use the xfce desktop when logging in (that works on pt and no; not all desktops are available)

    You may need to adjust keyboard settings upon login (check preferences for each session)

While going through Neurosim wiki, I found this great list of the Neurosim central repos:
https://docs.google.com/document/d/1kpk1FHZniNhFDKhuAkrOE2DHEscll-tVqf5q3vYGs2A/edit

    Central repositories containing code:
    /usr/site/nrniv/local/hoc/
    /usr/site/nrniv/local/python/
    /usr/site/nrniv/local/mod/
    /usr/site/nrniv/local/models/
    /usr/site/nrniv/local/bin/

I will have to explore these directories (stop reinventing the wheel).

Just discovered what is intended to be a fuller document describing various ways to connect to Neurosim machines:
Connecting to from laptop to neurosim machines with graphical or textual program
https://docs.google.com/document/d/1Xq0Ve3n9XuPh0CjLOOxIbuYijPIdhH98vUXDO_zEuGc/edit

I should update this document (and pull in the X2Go update I just completed).


* 2017-02-02 -- Using batch processing to explore parameters

** Goals for today
Give overview to Sergio
Update Netpyne, explore its batch capabilities
Work on dendritic "glutamate plateaus"

** Update Netpyne

  cd /u/graham/netpyne
  git fetch --all
  git reset --hard origin/development
    HEAD is now at 8f22b81 removed 'threshold from conns if uses default value

Hmmm... That doesn't seem to have gotten me up to date on Netpyne...

  git fetch upstream
  git merge upstream/development

That seems to have done it now.

** Try Netpyne batch examples

    cd /u/graham/netpyne/examples/batchCell/mod
    mkmod
        ...
        Successfully created x86_64/special
    cd /u/graham/netpyne/examples/batchCell/
    ./runbatch 4
        ...
        Could not create data/batchNa
        ...

So I created a directory "data" in .../batchCell
Try again now.  Got past that error, got a new one.

    ./runbatch 4
        ...
        Saving batch to data/batchNa/batchNa_batch.json ... 
        ...
        dendNa = 0.025
        Traceback (most recent call last):
          File "batch.py", line 46, in <module>
            batchNa() 
          File "batch.py", line 35, in batchNa
            runBatch(b, 'batchNa')
          File "batch.py", line 29, in runBatch
            b.run() # run batch
          File "/Users/graham/anaconda/lib/python2.7/site-packages/netpyne/batch.py", line 82, in run
            setattr(self.cfg, paramLabel, paramVal) # set simConfig params
        TypeError: attribute name must be string, not 'tuple'

It looks like the Netpyne I am importing is from pip...
I wonder if I am importing the Netpyne development branch...  Will ask Salvador.

Sal says that using the pip version is fine as long as it is up-to-date.
The example batch is in the dev branch, but the heavy lifting is all in main.

Will update Netpyne now:
    pip uninstall netpyne
    pip install netpyne

It runs and generates figures!  Now to try my own sims...


* 2017-02-03 -- Helping Sergio and using batch processing to explore parameters

** Goals for today
Give overview to Sergio
Explore Netpyne's batch capabilities
Work on dendritic "glutamate plateaus"

** Helping Sergio

    sergio

    .angulo [8:03 AM] 
    Hi Joe, I’m starting to work on NEURON, do you have time for an overview of your work?

    joe [8:05 AM] 
    Sure thing. Give me a few minutes.

    sergio.angulo [8:05 AM] 
    ok

    joe [8:08 AM] 
    Okay, so have you already cloned the eee repo?

    sergio.angulo [8:08 AM] 
    nop

    joe [8:08 AM] 
    I will update the README today, as it’s a bit out of date.

    sergio.angulo [8:09 AM] 
    ok

    joe [8:09 AM] 
    Familiar with Hg?

    [8:09]  
    Let me find the command to clone the repo...

    sergio.angulo [8:09 AM] 
    ok

    [8:11]  
    I have mercurial installed

    joe [8:11 AM] 
    This command will clone the “eee” directory wherever you run it from:

    [8:11]  
    hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee

    [8:12]  
    Perfect!

    sergio.angulo [8:12 AM] 
    I need move to another network, my router has a firewall for ssh

    joe [8:13 AM] 
    Okay, let me know when you get the repo.

    sergio.angulo [8:13 AM] 
    ok

    [8:14]  
    I’m going to go to downstate, and I’ll do it there

    [8:14]  
    like 1h

    joe [8:14 AM] 
    Sounds good. I’ll be here.

    sergio.angulo [9:45 AM] 
    perfect Joe, I was able to get the clone for the eee project

    joe [9:47 AM] 
    Great. So my notes are in notebook.org (for Emacs, though I use Sublime Text).

    [9:48]  
    The figures from the notebook are in the gif dir.

    [9:48]  
    All the code, mod files, etc. are in the sim dir.

    [9:49]  
    First thing is to compile the mod files.

    [9:50]  
    cd to eee/sim and enter into the terminal:

    [9:50]  
    python compile.py

    [9:50]  
    Let me know if that works for you.

    sergio.angulo [9:51 AM] 
    ok Joe

    joe [9:52 AM] 
    No errors?

    sergio.angulo [9:52 AM] 
    I just need to make to work on my machine, and I’m going to start working on your files

    [9:53]  
    I’m reading your readme.txt also

    joe [9:53 AM] 
    Great! I updated it.

    [9:53]  
    Let me know if you run into any errors.

    [9:54]  
    I work in iPython, so to start, I cd to eee/sim and enter:

    sergio.angulo [9:54 AM] 
    ok Joe

    joe [9:54 AM] 
    ipython -i init.py

    sergio.angulo [9:55 AM] 
    do you work with anaconda?

    [9:55]  
    or just ipython?

    joe [9:55 AM] 
    That runs the init.py script, which gets all the functions into the Python namespace.

    [9:55]  
    I just use iPython.  I edit code in Sublime Text.  Other people do it differently.

    [9:56]  
    So the file sim.py is where all the code that’s pretty finalized goes.  You can run it from within ipython with:

    [9:57]  
    execfile(”sim.py")

    [9:58]  
    It should run a series of sims (takes about 80 to 100 secs) and generate figures you can see in eee/output

    [9:58]  
    The file dev.py is where I am actively working on code.

    [9:58]  
    Once it’s fairly solid, it’ll get moved into sim.py

    sergio.angulo [9:58 AM] 
    NEURON is not running well on my machine, I’m going to fix that

    joe [9:59 AM] 
    No worries. Have you set it up the Neurosim way?  Let me find you some references from the wiki...

    [10:00]  
    Instructions for installing Neurosim NEURON

    joe [10:00 AM] 
    shared this file
    Instructions for installing Neurosim NEURON
    Document from Google Drive
    Click to open in Google Drive
    Add Comment

    sergio.angulo [10:01 AM] 
    perfect. I was following the instructions from neuron.yale.edu

    [10:01]  
    but it was not working

    joe [10:01 AM] 
    I’ve only been around a couple months, so I just recently set up my machine the Neurosim way (I’ve got a MacBook).  So let me know if you have any problems, and I may be able to help.

    sergio.angulo [10:02 AM] 
    Thanks Joe

    joe [10:02 AM] 
    np

    [10:02]  
    You run Linux?

    sergio.angulo [10:02 AM] 
    I’m going to do it according to neurosim

    [10:02]  
    mac

    joe [10:03 AM] 
    Awesome! Salvador also uses a Mac. We’re gaining in numbers...

    joe [10:09 AM] 
    Yeah, for awhile I tried to use my own setup, but it’s much easier to drink the kool-aid and set everything up Neurosim style.  :wink:

    sergio.angulo [10:09 AM] 
    hehehe ok

    joe [10:09 AM] 
    You’ll need to clone all the Neurosim repos also.  See here:

    [10:09]  
    https://docs.google.com/document/d/1t9o_3nuxzZ7lhr7-UW2D15PjCPuwoK3STH8ETpICT7w/edit#heading=h.x5415hvar508

    joe [10:09 AM] 
    shared billl’s file
    Neurosim machines
    Document from Google Drive
    Click to open in Google Drive
    Add Comment

    sergio.angulo [10:15 AM] 
    joe, I change my env to tcsh in terminal at preferences

    [10:16]  
    is that enough? or i need do something else?

    [10:16]  
    *to

    joe [10:16 AM] 
    One sec, lemme look.

    [10:18]  
    So it worked?  When you enter:

    [10:18]  
    echo $SHELL

    sergio.angulo [10:19 AM] 
    not  I have /bin/bash

    joe [10:19 AM] 
    Yeah, I just noticed that I do too.  But I am using tcsh, so I think that’s okay.

    sergio.angulo [10:19 AM] 
    ok

    joe [10:19 AM] 
    You ran: 'chsh -s /usr/bin/tcsh

    [10:20]  
    ?

    [10:20]  
    No quote.

    sergio.angulo [10:20 AM] 
    let me do it

    joe [10:20 AM] 
    So you also need the Neurosim .tcshrc file.

    joe [10:21 AM] 
    uploaded and commented on this file
    .tcshrc
    Binary
    Click to download
    1 Comment
    Joe's .tcshrc file

    sergio.angulo [10:22 AM] 
    I have this 'chsh: /usr/bin/tcsh: non-standard shell'

    joe [10:23 AM] 
    But at the top of your terminal it says tcsh?

    sergio.angulo [10:23 AM] 
    yep

    joe [10:23 AM] 
    uploaded and commented on this image: 20170203_102255.png
    1 Comment
    Should see tcsh at top

    sergio.angulo [10:24 AM] 
    yep, I have it

    joe [10:24 AM] 
    Great, that should be good then.

    [10:24]  
    Copy the .tcshrc file to your home directory and restart your terminal.

    [10:24]  
    I’ve added some useful Mac aliases you can see at the bottom of the .tcshrc file.

    [10:25]  
    For example, “unhide” changes Finder to show hidden dirs and files, which is useful when working with this stuff.

    [10:25]  
    “hide” then rehides the hidden stuff.

    sergio.angulo [10:25 AM] 
    ok I jus did it

    joe [10:26 AM] 
    Great. Try an alias to make sure you’ve got it.

    [10:26]  
    When I enter “eee” it changes dir to /u/graham/projects/eee/sim

    [10:27]  
    You can change that in your .tcshrc to wherever you’re keeping the repo.

    sergio.angulo [10:29 AM] 
    how do i check if an alias is working? I can see the changes in the .tcshrc

    joe [10:29 AM] 
    Enter: eee

    [10:29]  
    It should try to take you to my dir but fail.

    [10:30]  
    Unless you put the repo in the exact same dir

    sergio.angulo [10:30 AM] 
    the repo for eee is in my home dir

    [10:31]  
    but the alias is not working

    joe [10:31 AM] 
    Cool.  What happens when you enter eee?

    sergio.angulo [10:31 AM] 
    it does not recognize the command

    joe [10:32 AM] 
    Hmmm… You put the .tcshrc in your home dir?  (e.g.: cd ~)

    [10:32]  
    And then you quit and restarted Terminal?

    sergio.angulo [10:34 AM] 
    yep .tcshrc is in my home dir. I did restart terminal

    [10:34]  
    but still does not recognize the command

    joe [10:35 AM] 
    Hmmm… Gimme a minute.

    sergio.angulo [10:37 AM] 
    I think I have to save it with the dot

    joe [10:37 AM] 
    Yes, definitely! It starts with a “."

    [10:37]  
    That means it’s a “hidden” file that you normally won’t see in Finder.

    [10:37]  
    Also won’t see it with “ls” unless you do “ls -a"

    joe [10:39 AM] 
    uploaded this image: 20170203_103846.png
    Add Comment

    joe [10:39 AM] 
    Click on Terminal in the top menu bar, then preferences.  Make sure “Shell opens with:” is set to “Command” and that is “/bin/tcsh"

    sergio.angulo [10:43 AM] 
    yep I did it

    joe [10:44 AM] 
    Perfect.  So are the aliases working now?

    sergio.angulo [10:44 AM] 
    and changed tcshrc to .tcshrc

    [10:44]  
    I have this when start terminal: /usr/site/config/csh_defaults: No such file or directory.

    joe [10:47 AM] 
    What happens when you enter:

    [10:47]  
    ls /usr/site/config/

    sergio.angulo [10:47 AM] 
    no such file or directory

    joe [10:48 AM] 
    Ahh, okay. So you still need to set up the Neurosim dirs and clone into them.

    sergio.angulo [10:48 AM] 
    ok I’m going to do that part

    joe [10:48 AM] 
    Yeah, so it should be steps 5 and 6 from here: https://docs.google.com/document/d/1t9o_3nuxzZ7lhr7-UW2D15PjCPuwoK3STH8ETpICT7w/edit#heading=h.785wct7j5xz3

    joe [10:48 AM] 
    shared billl’s file
    Neurosim machines
    Document from Google Drive
    Click to open in Google Drive
    Add Comment

    sergio.angulo [10:55 AM] 
    ok

    joe [11:02 AM] 
    Got that done?

    sergio.angulo [11:03 AM] 
    I tried the 'mkdir -p /usr/site/nrniv’ with sudo

    [11:03]  
    but it didn’t allow me to do the changes

    [11:04]  
    should I move to root user?

    joe [11:04 AM] 
    Forgot about this issue.

    [11:04]  
    Apple has a new SIP (System Integrity Protection) that locks critical dirs and files.

    [11:05]  
    /usr is a critical dir, so you’ll have to temporarily disable SIP to make changes there.

    [11:05]  
    It’s kind of a pain, but shouldn’t have to be done often.

    [11:05]  
    Gimme a sec to find how I did that...

    sergio.angulo [11:05 AM] 
    ok

    joe [11:06 AM] 
    http://osxdaily.com/2015/10/05/disable-rootless-system-integrity-protection-mac-os-x/
    OS X Daily
    How to Disable System Integrity Protection (rootless) in Mac OS X
    Apple has enabled a new default security oriented featured called System Integrity Protection, often called rootless, in Mac OS from versions 10.11 onward. The rootless feature is aimed at preventi… (52KB)
    Oct 5th, 2015 at 11:50 AM

    [11:07]  
    Reboot the Mac and hold down Command + R keys simultaneously after you hear the startup chime, this will boot OS X into Recovery Mode
    When the “OS X Utilities” screen appears, pull down the ‘Utilities’ menu at the top of the screen instead, and choose “Terminal”
    Type the following command into the terminal then hit return:
    csrutil disable; reboot

    You’ll see a message saying that System Integrity Protection has been disabled and the Mac needs to restart for changes to take effect, and the Mac will then reboot itself automatically, just let it boot up as normal

    sergio.angulo [11:08 AM] 
    ok I’ll do it

    joe [11:08 AM] 
    Once you’ve made all the changes to /usr, you can reenable SIP by rebooting into recovery mode and entering “csrutil enable; reboot"

    sergio.angulo [11:20 AM] 
    it is working now!

    joe [11:20 AM] 
    Great!

    [11:21]  
    So now let’s see if the EEE code works.

    [11:21]  
    cd to eee/sim

    [11:21]  
    then enter:

    [11:21]  
    python compile.py

    sergio.angulo [11:22 AM] 
    I have this: Compiling mod files for EEE project.
    Compiling using 'mkmod'...

    /bin/sh: mkmod: command not found
    Compiled folder not found for symlinking...

    Compiling completed.

    joe [11:23 AM] 
    Okay, sounds like it can’t find mkmod… One sec..

    [11:24]  
    In Terminal, enter: which mkmod

    sergio.angulo [11:27 AM] 
    not found

    [11:27]  
    should install NEURON first?

    [11:27]  
    *I

    [11:28]  
    I just the shell to tcsh

    [11:28]  
    change*

    joe [11:29 AM] 
    Yeah, get NEURON installed first, because mkmod needs nrnivmodl (comes with NEURON and compiles mod files).

    sergio.angulo [11:29 AM] 
    perfect

    joe [11:30 AM] 
    Here’s a brief explanation of mkmod: https://docs.google.com/document/d/1kaISS4NhNMVg_IR10yB-MqzcJ01NBkstmiTFr9KEdcg/edit?usp=sharing

    joe [11:30 AM] 
    shared billl’s file
    Compiling NEURON NMODL (.mod) files
    Document from Google Drive
    Click to open in Google Drive
    Add Comment

    sergio.angulo [11:53 AM] 
    Joe, just a question, my machine is not connecting to neurosim, the ssh conection is not working. Do you think I should enable the SIP?

    joe [11:55 AM] 
    I like to be safe, so I leave SIP enabled unless I need to modify something in /usr

    [11:55]  
    What command are you using to ssh?  What is the output?

    sergio.angulo [11:55 AM] 
    ok

    [11:55]  
    ssh

    joe [11:56 AM] 
    Right, but copy and paste the whole line and the output, please.

    sergio.angulo [11:57 AM] 
    just one second and I’ll do it again. I closed terminal.

    [11:58]  
    ssh: connect to host no.neurosim.downstate.edu port 22: Operation timed out

    joe [12:05 PM] 
    Hmmm… Don’t really know what that problem is…  I connect fine with:

    [12:05]  
    ssh no.neurosim.downstate.edu

    joe [12:30 PM] 
    Glad you got that working. I’m gonna grab some lunch, I’ll be back in an hour or so.

    sergio.angulo [12:46 PM] 
    thanks joe! I’m going to go for lunch also

    joe [1:54 PM] 
    Okay, I’m back. Ready to try compiling the eee mod files?

    [1:54]  
    cd eee/sim

    [1:54]  
    python compile.py

    sergio.angulo [1:59 PM] 
    Joe, I still need to finish the installation of NEURON

    joe [1:59 PM] 
    No worries. Let me know when you’re ready.

    sergio.angulo [1:59 PM] 
    but my personal computer is blocked from no.neurosim

    new messages
    [1:59]  
    I sent a message to larry

    [2:00]  
    so I need to wait for him

    [2:00]  
    ok

    [2:00]  
    I’ll let you know

** Updating documentation

Bill put together a nice script to update (hg pull -u) all of the Neurosim repos:
/usr/site/scripts/nsimpull

    #!/bin/tcsh -f
    foreach aa ('/usr/site/nrniv/local' '/usr/site/nrniv/simctrl' '/usr/site/scripts' '/usr/site/config' '/usr/site/site-lisp')
      echo pulling in $aa
      (cd $aa; hg pull -u)
    end

I'll add reference to it in a Welcome to Neurosim document I'll create now.

Neurosim Operations Manual -- one organized place for the wiki info:
https://docs.google.com/document/d/1mM1KlucucOYUYDGSP4GSP0A0zqUEKdfwOYt-Tu5jO28/edit?usp=sharing


* 2017-02-06 -- Using batch processing to explore parameters, helping Sergio

** Goals for today
Implement Netpyne's batch capabilities for EEE
Work on dendritic "glutamate plateaus"

** Batch processing

Working with Sal's NetPyne batch module to use batch simulations for EEE.

Added a batchdata dir to eee/sim dir. 
Changed references in other files.

Copying the following files from /u/graham/netpyne/examples/batchCell/ to eee/sim/
    netParams.py
    cfg.py
    runbatch
    init.py --> batch_init.py
    batch.py
    analysis.py --> batch_analysis.py
    utils.py

Changed all references to new names.

Everything seems to run.  Will commit now.


** Helping Sergio get up to speed

    sergio.angulo [1:41 PM] 
    ok Joe,  I started with compile.py

    [1:41]  
    and it worked

    joe [1:45 PM] 
    That’s great!

    [1:46]  
    Next you should run init.py and then sim.py to make sure they are working for you.

    [1:46]  
    execfile(”init.py”)

    [1:46]  
    execfile(”sim.py”)

    sergio.angulo [1:50 PM] 
    added this Plain Text snippet
    Traceback (most recent call last):
      File "sim.py", line 16, in <module>
        spi6 = initcell("SPI6")
    NameError: name 'initcell' is not defined
    Add Comment

    sergio.angulo [1:50 PM] 
    I had that output with sim.py

    joe [1:52 PM] 
    You need to run init.py first, as that script loads the functions into Python (”initcell” is a function in init.py).

    sergio.angulo [1:54 PM] 
    should i run the files like: python init.py

    [1:54]  
    I also used the execfile  but it didn't work

    joe [1:54 PM] 
    For development purposes, I always work interactively in iPython.

    [1:55]  
    Open a new terminal and try running the following commands:

    [1:55]  
    ipython -i

    [1:55]  
    execfile(”init.py”)

    [1:55]  
    execfile(”sim.py”)

    sergio.angulo [1:56 PM] 
    I’m trying to work on neurosim, but ipython is not installed

    joe [1:56 PM] 
    Really?  Huh.  Let me take a look.

    [1:57]  
    Just tried on “no” and iPython is installed there…  Where are you running stuff?

    sergio.angulo [1:58 PM] 
    now is working

    [1:58]  
    sorry about it

    [1:59]  
    I misspelled ipython

    joe [2:00 PM] 
    Hahaha! No worries.

    [2:00]  
    So sim.py should generate figures that show up in eee/output

    [2:01]  
    Did those get produced?

    sergio.angulo [2:01 PM] 
    on ipython I have an error message

    sergio.angulo [2:01 PM] 
    added this Plain Text snippet
    execfile(”init.py”)
      File "<ipython-input-1-b457a5597eeb>", line 1
        execfile(”init.py”)
    Add Comment

    joe [2:02 PM] 
    Hmmm… Those quotes look funny… Try typing it in yourself and let me know what happens.

    sergio.angulo [2:03 PM] 
    ok it worked!

    joe [2:03 PM] 
    :+1:

    sergio.angulo [2:04 PM] 
    added this Plain Text snippet
    Running EEE simulations from sim.py
    Loading model cells
    ---------------------------------------------------------------------------
    AttributeError                            Traceback (most recent call last)
    <ipython-input-5-f5385184fc31> in <module>()
    ----> 1 execfile("sim.py")
    /u/sergioangulo/projects/eee/eee/sim/sim.py in <module>()
         15 print("Loading model cells")
         16 spi6 = initcell("SPI6")
    ---> 17 spi7a = initcell("SPI7")
         18 
         19 # Add spike time recording to the cells
    /u/sergioangulo/projects/eee/eee/sim/init.py in initcell(modelname)
         35         """Imports a model cell ("SPI6" or "SPI7") and returns an instance."""
         36 
    ---> 37         cellclass = getattr(importlib.import_module("cells." + modelname), modelname)
         38         instance = cellclass()
         39 
    AttributeError: 'module' object has no attribute 'SPI7'
    Add Comment Collapse

    sergio.angulo [2:04 PM] 
    this is with sim.py

    joe [2:05 PM] 
    Give me a couple minutes to look into this...

    joe [2:12 PM] 
    Okay, I may have fixed the problem. Try updating the repo and running again.

    [2:12]  
    hg pull

    [2:12]  
    hg update

    sergio.angulo [2:15 PM] 
    it’s running

    sergio.angulo [2:16 PM] 
    added this Plain Text snippet
    execfile("sim.py")
    Running EEE simulations from sim.py
    Loading model cells
    Loading experimental data
    Running stim pulse series
    Add Comment

    joe [2:16 PM] 
    Good. Should take a minute or so, and then figures should appear in eee/putput

    [2:16]  
    output

    sergio.angulo [2:20 PM] 
    I can’t see the output joe

    [2:20]  
    is it on a new dir on eee?

    joe [2:22 PM] 
    If you are in eee/sim, try cd ../output

    [2:25]  
    I think I see the problem… eee/output is an empty directory, and it seems that Hg doesn’t track empty dirs.  Give me a moment.

    new messages
    sergio.angulo [2:25 PM] 
    added this Plain Text snippet
    TclError                                  Traceback (most recent call last)
    <ipython-input-2-f5385184fc31> in <module>()
    ----> 1 execfile("sim.py")
    /u/sergioangulo/projects/eee/eee/sim/sim.py in <module>()
         33 
         34 print("Running stim pulse series")
    ---> 35 output = stim_pulse_series([spi6, spi7], amps=expamps, delay=500, dur=1000, tstop=2000, plotind=False, plotall=True, plotfi=True, cols=4, expname="BS0284", expdata=expdata, samprate=expsamp, save=True)
         36 
         37 print("Analysis in sim.py completed")
    /u/sergioangulo/projects/eee/eee/sim/init.py in stim_pulse_series(cells, amps, delay, dur, tstop, plotind, plotall, plotfi, cols, expname, expdata, samprate, save)
        236         # Plot the trace data for every amplitude on one figure
        237         if plotall:
    --> 238                 fig = plt.figure() #figsize=(8,12))
        239                 numplots = len(amps)
        240                 cols = cols
    /usr/lib/pymodules/python2.7/matplotlib/pyplot.pyc in figure(num, figsize, dpi, facecolor, edgecolor, frameon, FigureClass, **kwargs)
        421                                         frameon=frameon,
        422                                         FigureClass=FigureClass,
    --> 423                                         **kwargs)
        424 
        425         if figLabel:
    /usr/lib/pymodules/python2.7/matplotlib/backends/backend_tkagg.pyc in new_figure_manager(num, *args, **kwargs)
         77     FigureClass = kwargs.pop('FigureClass', Figure)
         78     figure = FigureClass(*args, **kwargs)
    ---> 79     return new_figure_manager_given_figure(num, figure)
         80 
         81 
    /usr/lib/pymodules/python2.7/matplotlib/backends/backend_tkagg.pyc in new_figure_manager_given_figure(num, figure)
         85     """
         86     _focus = windowing.FocusManager()
    ---> 87     window = Tk.Tk()
         88     window.withdraw()
         89 
    /usr/lib/python2.7/lib-tk/Tkinter.pyc in __init__(self, screenName, baseName, className, useTk, sync, use)
       1765                 baseName = baseName + ext
       1766         interactive = 0
    -> 1767         self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)
       1768         if useTk:
       1769             self._loadtk()
    TclError: no display name and no $DISPLAY environment variable

    Add Comment Collapse

    sergio.angulo [2:26 PM]  
    ok

    joe [2:27 PM]  
    Ahh, well that’s actually a different problem.

    [2:27]  
    You don’t have a DISPLAY set up.

    [2:27]  
    What machine are you on?

    [2:28]  
    Are you using x2go or ssh or what?

    sergio.angulo [2:28 PM]  
    no

    [2:28]  
    ssh

    [2:29]  
    that one doesn’t have graphic env

    joe [2:30 PM]  
    Try reconnecting with: ssh -Y no.neurosim.downstate.edu

    [2:32]  
    The -Y enables trusted X11 forwarding

    [2:32]  
    http://stackoverflow.com/questions/13425820/difference-between-ssh-x-and-ssh-y
     stackoverflow.com
    difference between SSH -X and ssh -Y
    I was SSH'ing into a server by running a code like this: ssh serverUser@serverIP "./runServer" & on the very next line of the script when I started a VM at the client and wrote startX on it, it 
     
     

    sergio.angulo [2:32 PM]  
    ic

    sergio.angulo [2:37 PM]  
    it’s running the simulations

    joe [2:39 PM]  
    Great. When it’s done, enter plt.show()

    [2:39]  
    And the figures should appear on your screen.

    sergio.angulo [2:43 PM] 
    perfect

    sergio.angulo [2:44 PM] 
    uploaded this image: sim_eee_joe.png
    Add Comment

    joe [2:44 PM] 
    Great!

    sergio.angulo [2:44 PM] 
    I had the figs

    joe [2:44 PM] 
    Now, is there the dir “output” in the dir “eee”?

    [2:46]  
    There’s probably not. I guess Hg doesn’t track empty dirs.

    sergio.angulo [2:46 PM] 
    nop

    joe [2:46 PM] 
    Let me make a quick fix...

    sergio.angulo [2:46 PM] 
    should i update the folder?

    joe [2:46 PM] 
    Give me a couple minutes...

    sergio.angulo [2:47 PM] 
    ok

    joe [2:49 PM] 
    Hg doesn't seem to track empty dirs, so 'output' is now created in init.py if it doesn't exist.

    [2:50]  
    I pushed it to Neurosim, so pull and update again, then try sim.py again, please.

    sergio.angulo [2:50 PM] 
    ok

    joe [2:56 PM] 
    By the way, if you don’t want to type plt.show() every time there are figures, you can enter plt.ion() before doing anything else.

    [2:57]  
    “ion” means “interactive on” and then plotting won’t stop the code from running.

    sergio.angulo [3:00 PM] 
    ok I’ll try that one the next time

    sergio.angulo [3:05 PM] 
    uploaded this image: eee_sim_joe2.png
    Add Comment

    sergio.angulo [3:05 PM] 
    ok now I can see the oupput

    joe [3:05 PM] 
    Great, so everything should be working now.

    sergio.angulo [3:06 PM] 
    great

    joe [3:06 PM] 
    Right now I am working on using Sal’s Netpyne batch capabilities to run batch simulations in EEE to explore parameter values.

    [3:07]  
    For you, it might be a good idea to do a couple tutorials now.

    sergio.angulo [3:07 PM] 
    the ones for NEURON?

    joe [3:07 PM] 
    I’d recommend the Robert’s Neuron+Python tutorial and Sal’s Netpyne tutorial.

    sergio.angulo [3:07 PM] 
    perfect

    [3:08]  
    I’ll do that joe

    joe [3:08 PM] 
    http://neuron.yale.edu/neuron/static/docs/neuronpython/index.html

    sergio.angulo [3:08 PM] 
    thanks for your help and patience

    joe [3:08 PM] 
    http://www.neurosimlab.org/netpyne/tutorial.html

    [3:08]  
    No worries at all.

    [3:09]  
    I would also recommend actually reading through the EEE code to get a feel for it.  Feel free to ask any questions that come up.

    sergio.angulo [3:09 PM] 
    ok joe

    [3:10]  
    I will start with the tutorials

    joe [3:10 PM] 
    Sounds good. Let me know when you’re ready to dive into EEE with some coding.


* 2017-02-07 -- Batch simulations and project meeting

** Goals for today
Finish fixing up batch code to work with EEE 
Run batch simulations of varying NMDA time constants
Project meeting

** Batch simulations

eee/sim/batch.py 
Will be the location for all the specific batches to be run in EEE

This code calls for netParams.py and cfg.py
Will make those EEE-specific now.

Added cfg.tau2NMDA = 150 to cfg.py so that we can vary it in batch sims

Added recording from Bdend1:
cfg.recordTraces['V_Bdend1'] = {'sec': 'Bdend1', 'loc': 0.5, 'var': 'v'}}

Now attempting to access V_Bdend1.  Seems to work!

Here's a plot of the EPSP at the soma:
file:gif/20170207_110251.png

And here's a plot of EPSP at Bdend1:
file:gif/20170207_110304.png

Hmmm...  Weird that EPSP is higher at soma than in Bdend1...  Where is the synapse?
It's at the soma, so that explains it.
In cfg.py -- changing line 79 from:
    cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'soma', 'loc': 0.5, 'synMech': 'NMDA', 'start': 500, 
        'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': 0.0, 'delay': 1}
To:
    cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': 0.25, 'synMech': 'NMDA', 'start': 500, 
        'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': 0.0, 'delay': 1}

Moved synapse location to 0.25 in Bdend1, and recording location to 0.25 as well.


Need to be able to alter tau2NMDA in batches.
Changed line 55 in netParams.py from:
    netParams.synMechParams['NMDA'] = {'mod': 'MyExp2SynNMDABB', 'tau1NMDA': cfg.tau1NMDA, 'tau2NMDA': 150, 'e': 0}
To:
    netParams.synMechParams['NMDA'] = {'mod': 'MyExp2SynNMDABB', 'tau1NMDA': cfg.tau1NMDA, 'tau2NMDA': cfg.tau2NMDA, 'e': 0}

Ran a batch varying tau2NMDA instead of tau1NMDA.  Doesn't really affect EPSP amplitude much.
file:gif/20170207_122510.png

Increased weight of connection to see EPSPs better.  Looking somewhat plateau-like!
file:gif/20170207_124414.png

At a weight of 0.08, we start to see spiking:
file:gif/20170207_124500.png

Will set weight at 0.05 for now, which gives an EPSP of around 10mV, similar to Srdjan's lowest stim response.

Now to work on measuring plateau duration as a function of tau2NMDA.

** Project meeting

Put NMDA synapse at 0.75 of basal dendrite
Srdjan expects plateaus of about 45 mV in dendrites which drops to 20mV in soma
Increasing Ra (more input resistance) or decreasing Rm (leakier) in basal dendrites will lead to this
Plan to replicate Srdjan's complete figure for next meeting in two weeks


* 2017-02-08 -- Batch simulations, plateau generation

** Goals for today
Develop batch and analysis code for exploring plateaus
Expore parameters: synapse location, NMDA, AMPA, Dend Ra and Rm

** Batch simulations

*** Chat with Sal
salvadord [2:17 PM] 
hey joe so just to clarify, you can add any arbitrary num of params (including 1) to batch

[2:17]  
so can do eg.  b = createBatch({'dendNa': [0.025, 0.03, 0.035, 0.4]})

[2:18]  
what you will need to modify is really just the analysis part

*** Parameters to vary

synapse location: 0.5, 0.75, 1.0
NMDA gmax: 5 values
dend Ra: 3 values

**** Made changes to netParams.py:

    Added a basal dendrite secList (line 39):
        cellRule['secLists']['basaldend'] = ['Bdend1', 'Bdend2']

    Modified Ra in basal dendrites (lines 45-46):
        for secName,sec in cellRule['secs'].iteritems(): 
            sec['vinit'] = -75.0413649414  # set vinit for all secs
            if secName in cellRule['secLists']['alldend']:  
                sec['mechs']['nax']['gbar'] = cfg.dendNa  # set dend Na gmax for all dends
            if secName in cellRule['secLists']['basaldend']:
                sec.Ra = cfg.BdendRa

**** Made changes to cfg.py

    Added parameters to vary to cfg.py (lines 65-66):
        cfg.synloc = 0.75
        cfg.BdendRa = 114.510490019

    Changed Netstim loc to cfg.synloc (lines 85-86):
        cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': cfg.synloc, 'synMech': 'NMDA', 'start': 500,            'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': 0.0, 'delay': 1}

**** Added new batch to batch.py (starts line 52):
    
    def eee_batch01():
        """Batch simulations varying NMDA syn loc, NMDA gmax, and Bdend Ra."""
        
        b = createBatch({'synloc': [0.25, 0.5, 0.75],
                      ('NetStim1', 'weight'): list(np.arange(1.0, 10.0, 1.0)/1e2),
                      'BdendRa': list(np.arange(0.8, 1.3, 0.1)*114.510490019)})
        runBatch(b, 'eee_batch01')

*** Can run this batch from eee/sim by entering ./runbatch [num processors]

Will now attempt to run on Neurosim zn
Seems to have worked

*** Working on plotting max voltage for each simulation

**** Added the following to batch_analysis.py:

    def plotmaxvolts(dataFolder, batchLabel, params, data):
        """Plots the maximum voltage from each sim against the parameters."""

        Pvals = params[0]['values']
        Ivals = params[1]['values']
        Pvalsdic = {val: i for i,val in enumerate(Pvals)}
        Ivalsdic = {val: i for i,val in enumerate(Ivals)}

        maxvolts = [[0 for x in range(len(Pvals))] for y in range(len(Ivals))] 
        
        for key, d in data.iteritems():
            
            cellLabel = d['simData']['V_soma'].keys()[0]
            vsoma = d['simData']['V_'+somaLabel][cellLabel]
            maxvolt = max(vsoma)

And:

    def readplotmaxvolts():
        dataFolder = 'batch_data'
        batchLabel = 'eee_batch01'
        
        params, data = utils.readBatchData(dataFolder, batchLabel, loadAll=0, saveAll=1, vars=None, maxCombs=None) 
        plotmaxvolts(dataFolder, batchLabel, params, data)
        return data

And:

    if __name__ == '__main__':
        readplotmaxvolts()

**** Can run from eee/sim in iPython by entering: execfile("batch_analysis.py")

But the following error occurs:

    ---------------------------------------------------------------------------
    IndexError                                Traceback (most recent call last)
    <ipython-input-1-09eb45b6fb8a> in <module>()
    ----> 1 execfile("batch_analysis.py")

    /u/graham/projects/eee/sim/batch_analysis.py in <module>()
        243 if __name__ == '__main__':
        244 
    --> 245     readplotmaxvolts()
        246     #readPlotNa()
        247     #readPlotNMDA()

    /u/graham/projects/eee/sim/batch_analysis.py in readplotmaxvolts()
        210 
        211     params, data = utils.readBatchData(dataFolder, batchLabel, loadAll=0, saveAll=1, vars=None, maxCombs=None)
    --> 212     plotmaxvolts(dataFolder, batchLabel, params, data)
        213     return data
        214 

    /u/graham/projects/eee/sim/batch_analysis.py in plotmaxvolts(dataFolder, batchLabel, params, data)
         29     for key, d in data.iteritems():
         30 
    ---> 31         cellLabel = d['simData']['V_soma'].keys()[0]
         32         vsoma = d['simData']['V_'+somaLabel][cellLabel]
         33         maxvolt = max(vsoma)

    IndexError: list index out of range

**** Contacted Sal to ask about this problem.

    salvadord [8:16 PM] 
    It might be that your are not recording the voltage trace

    [8:17]  
    Check cfg.py and/or the output jaon files to make sure its being recorded and saved

    [8:18]  
    If its there it might be that you are not reading it properly

    [8:18]  
    If you give me a pointer I can check


* 2017-02-09 -- Batch simulations, plateau generation

** Goals for today
Further develop batch and analysis code for exploring plateaus
Expore parameters: synapse location, NMDA, AMPA, Dend Ra and Rm

** Working on getting max voltage out of batch analyses

*** Added a function to batch_analysis.py to load json data:

    def load_json(filename):
        """Loads a json file into Python and pretty prints it."""
        with open(filename) as data_file:
            data = json.load(data_file)
            pprint(data)
            return data

*** Checking to see if voltage traces were recorded.  First look at cfg.

Having trouble accessing voltage traces yesterday.
Sal recommended ensuring the voltage traces were actually recorded.
He said to look into a cfg file and a data file.

    cd("/u/graham/projects/eee/sim/batch_data/eee_batch01")
    cfg0 = load_json("eee_batch01_0_0_0_cfg.json")

The output has the following, so voltage traces should have been recorded:

                u'recordTraces': {u'V_Bdend1': {u'loc': 0.75,
                                                u'sec': u'Bdend1',
                                                u'var': u'v'},
                                  u'V_Bdend2': {u'loc': 0.75,
                                                u'sec': u'Bdend2',
                                                u'var': u'v'},
                                  u'V_soma': {u'loc': 0.5,
                                              u'sec': u'soma',
                                              u'var': u'v'}},

*** Checking to see if voltage traces were recorded.  Now look at a data file.

    data0 = load_json("eee_batch01_0_0_0.json")

The output has the following:

    u'simData': {u'V_Bdend1': {},
                 u'V_Bdend2': {},
                 u'V_soma': {},
                 u'avgRate': 0,
                 u'popRates': {u'PT5B': 0.0},
                 u'spkid': [],
                 u'spkt': []}}

So it looks like the voltages were not recorded...

*** Will contact Sal again.


    joe [8:27 AM] 
    So I looked at the cfg file, and it looks like voltage traces should have been recorded...

    joe [8:28 AM] 
    added and commented on this Shell snippet
                    u'recordTraces': {u'V_Bdend1': {u'loc': 0.75,
                                                    u'sec': u'Bdend1',
                                                    u'var': u'v'},
                                      u'V_Bdend2': {u'loc': 0.75,
                                                    u'sec': u'Bdend2',
                                                    u'var': u'v'},
                                      u'V_soma': {u'loc': 0.5,
                                                  u'sec': u'soma',
                                                  u'var': u'v'}},
    1 Comment Collapse
    from cfg json file

    joe [8:28 AM] 
    But when I look at the actual data file, it looks like the traces weren’t recorded...

    joe [8:28 AM] 
    added and commented on this Shell snippet
        u'simData': {u'V_Bdend1': {},
                     u'V_Bdend2': {},
                     u'V_soma': {},
                     u'avgRate': 0,
                     u'popRates': {u'PT5B': 0.0},
                     u'spkid': [],
                     u'spkt': []}}
    1 Comment Collapse
    from data json file

    joe [8:31 AM] 
    I updated on Neurosim, so you can execute: /u/graham/projects/eee/sim/batch_analysis.py

    [8:32]  
    I’m trying to implement a simple analysis to pull the max voltage out of traces...

    salvadord [8:37 AM] 
    did you select which cells to record from?

    joe [8:37 AM] 
    Hmmm… Probably not! How do I do that?

    salvadord [8:37 AM] 
    can you paste the cfg file here in a snippet?

    [8:38]  
    there 2 ways to do it:

    [8:38]  
    1) cfg.recordCells = [‘PT5B']

    joe [8:38 AM] 
    added this Python snippet: cfg.py
    """
    cfg.py 
    ​
    Simulation configuration 
    ​
    Contributors: salvadordura@gmail.com
    """
    ​
    from netpyne import specs
    ​
    cfg = specs.SimConfig()  
    ​
    ###############################################################################
    #
    # SIMULATION CONFIGURATION
    #
    ###############################################################################
    ​
    ###############################################################################
    # Run parameters
    ###############################################################################
    cfg.duration = 1.0*1e3 
    cfg.dt = 0.05
    cfg.seeds = {'conn': 4321, 'stim': 1234, 'loc': 4321} 
    cfg.hParams = {'celsius': 34, 'v_init': -80}  
    cfg.verbose = 0
    cfg.cvode_active = False
    cfg.printRunTime = 0.1
    cfg.printPopAvgRates = True
    ​
    ​
    ###############################################################################
    # Recording 
    ###############################################################################
    cfg.recordTraces = {'V_soma': {'sec': 'soma', 'loc': 0.5, 'var': 'v'}}
    cfg.recordTraces['V_Bdend1'] = {'sec': 'Bdend1', 'loc': 0.75, 'var': 'v'}
    cfg.recordTraces['V_Bdend2'] = {'sec': 'Bdend2', 'loc': 0.75, 'var': 'v'}
    cfg.recordStims = False  
    cfg.recordStep = 0.1 
    ​
    ​
    ###############################################################################
    # Saving
    ###############################################################################
    cfg.simLabel = 'sim1'
    cfg.saveFolder = 'batch_data'
    cfg.savePickle = False
    cfg.saveJson = True
    cfg.saveDataInclude = ['simData', 'simConfig', 'netParams', 'net']
    ​
    ​
    ###############################################################################
    # Analysis and plotting 
    ###############################################################################
    #cfg.analysis['plotTraces'] = {'include': ['PT5B'], 'oneFigPer': 'cell', 'saveFig': True, 
    #               'showFig': False, 'figSize': (10,8), 'timeRange': [0,cfg.duration]}
    ​
    ​
    ###############################################################################
    # Parameters
    ###############################################################################
    cfg.dendNa = 0.0345117294903
    cfg.tau1NMDA = 15
    cfg.tau2NMDA = 150
    cfg.synloc = 0.75
    cfg.BdendRa = 114.510490019
    ​
    ​
    ###############################################################################
    # Current inputs 
    ###############################################################################
    cfg.addIClamp = 1
    ​
    cfg.IClamp1 = {'pop': 'PT5B', 'sec': 'soma', 'loc': 0.5, 'start': 1, 'dur': 1000, 'amp': 0.0}
    ​
    ​
    ###############################################################################
    # NetStim inputs 
    ###############################################################################
    cfg.addNetStim = 1
    ​
    #cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'soma', 'loc': 0.5, 'synMech': 'NMDA', 'start': 500, 
    #        'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': 0.0, 'delay': 1}
    ​
    cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': cfg.synloc, 'synMech': 'NMDA', 'start': 500,            'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': 0.0, 'delay': 1}
    ​
    ​
    Add Comment Collapse

    salvadord [8:38 AM] 
    2) including it in the plotTraces args: cfg.analysis['plotTraces'] = {'include': [‘PT5B’], …}

    joe [8:39 AM] 
    Ahhh, I commented out plotTraces because Bill recommended not having figures produced by big batch runs...

    salvadord [8:39 AM] 
    you can check the netpyne reference for different ways of specifying cells, but in this case just one, so can just add the pop name, or eve by gid, e.g. [0]

    [8:39]  
    @commented - yeah, thats why

    joe [8:40 AM] 
    Thanks, let me try uncommenting.

    salvadord [8:40 AM] 
    if you don’t want to save fig probably better to use: cfg.recordCells = [‘PT5B']

    joe [8:41 AM] 
    Okay, I’ll try that instead.

*** Will include the following in cfg.py: cfg.recordCells = [‘PT5B']

*** Everything seems to be working now except plotting and saving data

Here's the relevant code:


    def readplotmaxvolts():
        dataFolder = 'batch_data'
        batchLabel = 'eee_batch01'
        
        params, data = utils.readBatchData(dataFolder, batchLabel, loadAll=0, saveAll=1, vars=None, maxCombs=None) 
        maxvolts, (xvals, yvals, zvals) = plotmaxvolts(dataFolder, batchLabel, params, data)
        return maxvolts, (xvals, yvals, zvals)


    def plotmaxvolts(dataFolder, batchLabel, params, data):
        """Plots the maximum voltage from each sim against the parameters."""

        xvals = params[0]['values']
        yvals = params[1]['values']
        zvals = params[2]['values']
        xvalsdic = {val: i for i,val in enumerate(xvals)}
        yvalsdic = {val: i for i,val in enumerate(yvals)}
        zvalsdic = {val: i for i,val in enumerate(zvals)}

        print("xvals:")
        print xvals
        pprint(xvalsdic)
        print("yvals:")
        print yvals
        pprint(yvalsdic)
        print("zvals:")
        print zvals
        pprint(zvalsdic)


        maxvolts = [[[0 for z in range(len(zvals))] for y in range(len(yvals))] for x in range(len(xvals))]
        #maxvolts = [[[0 for x in range(len(xvals))] for y in range(len(yvals))] for z in range(len(zvals))]
        print
        print("maxvolts shape:" + str(np.shape(maxvolts)))
        print
        
        for key, d in data.iteritems():
            
            cellLabel = d['simData']['V_soma'].keys()[0]
            print
            print("Cell label: " + cellLabel)
            print
            #vsoma = d['simData']['V_'+somaLabel][cellLabel]
            vsoma = d['simData']['V_soma'][cellLabel]
            maxvolt = max(vsoma)
            
            xindex = xvalsdic[d['paramValues'][0]]
            yindex = yvalsdic[d['paramValues'][1]]
            zindex = zvalsdic[d['paramValues'][2]]
            
            print
            print d['paramValues']
            print("x index: " + str(xindex))
            print("y index: " + str(yindex))
            print("z index: " + str(zindex))
            print("maxvolt = " + str(maxvolt))
            print

            maxvolts[xindex][yindex][zindex] = maxvolt

        return (xvals, yvals, zvals), maxvolts

Which returns:
(xvals, yvals, zvals), maxvolts

Will commit now and then work on slicing the data and plotting. 
changeset:   67:81b7adb4e861

Ignore last changeset, there was a minor bug I fixed.
changeset:   68:a8a724530f64

*** Plotting

Easy way to access Netpyne batch data:
    data[key]['simData']['V_soma']['cell_0']

Where key is string concatenation of indices separated by ‘_’ (eg. ‘_3_5_1’) 
— also output filename coincides with batchLabel plus this key (eg. ‘batch1_3_5_1’)

Created more generic plotting code for 2 parameters with a scalar measure:

    def plotscalar2(meas, par1vals, par2vals, title=None, measlabel=None, par1label=None, par2label=None):
        """Given a 2D array of measures (meas) and two lists of parameter values 
        (par1vals and par2vals), plot the measures against the parameter values."""
        
        if measlabel is None:
            ylabel = "Outcome Measure"
        else:
            ylabel = measlabel
        if par2label is None:
            xlabel = "Parameter 2 Values"
        else:
            xlabel = par2label
        if par1label is None:
            legendtitle = "Parameter 1 values"
        else:
            legendtitle = par1label
        if title is None:
            title = ylabel + " vs " + xlabel + " by " + legendtitle

        fig = plt.figure()
        handles = plt.plot(meas, marker='o', markersize=10)
        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        plt.xticks(range(len(par2vals))[::2], par2vals[::2])
        plt.legend(handles, par1vals, title = legendtitle, loc=2)
        plt.title(title)
        plt.show()

        return fig

** Communication with Srdjan

*** Email from Joe:

    Dear Srdjan,

    I have attached a figure of voltage traces from a batch simulation we are now running to explore parameter values.

    Bill chose the particular simulation more or less at random, I think.  The parameter/values are:

    synaptic location: 0.75 down basal dendrite
    synaptic weight: 0.06
    basal Ra: 1.0 * Default

    Looks a bit strange at the synapse site, but I increased the weight by a factor of 100 to ensure spikes.  That's probably too high.  We still need to add an AMPA synapse to the NetStim, which would contribute to a better plateau.  We'll set it up to run shorter simulations than we have now.

    Bill asked me to send you this and let you know we have 100+ more across the parameter space.

    Cheers,
    Joe

*** Attached figure:
original name: eee_batch01_2_5_2_traces.png
file:gif/20170210_090922.png

*** Response from Srdjan:

    Hi Joe,

    The trace you displayed today is very promising. Great job!

    "Looks a bit strange at the synapse site".  I disagree. It looks very good at the input site.

    *

    In future simulations, please try to match the following:

    1. You have too much Na conductance in basal dend. Your initial sodium spike is too big at input site. Its amplitude should be reduced drastically at the input site. It is a Na spikelet, not a Na spike at input site.

    2. The backpropagating AP can be seen during the plateau phase of the dendritic plateau potential in your trace. They look very natural to me - their amplitudes and waveforms match my recordings of this phenomenon. Of course, in some recordings bAP are smaller than yours. 

    3. In the somatic trace, currently the rise phase of plateau depolarization is slower than in real neurons.

    4. In the somatic trace, currently the plateau depolarization amplitude is a couple of mV smaller than in majority of real neurons. This is probably because of the distance 0.75.

    5. In the somatic trace, the plateau phase could last 50 ms after the last AP (to make these traces look very natural). Remember my figure, which you posted on slack and we discussed on Tuesday.  

    Overall, I am very encouraged by the latest traces.

    Thanks,
    Srdjan


    Srdjan D. Antic, M.D.
    UConn Health
    (860) 679-8468
    http://antic.uchc.edu/


* 2017-02-10 -- Batch simulations, plateau generation

** Goals for today
Finish plotting code for batches
Further develop batch and analysis code for exploring plateaus
Expore parameters: synapse location, NMDA, AMPA, Dend Ra and Rm


** Plotting batch parameters

Finished the code to plot any two parameters from a batch:

file:gif/20170210_103304.png
file:gif/20170210_103346.png

But because the param dict isn't ordered, the params aren't guaranteed to be what you think they are.
See how the axes are mislabelled in these:

file:gif/20170210_103537.png
file:gif/20170210_103556.png

I am going to try an orderedDict for entering the parameters...

That works!  I also added tha ability to swap axes for comparison of any two parameters.

*** Here's the plotting code now:

    def plotscalar2(meas, par1vals, par2vals, title=None, measlabel=None, par1label=None, par2label=None, swapaxes=False):
        """Given a 2D array of measures (meas) and two lists of parameter values 
        (par1vals and par2vals), plot the measures against the parameter values."""
        
        if swapaxes:
            par1vals, par2vals = par2vals, par1vals
            par1label, par2label = par2label, par1label
            meas = np.swapaxes(meas, 0, 1)

        if measlabel is None:
            ylabel = "Outcome Measure"
        else:
            ylabel = measlabel
        if par2label is None:
            xlabel = "Parameter 2 Values"
            if swapaxes: xlabel = "Parameter 1 values"
        else:
            xlabel = par2label
        if par1label is None:
            legendtitle = "Parameter 1 values"
            if swapaxes: legendtitle = "Parameter 2 values"
        else:
            legendtitle = par1label
        if title is None:
            title = ylabel + " vs " + xlabel + " by " + legendtitle

        fig = plt.figure()
        handles = plt.plot(meas, marker='o', markersize=10)
        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        plt.xticks(range(len(par2vals))[::2], par2vals[::2])
        plt.legend(handles, par1vals, title = legendtitle, loc=2)
        plt.title(title)
        plt.show()

        return fig

*** Figures of swapping axes

Somatic EPSP amplitude versus NMDA tau2 and synaptic weight
(actually shows spike amplitudes also -- weight is set quite high, so there's spiking)
file:gif/20170210_121424.png

Somatic EPSP amplitude versus NMDA tau1 and synaptic weight
file:gif/20170210_121512.png

Doesn't really make sense to swap axes on fI curve, but here it is.
Spiking frequency versus somatic current injection and DendNa
file:gif/20170210_121926.png


*** Will commit now, push to Neurosim, and run there as well.

** Measuring 

Things to measure:
plateau duration
plateau height
number of spikes
F1 (frequency of spike 1 and 2)
F (overall frequency)

** Made lots of improvements. Will document on Monday.


* 2017-02-13 -- Fixing and Documenting and Plotting

** Goals for today
Ensure code runs in parallel
Document batch code and batch analysis/figures
Develop voltage trace plot for any chosen batch sim
Explore parameters: synapse location, NMDA, AMPA, Dend Ra and Rm


** Ensure code runs in parallel

Running locally: ./runbatch 4
  Creates cfg files for second batch (tau2NMDA_stimamp)
  Freezes up before running second batch
  batchLabel_batchScript.py is messed up for both batches (related?)

Running on my.neurosim: ./runbatch 10
  Creates cfg files for second batch (tau2NMDA_stimamp)
  Freezes up before running second batch
  batchLabel_batchScript.py is messed up for both batches

Will disable second batch, delete data, and try again.

Still gets frozen up after generating second batch cfg files, before running sims.

Disabling new second batch, will run again.

Same problem.  Will ask Sal for help.

    I am having a weird problem with Netpyne batching...  If I run "./runbatch 1" in eee/sim, all of the batches get completed just fine.  If I use any more than 1, then the batching freezes up after creating the cfg files for the second batch (before running the sims).  On a perhaps related note, all the "batchLabel_batchScript.py" files come out mostly gibberish. Any ideas?  This happens on my local machine and on Neurosim.

*** Slack chat:

    salvadord [10:37 AM] 
    maybe you are using an old netpyne version — check `from netpyne import sim; sim.version()`  — should be 0.6.7

    [10:39]  
    oh wait, I see you what you mean — you are trying to run multiple batches from same script — I’ve never tried that before

    [10:42]  
    a batch of batches — probably some issue related to the ParallelContext bulletin board (master/slave) not resetting properly between batches

    joe [10:42 AM] 
    Yeah, I’m running 0.6.7

    salvadord [10:44 AM] 
    yeah, I reproduced your error — the netpyne Batch class was basically designed to run a single batch at a time — eg. at the end of the run() method it calls pc.done() to close ParallelContext

    [10:46]  
    lms if easy to fix — I’ll try with a simple example

    joe [10:46 AM] 
    Great, yeah it seems like it’d be useful to be able to run more than one from a script.

    [10:46]  
    “batchLabel_batchScript.py”

    joe [10:47 AM] 
    uploaded this file
    dendNa_stimamp_batchScript.py
    Python
    Click to download
    Add Comment

    salvadord [10:48 AM] 
    where is that file being generated? I don’t find here

    joe [10:48 AM] 
    added this Python snippet: dendNa_stimamp_batchScript.py


    joe [10:49 AM] 
    Looks like its in Netpyne/batch.py, line 76:

    joe [10:49 AM] 
    added this Python snippet
    # copy this batch script to folder
                targetFile = self.saveFolder+'/'+self.batchLabel+'_batchScript.py'
                os.system('cp ' + os.path.realpath(__file__) + ' ' + targetFile) 
    Add Comment

    salvadord [10:53 AM] 
    y seems some bug there due to using __file__, but seems unrelated to the batch problem

    joe [10:54 AM] 
    Cool.

    salvadord [10:58 AM] 
    ok, I commented out the `pc.done()` line and that worked

    [10:59]  
    (tried leaving that line and recreating pc in Batch constructor but that didn’t work)

    [11:00]  
    so in theory should add something like: `from neuron import h; pc=h.ParallelContext(); pc.done()` at the end of your batch scripts — although I don’t think its vital

    [11:02]  
    I’ll push the change to the netpyne development branch — so you’ll need to clone that if you want to use

    joe [11:04 AM] 
    Right now, I’m using the pip installed version of Netpyne. Would I need to somehow change the version Python is using to the development clone?

    salvadord [11:07 AM] 
    yeah, one way to do is to clone from github and copy the `netpyne` folder inside repo to the the root folder where you are running the sim; or to a path that has priority in the $PYTHONPATH

    [11:08]  
    you can then make sure its using that netpyne version by checking: `import netpyne; print netpyne.__file__``

*** Downloaded netpyne-development 

from https://github.com/Neurosim-lab/netpyne/tree/development
copied netpyne dir to eee/sim
changed .hgignore to ignore netpyne here

*** Sal fixed the problem

** Document batch code and batch analysis/figures

Sent message to Slack:

    I made some big improvements to the EEE batching and batch analysis process over the weekend.  Take a look at eee/sim/batch.py to see how new batches should be entered (the parameters should be in an OrderedDict to ensure the auto-plotting works).  

    In eee/sim/batch_analysis.py, I have separated analysis and plotting.  The function "plotscalar2" (plot a scalar outcome measure of two parameters) takes an MxN array of any outcome measure (for parameter 1 with M values and parameter 2 with N values) and plots it.

    Currently, I have implemented four simple measurements (plateau duration, plateau amplitude, number of spikes, somatic EPSP).  When run as __main__, batch_analysis.py will return plots for all of these measures from all batches.  I am about to start better documenting these changes, but please take a look and let me know what you think.    

Added documentation within batch.py and batch_analysis.py.

** Plotting a series of voltage traces from a batch

First draft:

    def plottrace(params, data, p1ind=0, p2ind=0, stable=200):
        """Plots a voltage trace"""

        trace_key = "_" + str(p1ind) + "_" + str(p2ind)
        vsoma = data[trace_key]['simData']['V_soma']['cell_0']
        time = recstep * np.arange(0, len(vsoma), 1)

        if stable is not None:
            cutoff = int(stable / recstep)
            vsoma = vsoma[cutoff:]
            time = time[cutoff:]

        plt.plot(time, vsoma)


* 2017-02-14 -- Plotting, meeting, connecting

** Goals for today
Develop voltage trace plot for any chosen batch sim
Explore parameters: synapse location, NMDA, AMPA, Dend Ra and Rm

** Voltage trace plotting

Examples for NMDA Tau2 versus synaptic weight

Plateau duration:
file:gif/20170214_131330.png

Plateau amplitude:
file:gif/20170214_131339.png

Voltage traces for weight = 0.04
file:gif/20170214_131352.png

** EEE project meeting

Bill: figures above are looking good, see one with spikes?
file:gif/20170214_132034.png

Bill: more spikes?
file:gif/20170214_132802.png

Looks good!  Good progress, we are ahead of schedule.

Want plot of one value of NMDA Tau2 (try 300) versus weights
    Try to imitate Srdjan's figure

Need to add AMPA to synapse

Email figure to Srdjan and ask for actual data
    Old data lying around?
    Should be unpublished

Joe starts working on network modeling, Sergio starts taking control of single cell


** Setting up passwordless connections to Neurosim

*** Setting up from local to "no"


    Last login: Tue Feb 14 15:17:42 on ttys001
    graham-mac% ssh-keygen -t rsa
    Generating public/private rsa key pair.
    Enter file in which to save the key (/Users/graham/.ssh/id_rsa): 
    Enter passphrase (empty for no passphrase): 
    Enter same passphrase again: 
    Your identification has been saved in /Users/graham/.ssh/id_rsa.
    Your public key has been saved in /Users/graham/.ssh/id_rsa.pub.
    The key fingerprint is:
    SHA256:q3TVyBgyo4OTJT/R5S7P04hM0cgvi51crkW9ApcBL7w graham@graham-mac.local
    The key's randomart image is:
    +---[RSA 2048]----+
    |      . .        |
    |     + B         |
    |  . o @ *        |
    |   * o X B o     |
    |  + = E S = .    |
    |   . O # = .     |
    |    . O @ o      |
    |     . = o       |
    |      o          |
    +----[SHA256]-----+
    graham-mac% sshno
    graham@no.neurosim.downstate.edu's password: 
    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-43-generic x86_64)

     * Documentation:  https://help.ubuntu.com/

      System information as of Tue Feb 14 17:17:52 EST 2017

      System load:  2.34                Processes:           558
      Usage of /:   55.2% of 142.98GB   Users logged in:     4
      Memory usage: 47%                 IP address for eth1: 138.5.101.132
      Swap usage:   3%

      Graph this data and manage this system at:
        https://landscape.canonical.com/

    New release '16.04.1 LTS' available.
    Run 'do-release-upgrade' to upgrade to it.

    *** /dev/sda1 will be checked for errors at next reboot ***

    *** System restart required ***
    Last login: Tue Feb 14 17:17:53 2017 from 184.101.229.200
    no% mkdir -p .ssh
    no% exit
    logout
    Connection to no.neurosim.downstate.edu closed.
    graham-mac% cat .ssh/id_rsa.pub | ssh no.neurosim.downstate.edu 'cat >> .ssh/authorized_keys'
    graham@no.neurosim.downstate.edu's password: 
    .ssh/authorized_keys: No such file or directory.
    graham-mac% sshno
    graham@no.neurosim.downstate.edu's password: 
    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-43-generic x86_64)

     * Documentation:  https://help.ubuntu.com/

      System information as of Tue Feb 14 17:44:38 EST 2017

      System load:  2.69                Processes:           561
      Usage of /:   55.2% of 142.98GB   Users logged in:     4
      Memory usage: 47%                 IP address for eth1: 138.5.101.132
      Swap usage:   3%

      Graph this data and manage this system at:
        https://landscape.canonical.com/

    New release '16.04.1 LTS' available.
    Run 'do-release-upgrade' to upgrade to it.

    *** /dev/sda1 will be checked for errors at next reboot ***

    *** System restart required ***
    Last login: Tue Feb 14 17:41:40 2017 from 184.101.229.200
    no% 
    no% ls -a
    ./         .emacs.SAV     Music/      .x2go/
    ../        .esd_auth      Pictures/     .Xauthority
    .bash_profile  .fvwm2rc       projects/     .Xdefaults
    .cache/        .gconf/        Public/     .xinitrc.fvwm2
    .config/       .gnupg/        public_html/  .xmaps
    .dbus/         .hg/       .ssh/     .Xresources
    Desktop/       .hgrc        .tcshrc     .xsession-x2go-no-errors
    Documents/     .history       .tcshrc.SAV   .xsession-x2go-no-errors.old
    Downloads/     .ICEauthority  Templates/
    .emacs         .kde/        Videos/
    .emacs3        .local/        .vnc/
    no% ls .ssh -a
    ./  ../  known_hosts
    no% touch .ssh/authorized_keys
    no% exit
    logout
    Connection to no.neurosim.downstate.edu closed.
    graham-mac% cat .ssh/id_rsa.pub | ssh no.neurosim.downstate.edu 'cat >> .ssh/authorized_keys'
    graham@no.neurosim.downstate.edu's password: 
    graham-mac% sshno
    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-43-generic x86_64)

     * Documentation:  https://help.ubuntu.com/

      System information as of Tue Feb 14 17:47:28 EST 2017

      System load:  2.55                Processes:           561
      Usage of /:   55.2% of 142.98GB   Users logged in:     4
      Memory usage: 47%                 IP address for eth1: 138.5.101.132
      Swap usage:   3%

      Graph this data and manage this system at:
        https://landscape.canonical.com/

    New release '16.04.1 LTS' available.
    Run 'do-release-upgrade' to upgrade to it.

    *** /dev/sda1 will be checked for errors at next reboot ***

    *** System restart required ***
    Last login: Tue Feb 14 17:46:24 2017 from 184.101.229.200
    no% 

No password for sshno!

*** Setting up from "no" to "zn"


    Last login: Tue Feb 14 15:38:40 on ttys002
    graham-mac% sshno
    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-43-generic x86_64)

     * Documentation:  https://help.ubuntu.com/

      System information as of Tue Feb 14 17:47:50 EST 2017

      System load:  2.56                Processes:           561
      Usage of /:   55.2% of 142.98GB   Users logged in:     4
      Memory usage: 47%                 IP address for eth1: 138.5.101.132
      Swap usage:   3%

      Graph this data and manage this system at:
        https://landscape.canonical.com/

    New release '16.04.1 LTS' available.
    Run 'do-release-upgrade' to upgrade to it.

    *** /dev/sda1 will be checked for errors at next reboot ***

    *** System restart required ***
    Last login: Tue Feb 14 17:47:51 2017 from 184.101.229.200
    no% 
    no% ssh-keygen -t rsa
    Generating public/private rsa key pair.
    Enter file in which to save the key (/u/graham/.ssh/id_rsa): 
    Enter passphrase (empty for no passphrase): 
    Enter same passphrase again: 
    Your identification has been saved in /u/graham/.ssh/id_rsa.
    Your public key has been saved in /u/graham/.ssh/id_rsa.pub.
    The key fingerprint is:
    19:4e:81:c4:3e:f1:22:a3:64:af:5a:1c:66:f0:cf:47 graham@no
    The key's randomart image is:
    +--[ RSA 2048]----+
    |     o...        |
    |      +  .       |
    |.    . oo        |
    | oo o +o.o       |
    | o=o oEoS        |
    | +.+..           |
    |  o.o .          |
    | ..  .           |
    |..               |
    +-----------------+
    no% ssh zn.neurosim.downstate.edu mkdir -p .ssh
    graham@zn.neurosim.downstate.edu's password: 
    no% cat .ssh/i
    id_rsa      id_rsa.pub  
    no% cat .ssh/id_rsa.pub | ssh zn.neurosim.downstate.edu 'cat >> .ssh/authorized_keys'
    graham@zn.neurosim.downstate.edu's password: 
    no% ssh zn.neurosim.downstate.edu
    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-43-generic x86_64)

     * Documentation:  https://help.ubuntu.com/

    New release '16.04.1 LTS' available.
    Run 'do-release-upgrade' to upgrade to it.

    *** System restart required ***
    Last login: Mon Feb 13 22:11:48 2017 from no.neurosim.downstate.edu
    zn% 
    zn% exit
    logout
    Connection to zn.neurosim.downstate.edu closed.
    no% exit
    logout
    Connection to no.neurosim.downstate.edu closed.
    graham-mac% 
    graham-mac% 
    graham-mac% 
    graham-mac% sshzn
    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-43-generic x86_64)

     * Documentation:  https://help.ubuntu.com/

    New release '16.04.1 LTS' available.
    Run 'do-release-upgrade' to upgrade to it.

    *** System restart required ***
    Last login: Tue Feb 14 18:07:24 2017 from no.neurosim.downstate.edu
    zn% No need for two passwords!

No password for sshzn

*** Setting up from "no" to "my"


    Last login: Tue Feb 14 16:00:14 on ttys003
    graham-mac% sshno
    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-43-generic x86_64)

     * Documentation:  https://help.ubuntu.com/

      System information as of Tue Feb 14 18:07:36 EST 2017

      System load:  3.14                Processes:           558
      Usage of /:   55.2% of 142.98GB   Users logged in:     4
      Memory usage: 47%                 IP address for eth1: 138.5.101.132
      Swap usage:   3%

      Graph this data and manage this system at:
        https://landscape.canonical.com/

    New release '16.04.1 LTS' available.
    Run 'do-release-upgrade' to upgrade to it.

    *** /dev/sda1 will be checked for errors at next reboot ***

    *** System restart required ***
    Last login: Tue Feb 14 18:07:37 2017 from 184.101.229.200
    no% ssh-keygen -t rsa
    Generating public/private rsa key pair.
    Enter file in which to save the key (/u/graham/.ssh/id_rsa): 
    /u/graham/.ssh/id_rsa already exists.
    Overwrite (y/n)? n
    no% ssh my.neurosim.downstate.edu mkdir -p .ssh
    The authenticity of host 'my.neurosim.downstate.edu (138.5.101.142)' can't be established.
    ECDSA key fingerprint is a5:32:db:0e:59:fd:e9:0d:c2:12:83:1f:76:c3:3d:6e.
    Are you sure you want to continue connecting (yes/no)? yes
    Warning: Permanently added 'my.neurosim.downstate.edu' (ECDSA) to the list of known hosts.
    no% cat .ssh/id_rsa.pub | ssh my.neurosim.downstate.edu 'cat >> .ssh/authorized_keys'
    no% ssh my.neurosim.downstate.edu
    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-45-generic x86_64)

     * Documentation:  https://help.ubuntu.com/

      System information as of Tue Feb 14 18:16:19 EST 2017

      System load:  0.08             Processes:           371
      Usage of /:   0.2% of 5.32TB   Users logged in:     2
      Memory usage: 2%               IP address for eth0: 138.5.101.142
      Swap usage:   0%

      Graph this data and manage this system at:
        https://landscape.canonical.com/

    75 packages can be updated.
    41 updates are security updates.

    New release '16.04.1 LTS' available.
    Run 'do-release-upgrade' to upgrade to it.

    *** System restart required ***
    Last login: Mon Feb 13 23:11:51 2017 from no.neurosim.downstate.edu
    my% 
    my% 
    my% 
    my% exit
    logout
    Connection to my.neurosim.downstate.edu closed.
    no% exit
    logout
    Connection to no.neurosim.downstate.edu closed.
    graham-mac% sshmy
    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-45-generic x86_64)

     * Documentation:  https://help.ubuntu.com/

      System information as of Tue Feb 14 18:16:50 EST 2017

      System load:  0.05             Processes:           371
      Usage of /:   0.2% of 5.32TB   Users logged in:     2
      Memory usage: 2%               IP address for eth0: 138.5.101.142
      Swap usage:   0%

      Graph this data and manage this system at:
        https://landscape.canonical.com/

    75 packages can be updated.
    41 updates are security updates.

    New release '16.04.1 LTS' available.
    Run 'do-release-upgrade' to upgrade to it.

    *** System restart required ***
    Last login: Tue Feb 14 18:16:50 2017 from no.neurosim.downstate.edu
    my% No passwords!

*** No passwords anywhere!


** Set up x2go to connect to Neurosim
It works, but it's slower and I lose Mac capabilities and local customizations


** Voltage trace plotting

Plot similar to Srdjan's:
file:gif/20170214_180820.png

Same thing but at the synaptic site:
file:gif/20170214_182805.png


* 2017-02-16 -- Preparing for Journal Club, working on AMPA

** Goals for today
Prepare for Journal Club
Add AMPA synapse to simulation

** Presentation for JC:
https://docs.google.com/presentation/d/1F2n1LUua7p8wyaN1pQciH-CsCOyTh68QeP5Ip2gLck4/edit

** Chatting with Sal about adding AMPA synapse


    joe [5:20 PM] 
    Question. Before working in Netpyne, I connected an NMDA and an AMPA synapse to one NetStim.  Can I do the same thing in Netpyne? Or should I use two NetStims?

    salvadord [5:20 PM] 
    You can do

    [5:20]  
    On phone now

    joe [5:21 PM] 
    No hurry.

    [5:21]  
    So I’m guessing I would modify the following from cfg.py:

    joe [5:22 PM] 
    added this Python snippet
    cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': cfg.synloc, 'synMech': 'NMDA', 'start': 500,            'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': 0.0, 'delay': 1}
    Add Comment

    joe [5:22 PM] 
    To include ‘synMech’: ‘AMPA’  somehow.

    joe [5:28 PM] 
    Or, maybe include a second dictionary in cfg.NetStim1...

    salvadord [7:29 PM] 
    hey joe in theory this stuff should go in netParams — however since wanted to play with these values its parametrized via cfg

    [7:29]  
    so to add 2 syns have to change a bit of netParams

    [7:32]  
    one possible way to do it is by chaniging netPArams like this:

    [7:32]  
    `        for i in range(len(ns['synMech'])):
                netParams.stimTargetParams[nslabel+'_'+ns['pop']] = \
                {'source': nslabel, 'conds': {'popLabel': ns['pop']}, 'sec': ns['sec'], 'loc': ns['loc'],
                 'synMech': ns['synMech'][i], 'weight': ns['weight'][i], 'delay': ns[‘delay’]}``

    [7:35]  
    and in cfg.py:

    [7:35]  
    cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': cfg.synloc, 'synMech': ['NMDA','AMPA'], 'start': 500,            
    'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0.0, 0.1], 'delay': 1}

    [7:35]  
    ie. setting synMech and weight as a a list

    [7:36]  
    btw, the way you set the loc won’t work to change values of synloc via batch — you should use the approache where you specify (‘NetStim1’, ‘loc’) in batch

    [7:37]  
    let me know if this makes sense

    [7:37]  
    btw, for the 2 syns there are other ways of doing it, feel free to try


    ----- Yesterday February 16th, 2017 -----
    joe [9:21 AM] 
    Thanks, Sal! I’ll give this a try today.

    [9:22]  
    And yeah, I didn’t think synloc was really being varied…

    [9:23]  
    BdendRa doesn’t seem like it’s getting varied either. Thanks for the tip!

    salvadord [9:27 AM] 
    its due to how batch modifies cfg — it doesn’t ‘execute’ the file, just loads from .json file and modifies the specified variable


* 2017-02-17 -- Journal Club and AMPA

** Goals for today
Journal Club
Add AMPA synapse

** Journal Club Notes

Antic, Srdjan D., Wen-Liang Zhou, Anna R. Moore, Shaina M. Short, and Katerina D. Ikonomu. 
2010. “The Decade of the Dendritic NMDA Spike.” Journal of Neuroscience Research 88 (14): 2991–3001.

We are interested in NMDA plateaus, not spikes (and network effects in particular)

We should compare our simulation with figure 2 F and G
    Plateau amplitude versus glutamate stim (saturates)
    Plateau duration versus glutamate stim (scales linearly)

We should set gNa and gCa to zero to compare with TTX/Cd experiments

EEE assumes NMDA plateus are activated by glutamate spilling over from synapses,
and/or by long durations of glutamate release

We should read Bart Mel and compare his/our ideas

I_CAN may contribute to plateaus

Should read XJ Wang model of working memory


** Adding AMPA synapse

*** Changes

In netParams.py:

Replaced this:
    # connect stim source to target
        netParams.stimTargetParams[nslabel+'_'+ns['pop']] = \
          {'source': nslabel, 'conds': {'popLabel': ns['pop']}, 'sec': ns['sec'], 'loc': ns['loc'], 'synMech': ns['synMech'], 'weight': ns['weight'], 'delay': ns['delay']}

With this:
    # connect stim source to target
        for i in range(len(ns['synMech'])):
                netParams.stimTargetParams[nslabel+'_'+ns['pop']] = \
                {'source': nslabel, 'conds': {'popLabel': ns['pop']}, 'sec': ns['sec'], 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': ns['weight'][i], 'delay': ns[‘delay’]}

In cfg.py:

Replaced this:
    cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': cfg.synloc, 'synMech': 'NMDA', 'start': 500, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': 0.0, 'delay': 1}

With this:
    cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': cfg.synloc, 'synMech': ['NMDA','AMPA'], 'start': 500, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0.0, 0.1], 'delay': 1}


*** No spiking like there should be...

In batch.py, replaced this:
    def batch_tau2NMDA_weight():
        params = OrderedDict()
        params['tau2NMDA'] = [100, 125, 150, 175, 200, 300, 500, 1000]
        params[('NetStim1', 'weight')] = list(np.arange(1.0, 10.0, 1.0)/1e2)
        b = createBatch(params)
        runBatch(b, 'tau2NMDA_weight')

with this:
    def batch_tau2NMDA_weight():
        params = OrderedDict()
        params['tau2NMDA'] = [100, 125, 150, 175, 200, 300, 500, 1000]
        params[('NetStim1', 'weight'[0])] = list(np.arange(1.0, 10.0, 1.0)/1e2)
        b = createBatch(params)
        runBatch(b, 'tau2NMDA_weight')

That didn't work...  Asking Sal for help.

He updated Netpyne

For me to update Netpyne:
cd /usr/site/nrniv/local/python/
git clone https://github.com/Neurosim-lab/netpyne.git
git checkout development

From Salva, to show how to use new Netpyne batch params:
('NetStim1', ‘weight’, 0, 1, 2, ‘joe’, 5) == cfg.NetStim1[‘weight’][0][1][2][‘joe’][5]

Something strange going on:
file:gif/20170217_173804.png

I suspect the parameters got out of order in a dictionary.  Will have to figure out.


* 2017-02-20 -- Srdjan's suggestions, AMPA synapse

** Goals for today
Work on points from Srdjan's email 
Finish AMPA synapse


** Debugging tip from Sal:
best way to debug is to run 
1) netParams.py 
2) batch_init.py 
3) batch.py


** Email response from Srdjan

    Dear Joe,

    The voltage traces you sent 2 days ago were not superimposed as they were superimposed in my figure showing actual experimental recordings form real neurons. It is somewhat difficult to judge model traces from your crowded JPGs - not sure how well they reproduce wet recordings. So far, I'd say we are getting there.

    As you pointed out, the rising phase of the somatic plateau is slow. We had the same problem in the previous version of your model two weeks ago. In that sense, no improvements were made. Please add AMPA if you think this would help. In that way we do not need to wonder, but instead we get to enjoy traces.

    Regarding the Na conductance in basal dendrites, my simple mind already has a simple idea what it needs to be. Please check the paper in the attachment.  I AM PROVIDING YOU WITH VOLTAGE IMAGING DATA THAT YOU ASKED FOR. I am also providing you with the information about the impact (of blocking Na or K conductance) on dendritic AP VOLTAGE waveform. I am also providing you with interpretations of these experiments in a form of a multicompartmental model (see paper). 

    Na conductance decreases with distance from the cell body.

    A-type K conductance increases with distance from the cell body.

    The exact distance dependent attenuation of bAP along basal dendrite is clearly depicted in my paper, Fig. 6B - BLACK LINE.

    If our current model is good, it will be able to mimic changes in bAP amplitude and halfwidth when neurons were treated by TTX (Fig. 6C, RED LINE). 

    If our model is good, it will be able to mimic changes in bAP amplitude and bAP halfwidth when neurons were treated by K channel blocker 4AP
    (Fig. 6C, GREEN LINE). 
     
    I suggest we first fix the AP backpropagation issue in the model. This will remove Na and A-type K conductances from further EEE discussions and confusions. We need to have Na and K conductance DENSITIES and SPATIAL DISTRIBUTIONS in place, before we move to glutamate. 

    Best,
    Srdjan

    p.s. If Joe, Bill, Salva, Sam and Sergio have any feedback thoughts on this email message, I would like to hear it. Thanks.

    Srdjan D. Antic, M.D.
    UConn Health
    (860) 679-8468
    http://antic.uchc.edu/


*** Annotated article from Srdjan
file:gif/20170220_Acker&Antic2009Srdjan.pdf

*** Important points from Srdjan

Last figures were too crowded, but it looks like we're getting there
Rising phase of plateau too slow, try adding AMPA and looking at traces
Na conductance decreases with distance from the cell body
A-type K conductance increases with distance from the cell body
Comparisons to Srdjan's Figure 6 should be made with "channel blockers"
First step: fix AP backpropagaton in model (Na and A-type Ca)

Figure 6:
file:gif/20170220_093019.png


** Adding AMPA synapse

Fixed batching problem with Sal's help.
Now can have two synapses on one NetStim.

Fix to netParams.py:
# connect stim source to target
    for i in range(len(ns['synMech'])):
      netParams.stimTargetParams[nslabel+'_'+ns['pop']+'_'+ns['synMech'][i]] = \
                {'source': nslabel, 'conds': {'popLabel': ns['pop']}, 'sec': ns['sec'], 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': ns['weight'][i], 'delay': ns['delay']}

*** Modifying AMPA to allow access to timing parameters.

From this:

    NEURON {  POINT_PROCESS AMPA }

    PARAMETER {
      Cdur  = 1 (ms)    : transmitter duration (rising phase)
      Alpha = 1.  (/ms mM)  : forward (binding) rate
      Beta  = 0.5 (/ms)   : backward (unbinding) rate
      Erev  = 0 (mV)    : reversal potential
    }

    INCLUDE "netcon.inc"
     
    :** NMDA

To this:

    NEURON {  
      POINT_PROCESS AMPA
      RANGE Alpha, Beta }


    PARAMETER {
      Cdur  = 1 (ms)    : transmitter duration (rising phase)
      Alpha = 1.  (/ms mM)  : forward (binding) rate
      Beta  = 0.5 (/ms)   : backward (unbinding) rate
      Erev  = 0 (mV)    : reversal potential
    }

    INCLUDE "netcon.inc"
     
    :** NMDA

*** Fixing to allow for versioning

Created a local AMPA.mod instead of modifying /usr/site/nrniv/local/mod/AMPA.mod

Also removing local versions of:
  sim/mod/misc.h
  sim/mod/netcon.inc
Because I realize mkmod pulls them automatically from the Neurosim repo.

** Setting weight for AMPA synapse

Initial very wide spread:
file:gif/20170220_221435.png

It looks like 0.001 is too low and 0.1 is too high.


* 2017-02-21 -- bAPs and project meeting

** Goals for today
Work on points from Srdjan's email 
Finish AMPA synapse

** AMPA synapse weight

*** Running another batch with max AMPA weight 0.01
file:gif/20170221_085619.png

Looks better.  Will now try the following weights to explore subthreshold behavior:
AMPA weight: 0.004, 0.005, 0.006
NMDA weight: 0.00, 0.01, 0.02, 0.03

Soma voltage:
file:gif/20170221_091150.png

Synapse site voltage:
file:gif/20170221_091304.png

*** So, it looks like AMPA weight should be around 0.006 when NMDA is 0.03:
AMPAweight = (0.006/0.03) * NMDA weight = 0.2 * NMDAweight

Setting that now, running another batch.

Soma:
file:gif/20170221_093232.png

Basal:
file:gif/20170221_093337.png

AMPA doesn't seem to be scaling with NMDA...  Will ask Sal for help...
Got that fixed up.  

*** AMPA now scales with NMDA.

Subthreshold:
file:gif/20170221_112349.png

With spiking:
file:gif/20170221_113240.png

*** Comparison of different scaling factors

Soma:
file:gif/20170221_115314.png

Basal:
file:gif/20170221_115542.png


** Replicating bAPs in dendrites figure (Fig 6 from Srdjan's paper)

Need to calculate AP height (will use existing EPSP measure)
Need to measure voltage at multiple places in dendrite
    nsegs = 10, so will record 10 traces
Would like just one AP, so have to figure out iClamp values for this

Ran a batch of stimdur/stimamp to determine minimum necessary for one spike.
    Synapse still being activated, will have to disable

Looks like an Iclamp amp of 0.8 and dur of 10 gives one nice spike.
file:gif/20170221_110527.png

Will use these values to explore bAPs in basal dendrite.

Just committed, now adding 10 recording vectors to basal dendrite.

Changed cfg.py as follows (commented out two lines, added for-loop):

    ###############################################################################
    # Recording 
    ###############################################################################
    cfg.recordTraces = {'V_soma': {'sec': 'soma', 'loc': 0.5, 'var': 'v'}}
    #cfg.recordTraces['V_Bdend1'] = {'sec': 'Bdend1', 'loc': 0.75, 'var': 'v'}
    #cfg.recordTraces['V_Bdend2'] = {'sec': 'Bdend2', 'loc': 0.75, 'var': 'v'}
    cfg.recordCells = ['PT5B']
    cfg.recordStims = False  
    cfg.recordStep = 0.1 

    for loc in np.arange(0, 10, 1):
      cfg.recordTraces['V_Bdend1_' + str(loc)] = {'sec': 'Bdend1', 'loc': loc/10, 'var': 'v'}

And running a batch of one to batch.py:

    def batch_stimdur_stimamp_bAP():
      params = OrderedDict()
      params[('IClamp1', 'dur')] = list([10.0])
      params[('IClamp1', 'amp')] = list([0.8])
      b = createBatch(params)
      runBatch(b, 'stimdur_stimamp_bAP')

** Project meeting

Srdjan would like to see a plateau amplitude of 15 to 20 mV at the soma
This could mean as high as 55 mV in basal dendrite
Srdjan suggests trying synapse in middle of basal dendrite instead of 0.75

Plan is to explore bAPs and set Na and K values before starting on synapse

Srdjan confused about NMDA response in current model: 
    NMDA shouldn't be very active unless depolarized
    Explanation: our NMDA weight is about 100x greater than normal
    This is to see any response in large collapsed dendritic cylinder of our simplified model

Srdjan: basal dends start at ~1um diameter, decrease to 0.3-0.4 at 250 um distance from soma
Srdjan: the impedance mismatch between these small branches and soma is likely important for proper behavior

Srdjan: there are 5 parameters which should be sufficient to capture plateau behavior:
    1) Tapering of basal dendrites
    2) Na conductance decreasing with distance from soma
    3) K(A-type) conductance increasing with distance from soma
    4) Dendritic Ra
    5) Dendritic Rm

Srdjan: large, lumped dendrites are a bad idea
    Perhaps taper basal dendrite?  (suggestion made before realizing our basal is large and lumped)
    Perhaps add a basal dendrite of normal morphology for plateau activation?
    Perhaps check on behavior in morphologically-realistic cell?

Srdjan: concerned about publishing this model with his data
    Neurosim model is based on mouse primary motor cortex
    Srdjan's data is from rat prefrontal cortex
    How do we convince reviewers this is acceptable?
    Maybe tune model to Srdjan's data?
    Srdjan doesn't have good reconstructions for use in models
    Maybe use rat PFC cell from NeuroMorpho?
    Salva: the Neuromorpho cells look more like M1 corticostriatal instead of our corticospinal
    Salva: we have a full morphology already tuned for this type
    Await opinion from Bill

Salva: explain difference between NMDA spike and plateau?
    Srdjan: there are 3 big differences
      1) somatic response amplitude
      2) somatic response duration
      3) Ca-handling in dendrites
    Srdjan: NMDA plateaus start with NMDA spikes
    Srdjan: will forward a paper better explaining

Srdjan out of the country two weeks from now.
Will be in contact via email to schedule next meeting.


** Replicating bAPs in dendrites figure (Fig 6 from Srdjan's paper)

Using the following code in dev.py (in iPython I run execfile("dev.py")):

    recstep = cfg.recordStep
    bap = load_json("batch_data/stimdur_stimamp_bAP/stimdur_stimamp_bAP_0_0.json")
    labels = np.arange(0, 10, 1)
    distance = list(labels/10.0)
    traces = []
    for label in labels: 
      traces.append(bap['simData']['V_Bdend1_' + str(label)]['cell_0'])
    time = recstep * np.arange(0, len(traces[0]), 1)
    time = np.swapaxes(time, 0, 1)
    handles = plt.plot(time, traces)
    plt.legend(handles, distance)

But all traces come out exactly the same...

Ahh, the problem is in my changes to cfg.py:

    for loc in np.arange(0, 10, 1):
          cfg.recordTraces['V_Bdend1_' + str(loc)] = {'sec': 'Bdend1', 'loc': loc/10, 'var': 'v'}

This returns each "loc" as 0, because the numbers are integers instead of floats.

This solves the problem:

    for loc in np.arange(0.0, 10.0, 1.0):
        cfg.recordTraces['V_Bdend1_' + str(loc)] = {'sec': 'Bdend1', 'loc': loc/10.0, 'var': 'v'}

Have to rerun the batches...


* 2017-02-22 -- bAP analysis and figures

** Goals for today
Finish bAP analysis/figures 
Begin playing with Na and K(A) density distributions

** bAPs

Improving batch_analysis.py such that only new batches are analyzed and plotted.

Changed plot_all to the following:

    def plot_all(redoall=False):
        """The following code is run on all existing batches (i.e. on all directories 
            in the directory "batch_data"  If redoall is False, only plots new batches."""

        for batch in list_batches():
            
            batch_plotted = os.path.isfile(os.path.join(figFolder, batch + "_platdur.png"))

            if redoall or not batch_plotted:

                (Plot all batch analyses)

Plotting works now:
file:gif/20170222_101956.png

However, all bAPs are very similar...  They should diminish with distance from soma...

Working on replicating Fig 6 B & C from Srdjan's paper.
file:gif/20170220_093019.png

Fixed meas_epsp so that it can measure in any section.
But realized it would be better not to use it.

Finished analysis and plotting for a single batch:
file:gif/20170222_193107.png

Tomorrow I will have to extend it to multiple batches so Sergio can play with it.


* 2017-02-23 -- Plotting

** Goals for today
Finish bAP analysis/figures for multiple batch runs
Begin playing with Na and K(A) density distributions


** Helping Sergio

Having a problem with missing misc.h
Earlier, I deleted it along with other files I thought were pulled from Neurosim by mkmod

Adding the file back in:
    graham-mac% hg log -l 1 sim/mod/misc.h
    changeset:   37:13b3e81aa930
    user:        Joe Graham <joe.w.graham@gmail.com>
    date:        Thu Jan 26 15:45:06 2017 -0700
    summary:     EEE project code now uses mkmod to compile mod files.

    graham-mac% hg revert -r 37:13b3e81aa930 sim/mod/misc.h
    graham-mac% hg status
    M notebook.org
    M sim/batch_analysis.py
    A sim/mod/misc.h
    graham-mac% hg commit -m "Added misc.h back after removing it thinking it unnecessary to have a local copy"
    graham-mac% 

Now it works.

** bAP analysis/figures

Working on ability to plot a relationship for each batch with two parameters: plotrelation2()

This is similar to plotscalar2(), but creates a grid of figures with one subplot for 
each parameter combination

Example (somatic voltage traces with varying AMPA and NMDA weights):
file:gif/20170223_161838.png

And here's the example with plotrelation2(swapaxes=True)
file:gif/20170223_163642.png

Examples using section="Bdend1" in get_volttraces()
file:gif/20170223_164710.png
file:gif/20170223_164744.png

Big improvements.  Now executing "batch_analysis.py" generates voltage trace plots 
for batch for the soma and Bdend1.


* 2017-02-24 -- Plotting

** Goals for today
Finish bAP analysis/figures for multiple batch runs
Begin playing with Na and K(A) density distributions

** bAP

Having a problem getting the batch to use the right config file... Will ask Sal.

Fixed problem in plotting bAP: looks good now!

But, Ra doesn't seem to be changing...

file:gif/20170224_143346.png
file:gif/20170224_143359.png

Changed this:

    for secName,sec in cellRule['secs'].iteritems(): 
      sec['vinit'] = -75.0413649414  # set vinit for all secs
      if secName in cellRule['secLists']['alldend']:  
        sec['mechs']['nax']['gbar'] = cfg.dendNa  # set dend Na gmax for all dends
      if secName in cellRule['secLists']['basaldend']:
        sec.Ra = cfg.BdendRa

to this:

    for secName,sec in cellRule['secs'].iteritems(): 
      sec['vinit'] = -75.0413649414  # set vinit for all secs
      if secName in cellRule['secLists']['alldend']:  
        sec['mechs']['nax']['gbar'] = cfg.dendNa  # set dend Na gmax for all dends
      if secName in cellRule['secLists']['basaldend']:
        sec["geom"]["Ra"] = cfg.BdendRa

Now it works!

file:gif/20170224_145036.png
file:gif/20170224_145044.png
file:gif/20170224_145500.png
file:gif/20170224_145513.png



* 2017-02-24 -- Blocking channels

** Goals for today
Begin playing with Na and K(A) density distributions
Replicate Srdjan's article (Quantitative Assessment of the Distributions of Membrane Conductances Involved in Action Potential Backpropagation Along Basal Dendrites)

** Mimicking TTX (Na blocker) and 4-AP (K blocker)

*** Working on ability to change K conductances 

Modified netParams.py by adding cfg.dendK

    for secName,sec in cellRule['secs'].iteritems(): 
      sec['vinit'] = -75.0413649414  # set vinit for all secs
      if secName in cellRule['secLists']['alldend']:  
        sec['mechs']['nax']['gbar'] = cfg.dendNa  # set dend Na gmax for all dends
        sec['mechs']['kdr']['gbar'] = cfg.dendK * sec['mechs']['kdr']['gbar'] 
        sec['mechs']['kap']['gbar'] = cfg.dendK * sec['mechs']['kap']['gbar']  
      if secName in cellRule['secLists']['basaldend']:
        sec["geom"]["Ra"] = cfg.BdendRa

Added the following to cfg.py:

    cfg.dendK = 1.0

*** Ran the following batch

    def batch_dendNa_dendK_block_bAP(cfgFile="cfg_bAP.py"):
      from cfg_bAP import cfg
      params = OrderedDict()
      params[('dendNa')] = list(np.array([0.0, 1.0])*cfg.dendNa)
      params[('dendK')] = list(np.array([0.0, 1.0])*cfg.dendK)
      b = createBatch(params, cfgFile=cfgFile)
      runBatch(b, 'dendNa_dendK_block_bAP')

*** The plotting function:

    def plot_antic_fig6(batch="dendNa_dendK_block_bAP"):
      """Requires batch_dendNa_dendK_block_bAP() be run in advance."""

      params, data = load_batch(batch)
      output = get_bapamp_distance(params, data, section="Bdend1", stimtime=500)

      xvector = output['xvector']
      yarray = output['yarray']

      control = yarray[1][1]
      kblock = yarray[0][1]
      nablock = yarray[1][0]
      bothblock = yarray[0][0]

      fig = plt.figure()
      plt.hold(True)

      plt.subplot(2,1,1)
      plt.plot(xvector, control, '-ks', label="Control")
      plt.plot(xvector, nablock, '-rs', label="Na Block")
      plt.plot(xvector, kblock, '-gs', label="K Block")
      #plt.plot(xvector, bothblock, '-bs', label="Na/K Block")
      plt.legend()
      plt.ylim([20, 100])
      plt.ylabel("AP amplitude (mV)")
      plt.title("Backpropagating AP Amplitude vs Distance from Soma")

      plt.subplot(2,1,2)
      plt.plot(xvector, np.array(nablock)/np.array(control), '-rs', label="Na Block")
      plt.plot(xvector, np.array(kblock)/np.array(control), '-gs', label="K Block")
      plt.legend()
      plt.xlabel("Distance (fraction along Bdend1)")
      plt.ylabel("Amplitude Ratios")
      plt.ylim([0.6, 1.6])


** Finished Fig 6 of Srdjan's article:
file:gif/20170227_192357.png


* 2017-02-25 -- Channel blocking figueres for Srdjan

** Goals for today
Prepare story/figures for Srdjan
Project meeting

** Figures

Bill would like to see the voltage traces as well for Figure 6.
file:gif/20170228_094011.png

*** Code for traces figure

    def plot_antic_fig6(batch="dendNa_dendK_block_bAP", stable=200):
      """Requires batch_dendNa_dendK_block_bAP() be run in advance."""

      params, data = load_batch(batch)
      output = get_bapamp_distance(params, data, section="Bdend1", stimtime=500)

      xvector = output['xvector']
      yarray = output['yarray']

      control = yarray[1][1]
      kblock = yarray[0][1]
      nablock = yarray[1][0]
      bothblock = yarray[0][0]

      fig = plt.figure()
      plt.hold(True)

      plt.subplot(2,1,1)
      plt.plot(xvector, control, '-ks', label="Control")
      plt.plot(xvector, nablock, '-rs', label="Na Block")
      plt.plot(xvector, kblock, '-gs', label="K Block")
      #plt.plot(xvector, bothblock, '-bs', label="Na/K Block")
      plt.legend()
      plt.ylim([20, 100])
      plt.ylabel("AP amplitude (mV)")
      plt.title("Backpropagating AP Amplitude vs Distance from Soma")

      plt.subplot(2,1,2)
      plt.plot(xvector, np.array(nablock)/np.array(control), '-rs', label="Na Block")
      plt.plot(xvector, np.array(kblock)/np.array(control), '-gs', label="K Block")
      plt.legend()
      plt.xlabel("Distance (fraction along Bdend1)")
      plt.ylabel("Amplitude Ratios")
      plt.ylim([0.6, 1.6])

      plt.hold(False)


      controld = data['_1_1']['simData']
      nablockd = data['_0_1']['simData']
      kblockd = data['_1_0']['simData']

      controltraces = []
      kblocktraces = []
      nablocktraces = []

      for key in controld.keys():
        if "Bdend1" in key:
          controltraces.append(controld[key]['cell_0'])

      for key in kblockd.keys():
        if "Bdend1" in key:
          kblocktraces.append(kblockd[key]['cell_0'])

      for key in nablockd.keys():
        if "Bdend1" in key:
          nablocktraces.append(nablockd[key]['cell_0'])

      time = recstep * np.arange(0, len(controltraces[0]), 1)

      fig, (ax1, ax2, ax3) = plt.subplots(3, 1, sharex=True, sharey=True)
      
      ax1.plot(time, np.swapaxes(controltraces, 0, 1), 'k', label="Control")
      ax1.set_ylabel("Control")
      ax1.set_title("Backpropagating APs")

      ax2.plot(time, np.swapaxes(nablocktraces, 0, 1), 'r', label="Na Block")
      ax2.set_ylabel("Na Block")

      ax3.plot(time, np.swapaxes(kblocktraces, 0, 1), 'g', label="K Block")
      ax3.set_ylabel("K Block")
      plt.xlabel("Time (ms)")

*** Figure showing somatic spikes are the same even with channel blocking
file:gif/20170228_105223.png

** Working on synapse

EPSP at soma with varying AMPA weights
file:gif/20170228_113236.png

EPSP at Bdend1 with varying AMPA weights
file:gif/20170228_113326.png

Superthreshold versions of above:
file:gif/20170228_114522.png

** Prepared document for project meeting today:
https://docs.google.com/document/d/1x_TvlaEXShGmJdqtFq_tJt-c2o-XUOif6GZTo7e-l9c/edit
file:gif/20170228_EEE_Project_Update.pdf


* 2017-03-07 -- Superimposed plateaus and project meeting

** Goals for today
Create superimposed trace plots for Srdjan
Email update to Srdjan and request poster
Project meeting

** Create figure for Srdjan

Srdjan wants a figure like this one:
file:gif/20161230_PlateauFunction.jpg

Creating a new batch for a range of "glutamate stim" (actually changing synapse weight)

    def batch_glut_stim_range():
        params = OrderedDict()
        params[('NetStim1', 'weight', 0)] = list([0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07])
        b = createBatch(params)
        runBatch(b, 'glut_stim_range')

Increasing the range to be more like Srdjan's figure:

    def batch_glut_stim_range():
        params = OrderedDict()
        params[('NetStim1', 'weight', 0)] = list([0.04, 0.045, 0.05, 0.055, 0.06, 0.08, 1.0])
        b = createBatch(params)
        runBatch(b, 'glut_stim_range')

 One final adjustment:

     def batch_glut_stim_range():
        params = OrderedDict()
        params[('NetStim1', 'weight', 0)] = list([0.04, 0.045, 0.05, 0.055, 0.06, 0.07, 0.08])
        b = createBatch(params)
        runBatch(b, 'glut_stim_range')

Now the output looks pretty good.

Working on the figure

Top part is looking good:
file:gif/20170307_101217.png

Going to move the synaptic stim to 200 ms so there's not so much dead space before it.

    In cfg.py, changed this:

      cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': 0.75, 'synMech': ['NMDA','AMPA'], 'start': 500, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0, 0], 'delay': 1}
    
    To this:
    
      cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': 0.75, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0, 0], 'delay': 1}

Much better. 
file:gif/20170307_101632.png

Now to work on the bottom figure.

Looking good:
file:gif/20170307_105135.png

Need to remove axis labelling on the bottom figure, and add a legend to top figure.

Looking good!
file:gif/20170307_111502.png

Cleaned up figure formatting:
file:gif/20170307_112458.png

** Prepare email for Srdjan

First, vary the location of the synapse to see the effect on somatic plateau amp.

Creating a new batch:

    def batch_synloc_stimamp():
        params = OrderedDict()
        params[('NetStim1', 'loc')] = [0.25, 0.5, 0.75]
        params[('NetStim1', 'weight', 0)] = list([0.04, 0.045, 0.05, 0.055, 0.06, 0.07, 0.08])
        b = createBatch(params)
        runBatch(b, 'synloc_stimamp')

Generating some figures:

    params, data = load_batch("synloc_stimamp") 

    output = get_vtraces(params, data)
    plotrelation2(par1label="SynLoc", par2label="StimAmp", **output)
    plotrelation2(par1label="SynLoc", par2label="StimAmp", swapaxes=True, **output)

    output = get_vtraces(params, data, section="Bdend1")
    plotrelation2(par1label="SynLoc", par2label="StimAmp", **output)
    plotrelation2(par1label="SynLoc", par2label="StimAmp", swapaxes=True, **output)

Forgot to reduce dendritic Na conductance in cfg.py
    #cfg.dendNa = 0.0345117294903
    cfg.dendNa = 0.00345

Rerunning everything.

Updating stim amps in batch:

    def batch_glut_stim_range():
      params = OrderedDict()
      params[('NetStim1', 'weight', 0)] = list([0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1])
      b = createBatch(params)
      runBatch(b, 'glut_stim_range')

Better plateau figure:
file:gif/20170307_122531.png

Varying synaptic location:
Voltage at soma:
file:gif/20170307_122844.png
Voltage at Bdend1:
file:gif/20170307_122905.png

Interestingly, moving the synapse closer to the soma results in a reduction of the response...

Will change synloc to 0.5 in Bdend1:

    #cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': 0.75, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0, 0], 'delay': 1}
    cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': 0.5, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0, 0], 'delay': 1}

Rerunning batch_glut_stim_range() and plotting with plot_antic_plateaus()
file:gif/20170307_123404.png

Not sure if it looks better than having synloc at 0.75...  Will have to ask Srdjan.

Redoing batch_synloc_stimamp() with the same amplitudes as batch_glut_stim_range()

file:gif/20170307_131336.png

** Project meeting

Good progress, plateaus look very similar to Srdjan's figure.
Need to prepare abstract for CNS '17
Interesting that plateau decreaess with proximity to soma...
    Discuss with Srdjan
Should try putting in some more dispersed synapses (spillover of neurotransmitter)
Time to start working on network model
  Salvador has model to start with
Joe should email Srdjan with progress and to find out when he's back


* 2017-03-08 -- EEE update and morphology analysis

** Goals for today
Email update to Srdjan and request poster
Analyze morphology for Sergio
Prepare abstract for CNS 2017

** Emailed update to Srdjan
file:gif/20170308_EEE_update.pdf

** Worked on analyzing morphology
Need to convert from Neurolucida .ASC to .swc


* 2017-03-09 -- Work on network model for EEE

** Info from Salvador:

salvadord [2:16 PM] 
joe, I think the best net model to start with is the one we used for the dystonia paper

[2:16]  
it has most of the populations in M1 but conn is still layer-based so simpler to manage

[2:17]  
all the conn params can be found here: https://docs.google.com/spreadsheets/d/1Iq0q-8iOfGfaF4Zbr1J6LLz-T-8-scRip3XijOoR46Q/edit#gid=459039745

[2:17]  
the paper is here: http://journal.frontiersin.org/article/10.3389/fphar.2016.00157/full
Frontiers
Multitarget Multiscale Simulation for Pharmacological Treatment of Dystonia in Motor Cortex
A large number of physiomic pathologies can produce hyperexcitability in cortex. Depending on severity, cortical hyperexcitability may manifest clinically as a hyperkinetic movement disorder or as epilpesy. We focus here on dystonia, a movement disorder that produces involuntary muscle contractions and involves pathology in multiple brain areas including basal ganglia, thalamus, cerebellum, and sensory and motor cortices. Most research in dystonia has focused on basal ganglia, while much pharmacological Show more…

billl [2:18 PM] 
the dystonia one has rxd stuff in it -- don't want to use that -- but can use the network part

salvadord [2:18 PM] 
I’d suggest you take as a boiler plate the netpyne example model here: http://www.neurosimlab.org/netpyne/tutorial.html#position-and-distance-based-connectivity-tutorial-5

[2:18]  
y not the model itself, just the conn

[2:19]  
for the cell types you can use the ones I’m currently using for my M1 model found here: /u/salvadord/Models/m1/sim/cells

[2:20]  
I can probably get it setup quicker, but thought might be good for you to do yourself so understand better — but let me know if have any questions

salvadord [2:34 PM] 
uploaded and commented on this image: M1 pops/cell types
1 Comment
you can use any of these for your net model -- all in /u/salvadord/Models/m1/sim/cells

salvadord [2:38 PM] 
uploaded this image: Exc cell f-I curves
Add Comment

salvadord [2:38 PM] 
uploaded this image: Inh cell f-I curves
Add Comment

joe [5:05 PM] 
Thanks, Sal! I’ll work on it myself and let you know when I encounter difficulties.


* 2017-03-12 -- Multiscale Simulation Meeting (MSM) Abstract

Embedded Ensemble Encoding — a hypothesis for reconciling cortical coding strategies
 
Joe W. Graham1, Salvador Dura-Bernal1, Sergio L Angulo1, Samuel A Neymotin1,2, Srdjan D Antic3 , William W Lytton1,4
 
1Department of Physiology and Pharmacology , SUNY Downstate Medical Center, Brooklyn, NY, 11203, USA
2Department of Neuroscience, Brown University, Providence, RI 02912, USA
3Institute for Systems Genomics, University of Connecticut Health Center, Farmington, CT, 06030, USA
4Department of Neurology, Kings County Hospital, Brooklyn NY 11203, USA
 
E-mail: joe.w.graham@gmail.com

As well as synaptically-induced NMDA spikes, basal dendrites of cortical pyramidal neurons can produce distinct plateaus of longer duration which depolarize the soma as well [1]. During these periods of sustained depolarization (comparable to Up states observed in sleep and anesthesia), the neuron is readily able to follow external inputs. Cells in this activated or “standby” state show higher rates of firing, interpretable as rate coding. In addition, fortune and synaptic inputs will favor these prepared neurons, so that subsets of the standby ensembles could be readily recruited into sub-ensembles based on simultaneous firing. This could happen in coordination with beta or gamma activity, which would be identifiable as evidence for temporal coding by firing synchrony. Thus, our embedded-ensemble encoding (EEE) theory allows seemingly distinct coding strategies to coexist.    

The synchronized spiking of the sub-ensembles would provide the possibility for formation of broad distributed ensemble-by-synchrony across areas that has been hypothesized to allow the binding of multimodal features into coherent object perception (binding-by-synchrony theory). EEE also has implications for Bayesian predictive coding theory — we propose the outer ensemble (plateau ensemble) as a predictor for codings in the nested ensemble. 

We have begun to explore the phenomenology of dendritic plateau potentials at the cellular level, demonstrating that we are able to obtain dendritic and somatic plateaus in a morphologically-simplified model pyramidal neuron model which are comparable to those seen physiologically in vitro during focal glutamate application. Sufficient weight of input to a synapse modeled with NMDA and AMPA receptors located in a basal dendrite can bring the soma into a prolonged depolarized plateau. We are now placing these cells into simulated cortical columns in order to explore how plateau potentials affect network behavior.

References
1.  Oikonomou KD, Singh MB, Rich MT, Short SM, Antic SD: Contribution of extrasynaptic N-methyl-D-aspartate and adenosine A1 receptors in the generation of dendritic glutamate-mediated plateau potentials. Philos Trans R Soc Lond B Biol Sci 2015, 370. Available from: http://dx.doi.org/10.1098/rstb.2014.0193


* 2017-03-14 -- EEE Project Meeting and Network Modeling

** Network modeling

Salva suggests starting with this tutorial:
http://www.neurosimlab.org/netpyne/tutorial.html#position-and-distance-based-connectivity-tutorial-5
http://www.neurosimlab.org/netpyne/_downloads/tut5.py

*** Original code


    from netpyne import specs, sim

    # Network parameters
    netParams = specs.NetParams()  # object of class NetParams to store the network parameters

    netParams.sizeX = 100 # x-dimension (horizontal length) size in um
    netParams.sizeY = 1000 # y-dimension (vertical height or cortical depth) size in um
    netParams.sizeZ = 100 # z-dimension (horizontal length) size in um
    netParams.propVelocity = 100.0 # propagation velocity (um/ms)
    netParams.probLengthConst = 150.0 # length constant for conn probability (um)


    ## Population parameters
    netParams.popParams['E2'] = {'cellType': 'E', 'numCells': 50, 'yRange': [100,300], 'cellModel': 'HH'}
    netParams.popParams['I2'] = {'cellType': 'I', 'numCells': 50, 'yRange': [100,300], 'cellModel': 'HH'}
    netParams.popParams['E4'] = {'cellType': 'E', 'numCells': 50, 'yRange': [300,600], 'cellModel': 'HH'}
    netParams.popParams['I4'] = {'cellType': 'I', 'numCells': 50, 'yRange': [300,600], 'cellModel': 'HH'}
    netParams.popParams['E5'] = {'cellType': 'E', 'numCells': 50, 'ynormRange': [0.6,1.0], 'cellModel': 'HH'}
    netParams.popParams['I5'] = {'cellType': 'I', 'numCells': 50, 'ynormRange': [0.6,1.0], 'cellModel': 'HH'}


    ## Cell property rules

    cellRule = {'conds': {'cellType': 'E'},  'secs': {}}  # cell rule dict
    cellRule['secs']['soma'] = {'geom': {}, 'mechs': {}}                              # soma params dict
    cellRule['secs']['soma']['geom'] = {'diam': 15, 'L': 14, 'Ra': 120.0}                   # soma geometry
    cellRule['secs']['soma']['mechs']['hh'] = {'gnabar': 0.13, 'gkbar': 0.036, 'gl': 0.003, 'el': -70}      # soma hh mechanism
    netParams.cellParams['Erule'] = cellRule                          # add dict to list of cell params

    cellRule = {'conds': {'cellType': 'I'},  'secs': {}}  # cell rule dict
    cellRule['secs']['soma'] = {'geom': {}, 'mechs': {}}                              # soma params dict
    cellRule['secs']['soma']['geom'] = {'diam': 10.0, 'L': 9.0, 'Ra': 110.0}                  # soma geometry
    cellRule['secs']['soma']['mechs']['hh'] = {'gnabar': 0.11, 'gkbar': 0.036, 'gl': 0.003, 'el': -70}      # soma hh mechanism
    netParams.cellParams['Irule'] = cellRule                          # add dict to list of cell params


    ## Synaptic mechanism parameters
    netParams.synMechParams['exc'] = {'mod': 'Exp2Syn', 'tau1': 0.8, 'tau2': 5.3, 'e': 0}  # NMDA synaptic mechanism
    netParams.synMechParams['inh'] = {'mod': 'Exp2Syn', 'tau1': 0.6, 'tau2': 8.5, 'e': -75}  # GABA synaptic mechanism


    # Stimulation parameters
    netParams.stimSourceParams['bkg'] = {'type': 'NetStim', 'rate': 20, 'noise': 0.3}
    netParams.stimTargetParams['bkg->all'] = {'source': 'bkg', 'conds': {'cellType': ['E','I']}, 'weight': 0.01, 'delay': 'max(1, gauss(5,2))', 'synMech': 'exc'}


    ## Cell connectivity rules
    netParams.connParams['E->all'] = {
      'preConds': {'cellType': 'E'}, 'postConds': {'y': [100,1000]},  #  E -> all (100-1000 um)
      'probability': 0.1 ,                  # probability of connection
      'weight': '0.005*post_ynorm',         # synaptic weight 
      'delay': 'dist_3D/propVelocity',      # transmission delay (ms) 
      'synMech': 'exc'}                     # synaptic mechanism 

    netParams.connParams['I->E'] = {
      'preConds': {'cellType': 'I'}, 'postConds': {'popLabel': ['E2','E4','E5']},       #  I -> E
      'probability': '0.4*exp(-dist_3D/probLengthConst)',   # probability of connection
      'weight': 0.001,                                      # synaptic weight 
      'delay': 'dist_3D/propVelocity',                      # transmission delay (ms) 
      'synMech': 'inh'}                                     # synaptic mechanism 


    # Simulation options
    simConfig = specs.SimConfig()        # object of class SimConfig to store simulation configuration
    simConfig.duration = 1*1e3           # Duration of the simulation, in ms
    simConfig.dt = 0.05                  # Internal integration timestep to use
    simConfig.verbose = False            # Show detailed messages 
    simConfig.recordTraces = {'V_soma':{'sec':'soma','loc':0.5,'var':'v'}}  # Dict with traces to record
    simConfig.recordStep = 1             # Step size in ms to save data (eg. V traces, LFP, etc)
    simConfig.filename = 'model_output'  # Set file output name
    simConfig.savePickle = False         # Save params, network and sim output to pickle file

    simConfig.analysis['plotRaster'] = {'orderBy': 'y', 'orderInverse': True}      # Plot a raster
    simConfig.analysis['plotTraces'] = {'include': [('E2',0), ('E4', 0), ('E5', 5)]}      # Plot recorded traces for this list of cells
    simConfig.analysis['plot2Dnet'] = True            # plot 2D visualization of cell positions and connections
    simConfig.analysis['plotConn'] = True             # plot connectivity matrix

    # Create network and run simulation
    sim.createSimulateAnalyze(netParams = netParams, simConfig = simConfig)    
       
    # import pylab; pylab.show()  # this line is only necessary in certain systems where figures appear empty

*** Salva's suggested connectivity parameters
https://docs.google.com/spreadsheets/d/1Iq0q-8iOfGfaF4Zbr1J6LLz-T-8-scRip3XijOoR46Q/edit?ts=58c82aad#gid=0


    popLabel  cellModel cellType  projTarget  yFracRange  nominal yRange (um) density (cells/mm^3)  numCells = density*volume numCells (prev model) Annotations
    IT_L23  Izhi2007b IT    [0.12, 0.31]  [160, 420]  80,000  300 150 
    IT_L4 Izhi2007b IT    [0.31, 0.41]  [420, 570]  80,000  173   Yamawaki et al, 2015
    IT_L5A  Izhi2007b IT    [0.42, 0.52]  [570, 700]  80,000  150 54  
    IT_L5B  Izhi2007b IT    [0.52, 0.77]  [700, 1040] 40,000  196 113 
    PT_L5B  Izhi2007b PT    [0.52, 0.77]  [700, 1040] 40,000  196 72  
    IT_L6 Izhi2007b IT    [0.77, 1.0] [1040, 1350]  40,000  179 96  
    CT_L6 Izhi2007b CT    [0.77, 1.0] [1040, 1350]  40,000  179 96  
    PV_L23  Izhi2007b PV    [0.12, 0.31]  [160, 420]  10,000  37  25  
    SOM_L23 Izhi2007b SOM   [0.12, 0.31]  [160, 420]  10,000  37  25  
    PV_L5 Izhi2007b PV    [0.31, 0.77]  [420, 1040] 10,000  89  40  
    SOM_L5  Izhi2007b SOM   [0.31, 0.77]  [420, 1040] 10,000  89  40  
    PV_L6 Izhi2007b PV    [0.77, 1.0] [1040, 1350]  10,000  45  32  
    SOM_L6  Izhi2007b SOM   [0.77, 1.0] [1040, 1350]  10,000  45  32  
    background  Netstim - - -       - 
                horizontal distance (mm): 0.12    
                total cells:  1,714   

*** Article for network model
http://journal.frontiersin.org/article/10.3389/fphar.2016.00157/full

*** Added network.py to eee/sim/

Running it is functional and produces output figures.
    ipython -i
    execfile("network.py")

** Project Meeting

Srdjan will send poster and data.
Push towards a paper now.
Srdjan uses dyes: JPW1114, JPW3028


* 2017-03-15 -- Working on poster
* 2017-03-16 -- Working on poster
* 2017-03-17 -- Working on poster

* 2017-03-18 -- Cleaning up EEE dir

Want one scipt to run all my figures for the MSM IMAG meeting.  
To do this, I'm first going to clean up the EEE directory.

** Organizing EEE dir

Moving all batch functions to batch_utils.py


* 2017-03-27 -- Organization and synaptic spillover

** Goals for the day
Finish organizing EEE directory
Develop distributed synapse 

** Organization
Cleaned up batches.py
Removed batch.py after moving functions to batch_utils.py and batches to be run to batches.py
Moving functions from utils.py to batch_utils.py and deleting utils.py
Removed batch utilities from init.py (they are already in batch_utils.py)
Will run batches now to ensure they still work:
    Updated executable runbatch so that it calls batches.py instead of batch.py
        cd /u/graham/projects/eee/sim
        ./runbatch 4
      Works!
Moved all batch related stuff to sim/batches/

Having the following problem when running "batches.py":
    Warning: Could not load netParams from command line path or from default netParams.py

Problems solved:
  Needed to fix relative path to cells directory in netParams.py
  Needed new batches dir to have a softlink to x86_64 dir


** Distributed synapse

Adding a new directory to help with organization: dist_syn for "distributed synapse"
Adding more Netstims to cfg.py, reducing individual weight such that total weight remains the same


* 2017-03-28 -- Synaptic spillover and project meeting

** Goals for the day
Finalize distributed synapse
Project meeting
Work on network model

** Distributed synapse

Copy over necessary batch files first:
% cd /u/graham/projects/eee/sim
% hg copy batches/cfg.py dist_syn/cfg.py
% hg copy batches/netParams.py dist_syn/netParams.py
% hg copy batches/batch_init.py dist_syn/batch_init.py
% cd dist_syn
% hg copy cfg.py cfg_distsyn.py
% hg copy batches/batches.py dist_syn/batches.py

Modifying cfg_distsyn.py to add new NetStims at more distributed locations:
    cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': 0.5, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0, 0], 'delay': 1}
    cfg.NetStim2 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': 0.4, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0, 0], 'delay': 1}
    cfg.NetStim3 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': 0.6, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0, 0], 'delay': 1}

Now to try running batches with different weights, in two conditions:
1) one synapse at loc 0.5 in the basal dendrite, with weight X
2) three synapses at 0.4, 0.5, and 0.6, with each weight X/3

Response at soma:
file:gif/20170328_111530.png

At Bdend1 (where synapses are located):
file:gif/20170328_111729.png

Increasing stim a lot.

Soma:
file:gif/20170328_114520.png

Bdend1:
file:gif/20170328_114715.png

** Project meeting 

I should spread synapses in time as well as in space

Hines: we should check if three synapses at 1/3 weight have the same effect as one at full weight

We should use 9 nsegs instead of 10 
(but maybe bump up to 99 to check tighter spatial distributions)

More potassium at/near soma could/should decrease depolarization blockade.

Srdjan: would like to know if axon is where spikes initiate, if soma can still spike without axon

Only poster complaint: morphology looks sparse.  Sergio should use Basal tree 39 with apical tree 45.


* 2017-04-03 -- Distributed synapses

** Goals for the day
Make sure three 1/3 weight synapses are the same as 1 whole weight synapse.
Spread synapses in time as well as in space

** Distributed Synapses

Will use cfg_distsyn_3in1.py to put three 1/3 weight synapses at same place as one normal weight
Using a batch labeled: "syn3in1" will compare with batch "syn1"

Three 1/3 weight synapses do not behave the same as one full weight synapse:
file:gif/20170403_103742.png
file:gif/20170403_110111.png

** 99 nsegs 

Changing Bdend nsegs to 99 in SPI7.py
Doesn't seem to have any significant effect

Moving synaptic locations closer together
0.49, 0.50, 0.51 in cfg_distsyn3
0.48, 0.49, 0.50, 0.51, 0.52 in cfg_distsyn5

Added additional batches for coarse and fine synaptic spacing

Finer spacing seems to reduce the depolarization block:
file:gif/20170403_122716.png

** Will see what 10 1/10 weight synapses clustered around loc 0.5 does

No spiking, will increase weight to 1/5 instead of 1/10
Only one spike at highest stim, increaseing weight to 1/2
Seeing spiking now, but also depolarization blockade

** Figure for Bill
Showing response of single synapse, and fine/coarse 3 1/3 synapses
file:gif/20170403_154437.png

** Spread synapses in time

Locs: 0.48, 0.49, 0.50, 0.51, 0.52

cfg_distsyn5_away.py
delays: 1, 2, 3, 4, 5 

cfg_distsyn5_towards.py
delays: 5, 4, 3, 2, 1

Increasing weight from 1/5 to 1/2.5

Very little difference between towards and away.
Changing delay to 5 ms

cfg_distsyn5_away.py
delays: 5, 10, 15, 20, 25 

cfg_distsyn5_towards.py
delays: 25, 20, 15, 10, 5

Still not much difference between towards and away


* 2017-04-04 -- Project meeting and synapse bug fix

** Goals for the day
EEE progress report
EEE project meeting

** Progress report
https://docs.google.com/document/d/1KEUVMrgh_9-5PviW_PkZmZxISKQMmgrWtaCs15Saor4/edit#

** Project meeting

My update: 
https://docs.google.com/document/d/1gwS01MRNdvzxaiGPZgEd1haDcKDhF2xhxj2Xyrzjhc0/edit

Sergio's morph needs some improvement: apical trunk too thick for too long

Srdjan: synaptic spillover of NMDA affects 
    1) synaptic cleft
    2) dendritic spine shaft
    3) in between spines

Srdjan would like to see activate one branch, and see how distance from soma affects
    1) time delay
    2) conductance

Bill: with synaptic spillover, would be 2 - 2.5 ms synaptic delay, 
    decay time constant would be slower,
    conductance would be less

Bill: is there AMPA spillover as well?
Srdjan: that would be new and publishable

We should read Destexhe/Sejnowski paper about GABAb spillover

3 synapses of 1/3 weight each should be the same!  This is a bug.  Fix it.

Should implement plot of all currents in compartment, explore Na in particular
  because of depolarization blockade

Srdjan would like to see dendritic Na at zero and then what happens with plateau activation


** Fixing multi-synapse bug

From Salva:
ah joe, you now have option to vary 3 params simultaneously in batch, by adding ‘group’:True

Salva's example code:

    b = Batch(params=params)
    params['EEGain'] = [0.8, 1.0, 1.2]  
    params['EPVGain'] = [0.8, 1.0, 1.2]   
    params['IEGain'] = [0.5, 1.0, 1.5]  
    params['IIGain'] = [0.5, 1.0]  
    grouped = ['EEGain', 'EPVGain']
    for p in b.params:
        if p['label'] in grouped: 
            p['group'] = True

Added code to batch_utils.run_batch to allow grouping of parameters, and added "grouped" input:

    def run_batch(label, params, cfgFile, netParamsFile, batchdatadir="batch_data", grouped=None):
        """Runs a batch of simulations."""

        b = Batch(cfgFile=cfgFile, netParamsFile=netParamsFile)
        for k,v in params.iteritems():
            b.params.append({'label': k, 'values': v})
        for p in b.params:
            if p['label'] in grouped: 
                p['group'] = True
        b.batchLabel = label
        b.saveFolder = os.path.join(batchdatadir, b.batchLabel)
        b.method = 'grid'
        b.runCfg = {'type': 'mpi', 
                    'script': 'batch_init.py', 
                    'skip': True}
        b.run()

Modified code in my_batches:

    # Three synapses 1/3 weight synapses at same location
    batch = {}
    batch["label"] = "syn3in1"
    batch["cfgFile"] = "cfg_distsyn3in1.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["ratioAMPANMDA"] = [0.2]
    params[('NetStim1', 'weight', 0)] = list(np.array([0.05, 0.10, 0.15, 0.20, 0.25, 0.30])/3.0)
    params[('NetStim2', 'weight', 0)] = list(np.array([0.05, 0.10, 0.15, 0.20, 0.25, 0.30])/3.0)
    params[('NetStim3', 'weight', 0)] = list(np.array([0.05, 0.10, 0.15, 0.20, 0.25, 0.30])/3.0)
    batch["params"] = params
    batch["grouped"] = ['NetStim1', 'NetStim2', 'NetStim3']
    batches[batch["label"]] = batch

Deleted syn3in1 dir and rerunning the batch.

Error.

    Traceback (most recent call last):
      File "my_batches.py", line 153, in <module>
        run_batch(**batch)
      File "batch_utils.py", line 28, in run_batch
        if p['label'] in grouped: 
    TypeError: argument of type 'NoneType' is not iterable

Will add an if/then to check if grouped is None.

    def run_batch(label, params, cfgFile, netParamsFile, batchdatadir="batch_data", grouped=None):
        """Runs a batch of simulations."""

        b = Batch(cfgFile=cfgFile, netParamsFile=netParamsFile)
        for k,v in params.iteritems():
            b.params.append({'label': k, 'values': v})
        if grouped is not None:
            for p in b.params:
                if p['label'] in grouped: 
                    p['group'] = True
        b.batchLabel = label
        b.saveFolder = os.path.join(batchdatadir, b.batchLabel)
        b.method = 'grid'
        b.runCfg = {'type': 'mpi', 
                    'script': 'batch_init.py', 
                    'skip': True}
        b.run()

Trying again.  The batch ran.  Uncommenting syn3in1 figures in distsyn_analysis.py.

The batch was still running when I closed the terminal.  

Must have made a mistake because there shouldn't be a thousand simulations...

Checking to make sure grouping was done:

    def run_batch(label, params, cfgFile, netParamsFile, batchdatadir="batch_data", grouped=None):
        """Runs a batch of simulations."""

        b = Batch(cfgFile=cfgFile, netParamsFile=netParamsFile)
        for k,v in params.iteritems():
            b.params.append({'label': k, 'values': v})
        if grouped is not None:
            print("###################################################################")
            print("###################################################################")
            print("Grouped  Grouped  Grouped  Grouped  Grouped  Grouped  Grouped  ")
            print("###################################################################")
            print("###################################################################")

            for p in b.params:
                if p['label'] in grouped: 
                    p['group'] = True
        b.batchLabel = label
        b.saveFolder = os.path.join(batchdatadir, b.batchLabel)
        b.method = 'grid'
        b.runCfg = {'type': 'mpi', 
                    'script': 'batch_init.py', 
                    'skip': True}
        b.run()


Here are the commands to run the batch (have to delete old one first):

    cd /u/graham/projects/eee/sim/dist_syn/
    rm -r batch_data/syn3in1/
    ./runbatch 4

Will update Netpyne to ensure I have the latest version.

Chat with Salvador:

    Hmmm… Somehow I didn’t do it right, because I there are a million sims running...

    [4:20]  
    Is this a recent improvement?  I’m going to update Netpyne to be sure...

    [4:21]  
    netpyne

    salvadord [4:21 PM] 
    hmm, yeah relatively recent, but think was already in prev version 0.6.8

    joe [4:22 PM] 
    Hmmm, I have 0.6.8

    [4:22]  
    What’s current?

    salvadord [4:22 PM] 
    you can dry-run first by eg. commenting out init.py — maybe add print statement

    [4:23]  
    current stable 0.6.8, but 0.6.9 in dev already has many improvemnts

    [4:23]  
    just git pull to update to latest dev

    joe [4:31 PM] 
    Updated and still same problem…

    joe [4:32 PM] 
    added and commented on this Python snippet
    def run_batch(label, params, cfgFile, netParamsFile, batchdatadir="batch_data", grouped=None):
        """Runs a batch of simulations."""
    ​
        b = Batch(cfgFile=cfgFile, netParamsFile=netParamsFile)
        for k,v in params.iteritems():
            b.params.append({'label': k, 'values': v})
        if grouped is not None:
            
            print("###################################################################")
            print("Grouped  Grouped  Grouped  Grouped  Grouped  Grouped  Grouped  ")
            print("###################################################################")
    ​
            for p in b.params:
                if p['label'] in grouped: 
                    p['group'] = True
        b.batchLabel = label
        b.saveFolder = os.path.join(batchdatadir, b.batchLabel)
        b.method = 'grid'
        b.runCfg = {'type': 'mpi', 
                    'script': 'batch_init.py', 
                    'skip': True}
        b.run()
    1 Comment Collapse
    Here's my batch running code with the new grouping...

    joe [4:33 PM] 
    added and commented on this Python snippet
    # Three synapses 1/3 weight synapses at same location
    batch = {}
    batch["label"] = "syn3in1"
    batch["cfgFile"] = "cfg_distsyn3in1.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["ratioAMPANMDA"] = [0.2]
    params[('NetStim1', 'weight', 0)] = list(np.array([0.05, 0.10, 0.15, 0.20, 0.25, 0.30])/3.0)
    params[('NetStim2', 'weight', 0)] = list(np.array([0.05, 0.10, 0.15, 0.20, 0.25, 0.30])/3.0)
    params[('NetStim3', 'weight', 0)] = list(np.array([0.05, 0.10, 0.15, 0.20, 0.25, 0.30])/3.0)
    batch["params"] = params
    batch["grouped"] = ['NetStim1', 'NetStim2', 'NetStim3']
    batches[batch["label"]] = batch
    1 Comment Collapse
    Here's the syn3in1 batch stuff.

    joe [4:34 PM] 
    I get the “grouped” print message, so I’m not sure what the problem is...

    salvadord [4:37 PM] 
    ah for the grouped you have to specify the full key: eg. ('NetStim1', 'weight', 0)

    joe [4:37 PM] 
    I knew it would be something I would never come up with on my own. Thanks.

    new messages
    salvadord [4:37 PM] 
    np, let me know if that solves it

Three 1/3 weight synapses now produces the same results as 1 full weight. :sweat_smile:


* 2017-04-05 -- Fixed Netpyne bug, explored spatiotemporal dists of synapses

** Goals for the day
Analyze Destexhe/Sejnowski GABAb spillover article
Explore spatiotemporal distribution of glutamate stim

** GABAb spillover
https://paperpile.com/view/89169979-96e2-06ca-947a-0837d70dd6ba

G protein activation kinetics and spillover of gamma-aminobutyric acid
may account for differences between inhibitory responses in the
hippocampus and thalamus

** Fixed Netpyne bug where a batch had to have ungrouped parameters
/usr/site/nrniv/local/python/netpyne/netpyne/batch.py

Made changes, then:
    git commit -a -m "Fixed problem where there had to be at least one ungrouped param in batch.py, added .DS_Store to .gitignore."

Got error:
    graham-mac% git push
    remote: Permission to Neurosim-lab/netpyne.git denied to joewgraham.
    fatal: unable to access 'https://github.com/Neurosim-lab/netpyne.git/': The requested URL returned error: 403

Salva says I need to make a pull request, can't push directly.  Instructions here:
https://docs.google.com/document/d/1pSfHrdjwNSf6xpeV0F4bw3SGDdQmW7DTANtIjvA_G28/edit#
Looking into that.

From the document:

    Collaboration workflow 1 (using Fork; safer since can't mess up other people's work):
    Fork main repository -- go to github and click on "Fork"
    Get rid of old version of repository if you have one
    Clone the forked repository 
    Follow instructions shown by clicking "Clone or download" on your Fork OR
    git clone https://github.com/YourGitName/REPONAME
    Make changes in development branch of your forked repo 
    git checkout development; check with git branch
    Edit away
    Merge any changes in development branch of main repo into your development branch
    git remote add upstream git@github.com:Neurosim-lab/netpyne.git OR
    git remote add upstream https://github.com/Neurosim-lab/netpyne.git 
    (NOTE: only have to do this once, to set up new remote upstream to the main repo)
    git fetch upstream
    git merge upstream/development OR
    git merge --strategy-option=theirs upstream/development [to force merge]
    Create Pull Request (button 1 from left) from development branch of forked repo to development branch of main repo
    Owner of main repo will check Pull Request and merge if ok
    If main repo changes you will have to pull+merge changes from the main repo into your fork:

What I did:

    Went to Github: https://github.com/Neurosim-lab/netpyne
    Clicked on "Fork", which brought me here: https://github.com/joewgraham/netpyne
    graham-mac% cd ~
    graham-mac% mkdir netpyne_temp
    graham-mac% cd netpyne_temp
    graham-mac% git clone https://github.com/joewgraham/netpyne
    Cloning into 'netpyne'...
    remote: Counting objects: 7294, done.
    remote: Total 7294 (delta 0), reused 0 (delta 0), pack-reused 7294
    Receiving objects: 100% (7294/7294), 21.15 MiB | 804.00 KiB/s, done.
    Resolving deltas: 100% (5082/5082), done.
    graham-mac% cd netpyne
    graham-mac% git branch
    * master
    graham-mac% git checkout development
    Branch development set up to track remote branch development from origin.
    Switched to a new branch 'development'
    graham-mac% git branch
    [asterisk] development
      master
    graham-mac% cp /usr/site/nrniv/local/python/netpyne/netpyne/batch.py netpyne/batch.py
    overwrite netpyne/batch.py? (y/n [n]) y
    graham-mac% git status
    On branch development
    Your branch is up-to-date with 'origin/development'.
    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)

      modified:   netpyne/batch.py

    no changes added to commit (use "git add" and/or "git commit -a")
    graham-mac% git commit -a -m "Fixed bug where batch.py required ungrouped param, added .DS_Store to .gitignore"
    [development f49d703] Fixed bug where batch.py required ungrouped param, added .DS_Store to .gitignore
     1 file changed, 180 insertions(+), 70 deletions(-)
    graham-mac% git remote add upstream https://github.com/Neurosim-lab/netpyne.git
    graham-mac% git fetch upstream
    remote: Counting objects: 687, done.
    remote: Compressing objects: 100% (46/46), done.
    remote: Total 687 (delta 311), reused 289 (delta 289), pack-reused 352
    Receiving objects: 100% (687/687), 376.92 KiB | 290.00 KiB/s, done.
    Resolving deltas: 100% (503/503), completed with 57 local objects.
    From https://github.com/Neurosim-lab/netpyne
     * [new branch]      development            -> upstream/development
     * [new branch]      documentation          -> upstream/documentation
     * [new branch]      master                 -> upstream/master
     * [new branch]      neuroml_export         -> upstream/neuroml_export
     * [new branch]      new_connections        -> upstream/new_connections
     * [new branch]      python3                -> upstream/python3
     * [new branch]      revert-161-lkmn_dev    -> upstream/revert-161-lkmn_dev
     * [new branch]      temp_fix_dev_nml       -> upstream/temp_fix_dev_nml
     * [new branch]      test_host_distribution -> upstream/test_host_distribution
     * [new branch]      travis_test            -> upstream/travis_test
     * [new tag]         v0.6.8                 -> v0.6.8
     * [new tag]         v0.6.5                 -> v0.6.5
     * [new tag]         v0.6.6                 -> v0.6.6
     * [new tag]         v0.6.7                 -> v0.6.7
    graham-mac% git merge upstream/development
    Auto-merging netpyne/batch.py
    CONFLICT (content): Merge conflict in netpyne/batch.py
    Automatic merge failed; fix conflicts and then commit the result.
    graham-mac% git merge --strategy-option=theirs upstream/development
    error: Merging is not possible because you have unmerged files.
    hint: Fix them up in the work tree, and then use 'git add/rm <file>'
    hint: as appropriate to mark resolution and make a commit.
    fatal: Exiting because of an unresolved conflict.

Ugh.  Starting over.

    cd ~
    mkdir netpyne_temp
    cd netpyne_temp
    git clone https://github.com/joewgraham/netpyne
    cd netpyne
    git checkout development
    git remote add upstream https://github.com/Neurosim-lab/netpyne.git
    git fetch upstream
    cp /usr/site/nrniv/local/python/netpyne/netpyne/batch.py netpyne/batch.py
    git commit -a -m "Fixed bug where batch.py required ungrouped param, added .DS_Store to .gitignore"
    git add netpyne/batch.py
    git commit -m "I believe I am merging latest with my change to batch.py..."
    git push

    Then I went to https://github.com/joewgraham/netpyne/tree/development
    And clicked on "Compare & pull request"
    
    Seems to have worked! 


** Spatiotemporal distribution of glutamate stim

Fixing problems in eee/sim/dist_syn/my_batches.py to rerun all batches

Adding a standard set of stim weights:
    stim_weights = [0.04, 0.06, 0.08, 0.10, 0.12]

The following code:

    # Three synapses: fine synaptic spacing
    batch = {}
    batch["label"] = "syn3_fine"
    batch["cfgFile"] = "cfg_distsyn3_fine.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["ratioAMPANMDA"] = [0.2]
    params[('NetStim1', 'weight', 0)] = list(np.array([0.05, 0.10, 0.15, 0.20, 0.25, 0.30])/3.0)
    batch["params"] = params
    batches[batch["label"]] = batch

Becomes:

    # Three synapses: fine synaptic spacing
    batch = {}
    batch["label"] = "syn3_fine"
    batch["cfgFile"] = "cfg_distsyn3_fine.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[('NetStim1', 'weight', 0)] = list(np.array(stim_weights)/3.0)
    params[('NetStim2', 'weight', 0)] = list(np.array(stim_weights)/3.0)
    params[('NetStim3', 'weight', 0)] = list(np.array(stim_weights)/3.0)
    batch["params"] = params
    batch["grouped"] = [('NetStim1', 'weight', 0),('NetStim2', 'weight', 0),('NetStim3', 'weight', 0)]
    batches[batch["label"]] = batch

And so on through the rest of the file.

Hmmm... Batches run, but there are a million sims...

Forgot to group some of the NetStim params.

Fixed now.

Running batches...

Success!

Next on to fixing up the analysis for the new param groupings...

* 2017-04-06 -- Grouped param analysis

** Goals for the day
Fix analysis of spatiotemporal distribution of glutamate stim

** Fixing distsyn_analysis

Batches run now, so need to fix analysis for new param groupings

Need to create a new plotting function that can handle batches with a single
parameter being varied.  Would be good to have a generic "batch plotter" that
can handle any batch fed to it...

    In [2]: execfile("distsyn_analysis.py")
    Reading data...
    0 files missing
    ---------------------------------------------------------------------------
    IndexError                                Traceback (most recent call last)
    <ipython-input-2-fe6e76d6d004> in <module>()
    ----> 1 execfile("distsyn_analysis.py")

    /u/graham/projects/eee/sim/dist_syn/distsyn_analysis.py in <module>()
         15 
         16 title = 'One synapse: Voltage Traces from Soma during "Glutamate Simulation"'
    ---> 17 output = get_vtraces(params, data)
         18 fig = plotrelation2(par1label="AMPA/NMDA", par2label="Glut Stim", swapaxes=False, sharey=False, title=title, **output)
         19 fig.savefig(os.path.join(outputdir, "dist_syn_1_soma_1.png"))

    /u/graham/projects/eee/sim/dist_syn/batch_analysis.py in get_vtraces(params, data, section, stable)
        204 
        205     p1vals = params[0]['values']
    --> 206     p2vals = params[1]['values']
        207     p1valsdic = {val: i for i,val in enumerate(p1vals)}
        208     p2valsdic = {val: i for i,val in enumerate(p2vals)}

    IndexError: list index out of range

Should fix batch_analysis.py/get_vtraces() to handle any number of parameters

Have to think about how to handle grouped parameters -- they won't always all 
have the same values...

Here's what params looks like for the batch syn3in1:

    graham-mac% cd /u/graham/projects/eee/sim
    graham-mac% ipython -i init.py
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul  2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.

    IPython 5.1.0 -- An enhanced Interactive Python.
    ?         -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help      -> Python's own help system.
    object?   -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 (1484:2888e759fdfe) 2016-12-02
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod

    Initialized EEE simulations from init.py

    In [1]: cd dist_syn/
    /u/graham/projects/eee/sim/dist_syn

    In [3]: list_batches()
    Out[3]: 
    ['syn1',
     'syn10',
     'syn3_coarse',
     'syn3_fine',
     'syn3in1',
     'syn5_away2',
     'syn5_coarse',
     'syn5_fine',
     'syn5_towards2']

    In [4]: params, data = load_batch("syn3in1")
    Reading data...
    120 files missing

    In [5]: params
    Out[5]: 
    [{u'group': True,
      u'label': [u'NetStim1', u'weight', 0],
      u'values': [0.013333333333333334,
       0.02,
       0.02666666666666667,
       0.03333333333333333,
       0.04]},
     {u'group': True,
      u'label': [u'NetStim2', u'weight', 0],
      u'values': [0.013333333333333334,
       0.02,
       0.02666666666666667,
       0.03333333333333333,
       0.04]},
     {u'group': True,
      u'label': [u'NetStim3', u'weight', 0],
      u'values': [0.013333333333333334,
       0.02,
       0.02666666666666667,
       0.03333333333333333,
       0.04]}]

So each parameter should have group value be True or False, which is helpful.


* 2017-04-07 -- Batch analysis improvements

** Goals for the day
Improve analysis routines so they work for any batch (any number of params/values)
Add capability to compare two or more diff batches on same plot

** Analysis improvement

Every measurement should work for every batch.  Right now they only work for 2D
batches (batches with two parameters being varied).

Couldn't push because Salva had made changes, so need to pull and merge.

Adding another alias to my .tcshrc file:
    alias hgpull  'hg pull ssh://no.neurosim.downstate.edu://u/graham/projects/eee'

Working on get_vtraces()

The following:

    p1vals = params[0]['values']
    p2vals = params[1]['values']
    p1valsdic = {val: i for i,val in enumerate(p1vals)}
    2valsdic = {val: i for i,val in enumerate(p2vals)}

Becomes:

    paramvalues = ()
    paramvaluedicts = ()
    for param in params:
        paramvalues.append(param['values'])
        paramvaluedicts.append({val: ind for ind, val in enumerate(param['values'])})

And now this:

    traces = [[ [] for p1 in range(len(p1vals))] for p2 in range(len(p2vals))]

Must somehow be made to work with any number of parameters...

It seems creating a numpy array will work. 

    numpy.zeros

    numpy.zeros(shape, dtype=float, order='C')
    Return a new array of given shape and type, filled with zeros.

    Parameters: 
    shape : int or sequence of ints
    Shape of the new array, e.g., (2, 3) or 2.
    dtype : data-type, optional
    The desired data-type for the array, e.g., numpy.int8. Default is numpy.float64.
    order : {‘C’, ‘F’}, optional
    Whether to store multidimensional data in C- or Fortran-contiguous (row- or column-wise) order in memory.
    Returns:  
    out : ndarray
    Array of zeros with the given shape, dtype, and order.

So it will become:

    shape = ()
    for param in params:
        shape.append(len(param['values']))
    traces = np.zeros(shape)

Actually, I'll include it in the earlier for loop.

So now I have to fill in the empty traces array.  Which used to be done as such:

    for key, datum in data.iteritems():
        
        cellLabel = datum['simData'][seckey].keys()[0]
        p1index = p1valsdic[datum['paramValues'][0]]
        p2index = p2valsdic[datum['paramValues'][1]]
        vtrace = datum['simData'][seckey][cellLabel]
        if stable is not None:
            vtrace_stable = vtrace[stable:]
        traces[p2index][p1index] = vtrace_stable

Now, the whole thing will become:

    def get_vtraces(params, data, section="soma", stable=150):
        """Gets the voltage traces for each batch for the chosen section.
        For use with plotrelation2()."""
        
        seckey = "V_" + section
        stable = int(stable / recstep)

        paramvalues = ()
        paramvaluedicts = ()
        shape = ()
        for param in params:
            paramvalues.append(param['values'])
            paramvaluedicts.append({val: ind for ind, val in enumerate(param['values'])})
            shape.append(len(param['values']))

        traces = np.zeros(shape) 

        for key, datum in data.iteritems():
            cellLabel = datum['simData'][seckey].keys()[0]
            vtrace = datum['simData'][seckey][cellLabel]
            if stable is not None:
                vtrace = vtrace[stable:]
            tracesindex = ()
            for paramindex, param in enumerate(params):
                tracesindex.append(paramvaluedicts[paramindex][datum['paramValues'][paramindex]])
            traces[tracesindex] = vtrace

        time = recstep * np.arange(0, len(vtrace), 1)
        if stable is not None:
            time = time[stable:]

        output = {}
        output['yarray'] = traces
        output['xvector'] = time_stable
        output['params'] = params
        output['autoylabel'] = "Membrane Potential (mV)"
        output['autoxlabel'] = "Time (ms)"
        output['autotitle'] = "Voltage Traces at: " + section
        return output

This should scale with the number of parameters.  Fingers crossed.

Fixed a couple of bugs and it seems to work.

Now on to plotting traces no matter how many parameters there are...

* 2017-04-10 -- Batching with grouped params

** Goals for the day
Improve batch analysis to handle grouped parameters
Improve plotting routines so they work for any batch (any number of params/values)
Add capability to compare two or more diff batches on same plot

** Grouped parameters

*** Grouped parameters will require special handling during analysis and plotting

    In [10]: params, data = load_batch("syn3in1")
    Reading data...
    120 files missing

    In [11]: vt = get_vtraces(params, data)
    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    <ipython-input-11-6a0926167b35> in <module>()
    ----> 1 vt = get_vtraces(params, data)

    /u/graham/projects/eee/sim/batches/batch_analysis.py in get_vtraces(params, data, section, stable)
        261         for paramindex, param in enumerate(params):
        262             tracesindex.append(paramvaluedicts[paramindex][datum['paramValues'][paramindex]])
    --> 263         traces[tracesindex] = vtrace
        264 
        265     time = recstep * np.arange(0, len(vtrace), 1)

    ValueError: shape mismatch: value array of shape (8500,) could not be broadcast to indexing result of shape (3,5,5)

    In [12]: params
    Out[12]: 
    [{u'group': True,
      u'label': [u'NetStim1', u'weight', 0],
      u'values': [0.013333333333333334,
       0.02,
       0.02666666666666667,
       0.03333333333333333,
       0.04]},
     {u'group': True,
      u'label': [u'NetStim2', u'weight', 0],
      u'values': [0.013333333333333334,
       0.02,
       0.02666666666666667,
       0.03333333333333333,
       0.04]},
     {u'group': True,
      u'label': [u'NetStim3', u'weight', 0],
      u'values': [0.013333333333333334,
       0.02,
       0.02666666666666667,
       0.03333333333333333,
       0.04]}]

*** Group handling

This should handle the groups (in batch_analysis.py):

    grouped = False
    for param in params:
        if 'group' not in param:
            paramvalues.append(param['values'])
            paramvaluedicts.append({val: ind for ind, val in enumerate(param['values'])})
            shape.append(len(param['values']))
        elif param['group'] is False:
            paramvalues.append(param['values'])
            paramvaluedicts.append({val: ind for ind, val in enumerate(param['values'])})
            shape.append(len(param['values']))
        elif param['group'] is True and grouped is False:
            paramvalues.append(param['values'])
            paramvaluedicts.append({val: ind for ind, val in enumerate(param['values'])})
            shape.append(len(param['values']))
            grouped = True


* 2017-04-11 -- Batch analysis improvements

** Goals for the day
Improve plotting routines so they work for any batch (any number of params/values)
Add capability to compare two or more diff batches on same plot
Project meeting

** Batch data set-up:

    In [5]: params, data = load_batch("syn3in1")
    Reading data...
    120 files missing

    In [6]: data.keys()
    Out[6]: ['_1_1_1', '_0_0_0', '_3_3_3', '_2_2_2', '_4_4_4']

    In [7]: d0 = data['_0_0_0']

    In [8]: d0.keys()
    Out[8]: [u'netpyne_version', u'net', u'simConfig', u'simData', 'paramValues']

    In [9]: d0['paramValues']
    Out[9]: (0.013333333333333334, 0.013333333333333334, 0.013333333333333334)

*** Finally got the data prep done for any number/values of parameters

    def get_vtraces(params, data, section="soma", stable=150):
        """Gets the voltage traces for each batch for the chosen section.
        For use with plotrelation2()."""
        
        seckey = "V_" + section
        stable = int(stable / recstep)

        paramnames = []
        paramvalues = []
        paramvaluedicts = []
        arrayshape = []
        grouped = False
        
        for param in params:
            paramnames.append(param['label'])
            paramvalues.append(param['values'])
            paramvaluedicts.append({val: ind for ind, val in enumerate(param['values'])})
            if 'group' not in param:
                arrayshape.append(len(param['values']))
            elif param['group'] is False:
                arrayshape.append(len(param['values']))
            elif param['group'] is True and grouped is False:
                arrayshape.append(len(param['values']))
                grouped = True

        traces = np.array([])
        timesteps = []

        for key, datum in data.iteritems():
            grouped = False
            cellLabel = datum['simData'][seckey].keys()[0]
            vtrace = datum['simData'][seckey][cellLabel]
            if not timesteps:
                timesteps = len(vtrace)
            if stable is not None:
                vtrace = vtrace[stable:]
            if traces.size == 0:
                traces = np.empty(shape=tuple(arrayshape)+(len(vtrace),))
            tracesindex = []
            
            for paramindex, param in enumerate(params):
                if 'group' not in param:
                    tracesindex.append(paramvaluedicts[paramindex][datum['paramValues'][paramindex]])
                elif param['group'] is False:
                    tracesindex.append(paramvaluedicts[paramindex][datum['paramValues'][paramindex]])
                elif param['group'] is True and grouped is False:
                    grouped = True
                    tracesindex.append(paramvaluedicts[paramindex][datum['paramValues'][paramindex]])

            traces[tracesindex] = vtrace

        time = recstep * np.arange(0, timesteps, 1)
        if stable is not None:
            time = time[stable:]

        output = {}
        output['yarray'] = traces
        output['xvector'] = time
        output['params'] = params
        output['autoylabel'] = "Membrane Potential (mV)"
        output['autoxlabel'] = "Time (ms)"
        output['autotitle'] = "Voltage Traces at: " + section
        return output

*** Now to make sure the plotting works


* 2017-04-12 -- Batch analysis improvements

** Goals for the day
Improve plotting routines so they work for any batch (any number of params/values)
Add capability to compare two or more diff batches on same plot
Finish fixing Netpyne batch issue

** Netpyne

Fixing issue where extra lines got committed to batch.py in Netpyne

Going to:
https://github.com/joewgraham/netpyne

Switched to Branch: development

Moved to netpyne/netpyne/batch.py and clicked "edit file"

Removed lines 99, 114, and 122

joe [9:07 AM] 
Okay, I made the changes in the github website, and now I have two options: 1) Commit directly to `development` branch or 2) create a new branch for this commit and start a pull request.

[9:08] 
Which should I do, the pull request?

salvadord [9:12 AM] 
yes please the pull request, otherwise I might be working locally on dev branch and make changes without merging your stuff

** Working on plotting


* 2017-04-13 -- Reading spine articles

** Goals for the day
Finish batch plotting
Work on spines

** Longer term goals
Replace mkmod with a Python script

** Spines

Articles:

https://paperpile.com/view/ee52815b-1e12-0f88-8e07-8409ef88b291
Compartmentalization of GABAergic inhibition by dendritic spines
Chiu CQ, Lur G, Morse TM, Carnevale NT, Ellis-Davies G, Higley MJ (2013)

https://paperpile.com/view/b1cf2475-36c9-0ea1-93b1-df54e1cd77ba
Cortical dendritic spine heads are not electrically isolated by the spine neck from membrane potential signals in parent dendrites. 
Popovic MA, Gao X, Carnevale NT, Zecevic D. Cereb Cortex. 2014 Feb;24(2):385-95. doi: 10.1093/cercor/bhs320. Epub 2012 Oct 10  PMID:    23054810


* 2017-04-14 -- Spines

** Goals for the day
Finalize batch plotting
Work on spines

** Longer term goals
Replace mkmod with a Python script

** Spines

*** Popovic et al.
https://paperpile.com/view/b1cf2475-36c9-0ea1-93b1-df54e1cd77ba

Spine model (figure from paper):
file:gif/20170414_083426.png

    In the basic model, the diameter × length of the head and neck
    were 1 × 1 µm and 0.2 × 1 µm, respectively. In all simulations, the
    spine head was treated as a single compartment, and the neck was
    discretized into 15 compartments of equal length (nseg = 15), which
    was more than sufficient for spatial accuracy given the range of anatomical
    and biophysical properties that was explored.

    Three different sets of biophysical properties were tried: 1 passive
    and the other 2 active. The passive model was based on (Palmer and
    Stuart 2009) and its “control” parameters were cytoplasmic resistivity
    (Ra) 105 Ω cm, specific membrane capacitance (Cm) 1 µf/cm2, and 
    membrane leak conductance (g_pas) 1/17 000 S/cm2. 

    One of the active models was based on (Tsay and Yuste 2002) but omitted 
    their sodium current; its “control” parameters were temperature 25°C, Ra
    80 Ω cm, Cm 0.8 µF/cm2, gbar_kf 0.27 µS/cm2, gbar_ks 0.67 µS/cm2,
    and g_pas either 1/160 000 S/cm2 (which was probably a typographical
    error in the paper) or the more likely 1/16 000 S/cm2. 

    The other active model was based on Stuart and Spruston (1998) and assumed
    channel densities that corresponded to the most distal dendrites in
    that model, that is, the largest channel densities, to maximize
    whatever attenuation might occur; its parameters were temperature
    35°C, Ra 68 Ω cm, Cm 1.54 µf/cm2, gbar_q 0.02 S/cm2, and g_pas 1/5357 S/cm2.

Can't find model for this paper in ModelDB, even though the article said it would 
be posted to ModelDB...

*** Chiu et al.
https://paperpile.com/view/ee52815b-1e12-0f88-8e07-8409ef88b291

Model:
https://senselab.med.yale.edu/ModelDB/ShowModel.cshtml?model=143604

neck {L=0.43 diam=0.2 } 
head {L=1.07 diam=0.61}
Harris et al. 1992 table 4, mushroom

    global_ra=200 // use Mainen et al. 1995 200 instead of 150.00 /* internal resistivity in ohm-cm */
    Cm=0.75             /* specific membrane capacitance in uF/cm^2 */
    Rm=40000            /* specific membrane resistivity in ohm-cm^2 */ 
    Vleak=-65           /* leak reversal -65mV */
    spinefactor=2.0     /* factor by which to change passive properties */
    // sometimes a spinefactor is used to increase the effective
    // membrane for the case where spines are not explicitly
    // represented.  Here, as in Grunditz, spinefactor increases the
    // effective membrane area (by being multiplied into the
    // conductances and capacitance) in addition to the spine being
    // explicitly represented.

    forall {
      insert pas  g_pas=1/(Rm)  Ra=global_ra  e_pas=Vleak }
    head {
      insert pas e_pas=Vleak  g_pas=spinefactor/Rm  Ra=global_ra  cm=spinefactor*Cm }
    neck {
      insert pas e_pas=Vleak  g_pas=spinefactor/Rm  Ra=global_ra  cm=spinefactor*Cm }

** Spine summary

Passive parameters:

Parameter           Popovic et al.          Chiu et al.
===========================================================
Neck diameter       0.2 um                  0.2 um
Neck length         1 um                    0.43 um
Head diameter       1 um                    0.61 um
Head length         1 um                    1.07 um
Ra                  105 Ωcm                 200 Ωcm
Cm                  1 µf/cm2                1.5 µf/cm2
g_pas               1/17000 S/cm2           1/20000 S/cm2          


** Spine insertion

Copied cell file SPI7.py to SPI7ds.py (ds = dendritic spine)

Added spine properties:
    # spine properties (from Popovic et al.)
      headL     = 1.0 
      headDiam  = 1.0
      neckL     = 1.0
      neckDiam  = 0.2
      necknsegs = 9
      spineRM   = 17000.0
      spineRa   = 105.0
      spineCap  = 1.0

And insert the spine:

    def add_spine(self):
      self.add_comp('neck')
      self.add_comp('head')
      self.spine = [self.neck, self.head]
      self.neck.L    = neckL
      self.neck.diam = neckDiam
      self.head.L    = headL
      self.head.diam = headDiam
      self.neck.connect(self.Bdend1, 0.5, 0.0)
      self.head.connect(self.neck, 1.0, 0.0)

And modify a few other things...

Creating a new dir: spine

Copying over netParams, cfg, and __init__ files

Symlinking the x86_64, batch_init, batch_utils, and batch_analysis dirs into 
the spine dir.

os.symlink("/u/graham/projects/eee/sim/mod/x86_64", "/u/graham/projects/eee/sim/spine/x86_64")
os.symlink("/u/graham/projects/eee/sim/batches/batch_init.py", "/u/graham/projects/eee/sim/spine/batch_init.py")
os.symlink("/u/graham/projects/eee/sim/batches/batch_utils.py", "/u/graham/projects/eee/sim/spine/batch_utils.py")
os.symlink("/u/graham/projects/eee/sim/batches/batch_analysis.py", "/u/graham/projects/eee/sim/spine/batch_analysis.py")

Also linked over the runbatch executable
os.symlink("/u/graham/projects/eee/sim/batches/runbatch", "/u/graham/projects/eee/sim/spine/runbatch")

Removed hard copy of runbatch from dist_syn and replaced with symlink
hg remove sim/dist_syn/runbatch
os.symlink("/u/graham/projects/eee/sim/batches/runbatch", "/u/graham/projects/eee/sim/dist_syn/runbatch")


* 2017-04-17 -- Spines

** Goals for the day
Work on spines

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Spine

Set up cfg file to record from spine:
    cfg.recordTraces['V_spine'] = {'sec': 'head', 'loc': 0.5, 'var': 'v'}

Modified netParams file to use SPI7ds

*** Leaving synapse on Bdend1 and recording from spine

graham-mac% cd /u/graham/projects/eee/sim/spine/
graham-mac% ./runbatch 4

Looks like that didn't work.  
Debugging by running:
    1) netParams.py 
    2) batch_init.py 
    3) batch.py

**** netParams

    graham-mac% eee
    /u/graham/projects/eee/sim
    graham-mac% cd spine
    graham-mac% ipython netParams.py
    NEURON -- VERSION 7.5 (1484:2888e759fdfe) 2016-12-02
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod
    ---------------------------------------------------------------------------
    NameError                                 Traceback (most recent call last)
    /u/graham/projects/eee/sim/spine/netParams.py in <module>()
         30 
         31 # PT cell params (6-comp)
    ---> 32 cellRule = netParams.importCellParams(label='EEE_SPI7ds', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName='../cells/SPI7ds.py', cellName='SPI7ds')
         33 
         34 # define section lists

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
        328             label = int(self._labelid)
        329             self._labelid += 1
    --> 330         secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
        331         cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globs': globs}
        332 

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
        170         modulePointer = tempModule
        171         if isinstance(cellArgs, dict):
    --> 172             cell = getattr(modulePointer, cellName)(**cellArgs) # create cell using template, passing dict with args
        173         else:
        174             cell = getattr(modulePointer, cellName)(*cellArgs)  # create cell using template, passing list with args

    /u/graham/projects/eee/sim/cells/SPI7ds.pyc in __init__(self, x, y, z, ID)
         94     self.all_sec = []
         95     self.add_comp('soma')
    ---> 96     self.set_morphology()
         97     self.insert_conductances()
         98     self.set_props()

    /u/graham/projects/eee/sim/cells/SPI7ds.pyc in set_morphology(self)
        142     self.Adend2.connect(self.Adend1, 1.0, 0.0)
        143     self.Adend3.connect(self.Adend2, 1.0, 0.0)
    --> 144     self.add_spine()
        145 
        146   def set_geom (self):

    /u/graham/projects/eee/sim/cells/SPI7ds.pyc in add_spine(self)
        117     self.add_comp('head')
        118     self.spine = [self.neck, self.head]
    --> 119     self.neck.L    = neckL
        120     self.neck.diam = neckDiam
        121     self.head.L    = headL

    NameError: global name 'neckL' is not defined

**** Fixing SPI7ds.py

Changed from this:

    def add_spine(self):
        self.add_comp('neck')
        self.add_comp('head')
        self.spine = [self.neck, self.head]
        self.neck.L    = neckL
        self.neck.diam = neckDiam
        self.head.L    = headL
        self.head.diam = headDiam
        self.necknseg = necknseg
        self.neck.connect(self.Bdend1, 0.5, 0.0)
        self.head.connect(self.neck, 1.0, 0.0)

To this:

    def add_spine(self):
        self.add_comp('neck')
        self.add_comp('head')
        self.spine = [self.neck, self.head]
        self.neck.L    = SPI7ds.neckL
        self.neck.diam = SPI7ds.neckDiam
        self.head.L    = SPI7ds.headL
        self.head.diam = SPI7ds.headDiam
        self.necknseg = SPI7ds.necknseg
        self.neck.connect(self.Bdend1, 0.5, 0.0)
        self.head.connect(self.neck, 1.0, 0.0)


*** Leaving synapse on Bdend1 and recording from spine

Bdend1 and the spine seem to be identical:
file:gif/20170417_105237.png
file:gif/20170417_105306.png

*** Moving synapse onto spine head

Changing cfg from:
  
    cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'Bdend1', 'loc': 0.5, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0, 0], 'delay': 1}

To: 

    cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'head', 'loc': 0.5, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0, 0], 'delay': 1}


Now the traces look different in Bdend1 and the spine, as expected:
file:gif/20170417_110417.png
file:gif/20170417_110444.png

Comparing directly:
file:gif/20170417_111104.png

Moving the synapse to the spine head results in more of a plateau.

** See effect of spine location along Bdend1

Adding line to cfg file:
  cfg.spineloc = 0.5



** Two synapses on one spine versus one synapse each on two spines

Will come back to this.


** Neck resistance of spine

Bill says may be some controversy over value of 50 or 500 megaohms for this parameter.

    [billl]
    can ask srdjan about where to find the controversy but in any case need the value

    [1:49] 
    i recall 50 vs 500

    [1:50] 
    guess easier to calc than to measure

    [1:50] 
    ohm-cm * L / cross-sectional-area ?

    [1:53] 
    You have: 105 (ohm*cm) / (pi*(0.1 microns)^2/4) * 1 micron
    You want: Mohms
        * 133.69015

We calculate 133 megaohms for the Popovic spine.  

From the Chiu paper (Carnevale is an author):

    “Notably, our experimental data was closely modeled using a neck resistance of 520 MΩ, similar to the value reported for hippocampal pyramidal neurons (26). ”

And from their supplementary material:

    Spines comprised a head (1 um diameter) attached to the parent dendrite by a neck 
    (1 um length, 0.07 um diameter). For default simulations, membrane specific 
    capacitance was 0.75 μF/cm, membrane specific resistance (leak) was 40 kΩ cm2, 
    and cytoplasmic resistivity was 200 Ω cm2. These default conditions yielded a 
    spine neck resistance of 520 Mohms, similar to a recent experimentally 
    determined value (26).

Interestingly, these values are different than the ones I put into a table earlier
in this notebook:

    Parameter           Popovic et al.          Chiu et al.
    ===========================================================
    Neck diameter       0.2 um                  0.2 um
    Neck length         1 um                    0.43 um
    Head diameter       1 um                    0.61 um
    Head length         1 um                    1.07 um
    Ra                  105 Ωcm                 200 Ωcm
    Cm                  1 µf/cm2                1.5 µf/cm2
    g_pas               1/17000 S/cm2           1/20000 S/cm2   

I got the values from their ModelDB model:

    https://senselab.med.yale.edu/ModelDB/ShowModel.cshtml?model=143604&file=/singleDendrite/hoc/spine_template.hoc#tabs-2   

But it looks like the values should be:

    Parameter           Popovic et al.          Chiu et al.
    ===========================================================
    Neck diameter       0.2 um                  0.2 um          ==> 0.07 um
    Neck length         1 um                    0.43 um         ==> 1 um
    Head diameter       1 um                    0.61 um         ==> 1 um
    Head length         1 um                    1.07 um         ==> 1 um
    Ra                  105 Ωcm                 200 Ωcm         ==> 200 Ωcm
    Cm                  1 µf/cm2                1.5 µf/cm2      ==> 0.75 µf/cm
    g_pas               1/17000 S/cm2           1/20000 S/cm2   ==> 


Checking to make sure we're at 520 Mohms with these values:

    ohm-cm * L / cross-sectional-area

    ((200 Ω * cm) * (1 µm)) / (pi * (((0.07/2) µm)^2)) =
    519 689 610 ohms

So we're good now.  I'll change the spine param values to the new Chiu (Carnevale) 
ones and compare with the current (133 megaohm) one.

file:gif/20170417_145223.png
file:gif/20170417_145241.png

That's a bit weird.  Creates a long-lasting plateau, but no spiking.

Will try with higher synaptic weight values.

Added the following batch to my_batches.py:

    # Higher synapse weight values, trying to see spiking
    batch = {}
    batch["label"] = "syn_spine_strong"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[('NetStim1', 'weight', 0)] = list(np.array(stim_weights) * 2)
    batch["params"] = params
    batches[batch["label"]] = batch


Comparison of 133 megaohm neck versus 520 megaohm neck:
file:gif/20170417_150415.png

Trying weaker synaptic weight now, still no spiking, but plateaus aren't as enormous.


* 2017-04-18 -- Meeting and Spines

** Goals for the day
Work on spines
Project meeting

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Emails about spines

From Bill:

    you mentioned a controversy of 50 vs 500 Mohms -- joe found 1 of the refs
    Joe Graham: From the Carnavale paper: "Notably, our experimental data was closely modeled using a neck resistance of 520 M , similar to the value reported for hippocampal pyramidal neurons (26)."
    what paper suggests 50 Mohms?

From Srdjan:

    ************************

    Science. 1996 May 3;272(5262):716-9.
    Direct measurement of coupling between dendritic spines and shafts.

    Svoboda K1, Tank DW, Denk W.
    Abstract

    Characterization of the diffusional and electrotonic coupling of spines to the dendritic shaft is crucial to understanding neuronal integration and synaptic plasticity. Two-photon photobleaching and photorelease of fluorescein dextran were used to generate concentration gradients between spines and shafts in rat CA1 pyramidal neurons. Diffusional reequilibration was monitored with two-photon fluorescence imaging. The time course of reequilibration was exponential, with time constants in the range of 20 to 100 milliseconds, demonstrating chemical compartmentalization on such time scales. These values imply that electrical spine neck resistances are unlikely to exceed 150 megohms and more likely range from 4 to 50 megohms.

    ********************************************************************************************************

    eNeuro. 2016 Mar-Apr; 3(2): ENEURO.0050-15.2016.
    Published online 2016 May 12. Prepublished online 2016 May 2. doi:  10.1523/ENEURO.0050-15.2016
    PMCID: PMC4874537
    EPSPs Measured in Proximal Dendritic Spines of Cortical Pyramidal Neurons1,2,3

    Corey D. Acker,* Erika Hoyos,* and Leslie M. Loewcorresponding author
    Author information ► Article notes ► Copyright and License information ►
    Go to:
    EPSPs occur when the neurotransmitter glutamate binds to postsynaptic receptors located on small pleomorphic membrane protrusions called dendritic spines. To transmit the synaptic signal, these potentials must travel through the spine neck and the dendritic tree to reach the soma. Due to their small size, the electrical behavior of spines and their ability to compartmentalize electrical signals has been very difficult to assess experimentally. In this study, we developed a method to perform simultaneous two-photon voltage-sensitive dye recording with two-photon glutamate uncaging in order to measure the characteristics (amplitude and duration) of uncaging-evoked EPSPs in single spines on the basal dendrites of L5 pyramidal neurons in acute brain slices from CD1 control mice. We were able to record uncaging-evoked spine potentials that resembled miniature EPSPs at the soma from a wide range of spine morphologies. In proximal spines, these potentials averaged 13.0 mV (range, 6.5–30.8 mV; N = 20) for an average somatic EPSP of 0.59 mV, whereas the mean attenuation ratio (spine/soma) was found to be 25.3. Durations of spine EPSP waveforms were found to be 11.7 ms on average. Modeling studies demonstrate the important role that spine neck resistance (Rneck) plays in spine EPSP amplitudes. Simulations used to estimate Rneck by fits to voltage-sensitive dye measurements produced a mean of 179 MΩ (range, 23–420 MΩ; N = 19). Independent measurements based on fluorescence recovery after photobleaching of a cytosolic dye from spines of the same population of neurons produced a mean Rneck estimate of 204 MΩ (range, 52–521 MΩ; N = 34).

    ********************************************************************************************************

    Electrical behaviour of dendritic spines as revealed by voltage imaging

    Marko A. Popovic, , Nicholas Carnevale, , Balazs Rozsa, & Dejan Zecevic
    Nature Communications 6, Article number: 8436 (2015), doi:10.1038/ncomms9436
    Spine neck resistance is 27 Megaohms.

    ********************************************************************************************************

From Bill:

    so Dejan had 27 Mohms and then switched to 540 a year later??

From Srdjan:

    Where did you find that information that Dejan had 27 Mohms and then switched to 540 a year later?

From Bill:

    i may have misread or misunderstood or is it very different preparations?

    whereas Carnevale in 2013 said
     "Notably, our experimental data was closely modeled using a neck resistance of 520 M , similar to the value reported for hippocampal pyramidal neurons (26). "
    ("Compartmentalization of GABAergic Inhibition by Dendritic Spines" Science 340:759)

    carnevale in 2015 noted that "experiments showed the mean values of Rneck=27+/-6 M "
    ("Electrical behaviour of dendritic spines as revealed by voltage imaging Popovic, Carnevale, Rozsa, Zecevic )

From Srdjan:

    Hi Bill,

    Dejan did not have 27 Mohms and then switched to 540 a year later.

    *********************

    If you want to ask why Ted first used 520  MΩ in 2013, and then he used 27 MΩ in 2016,  I can give you my opinion, which may or may not be correct.

    Ted used 520 MΩ in 2013 because in 2012 Nelson Spruston & Jeff Magee published a Nature paper in which they use experiments to estimate spine neck at 520 MΩ. 

    In the 2013 paper, Higley did not measure spine neck resistance.
    Higley puffed GABA on dendritic spines. 
    Higley asked Ted to model his calcium signals in dendritic spines exposed to GABAergic input.
    Ted simply grabbed the best estimate for spine neck resistance from the literature and modeled Highley's calcium imaging data.

    In the 2016 paper, Ted was trying to fit Dejan's voltage imaging data. 
    Dejan's experiments were specifically designed to test neck resistance.
    Ted's fit of the Dejan's data indicated low neck resistance.

    *********************

    Srdjan

From Bill:

    for the purposes of getting any effect of spillover we would need a 540Mohm spine neck
    if we have no reason to believe in that then we don't need to test with spines


** How to vary spine location in a batch

    joe [12:43 PM] 
    Hey Salva, I’ve added a spine to the model, and now I want to vary the spine 
    location along Bdend1 for a batch of sims.  The location is set in the neuron 
    file `SPI7ds.py` as follows:

    joe [12:44 PM] 
    added this Python snippet: add_spine
     def add_spine(self):
      self.add_comp('neck')
      self.add_comp('head')
      self.spine = [self.neck, self.head]
      self.neck.L  = SPI7ds.neckL
      self.neck.diam = SPI7ds.neckDiam
      self.head.L  = SPI7ds.headL
      self.head.diam = SPI7ds.headDiam
      self.necknseg = SPI7ds.necknseg
      self.neck.connect(self.Bdend1, SPI7ds.spineloc, 0.0)
      self.head.connect(self.neck, 1.0, 0.0)
    Add Comment Collapse

    joe [12:44 PM] 
    `SPI7ds.spineloc` is set higher in the file.

    [12:45] 
    I’m not quite sure how I would vary `SPI7ds.spineloc` in running a batch…

    salvadord [4:23 PM] 
    @batch spine location - modify in netParams after import — will be something like `cellRule['secs']['Bdend1']['topol']['parentX'] = cfg.spineLoc`

Will come back to varying spine location...

** Trying to figure out problem with high Rneck spine/synapse

Setting spine parameters as follows:

    # spine properties 
      headL     = 1.0 
      headDiam  = 1.0
      neckL     = 1.0
      neckDiam  = 0.07
      necknseg  = 9
      spineRM   = 40000.0
      spineRa   = 200.0
      spineCap  = 0.75
      spineloc  = 0.5  # location along Bdend1

Still results in big plateaus and no spiking.  Switching back to original 
parameter values and running again:

    # spine properties (from Popovic et al.)
      headL     = 1.0 
      headDiam  = 1.0
      neckL     = 1.0
      neckDiam  = 0.2
      necknsegs = 9
      spineRM   = 17000.0
      spineRa   = 105.0
      spineCap  = 1.0

The traces look much more better now: shorter plateaus and spiking

I'll create a batch to vary the spine neck diameter between 0.07 and 0.2

Added the following to netParams to allow setting spine location:
    cellRule['secs']['Bdend1']['topol']['parentX'] = cfg.spineLoc

Now to add a line to be able to set spine neck diameter:
    cellRule['secs']['neck']['geom']['diam'] = cfg.neckDiam

And an addition to cfg:
    cfg.spineloc = 0.5
    cfg.neckDiam = 0.2

And now I can vary these parameters in batch runs.  :)

Added a batch varying neck diameter to my_batches:

    # Varying neck diameter
    batch = {}
    batch["label"] = "neck_diam"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[('NetStim1', 'weight', 0)] = stim_weights
    params['neckDiam'] = [0.05, 0.10, 0.15, 0.20, 0.25]
    batch["params"] = params
    batches[batch["label"]] = batch

Added a batch to vary spine location along Bdend1:

    # Varying spine location along Bdend1
    batch = {}
    batch["label"] = "spine_loc"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[('NetStim1', 'weight', 0)] = stim_weights
    params['spineLoc'] = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
    batch["params"] = params
    batches[batch["label"]] = batch

Now to work on plotting batches again.

** Plotting batches

*** Everything works up to get_vtraces

Terminal output

    Last login: Tue Apr 18 10:53:50 on ttys000
    graham-mac% ipi
    /u/graham/projects/eee/sim
    ipython -i init.py
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul  2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.

    IPython 5.1.0 -- An enhanced Interactive Python.
    ?         -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help      -> Python's own help system.
    object?   -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 (1484:2888e759fdfe) 2016-12-02
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod

    Initialized EEE simulations from init.py

    In [1]: cd spine
    /u/graham/projects/eee/sim/spine

    In [2]: list_batches()
    Out[2]: 
    ['neck_diam',
     'spine_loc',
     'syn_Bdend1',
     'syn_spine',
     'syn_spine_133Mohms',
     'syn_spine_520M?',
     'syn_spine_strong',
     'syn_spine_weak']

    In [3]: params, data = load_batch("neck_diam")
    Reading data...
    0 files missing

    In [4]: out = get_vtraces(params, data, section="soma")

    In [5]: out.keys()
    Out[5]: ['autoylabel', 'autotitle', 'autoxlabel', 'params', 'yarray', 'xvector']

    In [6]: shape(out['xvector'])
    Out[6]: (8500,)

    In [7]: shape(out['yarray'])
    Out[7]: (5, 5, 8500)

    In [8]: out['params']
    Out[8]: 
    [{u'label': [u'NetStim1', u'weight', 0],
      u'values': [0.04, 0.06, 0.08, 0.1, 0.12]},
     {u'label': u'neckDiam', u'values': [0.05, 0.1, 0.15, 0.2, 0.25]}]

    In [9]: out['autoylabel']
    Out[9]: 'Membrane Potential (mV)'

    In [10]: out['autoxlabel']
    Out[10]: 'Time (ms)'

    In [11]: out['autotitle']
    Out[11]: 'Voltage Traces at: soma'

*** Now working on plotbatchtraces in batch_analysis.py

The params seem to be on the wrong axes, so I will rebatch with a diff number of params

Deleted the batch dir for neck_diam, added another quite small neck diam and rerunning the batches:

% eee
% cd spine
% ./runbatch 4

Yeah, there's a problem with the parameters having wrong dimensions:

    Initialized EEE simulations from init.py

    In [1]: cd spine
    /u/graham/projects/eee/sim/spine

    In [2]: params, data = load_batch("neck_diam")
    Reading data...
    0 files missing

    In [3]: out = get_vtraces(params, data, section="soma")
    ---------------------------------------------------------------------------
    IndexError                                Traceback (most recent call last)
    <ipython-input-3-de04606eae4d> in <module>()
    ----> 1 out = get_vtraces(params, data, section="soma")

    /u/graham/projects/eee/sim/batches/batch_analysis.pyc in get_vtraces(params, data, section, stable)
        248                 tracesindex.append(paramvaluedicts[paramindex][datum['paramValues'][paramindex]])
        249 
    --> 250         traces[tracesindex] = vtrace
        251 
        252     time = recstep * np.arange(0, timesteps, 1)

    IndexError: index 5 is out of bounds for axis 0 with size 5


Reversing the arrayshape seems to have solved the problem:
    arrayshape = list(reversed(arrayshape))

There's a problem with the plotting...  Not every trace is showing up, and 
traces that do show up seem to be duplicates.


* 2017-04-19 -- Pandas

** Goals for the day
Get batch plotting functional
  Ungrouped and grouped parameters
Explore spines

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Batch plotting

Will plot every v_trace from a batch to compare with multitrace plot

Committing now. Running the following code will plot all traces individually:

*** Plot all traces individually:

    graham-mac% ipi
    /u/graham/projects/eee/sim
    ipython -i init.py
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul  2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.

    IPython 5.1.0 -- An enhanced Interactive Python.
    ?         -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help      -> Python's own help system.
    object?   -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 (1484:2888e759fdfe) 2016-12-02
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod

    Initialized EEE simulations from init.py

    In [1]: cd spine
    /u/graham/projects/eee/sim/spine
    In [2]: params, data = load_batch("neck_diam")
    In [3]: out = get_vtraces(params, data, section="soma")
    In [4]: plotbatchtraces(**out)


*** Plot all together:

    In [5]: plotrelation2(**out)

file:gif/20170419_111541.png

The altogether plot is made up of all the individual plots, so that's not the problem.

*** Exploring problem

It seems like the parameter axes are inverted, because increasing the synaptic weight
should increase the plateau effect.

print(paramnames)
print(paramvalues)
arrayshape = list(reversed(arrayshape))
print(arrayshape)
[[u'NetStim1', u'weight', 0], u'neckDiam']
[[0.04, 0.06, 0.08, 0.1, 0.12], [0.01, 0.05, 0.1, 0.15, 0.2, 0.25]]
[6, 5]

Param1 has 5 values and Param2 has 6 values.  So I am going to stop reversing the arrayshape.

Actually, I think I might start looking into Pandas.

** PANDAS

http://pandas.pydata.org/

Pandas is already installed, so that's a plus.

Useful Pandas cheatsheet:
https://github.com/pandas-dev/pandas/blob/master/doc/cheatsheet/Pandas_Cheat_Sheet.pdf

Tutorials:
http://pandas.pydata.org/pandas-docs/stable/tutorials.html

About ready to convert my analysis code into Pandas.


* 2017-04-21 -- Pandas

** Goals for the day
Get batch plotting functional using Pandas
Explore spines

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Pandas

http://www.gregreda.com/2013/10/26/intro-to-pandas-data-structures/

Data Structures
pandas introduces two new data structures to Python - Series and DataFrame, both of which are built on top of NumPy (this means it's fast).

Series
A Series is a one-dimensional object similar to an array, list, or column in a table. It will assign a labeled index to each item in the Series. By default, each item will receive an index label from 0 to N, where N is the length of the Series minus one.

    # create a Series with an arbitrary list
    s = pd.Series([7, 'Heisenberg', 3.14, -1789710578, 'Happy Eating!'])

The Series constructor can convert a dictonary as well, using the keys of the dictionary as its index.

    d = {'Chicago': 1000, 'New York': 1300, 'Portland': 900, 'San Francisco': 1100,
         'Austin': 450, 'Boston': None}
    cities = pd.Series(d)

DataFrame

A DataFrame is a tablular data structure comprised of rows and columns, akin to a spreadsheet, database table, or R's data.frame object. You can also think of a DataFrame as a group of Series objects that share an index (the column names).

Will likely have to use MultiIndex in Pandas:
http://pandas.pydata.org/pandas-docs/stable/advanced.html

So each voltage trace will be its own Pandas series.

Can use time as the index for each series:
    s = pd.Series(v_trace, index=time)


* 2017-04-24 -- Fixed analysis and plotting, back to spines

** Goals for the day
Finish analysis improvements using Pandas
Explore spines

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Pandas

Each voltage trace can be a Pandas series
Then use nested DataFrames 

Actually, it looks like it will be better to use xarray:
http://xarray.pydata.org/en/stable/

"xarray (formerly xray) is an open source project and Python package that aims to bring the labeled data power of pandas to the physical sciences, by providing N-dimensional variants of the core pandas data structures."

"pandas excels at working with tabular data. That suffices for many statistical analyses, but physical scientists rely on N-dimensional arrays – which is where xarray comes in.

"xarray aims to provide a data analysis toolkit as powerful as pandas but designed for working with homogeneous N-dimensional arrays instead of tabular data. When possible, we copy the pandas API and rely on pandas’s highly optimized internals (in particular, for fast indexing)."

    graham-mac% pip install xarray
    Collecting xarray
      Downloading xarray-0.9.5-py2.py3-none-any.whl (302kB)
        100% |████████████████████████████████| 307kB 1.2MB/s 
    Requirement already satisfied: pandas>=0.15.0 in ./anaconda/lib/python2.7/site-packages (from xarray)
    Requirement already satisfied: numpy>=1.7 in /usr/local/lib/python2.7/site-packages (from xarray)
    Requirement already satisfied: python-dateutil in ./anaconda/lib/python2.7/site-packages (from pandas>=0.15.0->xarray)
    Requirement already satisfied: pytz>=2011k in ./anaconda/lib/python2.7/site-packages (from pandas>=0.15.0->xarray)
    Requirement already satisfied: six>=1.5 in ./anaconda/lib/python2.7/site-packages (from python-dateutil->pandas>=0.15.0->xarray)
    Installing collected packages: xarray
    Successfully installed xarray-0.9.5
    graham-mac% 


DataArray
xarray.DataArray is xarray’s implementation of a labeled, multi-dimensional array. It has several key properties:

values: a numpy.ndarray holding the array’s values
dims: dimension names for each axis (e.g., ('x', 'y', 'z'))
coords: a dict-like container of arrays (coordinates) that label each point (e.g., 1-dimensional arrays of numbers, datetime objects or strings)
attrs: an OrderedDict to hold arbitrary metadata (attributes)

xarray uses dims and coords to enable its core metadata aware operations. Dimensions provide names that xarray uses instead of the axis argument found in many numpy functions. Coordinates enable fast label based indexing and alignment, building on the functionality of the index found on a pandas DataFrame or Series.

** Not sure we really need to use Pandas/xarray

It won't make getting the data into proper format any easier
Doesn't seem like it would make analyzing/plotting data any easier

** Back to working on spines

Still a problem where the synaptic weight doesn't seem to be varied, and 
varying the spine neck diameter seems to be like varying the weight...

I'll look into the json files for the batch to see what's going on.

    # Read json files to see if parameters are being varied properly
    batch_name = "neck_diam"
    batch_dir = os.path.join(os.getcwd(), "batch_data", batch_name)
    for p1 in range(5):
      for p2 in range(6):
        print("p1: " + str(p1))
        print("p2: " + str(p2))
        filename = batch_name + "_" + str(p1) + "_" + str(p2) + "_cfg.json"
        filepath = os.path.join(batch_dir, filename)
        data = load_json(filepath)
        print(data['simConfig']['NetStim1']['weight'])
        print(data['simConfig']['neckDiam'])
        print

This gives the following output:

    p1: 0
    p2: 0
    [0.04, 0]
    0.01

    p1: 0
    p2: 1
    [0.04, 0]
    0.05

    p1: 0
    p2: 2
    [0.04, 0]
    0.1

    p1: 0
    p2: 3
    [0.04, 0]
    0.15

    p1: 0
    p2: 4
    [0.04, 0]
    0.2

    p1: 0
    p2: 5
    [0.04, 0]
    1.0

    p1: 1
    p2: 0
    [0.06, 0]
    0.01

    p1: 1
    p2: 1
    [0.06, 0]
    0.05

    p1: 1
    p2: 2
    [0.06, 0]
    0.1

    p1: 1
    p2: 3
    [0.06, 0]
    0.15

    p1: 1
    p2: 4
    [0.06, 0]
    0.2

    p1: 1
    p2: 5
    [0.06, 0]
    1.0

    p1: 2
    p2: 0
    [0.08, 0]
    0.01

    p1: 2
    p2: 1
    [0.08, 0]
    0.05

    p1: 2
    p2: 2
    [0.08, 0]
    0.1

    p1: 2
    p2: 3
    [0.08, 0]
    0.15

    p1: 2
    p2: 4
    [0.08, 0]
    0.2

    p1: 2
    p2: 5
    [0.08, 0]
    1.0

    p1: 3
    p2: 0
    [0.1, 0]
    0.01

    p1: 3
    p2: 1
    [0.1, 0]
    0.05

    p1: 3
    p2: 2
    [0.1, 0]
    0.1

    p1: 3
    p2: 3
    [0.1, 0]
    0.15

    p1: 3
    p2: 4
    [0.1, 0]
    0.2

    p1: 3
    p2: 5
    [0.1, 0]
    1.0

    p1: 4
    p2: 0
    [0.12, 0]
    0.01

    p1: 4
    p2: 1
    [0.12, 0]
    0.05

    p1: 4
    p2: 2
    [0.12, 0]
    0.1

    p1: 4
    p2: 3
    [0.12, 0]
    0.15

    p1: 4
    p2: 4
    [0.12, 0]
    0.2

    p1: 4
    p2: 5
    [0.12, 0]
    1.0

So it does look like things are being varied properly, except that the AMPA
weight is always set to zero...

I am going to run this batch in the spine dir and see how it comes out:

    # Varying NMDA Tau2 and glutamate stim
    batch = {}
    batch["label"] = "NMDATau2_synweight"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["tau2NMDA"] = [75, 150, 300, 600, 1200]
    params[('NetStim1', 'weight', 0)] = [0.05, 0.06, 0.07, 0.08, 0.09, 0.10]
    batch["params"] = params
    batches[batch["label"]] = batch

I added a quicker plotting/saving routine to batch_analysis.py:

    def plot_vtraces(batchname, section="soma", par1label=None, par2label=None, save=True):
        params, data = batch_utils.load_batch(batchname)
        title = 'Voltage traces from ' + section
        output = get_vtraces(params, data)
        fig1 = plotrelation2(par1label=par1label, par2label=par2label, swapaxes=False, sharey=True, title=title, **output)
        fig2 = plotrelation2(par1label=par1label, par2label=par2label, swapaxes=True, sharey=True, title=title, **output)
        if save:
            fig1.savefig(os.path.join(outputdir, batchname + "_vtrace_" + section + "_1.png"))
            fig2.savefig(os.path.join(outputdir, batchname + "_vtrace_" + section + "_2.png"))

Now to plot the last batch:
file:gif/20170424_123544.png

There's a problem with the plotting, because, e.g., this trace doesn't appear:
file:gif/20170424_123650.png

Let's see if get_vtraces is accurately storing the data.

params, data = load_batch("NMDATau2_synweight")
output = get_vtraces(params, data)
data = output['yarray']
for p1 in range(shape(data)[0]):
    for p2 in range(shape(data)[1]):
        plt.figure()
        plt.plot(data[p1][p2][:])
        plt.title(str(p1) + " " + str(p2))

Aha. So the problem is in get_vtraces.

** Fixing get_vtraces

The whole problem was that I needed to index into an array using a tuple
instead of a list.

This doesn't work:
    tracesindex = [1,1]
    traces[tracesindex] = data

This does:
    tracesindex = [1,1]
    traces[tuple(tracesindex)] = data

Now that get_vtraces is working, time to fix the plotting.

** Fixing plotrelation2

Woohoo! It's working again.

cd /u/graham/projects/eee/sim
ipython -i init.py
cd spine
params, data = load_batch("NMDATau2_synweight")
output = get_vtraces(params, data, section="spine")
plotrelation2(swapaxes=True, **output)

file:gif/20170424_150734.png

** Improving plotrelation2

Want to add the ability to plot multiple traces on one figure.

    cd eee/sim
    ipython -i init.py
    cd spine

    params, data = load_batch("NMDATau2_synweight")
    output = get_vtraces(params, data, section="spine")
    output2 = get_vtraces(params, data, section="soma")
    fig = plotrelation2(par2label="Syn Weight", swapaxes=True, **output)
    fig = plotrelation2(swapaxes=True, fig=fig, **output2)

file:gif/20170424_160637.png

Should change get_vtraces to include the section recorded from in its dict.
Then use that info to make a legend on multitrace plots

    params, data = load_batch("NMDATau2_synweight")
    output = get_vtraces(params, data, section="spine")
    output2 = get_vtraces(params, data, section="Bdend1")
    output3 = get_vtraces(params, data, section="soma")
    fig = plotrelation2(par2label="Syn Weight", swapaxes=True, **output)
    fig = plotrelation2(swapaxes=True, fig=fig, **output2)
    fig = plotrelation2(swapaxes=True, fig=fig, **output3)

file:gif/20170424_165830.png

** Plotting other batches

Adding a function to batch_analysis.py:

    def plot_vtraces(batchname, section="soma", par1label=None, par2label=None, save=True):
        params, data = batch_utils.load_batch(batchname)
        output = get_vtraces(params, data, section="spine")
        output2 = get_vtraces(params, data, section="Bdend1")
        output3 = get_vtraces(params, data, section="soma")
        fig1 = plotrelation2(par1label=None, par2label=None, swapaxes=True, **output)
        fig1 = plotrelation2(par1label=None, par2label=None, swapaxes=True, fig=fig1, **output2)
        fig1 = plotrelation2(par1label=None, par2label=None, swapaxes=True, fig=fig1, **output3)
        fig2 = plotrelation2(par1label=None, par2label=None, swapaxes=False, **output)
        fig2 = plotrelation2(par1label=None, par2label=None, swapaxes=False, fig=fig2, **output2)
        fig2 = plotrelation2(par1label=None, par2label=None, swapaxes=False, fig=fig2, **output3)
        if save:
            fig1.savefig(os.path.join(outputdir, batchname + "_vtrace_1.png"))
            fig2.savefig(os.path.join(outputdir, batchname + "_vtrace_2.png"))


file:gif/20170424_182137.png
file:gif/20170424_182607.png

Synaptic location either has very little effect, or I'm not actually varying it
in my_batches.

** Increasing Neck resistance up to 500 mega ohms

file:gif/20170424_202142.png

And then increasing the stim level:
file:gif/20170424_202338.png

Never causes spiking.

Lower stim levels:
file:gif/20170424_202943.png


* 2017-04-25 -- Multiple spines

** Goals for the day
Explore multiple spines

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Multiple spines

Added "spines" dir to sim dir.

Now need to symlink necessary files:
os.symlink(src, dest)

Sources:
/u/graham/projects/eee/sim/batches/batch_analysis.py
/u/graham/projects/eee/sim/batches/batch_init.py
/u/graham/projects/eee/sim/batches/batch_utils.py
/u/graham/projects/eee/sim/batches/runbatch
/u/graham/projects/eee/sim/mod/x86_64

Destination:
/u/graham/projects/eee/sim/spines/name

Also need to hard copy over some files:
__init__.py
cfg.py
my_batches.py
netParams.py


* 2017-04-29 -- Multiple spines

** Goals for the day
Implement multiple spines

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Multiple spines

Need to modify eee/sim/spines/:
  cfg.py
  my_batches.py
  netParams.py

Will start with 5 spines/synapses:
    adding sim/cells/SPI7ds5.py
    adding sim/spines/cfg_5spines.py


* 2017-05-02 -- RPPR and spineLoc

** Goals for the day
Work on RPPR update
Continue to work on multiple spines
Submit invoice for last six months
Prepare new contract

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** RPPR

*** Chats about RPPR

    billl [6:30 AM] 
    new RPPR due may 15 so we should get in by may 5 (ideally) so that office can process it

    [6:31] 
    last RPPR was https://docs.google.com/document/d/1OQPYaAqH_KXjWtv05D0TYojF3MTNjlLItVva5cDO46U/edit#heading=h.z8a9vfifh64w

    billl [6:31 AM] 
    shared this file
    M1U01 RPPR 2017
    Document from Google Drive
    Click to open in Google Drive
    Add Comment

    billl [6:31 AM] 
    we should be able to reuse most sections except aims and accomplishments

    billl [6:42 AM] 
    trying to get all the files into 1 dir on gdocs -- hard to organize there

    [6:42] 
    https://drive.google.com/drive/u/0/folders/0B8v-knmZRjhtUkV3LTZKQlhRb2c?ths=true

    [6:44] 
    problem on last one was making too long -- salvador was used to the DARPA style of exhaustive and exhausting prog reports -- the RPPRs are much simpler shorter easier so we shouldn't spend too much time on them;  as far as I was concerned the DARPA prog reports were such a hassle that they actively impeded progress!

    sergio [7:39 AM] 
    I’m going to start including the some data from the poster into the report, and last results from Joe and me

    billl [7:45 AM] 
    thx did you find the document??

    [7:46] 
    i think maybe is this one? -- https://docs.google.com/document/d/1KEUVMrgh_9-5PviW_PkZmZxISKQMmgrWtaCs15Saor4/edit#heading=h.e4iw9myxnz07

    billl [7:46 AM] 
    shared this file
    EEE RPPR 2017
    Document from Google Drive
    Click to open in Google Drive
    Add Comment

    billl [7:46 AM] 
    was asking salva earlier

    sergio [7:47 AM] 
    yep, we were working on that document some weeks before

    billl [7:47 AM] 
    oh ok great

    [7:47] 
    thought i had done the aims but not in there so i must have done in the wrong place

    [7:48] 
    or in my nb perhaps -- i'll find


    ----- Today May 2nd, 2017 -----
    billl [6:20 AM] 
    @fharhan -- does the next RPPR need a new budget?  -- or is that just for the R01s?

    sergio [6:42 AM] 
    for the B2, it shouldn’t exceed 2 pages

    [6:43] 
    I’m going to reorganize figs and text

    billl [6:43 AM] 
    right -- a brief descrip with maybe 2 figs

    sergio [7:30 AM] 
    I did some editing for B2

    [7:31] 
    but I need someone to read over

    billl [7:31 AM] 
    thanks joe and i will go over it

    [7:31] 
    other sections?

    [7:32] 
    @joe back?

    sergio [7:33 AM] 
    on B5, we need to mention all the activities of workshops/meetings for 2017

    billl [7:34 AM] 
    generally would be same workshops/meetings -- can add in that i went to BRAIN meeting

    [7:34] 
    Dec 11-14 2016 NIH BRAIN Bethesda North Marriott Hotel & Conference
    http://palladianpartners.cvent.com/events/3rd-annual-brain-initiative-investigators-meeting/event-summary-5258284f4d3540e4bee78c3096928307.aspx

    sergio [7:34 AM] 
    ok

    [7:35] 
    on B6, we need to state the goals for the next report

    billl [7:35 AM] 
    1. full cell; 2. network

    [7:36] 
    can take off of the aims and see which piece we are due to do (or what pieces we were due to have done that not done yet )

    sergio [7:37 AM] 
    added this Plain Text snippet
    Aim 1. Model Layer 5 pyramidal neurons showing plateaus
    1a. Build reduced multi-compartmental model with (10) compartments (mini-MC model). 
    1b. Build large multicompartmental model with full details (full-MC model). 
    1c. Build generalized-low-dimensional simplified model (GLD model)
    1d. Demonstrate input-output activity patterns and compare across models.
    Add Comment Click to expand inline 15 lines

    billl [7:37 AM] 
    we prob had a timetable too but we don't usually stick to it at all well

    [7:38] 
    so yeah can just work off the aims and see what's next

    [7:38] 
    basically what's next is mostly what the 3 of your are doing / planning to do in coming year

    sergio [7:39 AM] 
    ok

    joe [8:35 AM] 
    I’m back, and I’ll take a look at the rppr now.

    new messages
    sergio [8:42 AM] 
    welcome back Joe!

*** RPPR file
https://docs.google.com/document/d/1KEUVMrgh_9-5PviW_PkZmZxISKQMmgrWtaCs15Saor4/edit#


** Fixing bad pull request in NetPyNE

*** Chat about it

    salvadord [12:55 PM] 
    hey joe so the “+<<<<<<< HEAD” is not present in the final merged batch.py file?

    [12:55] 
    seems like its not commented so would give an error

    [12:56] 
    (sorry, I haven’t merged that many PR from other people)

    joe [1:40 PM] 
    Actually, it looks like lines 99 `<<<<<<< HEAD` 114 `=======` and 122 `>>>>>>> upstream/development` should all be removed.

    [1:40] 
    Sorry! This whole, pull, change, pull request workflow is new to me.

    salvadord [1:43 PM] 
    yeah no worries, I’m also learning as I go

    [1:43] 
    I will add you as collab of netpyne repo so its easier to make changes — can do directly instead of doing via forked repo

    [1:45] 
    only 2 other people are collabs with write permission: padraig gleeson who is implemeting neuroml export; and Sid, new guys we hired to work on netpyne

    joe [1:45 PM] 
    Nice! Membership in an exclusive club. :slightly_smiling_face:

    salvadord [1:45 PM] 
    (I removed write permissions at some point because bill messed up the dev branch :wink: )

    joe [1:46 PM] 
    Hahaha!

    salvadord [1:46 PM] 
    yeah, welcome the private club! so ideally you should still do PRs to the dev branch, instead of direct merges

    joe [1:47 PM] 
    Sounds good. I’ll do my best not to pull a Bill.  :wink:

    salvadord [1:47 PM] 
    :smile:

    [1:47] 
    https://github.com/Neurosim-lab/netpyne/invitations

    joe [1:48 PM] 
    Ohh, the sense of power…  Head swelling…  :wink:

    salvadord [1:51 PM] 
    hahah


    ----- April 12th -----
    salvadord [8:02 AM] 
    joe, can you modify the pull request you made so it has those extra lines removed? thx

    [8:03] 
    I’m gonna release a netpyne version today cause need it for students — but if not ready its ok, will include with next release

    joe [8:33 AM] 
    I’ll work on that now.

    salvadord [8:33 AM] 
    k just released, but equally useful since we work from dev version

    joe [9:07 AM] 
    Okay, I made the changes in the github website, and now I have two options: 1) Commit directly to `development` branch or 2) create a new branch for this commit and start a pull request.

    [9:08] 
    Which should I do, the pull request?

    salvadord [9:12 AM] 
    yes please the pull request, otherwise I might be working locally on dev branch and make changes without merging your stuff

    joe [9:34 AM] 
    Okay, should be done.

    salvadord [9:38 AM] 
    thx!


    ----- April 30th -----
    salvadord [10:23 AM] 
    hey joe, sorry but did you end up making a new PR for this? I only see the old one with the extra lines (+<<<<<<< HEAD) -- https://github.com/Neurosim-lab/netpyne/pull/209
    GitHub
    Development by joewgraham · Pull Request #209 · Neurosim-lab/netpyne
    Fixed problem in netpyne/batch.py where you had to have at least one ungrouped param
     

    joe [12:43 PM] 
    I thought I did... I'm away from my computer right now, but I'll take a look in a few hours.

    joe [4:29 PM] 
    Well, I did this: https://github.com/joewgraham/netpyne/pull/1
    GitHub
    Removed errors that occurred in batch.py during last merge by joewgraham · Pull Request #1 · joewgraham/netpyne
    netpyne - A python package to facilitate the development of biological neuronal networks in NEURON
     

    [4:29] 
    But now I notice it’s a pull request to my account instead of the neurosim…

    [4:30] 
    Can you get this into Netpyne, or should I try to do it properly? :grimacing:

    salvadord [6:20 PM] 
    Guess I can try to merge that PR into your repo, and then create a PR from there


    ----- Today May 2nd, 2017 -----
    joe [10:33 AM] 
    I’m going to try to get that pull request fixed now, but I can’t seem to find the relevant wiki page.  Could you send me a link?

    salvadord [10:37 AM] 
    great thx

    [10:37] 
    here’s wiki: https://docs.google.com/document/d/1pSfHrdjwNSf6xpeV0F4bw3SGDdQmW7DTANtIjvA_G28/edit

    joe [10:37 AM] 
    Thx!

*** New pull request

I seem to have pushed the changes from my dev branch into the main dev branch.  
The code is now correct, but I really need to figure out the correct process.

** Fixing varying spineLoc

Spent a lot of time. Can't seem to figure it out.  Will try again tomorrow.


* 2017-05-03 -- GitHub and Neurosim Manual

** Short term goals
Figure out spineLoc problem
Continue to work on multiple spines
Submit invoice for last six months
Prepare new contract

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** SfN abstract

https://docs.google.com/document/d/1N8H1Olv0bspSY1nhXxJGDSfiXe50_9NzUHiw5s5oyVo/edit

Fixed grammar and minor editing.

** Collaborating with GitHub

Figuring out where I went wrong and working on a Neurosim Lab Manual
https://docs.google.com/document/d/1mM1KlucucOYUYDGSP4GSP0A0zqUEKdfwOYt-Tu5jO28/edit#

*** The Manual so far

Neurosim Operations Manual

    Welcome to Neurosim  2
    Neurosim Central Repositories 2
    General Repositories  2
    NetPyNE 2
    Introduction to Neurosim Machines 3
    Connecting to Neurosim Machines 3
    Creating your own Neurosim Machine  3
    Installing NEURON 3
    Compiling NMODL (.mod) Files  3
    Using Github for collaborative development  3
    Collaboration Workflow 1: Forking 3
    Collaboration Workflow 2: Branching 4
    Appendices  5
    Developing Shared Code Using Mercurial  5
    Dealing with System Integrity Protection (SIP) on Macs  5
    GIT Resources 5
    Useful links  5
    Merging strategies  6
    Basic commands  6




    
    Welcome to Neurosim
    Welcome.

    Neurosim Central Repositories
    General Repositories
    Neurosim uses multiple central Mercurial repositories, including:
    /usr/site/nrniv/local
    /usr/site/nrniv/simctrl
    /usr/site/scripts
    /usr/site/config
    /usr/site/site-lisp

    You can update all of these at once by entering the following command in the terminal: 
    /usr/site/scripts/nsimpull

    NetPyNE
    The Neurosim NetPyNE repository resides in a separate Git repository: 
    /usr/site/nrniv/local/python/netpyne

    To update NetPyNE, enter the following commands:
    cd /usr/site/nrniv/local/python/netpyne
    git pull

    However if you’ve modified your local copy of NetPyNE, to get a clean and current version it may be necessary to remove your copy first.  You can do that with the following command (but always be extremely careful when using “rm -rf”):
    rm -rf /usr/site/nrniv/local/python/netpyne

    You can then clone the Git repository by entering the following commands in the terminal:
    cd /usr/site/nrniv/local/python/
    git clone https://github.com/Neurosim-lab/netpyne.git

    If you want to be using the bleeding edge version of NetPyNE, you should be in the “development” branch.  To see what branch of the NetPyNE repository you are working in, enter the following commands:
    cd /usr/site/nrniv/local/python/netpyne
    git branch

    To switch to the “development” branch, enter the following commands:
    cd /usr/site/nrniv/local/python/netpyne
    git checkout development

    If you are going to be developing NetPyNE the process may be slightly different.  See Using Github for collaborative development for details.


    Introduction to Neurosim Machines
    Many machines.

    Connecting to Neurosim Machines
    Forming connections.

    Creating your own Neurosim Machine
    Drinking the Kool-Aid.

    Installing NEURON
    How to install.

    Compiling NMODL (.mod) Files
    How to compile.

    Using Github for collaborative development

    It’s good practice to have a master and a development branch.  Work should all be done on the development branch and merged into the master branch only when tested and working.  The master branch should always be the same as the latest working version/release of the  software/model.

    List of issues should include enhancements to do and bugs to fix.  Include the issue number in the commit (e.g. “fixed X bug from issue #6”) so that it shows up in the repo.

    Collaboration Workflow 1: Forking 
    This is a safer method as you cannot affect other people’s work.  If you have a change to make to a repository, you will fork the repo on GitHub, clone it to your computer, switch to the development branch, make the change, commit it to your computer’s repo, push it to your forked GitHub repo, and then do a pull request from your GitHub repo to the main repo.

    Delete an existing fork
    If you happen to have an existing fork from an earlier contribution to a repo, it’s easiest to delete it and start with a fresh fork.  
    If you have a fork, it will appear at https://github.com/your-github-name/repo-name/
    To delete the fork:
    Click on the Settings tab near the top of the screen
    At the very bottom under the Danger Zone heading, click on Delete this repository and enter the repo name

    Fork the main repository
    Go to the GitHub page for the repository (the examples below will use NetPyNE): https://github.com/Neurosim-lab/netpyne
    Click on Fork in the upper right corner, which should bring you to your forked repo:  https://github.com/your-github-name/netpyne


    Clone the forked repository
    Remove old version of repository (if you have one)
    rm -rf netpyne_temp
    mkdir netpyne_temp
    cd netpyne_temp
    Clone the fork and switch to development branch
    git clone https://github.com/your_github_name/netpyne
    cd netpyne
    git checkout development
    Check your current branch with: git branch
    Edit any files in the project and save changes



    Get rid of old version of repository if you have one
    Clone the forked repository 
    Follow instructions shown by clicking "Clone or download" on your Fork OR
    git clone https://github.com/YourGitName/REPONAME
    Make changes in development branch of your forked repo 
    git checkout development; check with git branch
    Edit away
    Merge any changes in development branch of main repo into your development branch
    git remote add upstream git@github.com:Neurosim-lab/netpyne.git OR
    git remote add upstream https://github.com/Neurosim-lab/netpyne.git 
    (NOTE: only have to do this once, to set up new remote upstream to the main repo)
    git fetch upstream
    git merge upstream/development OR
    git merge --strategy-option=theirs upstream/development [to force merge]
    Create Pull Request (button 1 from left) from development branch of forked repo to development branch of main repo
    Owner of main repo will check Pull Request and merge if ok
    If main repo changes you will have to pull+merge changes from the main repo into your fork: 

    Collaboration Workflow 2: Branching 
    (requires write access; only a few trusted users should have)

    Create a branch in main repo 
    Make changes in new branch (make sure you checkout to this branch before)
    Merge with any new changes in development branch
    Create Pull Request from new branch to development branch
    Owner of main repo will check Pull Request and merge if ok





    Appendices
    Here be appendices.

    Developing Shared Code Using Mercurial
    Hg.

    Dealing with System Integrity Protection (SIP) on Macs

    http://osxdaily.com/2015/10/05/disable-rootless-system-integrity-protection-mac-os-x/

    Apple has enabled a new default security oriented featured called System Integrity Protection, often called rootless, in Mac OS from versions 10.11 onward. The rootless feature is aimed at preventing Mac OS X compromise by malicious code, whether intentionally or accidentally, and essentially what SIP does is lock down specific system level locations in the file system while simultaneously preventing certain processes from attaching to system-level processes.

    Reboot the Mac and hold down Command + R keys simultaneously after you hear the startup chime, this will boot OS X into Recovery Mode

    When the “OS X Utilities” screen appears, pull down the ‘Utilities’ menu at the top of the screen instead, and choose “Terminal”

    Type the following command into the terminal then hit return:
    csrutil disable; reboot

    You’ll see a message saying that System Integrity Protection has been disabled and the Mac needs to restart for changes to take effect, and the Mac will then reboot itself automatically, just let it boot up as normal.

    Once you’ve made all the changes to /usr, you can reenable SIP by rebooting into recovery mode and entering “csrutil enable; reboot"

    GIT Resources

    Useful links
    General guide: http://rogerdudler.github.io/git-guide/

    List of commands: http://optimamodel.com/git-commands 

    Git Cheat Sheet: http://rogerdudler.github.io/git-guide/files/git_cheat_sheet.pdf

    Comparison with Mercurial: http://www.wikivs.com/wiki/Git_vs_Mercurial; http://www.aloop.org/2010/11/27/from-mercurial-to-git-commands-mapping/ 

    Merging conflicts guide: http://365git.tumblr.com/post/488797694/fixing-merge-conflicts

    Merging strategies
     http://stackoverflow.com/questions/366860/when-would-you-use-the-different-git-merge-strategies 

    Removing a commit: http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html 

    How to Create and Apply Patches in GIT using diff and apply Command: 
      http://www.thegeekstuff.com/2014/03/git-patch-create-and-apply/ 

    How to Fork a Repository with Github:
    https://help.github.com/articles/fork-a-repo/

    Ten Simple Rules for Taking Advantage of Git and GitHub:
    http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004947 

    Basic commands
    Most commands are same as in Mercurial (hg) though can't abbrev commit as com

    git add : update changes in tracked files and add new files
    git add -u : update changes only in tracked files
    git commit -m “message”
    git push : push current branch to remote 
    git push -f : force push current branch to remote
    git pull : pull current branch to remote
    git pull -X theirs : pull current branch to remote accepting remote changes
    git clean : remove untracked files
    git stash : record the current state of working directory and index, but go back to clean working directory.
    git show : show changes of last commit (can also use eg. git show HEAD~3) 
    git clean -f: remove untracked files from repo

    git merge branchname : merge current branch with branchname
    git merge --strategy-option=ours|theirs branchname : merge current branch with branchname prioritizing current branch
    git mergetool : open tool to indicate which changes to keep from each version (can select tool, eg. meld)

    git branch : list branches
    git branch branchname : create branchname
    git branch -d branchname : delete branchname
    git checkout -b branchname : change to branchname
    git checkout -b branchname 6e599cb : create branchname from commit specified

    git reset —hard : discard local changes to tracked files 
    git reset —hard HEAD~4 : discard local and go back 4 commits
    git reset —hard HEAD~4 : discard local and go back 4 commits
    git reset —hard 65593b : discard local and go back to commit specified


* 2017-05-04 -- SfN abstract

** Short term goals
Figure out spineLoc problem
Continue to work on multiple spines
Submit invoice for last six months
Prepare new contract

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** SfN Abstract

https://docs.google.com/document/d/1YjgYIzsDSdTD1Xe5E898HEfxv3N1e4jwwsNSL4klAPY/edit

Dendritic plateau generation model in cortical pyramidal neurons: a link to cortical ensembles.  

Peng Gao1, Joe W Graham2, Sergio L Angulo2, Salvador Dura-Bernal2, William W Lytton2, Srdjan D Antic1

1Institute for Systems Genomics, University of Connecticut Health Center, Farmington CT, 06030, USA
2Department Physiology & Pharmacology, SUNY Downstate, Brooklyn, NY 11203, USA

Synaptic and glutamatergic inputs to the basal dendrites of cortical pyramidal neurons activate NMDA and AMPA receptors which can bring the dendrites into a long-lasting depolarized state which can spread into the soma. The resulting plateau potentials increase the excitability of the neuron by bringing membrane potential closer to threshold and reducing membrane time constant.  

In such an “activated” state, the pyramidal cells can respond to synaptic inputs more quickly and easily, facilitating synchronization of firing. We hypothesize that a multiple embedding of neuronal ensembles would allow for the binding of multimodal inputs into coherent object perception based on binding-by-synchrony theory, while simultaneously allowing information transfer via temporal coding.  The first level of embedding is the activated neurons among their larger populations, and the second level consists of the activated neurons which are firing synchronously.  Synchronized temporal coding within an area may provide the substrate for a broad distributed ensemble across areas that would allow binding-by-synchrony.

We are developing two data-driven models of cortical pyramidal neurons in NetPyNE for the NEURON simulator: 1) a morphologically-simplified model with seven compartments and 2) a morphologically-accurate model reconstructed from a prefrontal cortex Layer 5 pyramidal neuron.  Electrophysiological data is available from dendrites and soma simultaneously with glutamate-uncaging experiments utilizing voltage-sensitive dyes in dendrites and whole-cell patch recording in the soma.  

Model cell properties were fitted to mouse M1 current-clamp results using PRAXIS and Evolutionary Multi-objective Optimization (EMO) algorithms. Dendritic active current properties were tuned to match experimentally observed back-propagating action potentials. An AMPA receptor model generates the fast-response to glutamate stimulation while an NMDA receptor model accounts for the extended plateau activation.  

The AMPA/NMDA receptor properties were explored to determine their effect on dendritic and somatic plateaus. The receptors were modeled both directly on a basal dendrite and on spines. Spine properties, glutamate stimulation properties, and stimulation location were all explored and quantified. These models are being used to develop cortical meso-scale network models to develop and explore EEE theory. 


* 2017-05-05 -- Misc

** Short term goals
Figure out spineLoc problem
Continue to work on multiple spines
Submit invoice for last six months
Prepare new contract

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Ensure the EEE repo is functional for anyone
Will ask for help with spineLoc problem, but first want to ensure code all works

mkdir eee_temp
cd eee_temp
hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee

compare new eee repo with old:
- will modify init.py to ensure appropriate setup
    - need output dir in eee/
    - init.py should compile if not done already
    - need batch_data and batch_figs dirs in:
        - eee/sim/batches
        - eee/sim/dist_syn
        - eee/sim/spine
        - eee/sim/spines

Fixed compile.py to remove all mod dirs and recompile and relink


* 2017-05-08 -- Mercurial work

** Short term goals
Figure out spineLoc problem
Continue to work on multiple spines

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Helping Sergio with Mercurial Hg repos


    sergio [10:42 AM] 
    joe

    [10:42] 
    I have a question

    [10:43] 
    about mercurial

    joe [10:43 AM] 
    Go ahead. I hope I have an answer!

    sergio [10:44 AM] 
    in the working dir, where I also have the main repo

    [10:44] 
    I wan to update the repo

    [10:44] 
    I should do hg update, and then commit?

    [10:44] 
    I’m trying to do that

    [10:45] 
    but then check on the clone

    [10:45] 
    and the repo is not updated

    joe [10:45 AM] 
    Probably have to do `hg pull`

    [10:45] 
    and then `hg update`

    [10:46] 
    Does that do it?

    sergio [10:47 AM] 
    added this Plain Text snippet
    no% hg pull
    abort: repository default not found!
    Add Comment

    sergio [10:48 AM] 
    but that is from the dir where I have the main repo

    joe [10:48 AM] 
    What directory are you in?  `pwd`

    sergio [10:48 AM] 
    /u/sergioangulo/projects/eee

    joe [10:48 AM] 
    `hg status`

    sergio [10:49 AM] 
    added this Plain Text snippet
    no% hg status
    ? #notebook.org#
    ? data/cellDensity/layer_2_frac.png
    ? data/cellDensity/layer_5_frac.png
    ? data/cellDensity/layer_6_frac.png
    Add Comment Click to expand inline 231 lines

    sergio [10:49 AM] 
    I have too many files on the dir that I haven’t add

    joe [10:50 AM] 
    Yeah, it looks like there is no hg repo there…

    [10:51] 
    Do you have this repo on Neurosim somewhere?

    sergio [10:51 AM] 
    yep

    [10:51] 
    on my dir

    [10:51] 
    under projects/eee

    joe [10:52 AM] 
    One sec, let me try to clone it.

    sergio [10:52 AM] 
    or do you mean clone it?

    [10:52] 
    ok

    joe [10:54 AM] 
    Did you make local changes that you need to add to the repo?  Otherwise it might be easiest just to delete and clone again.

    [10:55] 
    I did `hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee` and it worked.

    sergio [10:56 AM] 
    I’ve doing local changes in the same dir of the repo

    [10:59] 
    I just cloned it to my laptop

    [10:59] 
    but the copy is not the last version

    [10:59] 
    with the last updates on neurosim

    [11:00] 
    should I do something from there?

    joe [11:00 AM] 
    So I use an alias `hgpull` which does this `hg pull ssh://no.neurosim.downstate.edu://u/graham/projects/eee`

    [11:01] 
    So why don’t you try: `hg pull ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee`

    [11:01] 
    And tell me what happens.

    sergio [11:03 AM] 
    ‘no changes found’

    [11:03] 
    I think my problem is updating the repo from neurosim

    joe [11:09 AM] 
    I have to run a few errands and grab lunch.  Back in a couple hours and we’ll figure it out then.

    sergio [11:09 AM] 
    ok thanks Joe!

    joe [2:52 PM] 
    Congrats on your award!

    sergio [2:54 PM] 
    Thanks Joe!

    joe [2:55 PM] 
    That’s cool that your colleagues voted for you!

    [2:57] 
    We can work on your hg repo now if you have time. Or are you celebrating already? :beers:

    sergio [3:00 PM] 
    it was a surprise, but it feels nice that my peers voted for me

    [3:00] 
    yep let’s do the repo

    joe [3:03 PM] 
    Sounds good.

    sergio [3:03 PM] 
    added this Plain Text snippet
    no% hg heads
    changeset:  18:871a638e2884
    branch:   workingdir
    parent:   16:2e74e1bb73d1
    user:    Sergio Angulo <sergio.angulo@gmail.com>
    Add Comment Click to expand inline 8 lines

    joe [3:03 PM] 
    So cd to its directory and enter `hg outgoing`

    sergio [3:04 PM] 
    ok

    joe [3:04 PM] 
    That will compare with the remote and let us know what has changed locally.

    sergio [3:04 PM] 
    si I should do it from my dir in the laptop?

    [3:04] 
    *so

    joe [3:04 PM] 
    Yup.

    sergio [3:05 PM] 
    ok

    joe [3:06 PM] 
    Copy me the output?

    sergio [3:06 PM] 
    added this Plain Text snippet
    Sergios-MacBook% hg outgoing
    comparing with ssh://no.neurosim.downstate.edu//u/sergioangulo/projects/eee
    searching for changes
    no changes found
    Add Comment

    joe [3:07 PM] 
    Okay, so you don’t have any local changes that aren’t already in the Neurosim repo.

    sergio [3:07 PM] 
    yep

    joe [3:07 PM] 
    What is the problem you are having?

    sergio [3:07 PM] 
    I am working on neurosim and modify the files over there

    [3:08] 
    but how those files are updated in the repo?

    joe [3:08 PM] 
    Ahh, okay, so log in there, cd to the repo, and copy me `hg outgoing`

    sergio [3:09 PM] 
    ok

    sergio [3:10 PM] 
    added this Plain Text snippet
    no% hg outgoing
    comparing with default-push
    abort: repository default-push not found!
    Add Comment

    sergio [3:10 PM] 
    this is in the dir: no% pwd
    /u/sergioangulo/projects/eee

    joe [3:10 PM] 
    Okay, one sec…

    [3:11] 
    Okay, let’s edit your hgrc file.

    [3:12] 
    Use an editor to open /u/sergioangulo/projects/eee/.hg/hgrc

    sergio [3:12 PM] 
    ok

    joe [3:13 PM] 
    Oh, copy me output of `hg status` please

    sergio [3:13 PM] 
    that file is empty

    sergio [3:14 PM] 
    added this Plain Text snippet
    no% hg status
    ? #notebook.org#
    ? data/cellDensity/layer_2_frac.png
    ? data/cellDensity/layer_5_frac.png
    ? data/cellDensity/layer_6_frac.png
    Add Comment Click to expand inline 231 lines

    joe [3:16 PM] 
    Hmmm. Okay, first of all, let’s get you a `.hgignore` file.

    [3:16] 
    enter `touch .hgignore`

    [3:16] 
    and then open the file

    sergio [3:17 PM] 
    at projects/eee?

    joe [3:17 PM] 
    Yeah, in eee

    sergio [3:18 PM] 
    ok

    [3:18] 
    then I should copy all those files?

    joe [3:20 PM] 
    This is what I have in my `.hgignore` file:

    joe [3:20 PM] 
    added this Python snippet
    .DS_Store
    .pyc
    x86_64
    i386
    output
    Add Comment Click to expand inline 8 lines

    joe [3:21 PM] 
    Add that to your `.hgignore` file, and then do `hg status` again

    sergio [3:22 PM] 
    ok

    joe [3:23 PM] 
    Copy me the output?  Should be much more manageable now…

    sergio [3:27 PM] 
    added this Plain Text snippet
    no% hg status
    ? #notebook.org#
    ? .hgignore
    ? data/cellDensity/layer_2_frac.png
    ? data/cellDensity/layer_5_frac.png
    Add Comment Click to expand inline 10 lines

    sergio [3:27 PM] 
    much better

    joe [3:28 PM] 
    Much better!

    [3:29] 
    Okay, so what are the figures in data/cellDensity?

    [3:29] 
    Should those be added to the repo?

    sergio [3:30 PM] 
    nop

    joe [3:30 PM] 
    And do you know why notebook.org is in between #?

    [3:30] 
    Okay, so I would add another line to your `.hgignore` file: `data`

    sergio [3:32 PM] 
    the #nb# is a file created by emacs

    [3:32] 
    I think it’s a backup copy

    joe [3:33 PM] 
    Okay, I’d add `#notebook.org#` to your `.hgignore` file also.

    [3:34] 
    Let me know when you enter `hg status` and the only things listed are `.hgignore` and the cells.

    sergio [3:35 PM] 
    added this Plain Text snippet
    no% hg status
    ? #notebook.org#
    ? sim/cells/CSTR6.py
    ? sim/cells/ITcell.py
    ? sim/cells/LTS3.hoc
    Add Comment Click to expand inline 6 lines

    sergio [3:36 PM] 
    I added #notebook.org# to .hgignore but it is still there

    joe [3:38 PM] 
    The # character is treated as a comment character, and the \ character is treated as an escape character.

    [3:38] 
    https://www.selenic.com/mercurial/hgignore.5.html

    [3:39] 
    So try `\#notebook.org\#` , I think.

    sergio [3:39 PM] 
    perfect!

    joe [3:39 PM] 
    Good!

    [3:40] 
    Okay, so now we want to add those changes to the repo.

    sergio [3:40 PM] 
    perfect

    joe [3:41 PM] 
    Enter `hg add`

    [3:41] 
    This adds any changes listed, which is why we wanted to get rid of all the other files first.

    sergio [3:41 PM] 
    i added all the cells

    joe [3:41 PM] 
    Great, so then `hg commit -m "added cells"` or whatever

    sergio [3:42 PM] 
    perfect

    joe [3:44 PM] 
    So now try `hg push ssh://no.neurosim.downstate.edu//u/sergioangulo/projects/eee`

    sergio [3:46 PM] 
    done

    joe [3:46 PM] 
    Nice. So now you’ve pushed it to Neurosim.

    [3:46] 
    Still need to update, though.

    [3:48] 
    `ssh no.neurosim.downstate.edu "cd projects/eee; hg update"`

    [3:48] 
    Will do it in one command.

    [3:48] 
    I have an alias `hgpush`

    [3:48] 
    Which does:

    [3:49] 
    `hg push ssh://no.neurosim.downstate.edu://u/graham/projects/eee/; sshno "cd projects/eee; hg update"`

    [3:49] 
    `sshno` is an alias for `ssh -Y no.neurosim.downstate.edu`

    sergio [3:49 PM] 
    I have sshno

    joe [3:50 PM] 
    Perfect.

    [3:51] 
    Okay, now we should be able to edit your hgrc file to define the push/pull repos…

    sergio [3:51 PM] 
    perfect

    joe [3:53 PM] 
    Okay, so when I clone your repo, I see a file `eee/.hg/hgrc`

    [3:53] 
    Which contains:

    joe [3:54 PM] 
    added this Python snippet
    # example repository config (see 'hg help config' for more info)
    [paths]
    default = ssh://no.neurosim.downstate.edu//u/sergioangulo/projects/eee
    ​
    # path aliases to other clones of this repo in URLs or filesystem paths
    Add Comment Click to expand inline 14 lines

    joe [3:55 PM] 
    Right below `default = ...`

    [3:56] 
    Add the line `default-push = ssh://no.neurosim.downstate.edu//u/sergioangulo/projects/eee`

    sergio [3:56 PM] 
    ok

    [3:59] 
    for some reason I can’t see that file on neurosim

    [3:59] 
    should I created and copy the lines abovE?

    joe [4:00 PM] 
    Yeah, I guess create it and fill it with the above

    sergio [4:03 PM] 
    done

    joe [4:04 PM] 
    Okay, so now push and pull should work without specifying the location.

    [4:04] 
    Try `hg pull` and `hg push`

    sergio [4:06 PM] 
    added this Plain Text snippet
    Sergios-MacBook% hg pull
    pulling from ssh://no.neurosim.downstate.edu//u/sergioangulo/projects/eee
    remote: hg: parse error at /u/sergioangulo/projects/eee/.hg/hgrc:18: Add Comment
    abort: no suitable response from remote hg!
    Add Comment

    joe [4:06 PM] 
    Looks like a problem in your hgrc file…  Copy me the contents of hgrc?

    sergio [4:07 PM] 
    added this Plain Text snippet
    # example repository config (see 'hg help config' for more info)
    [paths]
    default = ssh://no.neurosim.downstate.edu//u/sergioangulo/projects/eee
    Add Comment Click to expand inline 18 lines

    joe [4:08 PM] 
    Yeah, the final line shouldn’t be there.  Delete the line with `Add Comment`

    [4:09] 
    Try `hg pull` and `hg push` again.

    sergio [4:09 PM] 
    yep, definitely shoudnt be there

    sergio [4:11 PM] 
    added this Plain Text snippet
    Sergios-MacBook% hg pull
    pulling from ssh://no.neurosim.downstate.edu//u/sergioangulo/projects/eee
    searching for changes
    adding changesets
    adding manifests
    Add Comment Click to expand inline 12 lines

    sergio [4:11 PM] 
    work!

    [4:11] 
    I don’t understand the last part

    joe [4:11 PM] 
    I’m not sure what that is either… But it seems to be working!

    [4:12] 
    So now, wherever you’re working, do `hg pull` and `hg update` first.

    [4:13] 
    Then make changes, etc.

    [4:13] 
    Then `hg commit -m "message"`

    [4:13] 
    Then `hg push`

    [4:14] 
    And I always like to update the remote right away: `sshno "cd projects/eee; hg update"`

    sergio [4:14 PM] 
    perfect Joe

    [4:14] 
    thanks!

    joe [4:15 PM] 
    No problem. I just had to do all that recently, and it’s a pain. Good for me to refresh as well!

    sergio [4:16 PM] 
    thanks for your time to work with me!

    joe [4:19 PM] 
    :+1:


* 2017-05-12 -- Multiple spines and paper outline

** Short term goals
Organize sims/code
Figure out spineLoc problem
Continue to work on multiple spines
Outline EEE article

** Outline article

    billl [9:14 AM] 
    can even do a paper outline now on gdocs if you want to see what want to include -- paper outline/fig outline -- eg locations without spines, locs wiht spines, loc with spines + spillover ?

    joe [9:15 AM] 
    Sounds like a good idea.  Then we know what we need to fill in to finalize.

Article outline:
https://docs.google.com/document/d/1lx1tQutiy1Qd9iSM3HJMyghEMA5EHKr4eN9qPQdhbPQ/edit?usp=sharing

** Organizing code and sims

Adding file unused_code.py to sim directory as a place to store code that 
I don't want to throw away, but is currently out of use.

Moved unused code out of init.py.  Will change init.py to setup.py after a commit.

Moving code from compile.py into setup.py
Testing -- compiling works.  Removing compile.py



* 2017-05-15 -- CNS abstract and multiple spines

** Short term goals
Organize sims/code
Figure out spineLoc problem
Continue to work on multiple spines
Outline EEE article

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Organizing code and sims

Now, one runs setup.py to set up the EEE sims.
However, it doesn't link to the compiled directory everywhere yet, and 
it makes extra dirs in the mod dir.  Fixing these problems now.

Now setup.py works correctly.

Updating README

** Fixing CNS abstract

*** Email from CNS:

    From: Viviana Culmone <V.Culmone@pgr.reading.ac.uk>

    Dear Joe,
     
    I am editing your abstract for the CNS Conference. Please find attached a copy of your abstract with the correct paragraph, fonts and margins settings (as shown in the abstract template sheet available on http://www.cnsorg.org/cns-abstract-style).
     
    According to the instructions provided in the template sheet you should:
     
    Increase the resolution of the Figure (at least 600dpi).  Your Figure has currently a resolution of 144 dpi and cannot be accepted. 
    Label the panels of the Figure with capital letters “A” (Arial font, bold, size at least 8); and use the same notation in the caption of the Figure (“A. This is…”).
    Increase the size of the text in the Figure (labels in the axis and legend) to make it legible, using Arial font, size at least 8. 
    Cite the Figure in the main text, at least once.
    Be sure that the entire content fits in one page.
     
    Could you please send to me a new version of you abstract meeting all the requirements above and having a Figure of at least 600 dpi WITHOUT CHANGING the settings above, the name and the extension of the file by May 17? Note that the provisional number X342 added to the title is needed to number the abstract and should not be delated.
     
    I hope you can provide a new abstract following the deadline, in order to avoid any problems that might occur with the publication of your abstract.
     
     
    Best wishes,
    Viviana Culmone
     
    on behalf of Prof Ingo Bojak (i.bojak@reading.ac.uk), Publication Chair, CNS*2017

*** Fixing figure

Need to generate 600 dpi plateau figure

cd /u/graham/projects/eee/sim
ipython -i setup.py
cd batches
plot_antic_figure()

file:gif/20170515_091758.png

Removing image title, changing font to Arial, with a minimum fontsize of 8

Resubmitted abstract

** Multiple spines

Instead of creating SPI7ds5 (SPI7 with 5 dendritic spines) I am creating
SPI7sp (SPI7 with the desired number of spines specified in the file).

*** Chat with Salva

    joe [3:01 PM]
    Hey Salva, I’d appreciate a little help when you have time.  I’m trying to create a general method to add any number of spines to a dendrite.  Here’s what I’m working on:

    joe [3:01 PM]
    added this Python snippet
    def add_spines(self):
     self.spines = []
     for spineind in range(spineNum):
       self.add_comp(‘neck’ + str(spineind))
       self.add_comp(‘head’ + str(spineind))
       self.spines.append([self.neck, self.head])
       self.neck.L  = SPI7sp.neckL
       self.neck.diam = SPI7sp.neckDiam
       self.head.L  = SPI7sp.headL
       self.head.diam = SPI7sp.headDiam
       self.necknseg = SPI7sp.necknseg
       self.neck.connect(self.Bdend1, SPI7sp.spineLoc + spineind * SPI7.spineDist, 0.0)
       self.head.connect(self.neck, 1.0, 0.0)
    Add Comment Collapse

    joe [3:03 PM]
    I was trying to name each neck/head/spine with its index, but then I’m not sure how to set, the properties…   self.seg_name.L

    [3:04]
    Is there a better way to go about this?  Or how would you name each spine and assign the properties?

    salvadord [3:06 PM]
    that sounds reasonable to me — you can access sect dynamically via setattr …lms

    [3:08]
    actually can 1st access dend and then set value — eg. `spine=getattr(self, 'neck'+str(spineind)); spine.L=5`

    [3:09]
    lets move this to eee since might be useful for others

*** Current code

  def add_spines(self):
    self.spines = []
    for spineind in range(spineNum):
        self.add_comp('neck' + str(spineind))
        self.add_comp('head' + str(spineind))
        neck = getattr(self, 'neck' + str(spineind))
        head = getattr(self, 'head' + str(spineind))
        self.spines.append([neck, head])
        neck.L    = SPI7sp.neckL
        neck.diam = SPI7sp.neckDiam
        neck.nseg = SPI7sp.necknseg
        head.L    = SPI7sp.headL
        head.diam = SPI7sp.headDiam
        neck.connect(self.Bdend1, SPI7sp.spineLoc + spineind * SPI7.spineDist, 0.0)
        head.connect(neck, 1.0, 0.0)

Let's commit and give it a try.

Working in sim/spines/

Modified netParams.py to have new cell name.

Need to fix spine spacing so that it is in terms of 0 to 1 along Bdend.

So 1 um spacing would be 1 [um] / SPI7sp.bdendL [um] 

So Bdend1 is approximately 300, and we are using 99 nsegs, so we have a resolution
along Bdend1 of 3.03 um.  Seems okay.

*** New code

  neck.connect(self.Bdend1, SPI7sp.spineLoc + (spineind * SPI7sp.spineDist)/SPI7sp.bdendL, 0.0)

*** Adding spines works, now a problem with set_props

    /u/graham/projects/eee/sim/cells/SPI7sp.py in __init__(self, x, y, z, ID)
         99     self.add_spines()
        100     self.insert_conductances()
    --> 101     self.set_props()
        102     self.calc_area()
        103     self.name = "SPI7sp"

    /u/graham/projects/eee/sim/cells/SPI7sp.py in set_props(self)
        208     self.Bdend1.cm = SPI7sp.bdendCap
        209     self.Bdend2.cm = SPI7sp.bdendCap
    --> 210     self.neck.cm   = SPI7sp.spineCap
        211     self.head.cm   = SPI7sp.spineCap
        212     for sec in self.apic: sec.cm = SPI7sp.apicCap

    AttributeError: SPI7sp instance has no attribute 'neck'

I think I fixed the problem:

    for sec in self.necks: sec.cm = SPI7sp.spineCap
    for sec in self.heads: sec.cm = SPI7sp.spineCap
    for sec in self.necks: sec.g_pas = 1.0/SPI7sp.spineRM
    for sec in self.heads: sec.g_pas = 1.0/SPI7sp.spineRM

Multiple spines seems to be working.  Now to get multiple synapses on those multiple spines.

** Multiple synapses

Chat with Salva:

    joe [5:28 PM] 
    So now I want to add a synapse to each spine, and I’m trying to wrap my head around how I would do that.  @salvadord , what do you think would be the best way?  A for-loop in cfg.py adding a Netstim for each spine?  Or should I do that in netParams.py?

    salvadord [5:35 PM] 
    Shouldgo in netParams; simConfig only key params u wanna explore via batch

    [5:35] 
    Exercising, bbl

    [5:37] 
    Note in netpyne syns are explicitly added when you create a conn or stim -- cant really add syns by themselves

    [5:38] 
    Youcan create a secList with all the spines

    [5:39] 
    And create a single conn with sec: secList and synsPerConn: numSpines -- that should place a syn in each

    [5:40] 
    But there are other ways of doing too


* 2017-05-16 -- Project meeting and multiple spines

** Short term goals
Continue to work on multiple spines
Outline EEE article

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Multiple spines - secList of spine heads

Will create a secList of spine heads
Will try to create a single connection, with
  sec: secList 
  synsPerConn: spineNum

Created a secList of spineheads:

    cellRule['secLists']['spineheads'] = []

    for secName, sec in cellRule['secs'].iteritems(): 
      ...
      if "head" in secName:
        cellRule['secLists']['spineheads'].append(secName)

secList of spine heads works

Now to figure out how to connect a Netstim to the spine heads

** Multiple spines - connecting to spine heads

Modifying cfg.py from:
  cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'head', 'loc': 0.5, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0.0, 0.0], 'delay': 1}

To:
  cfg.NetStim1 = {'pop': 'PT5B', 'sec': cellRule['secLists']['spineheads'], 'loc': 0.5, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0.0, 0.0], 'delay': 1}


Here is what we have in netParams.py in eee/sim/spines/:

    netParams.stimTargetParams[nslabel+'_'+ns['pop']+'_'+ns['synMech'][i]] = \
        {'source': nslabel, 'conds': {'popLabel': ns['pop']}, 'sec': ns['sec'], 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': ns['weight'][i], 'delay': ns['delay']}

I will change it to:

    netParams.stimTargetParams[nslabel+'_'+ns['pop']+'_'+ns['synMech'][i]] = \
        {'source': nslabel, 'conds': {'popLabel': ns['pop']}, 'sec': cellRule['secLists']['spineheads'], 'synsPerConn': spineNum, 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': ns['weight'][i], 'delay': ns['delay']}

*** Running on Neurosim "no"

    no% cd projects/eee/sim/spines
    no% ipython -i
    In [1]: execfile("netParams.py")
    NEURON -- VERSION 7.5 master (e616b80) 2017-02-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    ---------------------------------------------------------------------------
    NameError                                 Traceback (most recent call last)
    <ipython-input-1-026584e2bad9> in <module>()
    ----> 1 execfile("netParams.py")

    /u/graham/projects/eee/sim/spines/netParams.py in <module>()
         15         from __main__ import cfg  # import SimConfig object with params from parent module
         16 except:
    ---> 17         from cfg import cfg  # if no simConfig in parent module, import directly from cfg module
         18 
         19 

    /u/graham/projects/eee/sim/spines/cfg.py in <module>()
         96 
         97 #cfg.NetStim1 = {'pop': 'PT5B', 'sec': 'head', 'loc': 0.5, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0.0, 0.0], 'delay': 1}
    ---> 98 cfg.NetStim1 = {'pop': 'PT5B', 'sec': cellRule['secLists']['spineheads'], 'loc': 0.5, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0.0, 0.0], 'delay': 1}
         99 

    NameError: name 'cellRule' is not defined

So, can't define sec as a list in cfg.py

Removed "sec" from cfg.py:

    cfg.NetStim1 = {'pop': 'PT5B', 'loc': 0.5, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [0.0, 0.0], 'delay': 1}

Will try again.

*** Chat with Salva and Bill

    Hey @salvadord , I’m trying to set up a conn with sec: secList, but I keep getting an error: `TypeError: unhashable type: 'list'`…  Any suggestions?

    billl [9:23 AM] 
    should be a dict

    [9:23] 
    i got that error

    [9:24] 
    ** v134 postConds needs to be a dict [netw.py] (AP)

    joe [9:24 AM] 
    Aha! I will try that!

    billl [9:24 AM] 
    -  'preConds': {'cellType': 'E'}, 'postConds': [p for p in netParams.popParams if p != 'E2'],  #  E -> not E2
    +  'preConds': {'cellType': 'E'}, 
    +  'postConds': {'cellType':p for p in netParams.popParams if p != 'E2'},  #  E -> not E2

    salvadord [9:27 AM] 
    the secList should be a list of section names … eg. [‘soma’, ‘dend_1’, ‘dend_2’]

    [9:27] 
    or the name of a secList declared in cellParams

    joe [9:27 AM] 
    Yeah, that’s what I was just realizing… can’t put in a dict.

    joe [9:27 AM] 
    added this Python snippet
    no% cd projects/eee/sim/spines
    no% ipython -i
    Python 2.7.6 (default, Oct 26 2016, 20:30:19) 
    Type "copyright", "credits" or "license" for more information.
    ​
    IPython 1.2.1 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    ​
    In [1]: execfile("netParams.py")
    NEURON -- VERSION 7.5 master (e616b80) 2017-02-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    ​
    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod
    ​
    In [2]: execfile("batch_init.py")
    ​
    *******
     Note: NeuroML import failed; import/export functions for NeuroML will not be available. 
     Install the pyNeuroML & libNeuroML Python packages: https://www.neuroml.org/getneuroml
    *******
    ​
    ​
    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]
    ​
    Creating network of 1 cell populations on 1 hosts...
     Number of cells on node 0: 1 
     Done; cell creation time = 0.04 s.
    Making connections...
     Number of connections on node 0: 0 
     Done; cell connection time = 0.00 s.
    Adding stims...
    ---------------------------------------------------------------------------
    TypeError                 Traceback (most recent call last)
    <ipython-input-2-aa3ffd6f2f80> in <module>()
    ----> 1 execfile("batch_init.py")
    ​
    /u/graham/projects/eee/sim/spines/batch_init.py in <module>()
       30 
       31 # add network stimulation
    ---> 32 sim.net.addStims()
       33 
       34 # setup variables to record for each cell (spikes, V traces, etc)
    ​
    /usr/site/python/netpyne/network.pyc in addStims(self)
      142               params[sourceParam] = strParams[sourceParam+'List'][postCellGid] if sourceParam+'List' in strParams else source.get(sourceParam)
      143 
    --> 144             postCell.addStim(params) # call cell method to add connections
      145 
      146     print(' Number of stims on node %i: %i ' % (sim.rank, sum([len(cell.stims) for cell in self.cells])))
    ​
    /usr/site/python/netpyne/cell.pyc in addStim(self, params)
      913         return
      914 
    --> 915     sec = self.secs[params['sec']]
      916 
      917     if not 'loc' in params: params['loc'] = 0.5 # default stim location
    ​
    TypeError: unhashable type: 'list'
    Add Comment Collapse This snippet was truncated for display: see it in full.

    billl [9:29 AM] 
    looks like same err

    joe [9:29 AM] 
    added and commented on this Python snippet: spine head secList
    cellRule['secLists']['spineheads'] = []
    ​
    for secName, sec in cellRule['secs'].iteritems(): 
      if "head" in secName:
        cellRule['secLists']['spineheads'].append(secName)
        
    1 Comment Click to expand inline 7 lines
    Here’s how I create the spine head secList

    billl [9:30 AM] 
    sectionlist used in netpyne?

    joe [9:31 AM] 
    added and commented on this Python snippet: netParams with secList
    netParams.stimTargetParams[nslabel+'_'+ns['pop']+'_'+ns['synMech'][i]] = \
            {'source': nslabel, 'conds': {'popLabel': ns['pop']}, 'sec': cellRule['secLists']['spineheads'], 'synsPerConn': spineNum, 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': ns['weight'][i], 'delay': ns['delay']}
    1 Comment
    And here’s how I’m trying to use the secList in netParams

    salvadord [9:31 AM] 
    @used - not neuron’s sectionlist, but analogous in netpyne

    billl [9:31 AM] 
    you talking about SectionList  -- that's a NEURON object type

    [9:31] 
    ok but name somewhat different so not get confused

    salvadord [9:31 AM] 
    aah ok, in ‘sec’ can just use the secList name, eg. ‘spineheads’

    billl [9:32 AM] 
    why not use SectionList btw since offers a lot of added functionality ?

    [9:32] 
    secList vs SectionList - ok

    salvadord [9:32 AM] 
    although the way you have it should work in theory too, unless cellRule modified later on

    joe [9:32 AM] 
    I’ll try using the name instead of the actual list…

    [9:34] 
    No more error. Thanks!

    salvadord [9:41 AM] 
    np … actually the other way (explicit list) should have worked too, but there’s was a bug, so thx

    salvadord [9:49 AM] 
    fixed, you can now use a list too

    joe [9:51 AM] 
    :slightly_smiling_face:

*** Seems to work now

Moving on to batching sims for multiple spine/synapses

** Exploring multiple spines

Starting with 5 spines.  Running a batch varying NMDA tau2 and glut stim amplitude.

graham-mac% cd /u/graham/projects/eee/sim/spines
graham-mac% ./runbatch 4

graham-mac% cd /u/graham/projects/eee/sim/
graham-mac% ipython -i setup.py

In [#]: cd spines
/u/graham/projects/eee/sim/spines
In [#]: plot_vtraces("NMDATau2_synweight", par1label="Glut Stim")

Output:
file:gif/20170516_103007.png

It works, but the glut stim amp is way too high.  I'll run again reducing the 
weights by half.

  plot_vtraces("NMDATau2_synweight_2", par1label="Glut Stim")

Still too much stim amplitude.  Decreasing original weight by 1/5 (currently 5 spines)

Looks better.  Comparison of single spine at full weight:
file:gif/20170516_111451.png

With five spines each at 1/5 full weight:
file:gif/20170516_111508.png


** 50 spines

At 1 um spacing, beginning at 0.5 in Bdend1, 1/50th weight

cd /u/graham/projects/eee/sim
cd spines50
./runbatch 4

cd /u/graham/projects/eee/sim
ipython -i setup.py
In [1]: cd spines50
/u/graham/projects/eee/sim/spines50
In [2]: plot_vtraces("NMDATau2_synweight", par1label="Glut Stim")

Output:
file:gif/20170516_115228.png

Increasing number of spines drives Bdend voltage to ind spine voltage

Changing spine head recording to #50

Had problems.  Will come back to this.

** Project meeting

Should start article outline, with figures

Already done:
https://docs.google.com/document/d/1lx1tQutiy1Qd9iSM3HJMyghEMA5EHKr4eN9qPQdhbPQ/edit

Should plot varying neck resistances for multispine models

NEURON course: Bill will find out if there is room for Penny and Joe
Srdjan thinks Penny should go as well.

Joe should work with Salva to get batch plotting code into Netpyne

Bill prefers data handling in Pandas, as it makes it easier to pick specific data to visualize
Salva uses Pandas, Joe should check out his usage

Modeling spine neck spillover 
  Add NMDA only on shafts and see effects
  See effects of delayed activation (linearly dependent on distance from cleft)
  In the future: could model with extracellular diffusion
  Srdjan: weight at neck probably only ~10% as at cleft

Srdjan is interested in how glutamate at different concentrations (from different clefts)
would overlap and summate on spines and necks

Srdjan thinks glutamate uptake would reduce with increasing glutamate concentration,
thinks modeling this could be a whole article

Srdjan would be happy to chat on Slack, but would like to have a pdf of relevant 
results in advance for a more fruitful conversation

** Fixing plot_vtraces 

Currently, the compartments whose traces are plotted are hard-coded 
(soma, Bdend1, Bdend2, etc.)

I'll improve this by making it an option to plot all recorded compartments or to 
input a list of compartments

Works now, e.g.:
file:gif/20170516_172617.png


** Compare first spine with last spine

First:
file:gif/20170516_115228.png

Last:
file:gif/20170516_165704.png

In the last (most distal) spine, the voltage in the spine is slightly higher than 
in Bdend1 

By the time we get to the first (most proximal) spine, that difference has disappeared


* 2017-05-17 -- Multiple spines 

** Short term goals
Apply for summer NEURON course
Continue to work on multiple spines
Outline EEE article

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** NEURON class application
https://www.neuron.yale.edu/neuron/static/courses/summer2017/apply.html#declaration

Name      
First:    
Joe
Middle:   
William
Last:   
Graham
Title     
    Faculty or other
Address     
Organization:   
Neurosim Lab
Mailing address:    
450 Clarkson Ave., Box 31 


City:   
Brooklyn
State or Province:    
NY
Country:    
USA
ZIP or Postal Code:   
11203
Phone:    
858-220-8711
FAX:    
Email:    
joe.w.graham@gmail.com


** Multiple spines -- varying neck resistance

Initial try:
file:gif/20170517_093858.png

The syn weight is too high.  

Ahh, I had 1/5 instead of 1/50 in my_batches.  Fixed and rerunning.

The weight is now good, but it doesn't look like neck_diam is actually being varied...

Asked Salva for help.

    joe [10:03 AM] 
    added and commented on this Python snippet: problem with batching
    Hey Salva, I'm trying to vary the neck diameter of all the spines with the following code in netParams:
    ​
    for secName, sec in cellRule['secs'].iteritems(): 
      if "neck" in secName:
        cellRule['secs'][secName]['geom']['diam'] = cfg.neckDiam
        print(secName)
        print(cellRule['secs'][secName]['geom']['diam'])
        
    I can tell with the print statements that neckDiam is being varied, but the output traces show that it is not being varied. 
    ​
    Any ideas?
    1 Comment Collapse
    @salvadord

** Playing with Netpyne synaptic delays

Want to be able to have an "epicenter" of glutamate stimulation, with spines 
further away seeing the stimulation later

From Netpyne docs:
http://www.neurosimlab.org/netpyne/reference.html#connectivity-rules

    delay (optional) - Time (in ms) for the presynaptic spike to reach the postsynaptic neuron.
    Can be defined as a function (see Functions as strings).

    If omitted, defaults to netParams.defaultDelay = 1

    If have list of synMechs, can have single delay for all, or list of delays (one per synMech, e.g. for 2 synMechs: [5, 7]).

    If have synsPerConn > 1, can have single weight for all, or list of weights (one per synapse, e.g. if synsPerConn = 3: [4, 5, 6])

    If have both a list of synMechs and synsPerConn > 1, can have a 2D list for each synapse of each synMech (e.g. for 2 synMechs and synsPerConn = 3: [[4, 6, 5], [9, 10, 11]])

We have two synMechs (NMDA and AMPA), and 50 spines for now.

Will make a new file netParams_synwave.py for this purpose.


* 2017-05-18 -- Synaptic waves

** Short term goals
Continue to work on multiple spines
Outline EEE article

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Synaptic waves

Working on synaptic delays such that stimulation spreads either towards the soma 
(in) or away from the soma (out)

Yesterday, I thought it would be necessary to have a 2x50 list beacause the model 
has two syn mechs, but it wasn't working.

I just made a 1x50 delay list, and it seems to work.

Out wave:
file:gif/20170518_073749.png
In wave:
file:gif/20170518_073807.png

They look almost, but not quite, identical.  Seems like there should be more of a difference...

I will change the inter-synapse delay to 5 ms and see what happens.

Looks interesting -- slower rise, inward wave only slightly stronger effect than
outward wave (flip back and forth between plots)

out wave:
file:gif/20170518_085209.png

in wave:
file:gif/20170518_085147.png

Setting to record from first and last spine head

Changing delay to 10ms

out wave:
file:gif/20170518_101116.png

in wave:
file:gif/20170518_101132.png

** Synaptic epicenter

Want to be able to choose a location for the glutamate stim and have the weight
decrease with distance and the delay increase with distance


* 2017-05-19 -- Synaptic epicenter

** Short term goals
Work on synaptic epicenter
Outline EEE article

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Synaptic epicenter

Given a location for glutamate release, that will be the max weight and min delay.
Weight decreases and delay increases with distance from stim location.

Will copy spines50 dir and rename it spillover

In netParams, I will need two lists: 
1) delays  (1x50)
2) weights (2x50)

Will create a function to generate these lists given an "epicenter" location 
of glutamate stim (peak wight and zero delay) with decreasing weights and 
increasing delays with distance.

    def epicenter(spineLoc=0.5, spineNum=spineNum):
      delays  = np.zeros(spineNum)
      weights = np.zeros((2, spineNum))
      # Now modify delays and weights:


      # return delays and weights to be plugged into netParams.stimTargetParams below
      return delays, weights


* 2017-05-22 -- From neck diameter to spine resistance

** Short term goals
Work on synaptic epicenter
Outline EEE article

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Problem with neck diameter

    Hey Salva, I'm trying to vary the neck diameter of all the spines with the following code in netParams:

    for secName, sec in cellRule['secs'].iteritems(): 
      if "neck" in secName:
        cellRule['secs'][secName]['geom']['diam'] = cfg.neckDiam
        print(secName)
        print(cellRule['secs'][secName]['geom']['diam'])
        
    I can tell with the print statements that neckDiam is being varied, but the output traces show that it is not being varied.  

    Any ideas?

Salva response:

    check that the network instance gets modified — `sim.net.cells[0].secs.neck_1.geom.diam` ; and also that the actual Neuron objs get modified: `sim.net.cells[0].secs.neck_1.hSec.diam`

    [10:46] 
    can also check that there are no other cell rules later on that replace this one; and check that spine diam actually has an effect on output by modifying manually in single sim instead of batch

Made some changes to cfg, now it seems like varying diameter manually does change diam:
file:gif/20170522_121603.png

Will try running neckDiam batch now.

Neck diameter is definitely being varied, it's just that there's little difference 
above a certain diameter:
file:gif/20170522_123151.png

** Chat with Bill

    It’s working, but there is little difference in the traces once the neck diameter is large enough.

    billl [12:46 PM] 
    can you label by R?

    [12:46] 
    maybe just change R but don't change diam since later will want some diffusion

    joe [12:49 PM] 
    I’m gonna grab some lunch, once I get back I’ll set neckDiam to a constant and vary R.

    billl [12:49 PM] 
    k

    billl [1:40 PM] 
    back?

    billl [2:34 PM] 
    @joe

    [2:38] 
    so what is the wave?

    joe [2:38 PM] 
    Not as exciting as it sounds.

    billl [2:38 PM] 
    nothing ever is

    [2:39] 
    song: "Is that all there is"

    joe [2:39 PM] 
    I implemented a way to add any number of spines/synapses.

    [2:39] 
    So to start, I’m using 50 spines, each spaced 1 um apart, starting at 0.5 in Bdend1.

    billl [2:40 PM] 
    why at 0.5 rather than at 0.1?

    joe [2:41 PM] 
    No particular reason, that’s just where I’ve been doing most stuff in Bdend1.

    billl [2:41 PM] 
    so for a spread out thing let's spread it out

    joe [2:41 PM] 
    Original synapse was there, first spine was there, etc.

    [2:41] 
    Sounds good. From 0.1 to the end?  Spacing?

    billl [2:41 PM] 
    this is also where eg good to bug me when make some decisions like this so we can figure out together what might be most interesting

    [2:42] 
    well you have 50 spines for now so guess spacing is whatever defaults out to

    [2:42] 
    would again suggest odd number btw just as we do odd number of nseg so that can put in more without moving the ones you have

    [2:42] 
    so what have you discovered so far?

    joe [2:43 PM] 
    Easy to change number of spines.  Bdend1 is about 300 um long.

    billl [2:44 PM] 
    ok yes easy but if have even number they wil shift -- no important

    joe [2:44 PM] 
    I’m working with varying the delay and weight between spines.  To test, I ran a “wave” of stimulation onto the spine/synapses.

    [2:44] 
    Basically just a linear delay along the spines.

    billl [2:44 PM] 
    what is the wave?

    [2:45] 
    that's fun but what is the logic with regard to biosimilitude?

    joe [2:45 PM] 
    I thought I would see more of a difference between “inward” waves and “outward” waves.  Like a Hausser paper from a little while ago…

    billl [2:45 PM] 
    oh what did that paper show?

    [2:46] 
    and what was the logic of that paper?

    joe [2:46 PM] 
    Where he showed that waves of activity approaching the soma are more effective than waves travelling away from.

    billl [2:46 PM] 
    building on an incoming EPSP -- would seem would have ot be a very fast wave

    joe [2:46 PM] 
    Really just a way to work on synaptic timing, and thought might find something interesting.

    [2:47] 
    I spaced each synapse (1 um apart) to activate 1 ms apart.

    billl [2:48 PM] 
    ok sounds interesting but i'm not sure how to sell it

    joe [2:48 PM] 
    uploaded this image: 20170518_101116.png
    Add Comment

    billl [2:48 PM] 
    how about the spillover stuff?

    joe [2:49 PM] 
    uploaded this image: 20170518_101132.png
    Add Comment

    joe [2:49 PM] 
    commented on 20170518_101116.png
    outward wave


    Workstreams APP [2:49 PM] Only visible to you
    File attachment canceled

    joe [2:50 PM] 
    commented on 20170518_101132.png
    inward wave

    joe [2:50 PM] 
    I was also curious as to how it would affect plateaus.

    billl [2:50 PM] 
    ok looks same

    [2:51] 
    let's focus on the stuff we said we were going to do 1st and then add this stuff later?

    joe [2:51 PM] 
    Very similar.

    billl [2:51 PM] 
    diff Ri spine;  degree of spillover

    [2:51] 
    distributed vs point

    [2:51] 
    activation

    [2:51] 
    where is paper outline?

    joe [2:52 PM] 
    Yeah, that’s what I’m working on now.  I can feed timing and weight into array of synapses/spines now.  So now to feed distributed vs point.

    [2:52] 
    Any preferences on weight/distance and time/distance?

    billl [2:53 PM] 
    great so let's spread out the spines and let's make ri variable (instead of making diam variable) and find the 2 ri's that we want to test

    joe [2:53 PM] 
    Perfect.  I’ll do that right now.

    billl [2:53 PM] 
    time/distance? -- i'm thinking we start with simultaneous -- the wave is something we should discuss tomorrow an dyou and srdjan can explain why hausser thought important to look at

    [2:53] 
    weight /distance -- uniform

    joe [2:53 PM] 
    Spines starting at loc 0.1

    billl [2:53 PM] 
    sure 0.1 sounds fair

    joe [2:53 PM] 
    Spacing?  1um good?

    billl [2:54 PM] 
    if you want to have 49 then spacing would be 0.8*L/49

    [2:54] 
    so go from 0.1 to 0.9

    joe [2:55 PM] 
    Okay.  So 50 evenly spaced across Bdend.  Right now I specify spacing in microns, but I can do that too.

    [2:55] 
    evenly space from 0.1 to 0.8, that is

    billl [2:55 PM] 
    0.1 to 0.9

    joe [2:55 PM] 
    Excuse me. That’s what I meant. For a total length of 0.8

    billl [2:56 PM] 
    can calculate your spacing in microns so don't have to change those routines

    [2:56] 
    (of course)

    joe [2:56 PM] 
    Great.  Let me set that up now and I’ll report back in a bit.

    billl [2:56 PM] 
    great

*** Change variable to neck resistance, then spread 49 spines from 0.1 to 0.9 in Bdend1 


** Spread 49 spines from 0.1 to 0.9 in Bdend1

Creating a new dir: spines49
Creating a new cell: SPI7sp49.py

Bdend1 length is 299.810775175 
So spacing of spines should be 0.8 * L / 49 = 4.89
I'll set spacing to 4.9 um
Changed "*sp50" to "*sp49" in SPI7sp49


** Neck resistance

Instead of changing neck diameter, I will fix it to vary neck resistance.

So neck resistance, Rneck = Raxial * Lneck / cross-sectional area

Right now, Rneck = 33 Mohms

  Rneck = ((105 ohm * cm) * (1 micron)) / (pi * (0.1 microns) * (0.1 microns)) 
        = 33 422 538 ohms

We want to give Rneck in cfg.py:
  cfg.Rneck = 50 # Mega-ohms

So, Raxial (ohm cm) = Rneck * (pi * 0.1 microns * 0.1 microns) / (1 micron)
  Raxial = Rneck (M-ohms) * (pi * 0.1 * 0.1) / (1) * 100 

Added this to SPI7sp49.py cell:
  for sec in self.necks: sec.Ra = SPI7sp49.spineRa

So in netParams, we need:

  if "neck" in secName:
      cellRule['secs'][secName]['geom']['Ra'] = cfg.Rneck * 100 * pi * (neckDiam/2)*(neckDiam/2)/neckLength

Actually, it will be:

  if "neck" in secName:
      diam = cellRule['secs'][secName]['geom']['diam']
      leng = cellRule['secs'][secName]['geom']['L']
      cellRule['secs'][secName]['geom']['Ra'] = cfg.Rneck * 100 * 3.1416 * (diam/2) * (diam/2) / leng

Now to give it a try.


Finally seems to be working:
file:gif/20170522_182538.png


* 2017-05-23 -- Synaptic spillover and project meeting

** Short term goals
Work on synaptic epicenter
Outline EEE article

** Longer term goals
Replace mkmod with a Python script
Work on Neurosim Manual

** Checking on Ri for Bill

*** Chat with Bill and Salva


    joe [7:39 AM] 
    Hey Bill, so how would I check Ri?  (And just to check that we’re using the same terminology, Ri would be spine input resistance and Ra would be neck axial resistance?)

    billl [7:39 AM] 
    not exactly

    [7:39] 
    Ra is specific resistence in units of ohm-cm

    [7:39] 
    (let me chekck that)

    [7:40] 
    i had this above here somewhere i think

    [7:41] 
     billl
    so this was why misremebering - used to be global --        Ra    Description:        Axial resistivity in ohm-cm. This used to be a global variable so that it was the same for all sections. Now, it is a section variable and must be set individually for each section. A simple way to set its value is forall Ra=35.4
    Posted in #eee-theoryYesterday at 5:44 PM

    joe [7:41 AM] 
    Resistivity instead of resistance.

    billl [7:42 AM] 
    shared this MATLAB snippet: not seg; belongs to sec
    >>> soma=h.Section()
    >>> soma.nseg=10
    >>> [x.ri() for x in soma]
    [9.014535976724953e-06, 1.8029071953449905e-05, 1.8029071953449905e-05, 1.8029071953449905e-05, 1.8029071953449905e-05, 1.8029071953449905e-05, 1.8029071953449905e-05, 1.8029071953449905e-05, 1.8029071953449905e-05, 1.8029071953449905e-05]
    >>> soma.Ra=500
    >>> [x.ri() for x in soma]
    [0.00012732395447351627, 0.00025464790894703254, 0.00025464790894703254, 0.00025464790894703254, 0.00025464790894703254, 0.00025464790894703254, 0.00025464790894703254, 0.00025464790894703254, 0.00025464790894703254, 0.00025464790894703254]
    1 Comment Collapse

    billl [7:42 AM] 
    ri is actual resistance

    billl [7:42 AM] 
    Syntax:         ri(x)     Description:         Return the resistance (in megohms) between the center of the segment containing x and its parent segment. This can be used to compute axial current given the voltage at two         adjacent points. If there is no parent the "infinite" resistance returned is 1e30.

    joe [7:43 AM] 
    Cool.  Let me see check ri then…

    billl [7:43 AM] 
    ri() is calculated from Ra -- you are backcalcing Ra from ri so just making sure

    joe [7:43 AM] 
    Always good to check my calculations! :wink:

    billl [7:43 AM] 
    your neck is nseg 1 so don't have to worry about summing the series resitors

    [7:43] 
    no, not just you!!

    [7:44] 
    can go hundreds or thousands of steps of coding as i have without checking something basic early on

    joe [7:45 AM] 
    Ouch. Yeah, good to try to avoid that.

    billl [7:46 AM] 
    (or perhaps worse yet thousands of hours of expensive hpc time)

    joe [8:21 AM] 
    added this Python snippet
    In [1]: cd cells
    /u/graham/projects/eee/sim/cells
    ​
    In [2]: from SPI7sp49 import SPI7sp49
    ​
    In [3]: foo = SPI7sp49()
    ​
    In [4]: [n.ri() for n in foo.neck_0]
    Out[4]: [16.71126902464901]
    ​
    In [5]: foo.neck_0.Ra
    Out[5]: 105.0
    ​
    In [6]: foo.neck_0.Ra = 200
    ​
    In [7]: [n.ri() for n in foo.neck_0]
    Out[7]: [31.830988618379067]
    Add Comment Collapse

    billl [8:23 AM] 
    maybe we should kill that bot

    joe [8:23 AM] 
    Yeah, the bot is a bit annoying.

    billl [8:23 AM] 
    ok so not getting the values you wanted? -- you want 25 and 500 right?

    [8:24] 
    don't need to iterate btw since nseg==1

    [8:24] 
    foo.neck_0.ri()

    [8:24] 
    hmm

    [8:24] 
    foo.neck_0.ri(0.5)

    [8:24] 
    i think

    [8:25] 
    brb

    salvadord [8:26 AM] 
    I killed the bot — was annoying and not really useful


    joe [8:27 AM] 
    added this Python snippet
    In [9]: foo.neck_0.ri()
    ---------------------------------------------------------------------------
    AttributeError              Traceback (most recent call last)
    <ipython-input-9-c97215baca3b> in <module>()
    ----> 1 foo.neck_0.ri()
    ​
    AttributeError: 'nrn.Section' object has no attribute 'ri'
    ​
    In [10]: foo.neck_0.ri(0.5)
    ---------------------------------------------------------------------------
    AttributeError              Traceback (most recent call last)
    <ipython-input-10-538f5ae5a702> in <module>()
    ----> 1 foo.neck_0.ri(0.5)
    ​
    AttributeError: 'nrn.Section' object has no attribute 'ri'
    Add Comment Collapse

    salvadord [8:27 AM] 
    (thats probably what bots will say about us humans in ~100 years)


    billl [8:29 AM] 
    k

    [8:29] 
    sorry

    salvadord [8:29 AM] 
    think its h.ri(0.5)  — need to access desired section first

    billl [8:29 AM] 
    foo.nect_0(0.5).ri()

    [8:30] 
    need to access desired seg first

    joe [8:30 AM] 
    Yeah, this works: `foo.neck_0(0.5).ri()`

    billl [8:30 AM] 
    been preparing my hoc lecture -- the hoc syntax is that one from above

    joe [8:31 AM] 
    So, ri() is the resistance between the center of the neck and Bdend1?

    billl [8:32 AM] 
    added this JavaScript/JSON snippet
    >>> soma(0.5).ri()
    2.0032302170499892e-05
    ​
    actually even worse:
    ​
    oc>soma { print ri(0.5) }
    2.0032302e-05 
    Add Comment Collapse

    billl [8:32 AM] 
    between -- if that's how you are setup

    [8:33] 
    neck here is nseg 1 so no diff between middle and beginngin and end

    joe [8:33 AM] 
    And we want ri() to be from 25 to 500 Mega-ohms?

    billl [8:33 AM] 
    yeah think that's what we said

    [8:34] 
    not between -- oly need to check these 2

    [8:34] 
    if find someting interesting could check some more

    joe [8:35 AM] 
    Okay.  I was calculating spine resistance as:  `(axial resistivity)*(neck length)/(neck cross-sectional area)`

    [8:36] 
    What is the formula for calculating ri()?

    [8:36] 
    I guess I was assuming they would be the same… :grimacing:

    billl [8:37 AM] 
    units are ohmc

    [8:37] 
    ohmcm

    [8:38] 
    your have units of ? ohm*cm/cm2 so ohm/cm ?  have to also consider cm vs microns

    [8:38] 
    use 'units' program

    [8:39] 
    You have: 10 ohm*cm * 2 microns / (pi*(0.25 microns)^2)
    You want:
            Definition: 1018591.6 kg m^2 / A^2 s^3
    You have:

    joe [8:39 AM] 
    Never used “units” program…

    billl [8:39 AM] 
    time to learn :)

    [8:39] 
    you can do in your head but you need a very big head

    [8:40] 
    weight your head and see if big enough

    joe [8:40 AM] 
    Haha! Where/what is units program?

    billl [8:40 AM] 
    it's a unix program - dates back to 1970s i think

    [8:40] 
    units

    [8:40] 
    perhaps not standard on mac?  since mac is .... oh nm

    [8:40] 
    can install there or use on neurosim

    [8:41] 
    can run under emasc!

    [8:41] 
    or not

    salvadord [8:41 AM] 
    Salvador-Duras-MacBook-Pro% units
    586 units, 56 prefixes
    You have:

    billl [8:42 AM] 
    ok very good -- i stand corrected

    salvadord [8:42 AM] 
    (I was surprised it was there)

    joe [8:42 AM] 
    It’s on Mac, thanks Salva.

    billl [8:42 AM] 
    (though you may have installed it with all the dev packages; realy there with standard distro?   dm)

    [8:43] 
    if need to find which words it uses have in    /usr/share/units/definitions.units — the standard units data file

    billl [8:43 AM] 
    added this Plain Text snippet: how much do you weigh in cloves?
    clove          7 lb
    stone          14 lb
    tod           28 lb
    brquarterweight     1|4 brhundredweight
    brhundredweight     8 stone
    longhundredweight    brhundredweight
    longton         20 brhundredweight
    brton          longton
    Add Comment Collapse

    billl [8:44 AM] 
    ah us 1 makes a little more sense -- ushundredweight         100 pounds

    joe [8:53 AM] 
    added this Python snippet
    You have: 105 ohm*cm * 1 microns / (pi*(0.1 microns)^2)
    unknown unit '(pi'
    ​
    You have: 105 ohm*cm * 1 micron / (3.14 * (0.1 microns)^2)
    unknown unit '(3.1'
    Add Comment

    billl [8:56 AM] 
    You have: pi
    You want:
            Definition: 3.1415927

    [8:56] 
    seems to be having trouble parsing your parens

    [8:56] 
    can just use /pi / ...

    joe [8:57 AM] 
    Using Google:
    ((105 ohm * cm) * 1 micron) / (3.14 * ((0.1 microns)^2)) =
    33 439 490.4 ohms

    billl [8:57 AM] 
    10 ohm*cm * 2 microns / pi / (0.25 microns)^2

    [8:57] 
    you want Mohms

    joe [8:57 AM] 
    What in the world is `kg m^2 / A^2 s^3`?

    billl [8:58 AM] 
    basic SI units

    joe [8:58 AM] 
    Right. According to my calculation, using 105 axial resistivity should give neck input resistance of 33.43 Mohms

    billl [8:58 AM] 
    You have: 10 ohm*cm * 2 microns / pi / (0.25 microns)^2
    You want: Mohms
        * 1.0185916

    [8:58] 
    according to your calc? -- don't calc ! -- we have a computer you can use

    joe [8:58 AM] 
    Well, Google’s calc.

    billl [8:59 AM] 
    ah that's ok

    billl [9:02 AM] 
    added this Objective-C snippet: ohm-cm
    ​
    You have: ((105 ohm * cm) * 1 micron) / (pi * ((0.1 microns)^2))
    You want: Mohms
      * 33.422538
    ​
    You have: 25Mohms/1 micron * (pi * (0.1 micron)^2)
    You want: ohm*cm
      * 78.539816
    ​
    You have: 500 Mohms/1 micron * (pi * (0.1 micron)^2)
    You want: ohm*cm
      * 1570.7963
    Add Comment Collapse

    joe [9:03 AM] 
    I’m confused.  Google and I calculate spine input resistance as 33 Mohms. Using `neck_0(0.5).ri()` gives 16.7.

    billl [9:03 AM] 
    so 80 and 1570

    [9:04] 
    so the calc was wrong -- that's why we are checking :)

    [9:04] 
    since off by a factor of 2 i'd guess r vs diam

    joe [9:09 AM] 
    Actually, I think I figured it out.  According to the definition of ri you posted: Return the resistance (in megohms) between the center of the segment containing x and its parent segment.

    [9:10] 
    So ri() is the resistance from Bdend1 to the center of the spine neck — i.e. half of its length.  So the total spine resistance would be double.

    [9:10] 
    Does that sound correct?

    billl [9:11 AM] 
    maybe ,  yeah, so check that interpretation

    [9:13] 
    (how are you checking?)

    [9:18] 
    correct now?

    [9:20] 
    srdjan confirmed

    [9:20] 
    (15^3)

    [9:20] 
    3375 to be more oblique

    [9:20] 
    @joe -- still there?

    [9:20] 
    maybe say bbial if going away etc

    [9:21] 
    since ohterwise i sit on tenterhooks

    [9:21] 
    waiting for the conclusion

    [9:21] 
    like reading a steven king novel

    joe [9:21 AM] 
    Still here. Trying to print out some values to confirm…

    billl [9:21 AM] 
    ok

    [9:21] 
    how are you trying -- i would suggest ri(1.0)

    joe [9:21 AM] 
    What did Srdjan confirm?  What is 3375?

    billl [9:22 AM] 
    15:15:15 eg 15^3 == 3375; nm; just filling the void here

    [9:22] 
    (sorry wasting time)

    [9:22] 
    so ri(1.0) ?

    [9:23] 
    works?

    joe [9:24 AM] 
    Hahaha, that was indeed oblique.  One more minute on checking…

    [9:25] 
    ri(1.0) doesn’t work

    [9:25] 
    In [24]: foo.neck_0(0.5).ri()
    Out[24]: 12.732395447351628

    In [25]: foo.neck_0(1.0).ri()
    Out[25]: 12.732395447351628

    [9:25] 
    Neck is all one compartment.

    [9:27] 
    Will change neck to multi-compartments, check neck(1.0).ri() and report back…

    billl [9:30 AM] 
    ri(1.0) is hoc again, sorry

    [9:30] 
    you checked that is not a diam vs radius problem?

    [9:30] 
    don't need multicomparments -- that won't help hyou

    billl [9:37 AM] 
    does appear to be a factor of 2 anyway 2*neck(0.5).ri()-500
    -0.8900984638162868

    joe [9:38 AM] 
    added this Python snippet
    Using Google, I expect the spines have 33.4 Mohm resistance:
    ((105 ohm * cm) * 1 micron) / (3.14 * ((0.1 microns)^2)) =
    33 439 490.4 ohms
    ​
    Using multiple nsegs in the neck, I get the same thing (almost):
    ​
    In [9]: [n.ri() for n in foo.neck_0]
    Out[9]: 
    [1.8568076694054456,
     3.7136153388108912,
     3.7136153388108912,
     3.7136153388108912,
     3.7136153388108912,
     3.7136153388108912,
     3.7136153388108912,
     3.7136153388108912,
     3.7136153388108912]
    ​
    In [10]: sum([n.ri() for n in foo.neck_0])
    Out[10]: 31.565730379892578
    ​
    In [11]: 3.7136*9
    Out[11]: 33.4224
    Add Comment Collapse

    billl [9:38 AM] 
    oh so multinseg did help -- hmm

    joe [9:39 AM] 
    So yeah, I am satisfied that sec(0.5).ri() gives half of the input resistance.

    billl [9:39 AM] 
    ok so guess you were right about the loc

    [9:39] 
    ah but lms

    joe [9:40 AM] 
    Back in a few.

    billl [9:40 AM] 
    thought adding head would help but not >>> h.topology()
    |-|       soma(0-1)
       `|       neck(0-1)
         `|       head(0-1)

    [9:41] 
    you still have the worng calc in your units program i think

    billl [9:47 AM] 
    asked mh

    billl [9:47 AM] 
    added this Python snippet: back calculating Ra incorrectly comparing to ri()
    soma=h.Section(name='soma')
    neck=h.Section(name='neck')
    head=h.Section(name='head')
    neck.connect(soma,1.0)
    head.connect(neck,1.0)
    h.topology()
    # |-|    soma(0-1)
    #  `|    neck(0-1)
    #   `|    head(0-1)
    neck.diam=0.1
    neck.L=1
    neck.Ra=392
    # from units:
    # You have: 500 Mohms/1 micron * (pi * (0.05 micron)^2)
    # You want: ohm*cm
    # * 392.69908
    neck.Ra=392
    neck(0.5).ri()
    # 249.55495076809186 -- OFF by a factor of 2
    neck(0.5).ri() == neck(1.0).ri() == head(0.0).ri()
    # True -- doesn't matter where measure from
    Add Comment Collapse

    joe [9:59 AM] 
    Wrong calc?

    billl [10:00 AM] 
    you used 0.1 for r instead of 0.05

    [10:00] 
    but we're still off by 2 -- just the other way :)

    joe [10:00 AM] 
    Actually, the neck diameter is set to 0.2

    billl [10:00 AM] 
    since squared

    [10:00] 
    oh i set to 0.1 -- ok

    joe [10:00 AM] 
    Sorry, should have been clearer. Yeah, diam of neck is 0.2.

    billl [10:01 AM] 
    np; my error; so can get it to work ok with nseg=2 ?

    joe [10:02 AM] 
    I set neck nseg = 9, just to test the calculations.  I was going to put it back to 1.

    billl [10:03 AM] 
    sure but try 2 ; would be an easier one to use and would more clearly illustrate the problem

    [10:03] 
    meanwhile i asked yoda so we'll hear back soon

    joe [10:04 AM] 
    Sounds good. I’ll even run a quick batch for neck nseg = 1, 2, and 9.  I don’t think it’ll make much difference in the sims.

    billl [10:07 AM] 
    sure, 2x wont make much diff but want to have the right values

    [10:08] 
    no real need to run the diff nseg

    [10:08] 
    why don't you see if can get 2 to work and if that works let's go with that till we get some kind of correction if any available from mh

    [10:08] 
    is 2 works ok then we have something to work with

    [10:08] 
    your results are fine but would like to start to hone in on some finalish figures

    [10:09] 
    btw where is paper outline?  -- you may have told me before but i didn't check it

    joe [10:13 AM] 
    Not much to it yet: https://docs.google.com/document/d/1lx1tQutiy1Qd9iSM3HJMyghEMA5EHKr4eN9qPQdhbPQ/edit?usp=sharing

    joe [10:14 AM] 
    shared this file
    EEE Article Outline
    Document from Google Drive
    Click to open in Google Drive
    Add Comment

    billl [10:14 AM] 
    got all the basics :)

    [10:14] 
    ok so we can work on that tomorrow sometime

    joe [10:14 AM] 
    Sounds good!

    new messages
    billl [10:21 AM] 
    meanwhile see if nseg 2 works then we can rerun some sims

** Set neck nseg = 2

Varying neck resistance:
file:gif/20170523_105838.png

Varying NMDA tau2:
file:gif/20170523_105855.png

** Email from Michael Hines

joe [11:01 AM] 
added this Plain Text snippet
Hines, Michael
10:25 AM (35 minutes ago)
to bill.lytton, Robert, Srdjan, me 
neck(0.5).ri() is the resistance(Megohms) of half the neck which is 0.5 micron)
Ie the parent segment of neck(0.5) is neck(0.0)
Add Comment Collapse

joe [11:02 AM] 
It sounds like there’s no problem with Ra versus ri() — ri() only uses half the neck length, thus is half the resistance

** Synaptic spillover

*** Chat about 
    joe [11:09 AM] 
    The current setup: 49 spines/synapses spread evenly from loc 0.1 to 0.9 in Bdend1.  Neck length = 1 um, diam = 0.2 um.  All synapses activated simultaneously.

    [11:13] 
    Now I’m going to implement localized “glutamate stim” — given a stim location, it will generate arrays for `weight` and `delay`, with `weight` decreasing with distance from stim and `delay` increasing with distance.

    billl [11:13 AM] 
    great

    joe [11:14 AM] 
    Any preferences for initial values of change in weight/delay with distance?

    [11:14] 
    Any idea how fast glutamate diffuses?

    billl [11:17 AM] 
    all the spine heads will be activated at full weight

    [11:17] 
    decided that the extrasyn would be 10% i think

    [11:18] 
    then we can do expon fall off starting at 10% and declineing over a space constant of 10 mu -- won't make any different though

    joe [11:22 AM] 
    Okay, so all 49 syns activated at full weight, and I should start working on spillover?  For that I was going to put NMDA on the spine necks and activate at ~10% of full weight.

    billl [11:31 AM] 
    on dend shaft not on necks

    [11:31] 
    prob won't matter but having enough hassle with neck R

    [11:31] 
    asked mh: Subject: but why is neck(1.0).ri() also resistance(Megohms) of half the neck??

    joe [11:37 AM] 
    Okay, just on dendritic shaft.

    [11:38] 
    What about how many / what density of synapses?

    billl [11:38 AM] 
    can put at same loc as where the neck debauches (right word?)

    [11:38] 
    some word like that

    [11:38] 
    at every debauchery

    [11:38] 
    (now clearly wrong word)

    [11:38] 
    destroy or debase the moral purity

    [11:39] 
    but there's a word like that -- based on bocca, mouth

    joe [11:39 AM] 
    Hahaha! I always thought neurons were morally neutral…

    [11:40] 
    Sounds good.  So 49 synapses on the dendritic shaft where each spine debarks.

    billl [11:40 AM] 
    disembarks

    [11:40] 
    yup

    [11:40] 
    discharges

    new messages
    [11:41] 
    ah here it is -- debouch     to flow from a small valley into a larger one.
    3.to come forth; emerge.

    [11:41] 
    pronounced with a french style



*** Implement NMDA on dendritic shaft

One synapse at the base of each spine
Gets 10% of weight of spine synapse

** EEE Project Meeting

Implement NMDA on dendritic shaft
10% of weight
10 ms delay

Model punctate activation ~ 5 spines same total weight

Srdjan estimates about 200 spines per basal dendrite
  Density highest in first 1/3
  Srdjan will send info

Hines: it's important to keep flexibility in sims
  They must be compared to other sims
  Changes made should be parameterized
  E.g. synapse location is in cell model, but we will need to run various setups

Hines: probably no difference at soma between 11 and 99 nsegs in our simplified morph

Bill and Joe will work on outline, start sticking in figures.
https://docs.google.com/document/d/1lx1tQutiy1Qd9iSM3HJMyghEMA5EHKr4eN9qPQdhbPQ/edit#

Spine density figure from Srdjan:
file:gif/20170523_123924.png

** To digitize plot data
http://arohatgi.info/WebPlotDigitizer/


* 2017-05-24 -- Synaptic spillover

** Short term goals
Work on synaptic spillover
Outline EEE article

** Digitize figure in order to determine number of spines needed:

Figure:
file:gif/20170523_123924.png

Digitizer:
http://arohatgi.info/WebPlotDigitizer/

Digitized data points:
file:gif/20170524_095412.png

Data points:
10.097276264591429,0.9815242494226268
20.603112840466906,4.676674364896076
30.233463035019454,10.912240184757508
40.21400778210116,14.722863741339491
49.14396887159532,18.24480369515011
59.29961089494164,18.76443418013857
69.63035019455253,19.053117782909933
79.96108949416343,17.147806004618936
90.29182879377431,17.37875288683603
99.92217898832685,16.166281755196305
110.07782101167318,15.357967667436487
120.05836575875487,15.069284064665123
130.21400778210113,15.242494226327942
140.36964980544747,13.972286374133944
150.52529182879374,12.52886836027713
160.33073929961085,12.644341801385675
170.66147859922182,11.83602771362586
180.46692607003894,9.98845265588914
190.6225680933852,11.431870669745958


Data points cleaned up:
10   0.982
20   4.677
30   10.91
40   14.72
50   18.24
60   18.76
70   19.05
80   17.15
90   17.38
100  16.17
110  15.36
120  15.07
130  15.24
140  13.97
150  12.53
160  12.64
170  11.84
180  9.988
190  11.43

For Python purposes:

distance = range(10, 200, 10)
numspines = [0.982, 4.677, 10.91, 14.72, 18.24, 18.76, 19.05, 17.15, 17.38, 16.17, 15.36, 15.07, 15.24, 13.97, 12.53, 12.64, 11.84, 9.988, 11.43]

Number of spines
sum: 256.1
mean density (spines/um): 1.35
mean spacing (um): 0.74

** For next contract

Project-Task-Award: 1120566-1-75050

billl [12:48 PM] 
oh ok -- great

[12:48] 
since have to do anyway let's change it to award # 75050

[12:49] 
and mkae the SOW something about netpyne so fits well for that one


* 2017-05-25 -- Spines and spillover

** Short term goals
Finalize new contract
Work on synaptic spillover
Outline EEE article

** Redoing new contract

Original:
/u/graham/contracts/graham_consultant_package_20170525.pdf

Flattened:
/u/graham/contracts/graham_consultant_package_20170525_2.pdf


** Synaptic spillover

Time to put synapses at the base of the spines.

First, to read the article the spine density figure is from:

DENSITY AND MORPHOLOGY OF DENDRITIC SPINES IN MOUSE NEOCORTEX
Density and Morphology of Dendritic Spines in Mouse Neocortex
https://paperpile.com/shared/bpq9LJ

C57BL/6 mice (n=2 males, 2 months old) 
Ninety pyramidal cells (15 cells per area and per mouse) were reconstructed

Plot legend for Srdjan figure:
(B) Plot of spine density calculated as the number of spines per 10 um segment of the dendrite from the soma to the tip of the dendrite in M2, S2 and V2L/TeA. 

Hmmm...  Seems to me a problem here.

The full figure from Srdjan:
file:gif/20170525_142602.png

The legend is:
Fig. 3. (A) Plot of the number of intersections of the basal dendritic trees calculated in 3-D with Neurolucida and in 2-D by the classical Sholl analysis. (B) Plot of spine density calculated as the number of spines per 10 um segment of the dendrite from the soma to the tip of the dendrite in M2, S2 and
V2L/TeA. (C) Plot of the total number of spines estimated in 3-D and 2-D.

Srdjan estimated about 200 spines per basal dendrite.

Summing the densities from (B), there's an average of 256 spines per basal dendrite.

But, looking at (A) there are 12-15 basal dendrite trunks, and most of these branch.

This results (C) in about 4000 spines per neuron. 

How many spines do we want to use?  
2000? (because Bdend1 represents half the basal arborization)  
250?  (because that's about how many are in the average basal dendrite)


* 2017-05-26 -- Spines and spillover

** Short term goals
Set up 200 spines
Work on EEE article

** Spines and spillover

Bill says use 200 spines.  Setting that up now.

Copying spines49 dir to spines200

Copied cell SPI7sp49.py to SPI7sp200.py
Modifying SPI7sp200

Want two spine distributions:
1) uniform
2) per density data

For uniform:
Start of spines: 0.01 (old was 0.1)
For spacing between spines (spineDist, old=4.9), we want the length of Bdend1 divided by number of spines

(299.8 - (0.02 * 299.8)) / 200 = 1.4690

So will set spineDist = 1.45  (*200 = total length of 290 um)

Fixing netParams, cfg, and my_batches.

Running my_batches, and it works.
file:gif/20170530_083611.png


* 2017-05-29 -- Spines and spillover

** Short term goals
Project meeting today
Set up 200 spines / 200 spillover synapses
Work on EEE article

** Spines and synapses

Will ask in the project meeting today about programatically changing which cell is used 
(using cell choice as a parameter, to keep flexibility as per Michael Hines)

Now to add spillover: 200 NMDA synapses at base of 200 spines
  These get 10% of the weight of spines and
  delay of 10 ms

Adding to cfg:
  
  cfg.shaftWeight = 0.10 # percent of synaptic weight reaching shaft
  cfg.shaftDelay = 10 # delay beytween spine and shaft stimulation in ms

  cfg.NetStim2 = {'pop': 'PT5B', 'loc': 0.5, 'synMech': 'NMDA', 'start': 200 + sfg.shaftDelay, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': cfg.weightNMDA * cfg.shaftWeight, 'delay': 1}

Location of synapses will be:
  
  locs = np.arange(spineLoc, spineNum*spineDist, spineDist)

  spineNum  = 200  # number of spines to add
  spineLoc  = 0.01  # location of first spine in Bdend1
  spineDist = 1.45  # spine spacing in microns

  locs = np.arange(0.01, 200*1.45, 1.45)

*** Running batches

Error because Numpy arrays aren't JSON serializable.  Changing locs to a list.
In cfg:
  cfg.synLocsUniform = list(np.arange(0.01, 200*1.45, 1.45))

Oops.  That's not right.  Locations need to be between 0 and 1.

Should be:

  cfg.synLocsUniform = list(np.arange(0.01, 200*1.45/300, 1.45/300))

Where 300 is the length of Bdend1.

*** Running again

Got the following error:

    In [2]: execfile("batch_init.py")
    NetStim1
    NetStim2
     *** Loading tests *** 
     *** Finish loading tests *** 

    Creating network of 1 cell populations on 1 hosts...
      Number of cells on node 0: 1 
      Done; cell creation time = 0.07 s.
    Making connections...
      Number of connections on node 0: 0 
      Done; cell connection time = 0.00 s.
    Adding stims...
    ---------------------------------------------------------------------------
    UnboundLocalError                         Traceback (most recent call last)
    <ipython-input-2-aa3ffd6f2f80> in <module>()
    ----> 1 execfile("batch_init.py")

    /u/graham/projects/eee/sim/spines200/batch_init.py in <module>()
         30 
         31 # add network stimulation
    ---> 32 sim.net.addStims()
         33 
         34 # setup variables to record for each cell (spikes, V traces, etc)

    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in addStims(self)
        142                             params[sourceParam] = strParams[sourceParam+'List'][postCellGid] if sourceParam+'List' in strParams else source.get(sourceParam)
        143 
    --> 144                         postCell.addStim(params)  # call cell method to add connections
        145 
        146         print('  Number of stims on node %i: %i ' % (sim.rank, sum([len(cell.stims) for cell in self.cells])))

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addStim(self, params)
        966                 'seed': params['seed'] if 'seed' in params else sim.cfg.seeds['stim']}
        967 
    --> 968             self.addConn(connParams, netStimParams)
        969 
        970 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addConn(self, params, netStimParams)
        685         # Add synaptic mechanisms
        686         if not pointp: # check not a point process
    --> 687             synMechs, synMechSecs, synMechLocs = self._setConnSynMechs(params, secLabels)
        688             if synMechs == -1: return
        689 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in _setConnSynMechs(self, params, secLabels)
       1120 
       1121         # add synaptic mechanism to section based on synMechSecs and synMechLocs (if already exists won't be added)
    -> 1122         synMechs = [self.addSynMech(synLabel=params['synMech'], secLabel=synMechSecs[i], loc=synMechLocs[i]) for i in range(synsPerConn)]
       1123 
       1124         return synMechs, synMechSecs, synMechLocs

    UnboundLocalError: local variable 'synMechLocs' referenced before assignment

    In [3]: 

*** Trying something else

Tried a bunch of things.  No luck.  Will ask for help.

** Help with synMechLocs problem

Committing now.

Asked for help.  Salva recommends upgrading to latest dev version.  
I should do this more often!

From Neurosim Ops Manual:
To update NetPyNE, enter the following commands:
cd /usr/site/nrniv/local/python/netpyne
git pull

There were a bunch of updates, but the error still occurs.

Salva just reproduced the error and is fixing it.  :)


* 2017-05-30 -- Project meeting

Joe: How to distribute spines physiologically?
     Density relationship only goes to 200 um
     Our dends are 300 um long
     Possibilities:
     1) Continue density trend
     2) Stop spines at 200 um
     3) Change dend length to 200 um

Srdjan: Dends should be no longer than 250 um
        Best to change dend length to 200 um
        Then refit to match bAPs as done earlier

MH: electically, base of spine neck is same as dendritic shaft at base of spine
    Would be easier to put synapses there
    Should still switch to NMDA model with explicit duration of transmitter 
      (Destexhe-type)

Salva: Check out subConn rules in Netpyne

Srdjan: plateaus occur in all Pyramidal types (both thin and thick-tufted)


* 2017-06-04 -- NEURON Course
* 2017-06-05 -- NEURON Course
* 2017-06-06 -- NEURON Course
* 2017-06-07 -- NEURON Course
* 2017-06-08 -- NEURON Course
* 2017-06-09 -- NEURON Course
* 2017-06-10 -- NEURON Course


* 2017-06-14 -- Renovating cell model 

** Plan

Change dendritic length to 200 um
Add one spine per um
Fit bAPs
Add NMDA synapses at base of spine for spillover

** Updating all Neurosim code

Non-Netpyne code:
  graham-mac% /usr/site/scripts/nsimpull
  (can also just do ./nsimpull assuming the dir is on your path)

Netpyne:
  graham-mac% cd /usr/site/nrniv/local/python/netpyne
  graham-mac% git pull

Netpyne update got an error because the Mac file .DS_store would be overwritten
After I deleted this file, the update worked.

*** Removing .DS_store from Netpyne:

The .DS_store files should not be versioned.  I will remove the file and add it 
to the .gitignore file.

Directions from Neurosim Ops Manual 
(https://docs.google.com/document/d/1mM1KlucucOYUYDGSP4GSP0A0zqUEKdfwOYt-Tu5jO28/edit#heading=h.1u0zzdwld9rk)

I already have a fork of Netpyne, so I will delete that fork: 
  https://github.com/joewgraham/netpyne
  Settings --> Delete this repository --> Absolutely sure? --> Yes

And start a new one:
  https://github.com/Neurosim-lab/netpyne
  Fork --> https://github.com/joewgraham/netpyne

*** Netpyne pull request process

    graham-mac% mkdir netpyne_temp
    graham-mac% cd netpyne_temp
    graham-mac% git clone https://github.com/joewgraham/netpyne.git
    Cloning into 'netpyne'...
    remote: Counting objects: 9056, done.
    remote: Compressing objects: 100% (112/112), done.
    remote: Total 9056 (delta 105), reused 97 (delta 49), pack-reused 8895
    Receiving objects: 100% (9056/9056), 33.06 MiB | 624.00 KiB/s, done.
    Resolving deltas: 100% (6388/6388), done.
    graham-mac% cd netpyne
    graham-mac% git branch
    * master
    graham-mac% git checkout development
    Branch development set up to track remote branch development from origin.
    Switched to a new branch 'development'
    graham-mac% git branch
    [asterisk] development
      master
    graham-mac% nano .gitignore
    graham-mac% git rm .DS_Store 
    rm '.DS_Store'
    graham-mac% git status
    On branch development
    Your branch is up-to-date with 'origin/development'.
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)

      deleted:    .DS_Store

    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)

      modified:   .gitignore
    graham-mac% git add .gitignore 
    graham-mac% git status
    On branch development
    Your branch is up-to-date with 'origin/development'.
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)

      deleted:    .DS_Store
      modified:   .gitignore

    graham-mac% git commit -m "Deleted .DS_Store file and added it to .gitignore"
    [development 56e0efe] Deleted .DS_Store file and added it to .gitignore
     2 files changed, 1 insertion(+)
     delete mode 100644 .DS_Store
    graham-mac% git remote add upstream https://github.com/Neurosim-lab/netpyne.git
    graham-mac% git fetch upstream
    From https://github.com/Neurosim-lab/netpyne
     * [new branch]      development                -> upstream/development
     * [new branch]      documentation              -> upstream/documentation
     * [new branch]      feature/error_check_2      -> upstream/feature/error_check_2
     * [new branch]      feature/error_check_final  -> upstream/feature/error_check_final
     * [new branch]      master                     -> upstream/master
     * [new branch]      neuroml_export             -> upstream/neuroml_export
     * [new branch]      neuroml_export_test_random -> upstream/neuroml_export_test_random
     * [new branch]      new_connections            -> upstream/new_connections
     * [new branch]      py3                        -> upstream/py3
     * [new branch]      python3                    -> upstream/python3
     * [new branch]      randomizer                 -> upstream/randomizer
     * [new branch]      revert-161-lkmn_dev        -> upstream/revert-161-lkmn_dev
     * [new branch]      temp_fix_dev_nml           -> upstream/temp_fix_dev_nml
     * [new branch]      test_host_distribution     -> upstream/test_host_distribution
     * [new branch]      travis_test                -> upstream/travis_test
    graham-mac% git merge upstream/development
    Already up-to-date.
    graham-mac% git status
    On branch development
    Your branch is ahead of 'origin/development' by 1 commit.
      (use "git push" to publish your local commits)
    nothing to commit, working tree clean
    graham-mac% git remote show origin
    * remote origin
      Fetch URL: https://github.com/joewgraham/netpyne.git
      Push  URL: https://github.com/joewgraham/netpyne.git
      HEAD branch: master
      Remote branches:
        development                tracked
        documentation              tracked
        feature/error_check_2      tracked
        feature/error_check_final  tracked
        master                     tracked
        neuroml_export             tracked
        neuroml_export_test_random tracked
        new_connections            tracked
        py3                        tracked
        python3                    tracked
        randomizer                 tracked
        revert-161-lkmn_dev        tracked
        temp_fix_dev_nml           tracked
        test_host_distribution     tracked
        travis_test                tracked
      Local branches configured for 'git pull':
        development merges with remote development
        master      merges with remote master
      Local refs configured for 'git push':
        development pushes to development (fast-forwardable)
        master      pushes to master      (up to date)
    graham-mac% git push
    Counting objects: 3, done.
    Delta compression using up to 8 threads.
    Compressing objects: 100% (3/3), done.
    Writing objects: 100% (3/3), 344 bytes | 0 bytes/s, done.
    Total 3 (delta 2), reused 0 (delta 0)
    remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
    To https://github.com/joewgraham/netpyne.git
       6797f3f..56e0efe  development -> development
    graham-mac% 


* 2017-06-15 -- Renovating cell model 

** Plan

Delete obsolete files
Use SPI6 from Neurosim as basis for model
Change dendritic length to 200 um
Add one spine per um
Fit bAPs
Add NMDA synapses at base of spine for spillover

** Code organization

    joe [2:13 PM] 
    I’ve got a question about general code organization…  I’m switching from using a local copy of a cell model to symlinking to one from the Neurosim repo, so a lot of the code I’ve been using is now obsolete.  

    What does everybody do in this situation?  I see a few ways I could go.  
    1) start a new repo for moving forward
    2) delete the files, since they are versioned 
    3) move the code into an “archive” directory in the repo

    Suggestions?

    salvadord 
    [2:17 PM] 
    I’d probably do 2


    ----- Today June 15th, 2017 -----
    billl [5:13 AM] 
    always stick with same repo -- that's idea of repo'ing -- history forever , for posterity

    [5:13] 
    so #2 as salva said


** One final commit before deleting obsolete files

changeset:   294:f1ed7795f35f
tag:         tip
user:        Joe Graham <joe.w.graham@gmail.com>
date:        Thu Jun 15 11:55:11 2017 -0700
summary:     Commit before deleting obsolete files

** Deleting files

Creating a local clone first on my laptop desktop (old habits die hard)
hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee

** Programmatic cell model

Still working on it...


* 2017-06-16 -- Renovating cell model 

** Plan

Use SPI6 from Neurosim as basis for model
Change dendritic length to 200 um
Add one spine per um
Fit bAPs
Add NMDA synapses at base of spine for spillover
Switch to DMS (Destexhe-Mainen-Sejnowski) NMDA model
Celebrate my 38th birthday

** Symlinking SPI6

To symlink:
ln -s /path/to/original/ /path/to/link

For this:
ln -s /usr/site/nrniv/local/python/SPI6.py /u/graham/projects/eee/sim/cells/SPI6.py

That worked.

** Programmatically modifying SPI6

Need to initialize the cell, but I deleted init.py a long time ago...

*** How to list deleted files in Hg:

hg log --template "{rev}: {file_dels}\n" | grep -v ':\s*$'
https://stackoverflow.com/questions/1013550/find-deleted-files-in-mercurial-repository-history-quickly

init.py was found deleted in rev 230:
  230: sim/init.py

*** How to recover deleted file

"""
Once you have the revision you can use hg revert -r 123 path/to/the/file.txt to recover it. Note that you need to specify a revision prior to the one where you deleted the file! (just substract 1)
"""

So for me:
hg revert -r 229 sim/init.py

That gives me a "no such file" error...

Ah, maybe a full path.
hg revert -r 229 /u/graham/projects/eee/sim/init.py

That worked!

But, that version of the file doesn't include the "initcell" function I'm looking for.
Trying an earlier version:

hg revert -r 150 /u/graham/projects/eee/sim/init.py

Now it's in there:

    def initcell(modelname):
      """Imports a model cell ("SPI6" or "SPI7") and returns an instance."""

      cellclass = getattr(importlib.import_module("cells." + modelname), modelname)
      instance = cellclass()

      return instance

Created a new file eee_utils.py to hold initcell and other utility functions.


* 2017-06-19 -- DMS synapse and Neurosim repos updates 

** Plan

Programmatically:
  Change dendritic lengths to 200 um
  Add one spine per um
Fit bAPs
Add NMDA synapses at base of spine for spillover
Switch to DMS (Destexhe-Mainen-Sejnowski) NMDA model

** DMS NMDA channel

*** Chats about 

    joe [10:29 AM] 
    Just a quick check, is this the DMS synapse model we want to use?  It uses transmitter concentration instead of weight.

    [10:29] 
    https://senselab.med.yale.edu/modeldb/showmodel.cshtml?model=18500&file=/Channels_NEW/nmda.mod#tabs-2

    billl [10:32 AM] 
    similar

    [10:32] 
    we want to use the one in my parameters.multi

    [10:33] 
    looking

    billl [10:36 AM] 
    added this MATLAB snippet: syn section for parameters.multi
    :* SYNAPSES
    :** AMPA
    NEURON {POINT_PROCESS AMPA}
    ​
    PARAMETER {
     Cdur = 0.3 (ms)    : transmitter duration (rising phase)
     Alpha  = 0.47  (/ms mM)  : forward (binding) rate
     Beta = 0.18  (/ms)   : backward (unbinding) rate
     Erev = 0 (mV)    : reversal potential
    }
    INCLUDE "netcon.inc"
    :** NMDA
    NEURON{ POINT_PROCESS NMDA
     RANGE B 
     GLOBAL mg
    }
    ​
    PARAMETER {
     mg    = 1.  (mM)    : external magnesium concentration
     Cdur = 1.  (ms)    : transmitter duration (rising phase)
     Alpha  = 4.  (/ms mM)  : forward (binding) rate
     Beta = 0.0067 (/ms)    : backward (unbinding) rate 1/150
     Erev = 0.  (mV)    : reversal potential
    }
    ​
    ASSIGNED { B }
    ​
    INCLUDE "netcon.inc"
    : EXTRA BREAKPOINT MUST BE BELOW THE INCLUDE
    BREAKPOINT {
     rates(v)
     g = g * B : hence g = gmax * R * B
     i = i * B : hence i = g*(v - Erev)
    }
    ​
    PROCEDURE rates(v(mV)) {
     TABLE B
     DEPEND mg
     FROM -100 TO 80 WITH 180
     B = 1 / (1 + exp(0.062 (/mV) * -v) * (mg / 3.57 (mM)))
    }
    :** GABAA
    NEURON { POINT_PROCESS GABAA }
    PARAMETER {
     Cdur = 0.3 (ms)    : transmitter duration (rising phase)
     Alpha  = 10  (/ms mM)  : forward (binding) rate
     Beta = 0.16  (/ms)   : backward (unbinding) rate
     Erev = -80 (mV)    : reversal potential
    }
    INCLUDE "netcon.inc"
    :** GABAB
    NEURON {POINT_PROCESS GABAB}
    PARAMETER {
     Cdur  = 150  (ms)      : transmitter duration (rising phase)
     Alpha  = 0.01 (/ms mM)    : forward (binding) rate
     Beta  = 0.005 (/ms)      : backward (unbinding) rate
     Erev  = -95  (mV)      : reversal potential (potassium)
    }
    INCLUDE "netcon.inc"
    Add Comment Collapse

    sergio [10:38 AM] 
    and how do you use it from parameters.multi?

    [10:39] 
    DEFAULT: ____?

    billl [10:39 AM] 
    just include it either above or below the section of defaults

    [10:39] 
    or could be in middle but would be more confusing

    [10:40] 
    it wil generate the mod files using the netcon.inc file

    new messages
    [10:40] 
    /usr/site/nrniv/local/mod/netcon.inc

    [10:40] 
    with the appropciate header which differes for AMPA,NMDA,GABAA

    [10:40] 
    GABAB is not good
    should have more cooperativity/spillover but so far we're not using GABAB much anyway?

    sergio [10:41 AM] 
    Salva used GABAB for the SOM interneurons

    [10:42] 
    but I haven’t included it yet

    billl [10:42 AM] 
    ic; what model of GABAB did he use?

    sergio [10:42 AM] 
    let me check

    billl [10:42 AM] 
    (prob also exp2syn so similarly lacking those details)

    joe [10:45 AM] 
    I added the code to my parameters.multi and updated my repo.  Sergio, if you could pull my repo and play around with the synapse, I should be ready to add it this afternoon.

    sergio [10:47 AM] 
    thanks Joe

    sergio [10:47 AM] 
    added this Plain Text snippet: Salva's GABAB from M1 model
    : based on destexhe
    DEFAULT gabab
    Add Comment

    sergio [10:48 AM] 
    is that GABAB the same from DMS?

    billl [10:54 AM] 
    it is DMS format yeah but not the more sophisticated destexhe model of GABAB which incorporated coop/spillover which might be interesting for us to look at since we're now doing NMDA spillover

    [10:55] 
    /u/billl/articles/pnas92:9515.pdf  pnas92:9515.pdf  Destexhe, A. and Sejnowski, T.J. G-protein activation kinetics and spillover of [gamma]-aminobutyric acid may account for differences between inhibitory responses in the hippocampus and thalamus. Proceedings of the National Academy of Sciences 92:9515-9519, 1995.

    billl [10:55 AM] 
    added this MATLAB snippet: spillover eqns
    ** eqns:
      dR/dt = K1 * T * (1-R-D) - K2 * R + K3 * D 
      dD/dt = k4 * R - K3 * D
      dG/dt = K5 * R - K6 * G
      I = gbar * G^n/(G^n + Kd) * (V - EK)
    T = transmitter
    R = fraction of activated receptor
    D = fraction of desensitized receptor
    G = activated G protein
    ** steps: (i) transmitter binding -> activation; (ii) receptor causes activation of G protein; 
    (iii) G proteins bind to open K channel with n binding sites
    ** simplified:
      dR/dt = K1 * T * (1-R-D) - K2 * R // D=0 -- no desensitization
      dG/dt = K3 * R - K4 * G
    Add Comment Collapse

    sergio [11:04 AM] 
    ok

    [11:06] 
    once I included the DMS parameters at the end of the parameters.multi file, should I compile again with mkmod?

    billl [11:07 AM] 
    y

    sergio [11:14 AM] 
    added this Plain Text snippet
    no% mkmod
    Search path for mod files is /usr/site/nrniv/local/mod
    Creating AMPA.mod
    Can't open AMPA.mod.
    Add Comment

    sergio [11:14 AM] 
    I can create the NMDA, GABAA and GABAB mod files after compilation

    billl [11:14 AM] 
    but doesn't create the AMPA.mod file?

    sergio [11:14 AM] 
    yep

    billl [11:15 AM] 
    let me pull -- your repo?

    sergio [11:16 AM] 
    I did it

    [11:16] 
    I had an old AMPA.mod file

    joe [11:16 AM] 
    Yeah, I just had to delete that also.  A leftover from before parameters.multi

    sergio [11:16 AM] 
    and I cu=ouldn’t creat the new one

    billl [11:16 AM] 
    ic

    sergio [11:19 AM] 
    /u/sergioangulo/projects/eee

    [11:19] 
    repo is there, I just pushed the repo

    new messages
    billl [11:20 AM] 
    ok but working now anyway; good


*** Working on DMS NMDA

Added code above to parameters.multi

Commented out DEFAULT AMPA in parameters.multi now that I added the AMPA code above
No more duplicate AMPA parameters now.

** Programmatically modifying cell model

*** Getting an error:

    graham-mac% cd /u/graham/projects/eee/sim
    graham-mac% ipython
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul  2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.

    IPython 5.1.0 -- An enhanced Interactive Python.
    ?         -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help      -> Python's own help system.
    object?   -> Details about 'object', use 'object??' for extra details
    In [1]: pwd
    Out[1]: u'/u/graham/projects/eee/sim'
    In [2]: import eee_utils as eee
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod NMDA.mod GABAA.mod GABAB.mod

    In [3]: cell = eee.initcell("SPI6")
    ---------------------------------------------------------------------------
    LookupError                               Traceback (most recent call last)
    <ipython-input-3-3f971273a30f> in <module>()
    ----> 1 cell = eee.initcell("SPI6")

    /u/graham/projects/eee/sim/eee_utils.py in initcell(modelname)
         34         """Imports a model cell class and returns an instance."""
         35 
    ---> 36         cellclass = getattr(importlib.import_module("cells." + modelname), modelname)
         37         instance = cellclass()
         38 

    /Users/graham/anaconda/lib/python2.7/importlib/__init__.pyc in import_module(name, package)
         35             level += 1
         36         name = _resolve_name(name[level:], package, level)
    ---> 37     __import__(name)
         38     return sys.modules[name]

    /u/graham/projects/eee/sim/cells/SPI6.py in <module>()
         33 p_ena = 42.0
         34 # h-current
    ---> 35 h.erev_h = h.erev_ih = -37.0 # global
         36 gbar_h = 0.000140956438043
         37 h_gbar_tuft = 0.00565 # mho/cm^2 (based on Harnett 2015 J Neurosci)

    LookupError: 'erev_h' is not a defined hoc variable name.

    In [4]: 

** Updating Neurosim repos

First, let's see the differences.  Find the repos from the nsimpull script:

    graham-mac% cat /usr/site/scripts/nsimpull
    #!/bin/tcsh -f
    foreach aa ('/usr/site/nrniv/local' '/usr/site/nrniv/simctrl' '/usr/site/scripts' '/usr/site/config' '/usr/site/site-lisp')
      echo pulling in $aa
      (cd $aa; hg pull -u)
    end

*** /usr/site/nrniv/local
    Added .pyc, .DS_Store, and netpyne to new .hgignore file
    hg status:
        M mod/AMPA.mod
        M mod/gabab.mod
        M mod/misc.h
        M python/SPI6.py
        A .hgignore

*** /usr/site/nrniv/simctrl
    hg status:
        [no changes]

*** /usr/site/scripts
    Added .pyc and .DS_Store to new .hgignore file
    hg status:
        M mkmod
        A .hgignore
        ? mkmod.orig

*** /usr/site/config
    hg status:
        [no changes]

*** /usr/site/site-lisp
    hg status:
        [no changes]

*** Will revert all files to Neurosim status

**** graham-mac% cd /usr/site/nrniv/local
    graham-mac% hg status
    M mod/AMPA.mod
    M mod/gabab.mod
    M mod/misc.h
    M python/SPI6.py
    A .hgignore
    graham-mac% hg update --clean
    4 files updated, 0 files merged, 0 files removed, 0 files unresolved
    graham-mac% hg status
    ? .hgignore
    graham-mac% hg add
    adding .hgignore
    graham-mac% hg status
    A .hgignore
    graham-mac% hg commit -m "Added .hgignore file to ignore irrelevant files"
    graham-mac% hg push
    pushing to ssh://no.neurosim.downstate.edu//usr/site/nrniv/local
    searching for changes
    remote: abort: could not lock repository /usr/site/nrniv/local: Permission denied
    abort: unexpected response: empty string

Need to get permission to modify repo

**** graham-mac% cd /usr/site/scripts
    graham-mac% hg status
    M mkmod
    A .hgignore
    ? mkmod.orig
    graham-mac% hg update --clean
    1 files updated, 0 files merged, 0 files removed, 0 files unresolved
    graham-mac% hg status
    ? .hgignore
    ? mkmod.orig
    graham-mac% hg rm mkmod.orig 
    not removing mkmod.orig: file is untracked
    graham-mac% rm mkmod.orig
    graham-mac% hg add .hgignore
    graham-mac% hg status
    A .hgignore
    graham-mac% hg commit -m "Added .hgignore file to ignore irrelevant files"
    graham-mac% hg push
    pushing to ssh://no.neurosim.downstate.edu//usr/site/scripts
    searching for changes
    remote: adding changesets
    remote: adding manifests
    remote: adding file changes
    remote: added 1 changesets with 1 changes to 1 files
    remote: 1 files updated, 0 files merged, 0 files removed, 0 files unresolved

** Back to error

    graham-mac% eee
    cd /u/graham/projects/eee/sim
    graham-mac% ipython sim.py
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod NMDA.mod GABAA.mod GABAB.mod
    ---------------------------------------------------------------------------
    LookupError                               Traceback (most recent call last)
    /u/graham/projects/eee/sim/sim.py in <module>()
         10 
         11 # Load the cell model
    ---> 12 cell = eee.initcell("SPI6")
         13 
         14 

    /u/graham/projects/eee/sim/eee_utils.pyc in initcell(modelname)
         34         """Imports a model cell class and returns an instance."""
         35 
    ---> 36         cellclass = getattr(importlib.import_module("cells." + modelname), modelname)
         37         instance = cellclass()
         38 

    /Users/graham/anaconda/lib/python2.7/importlib/__init__.pyc in import_module(name, package)
         35             level += 1
         36         name = _resolve_name(name[level:], package, level)
    ---> 37     __import__(name)
         38     return sys.modules[name]

    /u/graham/projects/eee/sim/cells/SPI6.py in <module>()
         33 p_ena = 42.0
         34 # h-current
    ---> 35 h.erev_h = h.erev_ih = -37.0 # global
         36 gbar_h = 0.000140956438043
         37 h_gbar_tuft = 0.00565 # mho/cm^2 (based on Harnett 2015 J Neurosci)

    LookupError: 'erev_h' is not a defined hoc variable name.
    graham-mac% 

*** Changing line 35 to h.erev_ih = -37.0 # global

Now there is no error.  So, I should update SPI6.py in the Neurosim repo.

Bill gave me permission to modify repo, so now it works.  :)

** Making Python scripts for Neurosim repos

1) a script to check the status of all repos
2) a script to pull/update all repos

Added nsimrepos.py to /usr/site/nrniv/local/python/

Code:

    """
    nsimrepos.py

    A script to check the status of and/or update the Neurosim code repositories.

    If run at the command line, this script only checks the status of the repos and
    prints the output.

    If the command line includes the word "update", the script will pull and update
    (if in Mercurial) or pull (equivalent to fetch and merge in Git).

    Usage for status check:
    % python /usr/site/nrniv/local/python/nsimrepos.py

    Usage for update:
    % python /usr/site/nrniv/local/python/nsimrepos.py update
    """

    from collections import OrderedDict
    import os
    import subprocess
    import sys

    origdir = os.getcwd()

    repos = OrderedDict()
    repos["/usr/site/nrniv/local"                ] = "hg"
    repos["/usr/site/nrniv/simctrl"              ] = "hg"
    repos["/usr/site/scripts"                    ] = "hg"
    repos["/usr/site/config"                     ] = "hg"
    repos["/usr/site/site-lisp"                  ] = "hg"
    repos["/usr/site/nrniv/local/python/netpyne" ] = "git"

    def nsimstatus(repos=repos):n
        
        for repo, system in repos.iteritems():
            
            print("")
            print("===============================================================================")
            print("Checking status of " + system.capitalize() + " repo: " + repo)
            print("===============================================================================")
            print("")

            os.chdir(repo)

            if system == "hg":
                print("Output from 'hg status':")
                try:
                    print(subprocess.check_output(["hg", "status"]))
                except subprocess.CalledProcessError as e:
                    print e.output
                print("Output from 'hg incoming':")
                try:
                    print(subprocess.check_output(["hg", "incoming"]))
                except subprocess.CalledProcessError as e:
                    print e.output
                print("Output from 'hg outgoing':")
                try:
                    print(subprocess.check_output(["hg", "outgoing"]))
                except subprocess.CalledProcessError as e:
                    print e.output
                    
            elif system == "git":
                print("Output from 'git fetch; git status':")
                try:    
                    print(subprocess.call(["git", "fetch"]))
                    print(subprocess.check_output(["git", "status"]))
                except subprocess.CalledProcessError as e:
                    print e.output

        os.chdir(origdir)
                

    def nsimpull(repos=repos):
        
        for repo, system in repos.iteritems():
            
            print("")
            print("===============================================================================")
            print("Updating " + system.capitalize() + " repo: " + repo)
            print("===============================================================================")
            print("")

            os.chdir(repo)

            if system == "hg":
                print("Executing 'hg pull; hg update'")
                try:
                    print(subprocess.check_output(["hg", "pull"]))
                    print(subprocess.check_output(["hg", "update"]))
                except subprocess.CalledProcessError as e:
                    print e.output            
                    
            elif system == "git":
                print("Executing 'git pull'")
                try:    
                    print(subprocess.check_output(["git", "pull"]))
                except subprocess.CalledProcessError as e:
                    print e.output

        os.chdir(origdir)



    if __name__ == '__main__':
        
        nsimstatus()
        
        if "update" in sys.argv:
            nsimpull()


** Back to programmatically modifying cell model

From eee dir: ipython -i sim.py


* 2017-06-20 -- Modifying cell model and project meeting

** Plan

Programmatically:
  Change dendritic lengths to 200 um
  Add one spine per um
Fit bAPs
Add NMDA synapses at base of spine for spillover
Switch to DMS (Destexhe-Mainen-Sejnowski) NMDA model

** Programmatically modifying cell model

Best to use tutorial 7 style:
http://www.neurosimlab.org/netpyne/tutorial.html#modifying-the-instantiated-network-interactively-tutorial-7

*** Chatting about

    joe [8:14 AM] 
    How would I copy a cell model?  If I use copy.copy, changing the original affects the copy.  If I use copy.deepcopy, the sections all disappear…

    salvadord [8:16 AM] 
    added this Python snippet: copy example
    import copy
    cellRule = copy.deepcopy(netParams.cellParams['PT5B_full'].todict())
    cellRule['conds']['cellType'] = ['PT2']
    netParams.cellParams['PT5B_full2'] = cellRule
    Add Comment

    joe [8:18 AM] 
    Thx, Salva!

    billl [8:29 AM] 
    commented on syn section for parameters.multi
    use these entries in parameters.multi

    joe [8:45 AM] 
    added and commented on this Python snippet: Importing cell models
    cell_0 = eee.initcell("SPI6")
    ​
    def initcell(modelname):
      """Imports a model cell class and returns an instance."""
    ​
      cellclass = getattr(importlib.import_module("cells." + modelname), modelname)
      instance = cellclass()
    ​
      return instance
    1 Comment Collapse
    I’m using this to load a SPI6 instance into a variable, so I can then do stuff like `cell_0.Bdend.L = 200`. How would I load this into cellParams?

    billl [8:46 AM] 
    you want to do all the setting of stuff either in the template or in netpyne

    [8:46] 
    don't think you would want to do a set like that -- that's subverting the paradigm as they say

    [8:46] 
    (too far outside the box; outside of the wrong box ... something like that)

    joe [8:47 AM] 
    Okay, can I get an instance of my cell model using Netpyne so I can use dot notation?

    billl [8:47 AM] 
    once you have the net contstructed you could use dot notation to look but not to set

    [8:47] 
    would reset by using sim.modify()

    [8:47] 
    but that's a specialized construction for die-hard interactionists like me

    [8:47] 
    bitter-enders

    [8:48] 
    dot notataion and access to the cells would be via sim.net i believe

    [8:48] 
    sim.net.cell ... ?? -- hmm have to dir() around a bit

    joe [8:49 AM] 
    Thanks, Bill.  I’ll look into this.

    salvadord [8:51 AM] 
    if you just want to modify a specific isntanced should use the sim.modifyCells() func so that both the netpyne/py and the NEURON objs are modified (or can do manually but 2 commands); alternatively can modify netParams.cellParams to modify cell template

    billl [8:53 AM] 
    but no reason to do a modify unless going thru interactively -- if running batch then this would subvert ...

    joe [8:55 AM] 
    What I’m thinking is running sims at each step of modification to see the effects.  (Sims would be e.g. stim pulse series for f-I, somatic stim for bAPs, etc.)

    [8:55] 
    So I would start with SPI6, run the sims.  Add a Bdend to make it SPI7, run the sims.  Change Bdend length to 200, run sims.  Etc.

    billl [8:55 AM] 
    ah ok yeah so that's what modify is for

    joe [8:55 AM] 
    Impressions?

    billl [8:56 AM] 
    salva has an example in tut7 which was based on that net i presented in dayton

    [8:56] 
    changing the structure of the cells seems too ambious

    [8:56] 
    can start with same struct and set an Ra of 1e9 to cut it off

    [8:56] 
    similar to idea of setting 0 weights in order to alter the struct of a network

    [8:57] 
    without creating new netcons

    joe [8:57 AM] 
    Interesting…

    joe [9:05 AM] 
    Thanks for pointing out tut7, it’s just what I was looking for.  I’ll work on doing the modifications that way.

    new messages
    salvadord [9:11 AM] 
    great

** Project meeting

Don't let the perfect be the enemy of the good enough
Need poster for Antwerp 
Srdjan would like to see article outline / draft
Joe should put in old results, replace as new ones come in

** Working on sim.py

eee; ipython -i sim.py

Simulation runs and generates output.  Off to a good start.  :)

*** Excerpt from sim.py:

    #############################################################################
    # Initialize simulation
    #############################################################################

    sim.initialize(simConfig=simConfig, netParams=netParams)
    sim.net.createPops()
    sim.net.createCells()

    #############################################################################
    # Modify cell
    #############################################################################

    print("Bdend L: " + str(netParams.cellParams['SPI6']['secs']['Bdend']['geom']['L']))
    print(sim.net.cells[0].secs.Bdend.geom.L)

    sim.net.modifyCells({'conds': {'pop': 'PT5B'},
                        'secs': {'Bdend': {'geom': {'L': 200}}}})

    print("Bdend L: " + str(netParams.cellParams['SPI6']['secs']['Bdend']['geom']['L']))
    print(sim.net.cells[0].secs.Bdend.geom.L)

    #############################################################################
    # Finish and run simulation
    #############################################################################

    sim.net.connectCells()
    sim.setupRecording()
    sim.runSim()
    sim.gatherData()
    sim.saveData()
    sim.analysis.plotData()    

*** Output from sim.py excerpt:

    Bdend L: 299.810775175
    299.810775175
    Modfying cell parameters...
      Done; cells modification time = 0.00 s.
    Bdend L: 299.810775175
    200

So, the netParams value of Bdend.L doesn't change.  Salva explains netParams is 
a high-level specification that never changes with sim.net.modify

    salvadord [1:02 PM] 
    the modify funcs do modify 2 things: the netpyne/py objects and the NEURON objects — both part of the instantiated network

    [1:03] 
    see here example of instantiated network containing both the py+NEURON objects: http://neurosimlab.org/netpyne/reference.html#netpyne-data-model-structure-of-instantiated-network-and-output-data

    [1:04] 
    netParams = high-level specs vs sim.net = instantiate network

Making improvements to sim.py


* 2017-06-21 -- Giving up on programmatically modifying cell models

** Plan

Develop batch sims to be run after each modification
Programmatically:
  Change dendritic lengths to 200 um
  Add one spine per um
Fit bAPs
Add NMDA synapses at base of spine for spillover
Switch to DMS (Destexhe-Mainen-Sejnowski) NMDA model

** Working on batch sims with cell modification

*** Chatting about

    joe [9:09 AM] 
    I’ve got a question about batches and modifying cells…

    [9:09] 
    I need to do sim.initialize before I can sim.net.modifyCell.

    [9:10] 
    Actually, need to get all the way to sim.net.createCells before I can modify.

    [9:10] 
    But all this stuff is in batch_init.

    [9:11] 
    Should I do the modification in batch_init?

    [9:13] 
    Or do all the sim stuff up to createCells (and then modify) outside of batch_init and then just have batch_init do the rest of sim.actions ?

    [9:13] 
    I’ll play around, but if Salva happened to have some insight now, I’d take it.

    salvadord [9:32 AM] 
    hmm thing is you wanna get/store some results after each modify, right? not sure why you want to combine batch with modify?

    billl [9:34 AM] 
    yeah are meant to be opposite appraoches to simulation (and to life)

    joe [9:34 AM] 
    For each modification, I’d like to see the response to a range of “glutatmate stim” (NMDA synapse weight).

    billl [9:34 AM] 
    so would do that as a batch with the diff param settings

    [9:34] 
    then can parrallelize

    [9:35] 
    modify() for interactive so do series since look at each one before launch the next

    salvadord [9:36 AM] 
    joe so I know u’ve done lots of multidim batches… guess reason for modify is just to speed it up? instead of creating cell again, just rerun?

    joe [9:37 AM] 
    I thought we had a few reasons for modifying…

    [9:38] 
    1) I was ending up with many cell model files, one for each physical change

    [9:38] 
    2) It would allow us to parameterize morph stuff, for easier comparison

    salvadord [9:38 AM] 
    1) but if do in batch, thats not the case right? cause parametrized

    billl [9:39 AM] 
    you don't need diff cell model files -- just do the params

    [9:39] 
    however you had planned to alter morph (my suggestion was ra) you should be able to do ==ly well via batch params

    salvadord [9:39 AM] 
    2) I think anything you can do via modify can similarly be parametrized to use batch

    billl [9:39 AM] 
    if not then there is need to add something so let's find out what missing

    joe [9:40 AM] 
    Huh.  Okay, let me try parameterizing morph stuff with batch then.

    billl [9:41 AM] 
    how were you doing with modify() -- should give a clue on how to do now

    joe [9:42 AM] 
    I’m probably getting ahead of myself, but let’s say I run some batches and find parameter values I like.  How should I then make them “permanent” in the model?  Change the cell file and save sep?  Or use sim.net.modify to set those values in all future sims?

    salvadord [9:42 AM] 
    I’ve eg recently parametrized type and density of ih in PT cell; but admittedly there can be more complex morph related features — which I believe we already discussed how to proceed some time ago

    [9:43] 
    permanent - I would say modify in netParams directly (ie. in high-level specs, not instantiated net via sim.net.modify)

    billl [9:43 AM] 
    this is actually changing geom so is not a morph feature per se

    [9:44] 
    but joe if you only have 2 then run a 'network' (with no connects) of the 2 cells and do same things to both

    [9:44] 
    modify in netParams directly is what the batch params feature does

    salvadord [9:44 AM] 
    since have hg versioning can keep track — personally, I’ve also been using some simple labeling for my netParams, so every time I introduce a change I increase the version — currently at `netParams.version = 42`

    billl [9:44 AM] 
    b = Batch()          b.params.append({'label': k, 'values': v}) ...

    salvadord [9:45 AM] 
    so cfg.py for manual/batch param explorations; and netParams.py for permanent changes via version

    billl [9:45 AM] 
    this was a topic we didscussed with sid -- using versioning for params somehow -- still difficult

    salvadord [9:45 AM] 
    thats why my batches have the netParams verison in front … eg. v42_batch5

    billl [9:45 AM] 
    i actually like SCCS and RCS since went together -- netParams.version = $Id$

    [9:45] 
    can do workaround for this with hg as well

    salvadord [9:46 AM] 
    the thing is not all of hg commits are permanent changes to netParams

    [9:46] 
    actually most arent

    [9:46] 
    eg. commit to run batch etc

    [9:46] 
    also in my nb I keep track of changes I introduced in each netParams version

    billl [9:47 AM] 
    yeah -- substantive commits vs not -- use hg label ?

    joe [9:47 AM] 
    Cool, I’ll work on this.  I like the labeling!

    [9:47] 
    What is SCCS/RCS?

    billl [9:47 AM] 
    or hg    bookmarks

    salvadord [9:47 AM] 
    hg label - that would be possibility to fully integrate — have github issue to try to integrate in netpyne too

    billl [9:47 AM] 
    SCCS was the orig version control system from the 1980s -- that's where i started

    [9:48] 
    RCS was a big improvement and from that came CVS; more recent SVN then hg, git; also comparale ones in windows world

    [9:48] 
    talked last night with a guy who like me started on the PDP8 -- ah those were the days

    [9:49] 
    a machine with all the power of a modern wristwatch

    joe [9:49 AM] 
    :joy:

*** Conclusions

Don't use sim.net.modify with batches -- batches do the modifying

** Giving up on programmatically modifying cell models

Impractical for wider use:
- Have to do it in the middle of initializing and running sims
- Can't export changes
- Can't run batches while modifying


* 2017-06-26 -- Batching with Sergio

** Plan

Get back old code
Ensure it all runs 
Switch to DMS NMDA synapse
Work on article draft

** Get back old code

Downloading SourceTree app (recommended by Salva):
https://www.sourcetreeapp.com/

Now I can visualize all changes.  Cool program.

** Want to make sure my batch code isn't completely different from Salva's

Cloning Sergio's repo, where Salva has done some work.

hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee

Had problems "trusting" Sergio.

Turns out I needed to add him to the [trusted] section of my .hgrc file on
Neurosim instead of locally.

Now I'm having trouble using mkmod:

    graham-mac% mkmod
    /usr/site/scripts/mkmod: Permission denied.
    graham-mac% which mkmod
    mkmod: Command not found.

https://stackoverflow.com/questions/12276507/run-script-on-mac-prompt-permission-denied

    graham-mac% cd /usr/site/scripts/
    graham-mac% ls -l
    ...
    -rw-r--r--    1 graham  wheel      31 Jun 19 13:19 mkmod
    ...
    graham-mac% chmod 755 mkmod
    graham-mac% ls -l
    ...
    -rwxr-xr-x    1 graham  wheel      31 Jun 19 13:19 mkmod*
    ...


Now it works, but I get a fatal error:

    In file included from stats.c:249:
    //usr/site/nrniv/local/mod/misc.h:8:10: fatal error: 'values.h' file not found
    #include <values.h>
             ^
    1 error generated.
    make: *** [stats.lo] Error 1

Waiting for advice from others.

*** Chat about values.h

    joe [10:32 AM] 
    When I use mkmod with Sergio’s repo, I get a fatal error:

    joe [10:32 AM] 
    added this Objective-C snippet
    In file included from stats.c:249:
    //usr/site/nrniv/local/mod/misc.h:8:10: fatal error: 'values.h' file not found
    #include <values.h>
         ^
    1 error generated.
    make: *** [stats.lo] Error 1
    Add Comment Collapse

    joe [11:06 AM] 
    Does anyone know how to fix this values.h problem?  It seems to be causing me a later problem with erev_h (LookupError: ‘erev_h’ is not a defined hoc variable name.)

    joe [11:21 AM] 
    Sergio found this https://macosx.com/threads/values-h.50056/ which suggests creating a soft link called values.h that points to limits.h
    Mac Support
    values.h
    Hello, I'm trying to build the GPL Molecular Dynamics program called XMD. XMD run in Linux, but it is a basic gcc program that I believe I should...
     

    [11:21] 
    But when I do a “find” for limits.h, it is in dozens of locations…

    sergio [11:30 AM] 
    http://www.neuron.yale.edu/phpBB/viewtopic.php?f=4&t=1742&start=0

    [11:31] 
    I just reading that discussion with the same problem

    [11:31] 
    *am

    joe [12:20 PM] 
    I found a solution that works for me…  I commented out the line `//#include <values.h>` in /usr/site/nrniv/local/mod/misc.h, and now I can compile Sergio’s mod files.

    [12:21] 
    It seems like values.h is deprecated…  Should I push this change to the Neurosim repo?  Will it break other people’s code?

    [12:22] 
    It also solved the error `LookupError: 'erev_h' is not a defined hoc variable name.`

    new messages
    salvadord [1:32 PM] 
    this is a problem just in Mac OS right? Its come up before and I thought had been solved and some fix pushed to central repo… but not recalling now… lms

    salvadord [1:51 PM] 
    added and commented on this Python snippet
    sudo ln -s /usr/include/i386/limits.h /usr/include/i386/values.h
    sudo ln -s /usr/include/limits.h /usr/include/values.h
    1 Comment
    I have this solution provided by prev in notebook — does that work for you?

    salvadord [1:51 PM] 
    if sure that values.h deprecated and won’t cause error to any other user  guess could update misc.h … but how to be sure?

*** Will try restoring misc.h and using Salva's linking

sudo ln -s /usr/include/i386/limits.h /usr/include/i386/values.h
sudo ln -s /usr/include/limits.h /usr/include/values.h

That works!

** Working with Sergio and batches

mkdir serg_temp; cd serg_temp; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee; cd eee/sim/mod; mkmod; cd ..

*** Chat solving many problems with Sergio


    joe [8:06 AM] 
    Any luck getting batches to work?

    sergio [8:08 AM] 
    Hi Joe, I haven’t worked on it, let me do it today

    [8:08] 
    I was busy this weekend

    joe [8:08 AM] 
    No worries.  When you get to it, let me know if you have any problems.

    sergio [8:08 AM] 
    we are having nice weather here

    [8:08] 
    sure

    joe [8:08 AM] 
    Great for you!

    [8:08] 
    It is soooo hot here.

    sergio [8:09 AM] 
    I saw the news about the planes

    [8:09] 
    is still going on? too hot to fly?

    joe [8:10 AM] 
    I think they only cancel flights when it’s above 120.  It’s only been above that for a little while, so flights are back on.

    sergio [8:11 AM] 
    oh I see, 120 is too high

    joe [8:11 AM] 
    https://www.wired.com/story/phoenix-flights-canceled-heat/
    WIRED
    A physicist explains just why all those flights were grounded in Arizona...
    Airplanes can't fly because it's too hot? That's crazy. No, not if you understand the science behind it. (727kB)

    sergio [8:33 AM] 
    nice article. I’m running your batches from revision -294

    sergio [9:01 AM] 
    added this Plain Text snippet
    Sergios-MacBook-2% hg tip
    changeset:  294:f1ed7795f35f
    tag:     tip
    user:    Joe Graham <joe.w.graham@gmail.com>
    date:    Thu Jun 15 11:55:11 2017 -0700
    summary:   Commit before deleting obsolete files
    Add Comment Collapse

    sergio [9:01 AM] 
    added this Plain Text snippet
    Sergios-MacBook-2% ip
    Python 2.7.13 |Anaconda 4.3.0 (x86_64)| (default, Dec 20 2016, 23:05:08)
    Type "copyright", "credits" or "license" for more information.
    IPython 5.1.0 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    In [1]: execfile('batch_analysis.py')
    NEURON -- VERSION 7.5 (1515:79f6026b82d7) 2017-02-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod
    ---------------------------------------------------------------------------
    NameError                 Traceback (most recent call last)
    <ipython-input-1-31809b21f1b0> in <module>()
    ----> 1 execfile('batch_analysis.py')
    /Users/sergioangulo/projects/eeejoe/sim/batches/batch_analysis.py in <module>()
      610   start = time.time()
      611
    --> 612   plot_all()
      613
      614   import matplotlib.backends.backend_pdf
    /Users/sergioangulo/projects/eeejoe/sim/batches/batch_analysis.py in plot_all(redoall)
      546     in the directory "batch_data" If redoall is False, only plots new batches."""
      547
    --> 548   for batch in list_batches():
      549
      550     print batch
    NameError: global name 'list_batches' is not defined
    Add Comment Collapse

    sergio [9:02 AM] 
    I still the same message error

    [9:02] 
    *have

    joe [9:05 AM] 
    I’m going to try to get everything cleaned up and working this morning, but for now…

    [9:05] 
    Line 548 in batch_analysis.py is: for batch in list_batches():

    [9:05] 
    Change it to: for batch in batch_utils.list_batches():

    [9:05] 
    And let me know if that works…

    sergio [9:05 AM] 
    sure

    [9:05] 
    ok

    joe [9:06 AM] 
    Where is your repo again?  I’m going to make sure that works for me, and check out the batch stuff Salva added there.

    sergio [9:07 AM] 
    /u/sergioangulo/projects/eee

    [9:07] 
    salva has 4 dimensions on the batch analysis

    [9:08] 
    I’m just trying to understand the concept

    [9:08] 
    hehe

    joe [9:08 AM] 
    I’ll walk you through it.  Got time now?

    sergio [9:08 AM] 
    sure

    joe [9:09 AM] 
    Actually, give me a little time to check out your repo.  Don’t want to teach you the way I do it if Salva is working in another direction…

    sergio [9:09 AM] 
    sure

    [9:09] 
    he uses pandas also

    joe [9:15 AM] 
    You know anything about how to “trust” you?
    graham-mac% hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee
    remote: not trusting file /u/sergioangulo/projects/eee/.hg/hgrc from untrusted user sergioangulo, group lab

    sergio [9:15 AM] 
    no idea

    sergio [9:26 AM] 
    can you try again joe?

    [9:26] 
    I just added the line for trust

    [9:28] 
    the batch_analysis is working

    joe [9:29 AM] 
    I made the changes to my .hgrc file, but I still don’t trust you.  I’m having some trust issues.

    [9:29] 
    Great that batch_analysis is working now!

    sergio [9:31 AM] 
    should I add you as a trusted user?

    joe [9:31 AM] 
    Yeah, try that please.

    sergio [9:32 AM] 
    how is your username?

    sergio [9:33 AM] 
    added this Plain Text snippet
    [paths]
    default = /u/sergioangulo/projects/eee
    [hooks]
    changegroup = hg update -C
    [hooks]
    changegroup = hg update -C
    [hooks]
    changegroup = hg update -C
    [hooks]
    changegroup = hg update -C
    [hooks]
    changegroup = hg update -C
    [hooks]
    changegroup = hg update -C
    [trusted]
    groups = lab
    users = graham
    Add Comment Collapse

    joe [9:33 AM] 
    This is from my .hgrc file: `username = Joe Graham <joe.w.graham@gmail.com>`

    sergio [9:33 AM] 
    ok

    joe [9:33 AM] 
    What is your username in .hgrc?

    [9:33] 
    And what’s the deal with all the [hooks] repeats?

    sergio [9:34 AM] 
    no idea, I haven’t modified this file

    [9:34] 
    it should just one, right?

    joe [9:36 AM] 
    I don’t see what repeating it could possibly do…

    sergio [9:37 AM] 
    my username: Sergio Angulo <sergio.angulo@gmail.com>

    sergio [9:39 AM] 
    added this Plain Text snippet
    [paths]
    default = /u/sergioangulo/projects/eee
    [hooks]
    changegroup = hg update -C
    [trusted]
    groups = lab
    users = Joe Graham <joe.w.graham@gmail.com>
    [ui]
    username = Sergio Angulo <sergio.angulo@gmail.com>
    Add Comment Collapse

    sergio [9:39 AM] 
    i modified the hgrc

    joe [9:39 AM] 
    Great, push it, and I’ll try cloning again.

    sergio [9:41 AM] 
    ok just pushed

    joe [9:43 AM] 
    Damn.  Still not trusting.

    sergio [9:48 AM] 
    should I erase the hook?

    joe [9:48 AM] 
    I was just wondering about that…  It seems like the hook is the problem.

    [9:50] 
    Would you try removing the hooks, committing and pushing?

    [9:50] 
    Then I’ll try cloning again.

    sergio [9:51 AM] 
    I changed the hgrc file at the repo

    joe [9:52 AM] 
    added and commented on this Shell snippet: I don't think you want the hook anyway...
    graham-mac% hg help update
    hg update [-c] [-C] [-d DATE] [[-r] REV]
    ​
    aliases: up, checkout, co
    ​
    update working directory (or switch revisions)
    ​
      Update the repository's working directory to the specified changeset. If
      no changeset is specified, update to the tip of the current named branch
      and move the active bookmark (see 'hg help bookmarks').
    ​
      Update sets the working directory's parent revision to the specified
      changeset (see 'hg help parents').
    ​
      If the changeset is not a descendant or ancestor of the working
      directory's parent, the update is aborted. With the -c/--check option, the
      working directory is checked for uncommitted changes; if none are found,
      the working directory is updated to the specified changeset.
    ​
      To cancel an uncommitted merge (and lose your changes), use 'hg update
      --clean .'.
    ​
      Use null as the changeset to remove the working directory (like 'hg clone
      -U').
    ​
      If you want to revert just one file to an older revision, use 'hg revert
      [-r REV] NAME'.
    ​
      See 'hg help dates' for a list of formats valid for -d/--date.
    ​
      Returns 0 on success, 1 if there are unresolved files.
    ​
    options:
    ​
     -C --clean   discard uncommitted changes (no backup)
     -c --check   require clean working directory
     -d --date DATE tipmost revision matching date
     -r --rev REV  revision
     -t --tool VALUE specify merge tool
    ​
    (some details hidden, use --verbose to show complete help)
    graham-mac% 
    1 Comment Click to expand inline 43 lines
    It seems like it forces a discarding of uncommitted changes every time you push or pull…

    joe [9:54 AM] 
    Still no trust.

    sergio [9:57 AM] 
    I’m reading about it

    [9:57] 
    but I don’t know what else to do

    [9:58] 
    https://stackoverflow.com/questions/8535866/not-trusting-file-hg-hgrc-from-untrusted-user-root-group-dev
    stackoverflow.com
    Not trusting file .hg/hgrc from untrusted user root, group dev
    The repository is owned by user root, and group dev Another user is running hg update on the repository and getting the following messages: Not trusting file /dev/.hg/hgrc from untrusted user root,
     

    joe [9:59 AM] 
    I figured it out.

    [9:59] 
    I needed to add [trusted] to my .hgrc on Neurosim, not on my local machine.

    sergio [10:00 AM] 
    yep

    joe [10:01 AM] 
    Perfect. Whew.

    sergio [10:01 AM] 
    is it working?

    joe [10:05 AM] 
    One minute, still looking around.

    [10:05] 
    It would be useful if you had a README.txt file that explained how to run everything…

    sergio [10:06 AM] 
    I need to do one

    [10:06] 
    I’m going to work on that

    joe [10:10 AM] 
    Cool.  Include info on how to compile.

    [10:10] 
    You cd to mod and then mkmod?

    sergio [10:11 AM] 
    yep

    [10:11] 
    I need to do something like your setup.py file

    joe [10:12 AM] 
    Yeah, it’s not a bad idea.

    [10:13] 
    Having trouble getting permission to use mkmod…  Give me a minute…

    joe [10:23 AM] 
    added and commented on this Perl snippet
    graham-mac% cd /u/sergioangulo/projects/eee/sim/mod
    graham-mac% mkmod
    Search path for mod files is /usr/site/nrniv/local/mod
    Creating AMPA.mod
    Creating NMDA.mod
    Creating GABAA.mod
    Creating GABAB.mod
      nrnivmodl misc stats infot vecst nstim samnutils h_BS kap_BS kdmc_BS kdr_BS nax_BS cadad cat_mig can_mig cal_mig cagk IC savedist h_harnett h_kole kBK HCN1 ar_traub cat_traub cal_mh nap_sidi ican_sidi nafx kdrin IKsin hin canin kapin kctin cadyn kapcb catcb vecstim AMPA NMDA GABAA GABAB
    Creating x86_64 directory for .o files.
    ​
    /u/sergioangulo/projects/eee/sim/mod
    misc stats infot vecst nstim samnutils h_BS kap_BS kdmc_BS kdr_BS nax_BS cadad cat_mig can_mig cal_mig cagk IC savedist h_harnett h_kole kBK HCN1 ar_traub cat_traub cal_mh nap_sidi ican_sidi nafx kdrin IKsin hin canin kapin kctin cadyn kapcb catcb vecstim AMPA NMDA GABAA GABAB
    misc stats infot vecst nstim samnutils h_BS kap_BS kdmc_BS kdr_BS nax_BS cadad cat_mig can_mig cal_mig cagk IC savedist h_harnett h_kole kBK HCN1 ar_traub cat_traub cal_mh nap_sidi ican_sidi nafx kdrin IKsin hin canin kapin kctin cadyn kapcb catcb vecstim AMPA NMDA GABAA GABAB
    "/Applications/NEURON-7.5/nrn/x86_64/bin/nocmodl" misc
    Translating misc.mod into misc.c
    Notice: VERBATIM blocks are not thread safe
    "/Applications/NEURON-7.5/nrn/share/nrn/libtool" --tag=CC --mode=compile gcc -DHAVE_CONFIG_H -I//usr/site/nrniv/local/mod -I. -I.. -I"/Applications/NEURON-7.5/nrn/include/nrn" -I"/Applications/NEURON-7.5/nrn/x86_64/lib"   -g -O2 -c -o misc.lo misc.c
    libtool: compile: gcc -DHAVE_CONFIG_H -I//usr/site/nrniv/local/mod -I. -I.. -I/Applications/NEURON-7.5/nrn/include/nrn -I/Applications/NEURON-7.5/nrn/x86_64/lib -g -O2 -c misc.c -fno-common -DPIC -o .libs/misc.o
    misc.c:233:14: warning: implicit declaration of function 'hoc_is_tempobj_arg' is invalid in C99
       [-Wimplicit-function-declaration]
     _listmpobj=hoc_is_tempobj_arg(1);
           ^
    misc.c:410:28: warning: format specifies type 'unsigned int' but the argument has type 'char *'
       [-Wformat]
     printf("Did %ld: %x\n",x,pmlc);
              ~~   ^~~~
              %s
    2 warnings generated.
    "/Applications/NEURON-7.5/nrn/x86_64/bin/nocmodl" stats
    Translating stats.mod into stats.c
    Notice: VERBATIM blocks are not thread safe
    Notice: Assignment to the GLOBAL variable, "INSTALLED", is not thread safe
    "/Applications/NEURON-7.5/nrn/share/nrn/libtool" --tag=CC --mode=compile gcc -DHAVE_CONFIG_H -I//usr/site/nrniv/local/mod -I. -I.. -I"/Applications/NEURON-7.5/nrn/include/nrn" -I"/Applications/NEURON-7.5/nrn/x86_64/lib"   -g -O2 -c -o stats.lo stats.c
    libtool: compile: gcc -DHAVE_CONFIG_H -I//usr/site/nrniv/local/mod -I. -I.. -I/Applications/NEURON-7.5/nrn/include/nrn -I/Applications/NEURON-7.5/nrn/x86_64/lib -g -O2 -c stats.c -fno-common -DPIC -o .libs/stats.o
    In file included from stats.c:249:
    //usr/site/nrniv/local/mod/misc.h:8:10: fatal error: 'values.h' file not found
    #include <values.h>
         ^
    1 error generated.
    make: *** [stats.lo] Error 1
    graham-mac% 
    1 Comment Collapse
    Is this what you get when you use mkmod?  There is a “fatal error” because the values.h file is not found?

    sergio [10:24 AM] 
    I have never seen that error

    joe [10:39 AM] 
    Waiting for a response in #tech.

    [10:40] 
    In the meantime, how do I run sims in your repo?

    sergio [10:40 AM] 
    on runsim you can do a single sim of the network

    [10:41] 
    on runbatch is for the batches

    [10:41] 
    for this repo I was playing with your batches

    [10:41] 
    and salva’s

    [10:42] 
    so if runbatch is link to batch.py, it is going to do the batch according to salva

    [10:43] 
    otherwise my_batches.py is your method

    joe [10:53 AM] 
    Okay, runbatch didn’t seem to work…

    [10:53] 
    Salva always tell me to debug by running these files:

    [10:53] 
    Debug by running:
        1) netParams.py
        2) batch_init.py
        3) batch.py

    sergio [10:56 AM] 
    What kind of error do you have on runbatch?

    joe [10:56 AM] 
    No visible error, but no figures are generated…

    sergio [10:57 AM] 
    oh

    [10:57] 
    I don’t know why

    joe [10:57 AM] 
    Okay, so I found the error by running netParams.py:

    joe [10:58 AM] 
    added this Shell snippet
    graham-mac% cd /u/sergioangulo/projects/eee/sim/
    graham-mac% ipython 
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul 2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.
    ​
    IPython 5.1.0 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    ​
    In [1]: execfile("netParams.py")
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    ​
    ---------------------------------------------------------------------------
    LookupError                Traceback (most recent call last)
    <ipython-input-1-026584e2bad9> in <module>()
    ----> 1 execfile("netParams.py")
    ​
    /u/sergioangulo/projects/eee/sim/netParams.py in <module>()
       51 
       52 cellRule = netParams.importCellParams(label='IT2_reduced', conds={'cellType':'IT2', 'cellModel': 'HH_reduced'},
    ---> 53    fileName='cells/CSTR6.py', cellName='CSTR6', cellArgs={'params':'BS1578'})
       54 dendL = (layer['2'][0]+(layer['2'][1]-layer['2'][0])/2.0)  # new dend L for L2/3
       55 for secName in ['Adend1', 'Adend2', 'Adend3']: cellRule['secs'][secName]['geom']['L'] = dendL / 3.0
    ​
    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
      328       label = int(self._labelid)
      329       self._labelid += 1
    --> 330     secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
      331     cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
      332 
    ​
    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
      167       sys.path.insert(0, filePath)
      168     moduleName = fileNameOnly.split('.py')[0] # remove .py to obtain module name
    --> 169     exec('import ' + moduleName + ' as tempModule') in globals(), locals() # import module dynamically
      170     modulePointer = tempModule
      171     if isinstance(cellArgs, dict):
    ​
    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in <module>()
    ​
    /u/sergioangulo/projects/eee/sim/cells/CSTR6.py in <module>()
       38 p_ena = 42.0
       39 # h-current
    ---> 40 h.erev_h = h.erev_ih = -37.0 # global
       41 gbar_h = 9.99986721729e-06
       42 
    ​
    LookupError: 'erev_h' is not a defined hoc variable name.
    ​
    In [2]: 
    Add Comment Collapse

    sergio [10:58 AM] 
    I’ve trying to fix

    joe [10:58 AM] 
    If netParams worked, I would then execfile on batch_init.py (just init.py in your repo).

    [10:59] 
    Same problem I had earlier.

    [10:59] 
    Change line 40 from `h.erev_h = h.erev_ih = -37.0 # global`

    [10:59] 
    to `h.erev_ih = -37.0 # global`

    [11:00] 
    Do you get the same error when you execute netParams?

    sergio [11:01 AM] 
    no, I didn’t have the same error, but let me run netParams again

    joe [11:01 AM] 
    Hmmm…  I wonder if it’s related to the values.h fatal error…

    sergio [11:02 AM] 
    added this Plain Text snippet
    In [1]: execfile('netParams.py')
    NEURON -- VERSION 7.5 (1515:79f6026b82d7) 2017-02-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod h_BS.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod cat_mig.mod can_mig.mod cal_mig.mod cagk.mod IC.mod savedist.mod h_harnett.mod h_kole.mod kBK.mod HCN1.mod ar_traub.mod cat_traub.mod cal_mh.mod nap_sidi.mod ican_sidi.mod nafx.mod kdrin.mod IKsin.mod hin.mod canin.mod kapin.mod kctin.mod cadyn.mod kapcb.mod catcb.mod vecstim.mod AMPA.mod NMDA.mod GABAA.mod GABAB.mod
    Balancing each compartment to -73 mV
    Balancing each compartment to -64 mV
    Add Comment Collapse

    sergio [11:03 AM] 
    it runs ok on my machine

    joe [11:03 AM] 
    Huh. And everyone has been using the same cells, so it seems nobody else is having that problem…

    [11:03] 
    Must have something to do with values.h…

    sergio [11:07 AM] 
    https://macosx.com/threads/values-h.50056/
    Mac Support
    values.h
    Hello, I'm trying to build the GPL Molecular Dynamics program called XMD. XMD run in Linux, but it is a basic gcc program that I believe I should...
     

    [11:07] 
    it seems like a mac problem

    joe [11:08 AM] 
    Interesting…  Does this stuff run on your mac?

    [11:08] 
    Or do you get the same error?

    sergio [11:08 AM] 
    right now I’m running on mac

    [11:09] 
    but I don’t have the same error

    joe [11:24 AM] 
    Well, I’m gonna work on something else until I get this values.h problem figured out.

    joe [11:38 AM] 
    Can we see if your computer has a values.h file?

    [11:38] 
    Enter the following in terminal:

    [11:38] 
    sudo find / -name “values.h”

    sergio [11:40 AM] 
    sure, I’m searching the file

    sergio [11:43 AM] 
    added this Plain Text snippet
    find: /dev/fd/3: Not a directory
    find: /dev/fd/4: Not a directory
    Add Comment

    joe [11:47 AM] 
    Huh.  So you don’t actually have a copy of values.h either…  Weird.

    sergio [11:59 AM] 
    that makes everything more complicated

    [12:00] 
    In the discussion on neuron.yale, they didn’t fix the problem

    sergio [12:23 PM] 
    nice you found the solution

    [12:23] 
    it was very deep into neuron

    joe [12:23 PM] 
    Yeah, kind of a weird problem.

    [12:24] 
    I’m gonna get some lunch. We can talk about batches when I get back if you like.

    sergio [12:25 PM] 
    perfect!

    [12:25] 
    thanks joe!

    [12:25] 
    I am also going to eat something

    joe [2:39 PM] 
    Okay, let me know when you want to look at batching.

    sergio [2:39 PM] 
    ok

    sergio [2:47 PM] 
    i’m ready

    [2:47] 
    did you see the files from salva?

    joe [2:54 PM] 
    Mmmm… Post-lunch espresso…  Okay, now I’m ready. :sleeping: :coffee: :yum:

    [2:54] 
    So what all did Salva add?

    sergio [2:55 PM] 
    coffee!!!

    [2:55] 
    oh there is a file on eee/analysis

    [2:56] 
    batchAnalysis.py

    [2:56] 
    where he has the analysis for the batch, and specifically for the rates

    [2:57] 
    your batch_analysis does a lot of things

    joe [2:57 PM] 
    Yeah, still needs some cleaning up, but I think it’s a good start.

    [2:57] 
    Okay, so first of all, what batch do you want to run?

    [2:58] 
    What variables do you want to explore?

    sergio [2:58 PM] 
    one was rate by iclamp stim amplitude

    joe [2:59 PM] 
    Okay, so we want a frequency-current plot for diff cell types?

    sergio [2:59 PM] 
    so the batch was generated with your salva’s file (batch.py) and yours (my_batches.py)

    [2:59] 
    yep

    joe [2:59 PM] 
    Okay, let me run those batches and make sure they work for me.

    sergio [2:59 PM] 
    ok

    [3:00] 
    before that

    [3:00] 
    salva just make me change some lines to plot the traces

    [3:00] 
    let me push those changes

    joe [3:01 PM] 
    Sounds good.

    sergio [3:08 PM] 
    ok

    joe [3:08 PM] 
    Let me pull.

    [3:11] 
    Okay, got the latest and compiled.

    [3:12] 
    `mkdir serg_temp; cd serg_temp; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee; cd eee/sim/mod; mkmod`

    [3:12] 
    Now to run a batch.

    sergio [3:12 PM] 
    ok

    joe [3:13 PM] 
    Looks like runbatch executes batch.py

    sergio [3:13 PM] 
    yep

    [3:13] 
    I just change the line inside runbatch to run batch.py or my_batches.py

    joe [3:14 PM] 
    Looking in batch.py, that should vary the pop Iclamp is attached to as well as the amp of the clamp.

    [3:14] 
    So let me try running that.

    sergio [3:15 PM] 
    ok

    joe [3:17 PM] 
    Okay, so that creates the dir `data/batch2` and puts the cfg files there.

    [3:18] 
    But I don’t see any figures in that dir.  Do you get figs in that dir when you runbatch?

    sergio [3:19 PM] 
    yep, I was able to generate the figs

    [3:19] 
    let me see if something changed before I pushed

    joe [3:20 PM] 
    Try doing the whole thing from scratch and making sure it works:
    mkdir serg_temp; cd serg_temp; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee; cd eee/sim/mod; mkmod; cd ..; ./runbatch

    [3:22] 
    Then to see if figs arrived: ls serg_temp/eee/data/batch2/

    sergio [3:24 PM] 
    it is working on the copy that I have

    [3:24] 
    let me push it again

    [3:27] 
    ok you can pull again

    joe [3:27 PM] 
    One minute…

    [3:29] 
    Just for a sanity check, enter all the following into your terminal and paste me the output, please.

    [3:29] 
    mkdir serg_temp ; cd serg_temp ; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee ; cd eee/sim/mod ; mkmod ; cd .. ; ./runbatch ; cd ../data/batch2 ; ls *.png

    [3:30] 
    You can do it all as one line.

    sergio [3:30 PM] 
    ok doing that part

    joe [3:32 PM] 
    So I get `data/batch1` now, but still no figures in it.

    sergio [3:33 PM] 
    I think I know where it is the problem

    joe [3:33 PM] 
    ?

    sergio [3:33 PM] 
    on netParams, on plotTraces, you can take out ‘ylim’

    [3:34] 
    I think that only works on neurosim

    [3:34] 
    and not on the last version released for netpyne

    joe [3:35 PM] 
    I don’t see ylim in netParams…

    [3:36] 
    Ahh, it’s in cfg.py

    sergio [3:36 PM] 
    sorry on cfg.py

    joe [3:38 PM] 
    Hmmm. I deleted the ylim part, tried runbatch again, still no figures.

    sergio [3:40 PM] 
    that’s too bad

    joe [3:40 PM] 
    When you run it all from scratch, do you get figures?

    sergio [3:41 PM] 
    nop

    [3:41] 
    I’m just changing ‘ylim’

    joe [3:42 PM] 
    Let me know if that fixes it…  Back in a few minutes…

    sergio [3:42 PM] 
    ok

    sergio [3:49 PM] 
    it does work on neurosim but not on my laptop

    sergio [3:50 PM] 
    added this Plain Text snippet: neuronsim batch figs
    /u/sergioangulo/projects/eeeserg/eee
    no% cd data/batch1
    no% ls *.png
    batch1_0_0_traces.png  batch1_1_16_traces.png batch1_2_4_traces.png
    batch1_0_10_traces.png batch1_1_17_traces.png batch1_2_5_traces.png
    batch1_0_11_traces.png batch1_1_18_traces.png batch1_2_6_traces.png
    batch1_0_12_traces.png batch1_1_19_traces.png batch1_2_7_traces.png
    batch1_0_13_traces.png batch1_1_1_traces.png  batch1_2_8_traces.png
    batch1_0_14_traces.png batch1_1_2_traces.png  batch1_2_9_traces.png
    batch1_0_15_traces.png batch1_1_3_traces.png  batch1_3_0_traces.png
    batch1_0_16_traces.png batch1_1_4_traces.png  batch1_3_10_traces.png
    batch1_0_17_traces.png batch1_1_5_traces.png  batch1_3_11_traces.png
    batch1_0_18_traces.png batch1_1_6_traces.png  batch1_3_12_traces.png
    batch1_0_19_traces.png batch1_1_7_traces.png  batch1_3_13_traces.png
    batch1_0_1_traces.png  batch1_1_8_traces.png  batch1_3_14_traces.png
    batch1_0_2_traces.png  batch1_1_9_traces.png  batch1_3_15_traces.png
    batch1_0_3_traces.png  batch1_2_0_traces.png  batch1_3_16_traces.png
    batch1_0_4_traces.png  batch1_2_10_traces.png batch1_3_17_traces.png
    batch1_0_5_traces.png  batch1_2_11_traces.png batch1_3_18_traces.png
    batch1_0_6_traces.png  batch1_2_12_traces.png batch1_3_19_traces.png
    batch1_0_7_traces.png  batch1_2_13_traces.png batch1_3_1_traces.png
    batch1_0_8_traces.png  batch1_2_14_traces.png batch1_3_2_traces.png
    batch1_0_9_traces.png  batch1_2_15_traces.png batch1_3_3_traces.png
    batch1_1_0_traces.png  batch1_2_16_traces.png batch1_3_4_traces.png
    batch1_1_10_traces.png batch1_2_17_traces.png batch1_3_5_traces.png
    batch1_1_11_traces.png batch1_2_18_traces.png batch1_3_6_traces.png
    batch1_1_12_traces.png batch1_2_19_traces.png batch1_3_7_traces.png
    batch1_1_13_traces.png batch1_2_1_traces.png  batch1_3_8_traces.png
    batch1_1_14_traces.png batch1_2_2_traces.png  batch1_3_9_traces.png
    batch1_1_15_traces.png batch1_2_3_traces.png  batch1_4_0_traces.png
    Add Comment Collapse

    joe [3:51 PM] 
    Hmmm.  Let’s see if it works on Neurosim from scratch.

    [3:51] 
    From your home directory, do the one liner again:

    [3:51] 
    mkdir serg_temp ; cd serg_temp ; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee ; cd eee/sim/mod ; mkmod ; cd .. ; ./runbatch

    sergio [3:53 PM] 
    ok it is running the batch

    joe [3:53 PM] 
    When I run that on NO, I get:

    [3:53] 
    Traceback (most recent call last):
      File “batch.py”, line 8, in <module>
        from netpyne.batch import Batch, specs
    ImportError: cannot import name specs
    >>>

    sergio [3:54 PM] 
    added this Plain Text snippet
    no% cd serg_temp
    no% cd eee/data/batch1
    no% ls *.png
    batch1_0_0_traces.png  batch1_0_1_traces.png  batch1_1_11_traces.png
    batch1_0_10_traces.png batch1_0_2_traces.png  batch1_1_12_traces.png
    Add Comment Click to expand inline 14 lines

    sergio [3:55 PM] 
    that’s strange I can not replicate the error

    joe [3:57 PM] 
    What version of Netpyne are you using?

    [3:57] 
    My local machine:

    [3:57] 
    In [1]: import netpyne

    In [2]: netpyne.__version__
    Out[2]: ‘0.7.0’

    [3:58] 
    From Neurosim NO:

    [3:58] 
    In [1]: import netpyne

    In [2]: netpyne.__version__
    Out[2]: ‘0.6.7’

    sergio [3:58 PM] 
    oh I used zn to run the batch

    joe [3:58 PM] 
    I’ll try it on zn now.  Will you try it on NO and see what you get?

    sergio [3:59 PM] 
    let me try ‘no’

    sergio [3:59 PM] 
    added this Plain Text snippet
    'zn'
    In [1]: import netpyne
    In [2]: netpyne.__version__
    Out[2]: '0.7.0'
    Add Comment Collapse

    joe [4:01 PM] 
    Me on zn:

    [4:01] 
    >>>import netpyne
    >>> netpyne.__version__
    ‘0.6.7’

    [4:02] 
    That’s weird.  Why am I getting 0.6.7 on zn while you’re getting 0.7.0??

    sergio [4:03 PM] 
    let me do it again

    sergio [4:04 PM] 
    added this Plain Text snippet
    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-43-generic x86_64)
     * Documentation: https://help.ubuntu.com/
    New release '16.04.2 LTS' available.
    Run 'do-release-upgrade' to upgrade to it.
    *** System restart required ***
    Last login: Mon Jun 26 16:15:12 2017 from no.neurosim.downstate.edu
    zn% ipython -i
    Python 2.7.6 (default, Oct 26 2016, 20:30:19)
    Type "copyright", "credits" or "license" for more information.
    IPython 1.2.1 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    In [1]: import netpyne
    In [2]: netpyne.__version__
    Out[2]: '0.7.0'
    In [3]:
    Add Comment Collapse

    sergio [4:04 PM] 
    I’m on zn

    [4:06] 
    my machine is 0.7.0

    joe [4:06 PM] 
    On zn, import netpyne and then do netpyne.__file__

    [4:07] 
    From zn, I get:

    [4:07] 
    In [3]: netpyne.__file__
    Out[3]: ‘/usr/site/python/netpyne/__init__.pyc’

    sergio [4:07 PM] 
    added this Plain Text snippet
    In [3]: netpyne.__file__
    Out[3]: '/usr/site/nrniv/local/python/netpyne/netpyne/__init__.pyc'
    Add Comment

    sergio [4:08 PM] 
    ohh

    [4:08] 
    the path is different

    joe [4:08 PM] 
    Huh.

    sergio [4:09 PM] 
    and no clue why it’s different

    joe [4:11 PM] 
    zn% echo $PYTHONPATH
    /usr/site/python:/usr/site/../arch/nrn/lib/python:/usr/site/../arch/nrn/share/nrn/lib/python/neuron:/usr/site/nrniv/local/python:/usr/lib/python2.7:/usr/site/nrniv/pypkg

    [4:11] 
    Can I see your PYTHONPATH, please?

    sergio [4:12 PM] 
    zn% echo $PYTHONPATH
    /usr/site/nrniv/local/python/netpyne:/usr/site/python:/usr/site/../arch/nrn/lib/python:/usr/site/../arch/nrn/share/nrn/lib/python/neuron:/usr/site/nrniv/local/python:/usr/lib/python2.7:/usr/site/nrniv/pypkg

    joe [4:13 PM] 
    Okay, so you have this first: /usr/site/nrniv/local/python/netpyne

    [4:13] 
    So let me try prepending that to my path…

    sergio [4:14 PM] 
    I was able to produce the figs on ‘no’ also

    [4:14] 
    it must be the path

    joe [4:17 PM] 
    Yeah, has to be the path.  Could you give me the output of `cd ~; cat .tcshrc` please?

    sergio [4:18 PM] 
    added this Plain Text snippet
    # $Id: .tcshrc,v 1.2 2009/03/11 17:50:15 billl Exp $
    #################################################################
    #
    #     .cshrc file
    #
    #     initial setups for both interactive and noninteractive
    #     C-Shells
    #
    #################################################################
    #     set up search path
    setenv SITE /usr/site
    source /usr/site/config/csh_defaults
    setenv PYTHONPATH /usr/site/nrniv/local/python/netpyne:$PYTHONPATH
    set origpath = ($path)
    # echo "Changed .cshrc path to include X11R5/bin, LD_LIB also"
    setenv TEXINPUTS "$TEXINPUTS/:$HOME/papers/latex/"
    set path = ($origpath ./bin ~/bin) # /usr/genesis /usr/local/pkgs/X11R5/bin /usr/lang /usr/local/pkgs/interviews/bin/SUN4 {$NEURONHOME}/bin)
    set a=~/nrniv/place
    if ($?TERM) then
     if ($TERM == emacs) stty nl -echo
     if ($TERM == "tek4014") squish
    else
     setenv TERM vt100
    endif
    set noclobber
    #     aliases for all shells
    alias lsp      '/mnt/psion/C:/home'
    alias ps2aa     'cp -f /mnt/psion/C:/Word ./aa'
    alias cpfps     'cp /mnt/psion/C:/\!:* .'
    alias cp2ps     'cp ./\!:* /mnt/psion/C:/'
    alias aaaa     'set aa = `cat aa`'
    alias lsaa     'set aa = `ls \!:*`'
    alias ffaa     'set aa = `(set noglob ; find . -follow -name \!* -print)`'
    alias becho   'csh -x |& tee /dev/ttyb'
    alias cp      'cp -i'
    alias mv      'mv -i'
    #alias rm      'rm -i'
    #umask 002
    #     skip remaining setup if not an interactive shell
    if ($?USER == 0 || $?prompt == 0) exit
    #     cd path
    set cdpath = "..:~"
    #     commands for interactive shells
    #     other aliases
    alias tg    "tail \!* | grep '^[/=][/=]'"
    alias er    'bg %emacs'
    alias em3    'emacs -nw -l ~/.emacs3'
    alias emg    "emacs -geometry 100x21+1024+-48"
    alias emq    'emacs -q'
    alias zc    'zcat \!*.Z > \!*'
    alias bc    'bc -l'
    # list all users (from passwd file)
    # note use of generalized double quote using qq
    # alias ping74    ping 144.92.74.??
    alias ping73    ping 144.92.73.27
    alias hoclib    'setenv HOC_LIBRARY_PATH "/u/billl/nrniv/hoc /usr/local/src/nrniv/local/hoc /usr/local/src/nrniv/nrn/../simctrl/hoc /usr/local/src/nrniv/nrn/lib/hoc"'
    alias upsw   'ypcat passwd | perl -ne "split(/:/);print @_[0].qq/ /;"'
    alias ypgrep    'ypcat passwd | grep \!*'
    alias ~delall   '(set noglob ; find . -type f -name *~ -print -exec rm -f {} \;)'
    alias neuron    'setenv CAT_PIPE; mod/special.\!* neuron.hoc -'
    alias mm    'awk -f $nsrc/minmax.awk \!*'
    alias arith     "awk '{print \!*}'"
    alias melvyl    'echo Password is GMKTTEGV'
    alias roger    'echo pass=library; telnet 128.54.23.3'
    alias duat1    'telnet duat1.wtp.gtefsd.com'
    alias duat2    'telnet duat2.wtp.gtefsd.com'
    alias giso   "grep '[^a-z]\!*[^a-z]' *.[ch]"
    alias sec   'find \!* -type f -exec chmod 600 {} \;'
    alias grepallc "(set noglob ; find . -name *.c -type f -print -exec grep \!* {} /dev/null \; | grep \!*)"
    alias grepallh "(set noglob ; find . -name *.h -type f -print -exec grep \!* {} /dev/null \; | grep \!*)"
    alias display   '/usr/bin/X11/display'
    alias d       startx
    alias lock     lockscreen
    alias m       more
    alias mroe     more
    alias pdw      'echo $cwd'
    #alias pd      dirs
    #alias po      popd
    #alias pp      pushd
    alias prsh   'sccs prs \!* | head -14'
    # alias rcshead   "rlog -h \!* | sed -n 's/^head:[  ]*\([0-9]\.[0-9][0-9]*\)/\1/p;q'"
    alias rinfo   "rlog -L -h RCS/\!*"
    alias dbl '/usr/5bin/pr -d \!* | lpr'
    alias mp4 'chmod -x \!*; cat \!* | mpage -4 -P | lpqms'
    #alias sd      'screendump | rastrepl | lpr -v &'
    #alias c      'cc \!:1.c \!:2* -o \!:1 >>& c.errors'
    alias ccc      'cc \!*.c -o \!*'
    alias prsave    'dumpregion | sun2ps -a'
    alias prsave4    'dumpregion | sun2ps -s 4 4'
    alias save   'dumpscreen'
    alias xx    'xwd | xwud &'
    alias help     man
    alias key      'man -k'
    alias mkae     make
    alias maek   make
    # how to do a 2 arg alias
    # alias ab 'ls \!\!:1 \!\!:2'
    # 1 line perl programs
    set  poo =     'if (/scale$/) {$_ =~ s/0.25 0.25/0.10 0.10/;}'
    alias poutdec    'perl -p -i -e "$poo" pout.dat; lpt pout.dat'
    alias cc gcc
    alias xreload  'xrdb -merge /usr/local/src/local/openwin-xresources.sun; xrdb -merge /usr/local/src/local/openwin-xdefaults'
    alias mp4  'mpage -4 \!:1 | lpt'
    alias deler    "echo eg ^VKEY; stty erase \!:1"
    alias stopper    "echo eg ^VKEY; stty stop \!:1"
    alias nostop    "stty -ixon"
    alias psdi     "cp ~/info/month /mnt/psion/C:"
    alias wsjb     "emacs -batch -q -l ~/src/lisp/wsjbatch.el"
    alias ud      'pushd \!*;echo $cwd'
    alias pd      "popd"
    alias xm xmodmap ~/.xmaps
    # temporary
    alias pwsj 'pword -s a -d wsj \!*'
    alias mgpo 'mgp -o -g 400x400+500+40 \!* &'
    alias tppp 'tail -f /var/log/ppp'
    alias up  '/sbin/ifup eth0; date >> ~/info/IPs; /sbin/ifconfig | grep Bcast >> ~/info/IPs'
    alias down  /sbin/ifdown eth0
    alias ifc /sbin/ifconfig
    alias ipid 'set IP = `/sbin/ifconfig | grep Bcast | sed "s/inet addr:\([0-9.]*\).*/\1/"`; echo $IP'
    alias display 'display -geometry 1200x1200'
    #ADDED BY SALVADOR
    #disable scrolling in emacs
    setenv GDK_NATIVE_WINDOWS 1
    alias udp 'netstat -tulpn'
    alias matlab 'sudo /usr/local/MATLAB/R2012a/bin/matlab'
    alias path 'readlink -f \!:1'
    alias hc 'hg commit -m \!:1'
    alias hcp 'hg commit -m \!:1 ; hg push'
    alias huc 'hg up -C'
    alias copy 'rsync -abve "/usr/bin/ssh" --suffix=.SAV \!:1 \!:2'
    set downloads=~/Documents/ISB/Downloads
    alias downloads 'cd "$downloads"'
    set models=~/Documents/ISB/Models
    alias models 'cd "$models"'
    set models_linux=~/Documents/ISB/Models_linux
    alias models_linux 'cd "$models_linux"'
    alias ml 'cd "$models_linux"'
    set papers=~/Documents/ISB/Papers
    alias papers 'cd "$papers"'
    set work=~/Documents/ISB/Work
    alias work 'cd "$work"'
    set reports=~/Documents/ISB/Reports
    alias reports 'cd "$reports"'
    set lisb=laptop:/home/salvadord/Documents/ISB
    alias lisb 'cd "$lisb"'
    set arm2dms=~/Documents/ISB/Models_linux/arm2dms
    alias arm2dms 'cd "$arm2dms"'
    alias ams 'cd "$arm2dms"'
    alias sim 'ipython --pylab -i sim.py'
    set m1ms=~/Documents/ISB/Models_linux/m1ms/sim
    alias m1ms 'cd "$m1ms"'
    alias m1ms 'cd "$m1ms"'
    alias matlab13 /usr/arch/MATLAB2013a/bin/matlab
    alias pypkg cd /usr/site/nrniv/pypkg
    alias ipy 'ipython -i'
    alias lsl 'ls -lrtah'
    alias upnp 'cd /usr/site/nrniv/local/python/netpyne; git pull'
    alias lin2nsim 'rsync -abve "/usr/bin/ssh" --suffix=.SAV --exclude=".*" --exclude="*.SAV" --delete --ignore-errors $downloads/. salvadord@no:$nisb/Downloads/ ; rsync -abve "/usr/bin/ssh" --suffix=.SAV --exclude=".*" --exclude="*.SAV" --delete $models/. salvadord@no:$nisb/Models/ ; rsync -abve "/usr/bin/ssh" --suffix=.SAV --exclude=".*" --exclude="*.SAV" $models_linux/. salvadord@no:$nisb/Models_linux/ ; rsync -abve "/usr/bin/ssh" --suffix=.SAV --exclude=".*" --exclude="*.SAV" $papers/. salvadord@no:$nisb/Papers/ ; rsync -abve "/usr/bin/ssh" --suffix=.SAV --exclude=".*" --exclude="*.SAV" --delete $reports/. salvadord@no:$nisb/Reports/ ; rsync -abve "/usr/bin/ssh" --suffix=.SAV --exclude=".*" --exclude="*.SAV" --delete $work/. salvadord@no:$nisb/Work/'
    alias nsim2lin 'rsync -abve "/usr/bin/ssh" --suffix=.SAV --exclude=".*" --exclude="*.SAV" salvadord@no:$nisb/Downloads/. $downloads/ ; rsync -abve "/usr/bin/ssh" --suffix=.SAV --exclude=".*" --exclude="*.SAV" salvadord@no:$nisb/Models/. $models/ ; rsync -abve "/usr/bin/ssh" --suffix=.SAV --exclude=".*" --exclude="*.SAV" salvadord@no:$nisb/Models_linux/. $models_linux/; rsync -abve "/usr/bin/ssh" --suffix=.SAV --exclude=".*" --exclude="*.SAV" salvadord@no:$nisb/Papers/. $papers ; rsync -abve "/usr/bin/ssh" --suffix=.SAV --exclude=".*" --exclude="*.SAV" salvadord@no:$nisb/Reports/. $reports ; rsync -abve "/usr/bin/ssh" --suffix=.SAV --exclude=".*" --exclude="*.SAV" salvadord@no:$nisb/Work/. $work'
    Add Comment Click to expand inline 214 lines

    sergio [4:18 PM] 
    I think that’s from bill

    [4:18] 
    it has a lot of stuff

    joe [4:24 PM] 
    Now I’ve got it working on zn.

    sergio [4:26 PM] 
    ok

    joe [4:28 PM] 
    Sorry, back in a few.

    joe [4:42 PM] 
    Okay, it finished on zn, so that’s good.  I’m going to try it on no…

    sergio [4:42 PM] 
    great

    [4:43] 
    did you get figs?

    joe [4:43 PM] 
    Yup.  :slightly_smiling_face:

    [4:48] 
    It works on no also.  Still not working on my local machine.

    [4:48] 
    Does it work on your laptop?

    sergio [4:48 PM] 
    nop

    joe [4:48 PM] 
    Huh.  Well, let’s see if we can debug our local machines.

    sergio [4:54 PM] 
    how do you want to start?

    joe [4:55 PM] 
    Salva explained that if it’s not working, execute netParams.py, then execute batch_init.py (init.py in your repo), then execute batch.py (or my_batches.py).

    [4:57] 
    On my machine execfile(‘netParams.py’) works fine.

    [4:57] 
    But when I do execfile(‘init.py’), something a bit weird happens…

    [4:58] 
    Instead of outputting to data/batch1, it outputs to data/v36_manualTune

    [4:58] 
    Does it do the same on your machine?

    sergio [4:59 PM] 
    it happened to me before

    [4:59] 
    i commented out those lines

    joe [5:00 PM] 
    Which lines? I don’t even see “v36_manualTune” anywhere in the code…

    sergio [5:00 PM] 
    added this Plain Text snippet
    /Users/sergioangulo/serg_temp/eee/sim/cells/CSTR6.py in <module>()
       38 p_ena = 42.0
       39 # h-current
    ---> 40 h.erev_h = h.erev_ih = -37.0 # global
       41 gbar_h = 9.99986721729e-06
       42
    LookupError: 'erev_h' is not a defined hoc variable name.
    Add Comment Collapse

    sergio [5:00 PM] 
    on cfg.py, lines 90-91

    joe [5:01 PM] 
    Ahhh, there it is!

    [5:01] 
    Okay, I commented out those lines and now I’ll try again.

    sergio [5:01 PM] 
    hehe

    [5:01] 
    for the previour error

    [5:01] 
    previous error

    [5:02] 
    you did the symlink, right?

    joe [5:02 PM] 
    So you’re getting the erev_h error now?  Once I symlinked, that error seems to have gone away…

    [5:05] 
    Did you do the symlinking?

    sergio [5:06 PM] 
    I did it

    [5:06] 
    but I still have the error

    sergio [5:12 PM] 
    now it doesn’t want to go away

    [5:12] 
    did you close terminal and open it again?

    joe [5:12 PM] 
    Yeah.

    [5:13] 
    When do you get that error?  When you execute netParams?

    sergio [5:14 PM] 
    on my serg_temp dir is not working

    [5:15] 
    but on the dir that usually work is running fine

    joe [5:16 PM] 
    This is on your local machine, right?  Still works on Neurosim?

    sergio [5:16 PM] 
    yep

    [5:17] 
    local machine

    joe [5:21 PM] 
    Huh. As soon as we whack one mole, another one pops up…

    sergio [5:27 PM] 
    on init.py it creates one fig

    joe [5:28 PM] 
    That means it’s working.

    [5:28] 
    But does it create it as sim/model_output_traces.png instead of in data/batch1?

    sergio [5:29 PM] 
    it creates a sim/model_output_traces.png

    [5:29] 
    so now I’m going to run batch.py

    joe [5:29 PM] 
    Yeah, let me know what happens.

    sergio [5:35 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% cd projects/eee_sync/eee/data/batch1
    Sergios-MacBook-2% ls *.png
    batch1_0_0_traces.png  batch1_0_2_traces.png  batch1_0_6_traces.png
    batch1_0_10_traces.png batch1_0_3_traces.png  batch1_0_7_traces.png
    batch1_0_11_traces.png batch1_0_4_traces.png  batch1_0_8_traces.png
    batch1_0_1_traces.png  batch1_0_5_traces.png  batch1_0_9_traces.png
    Add Comment Collapse

    sergio [5:35 PM] 
    it’s working now

    joe [5:36 PM] 
    do me a favor: `cd projects/eee_sync/eee; hg status`

    sergio [5:37 PM] 
    added this Plain Text snippet
    M .hgignore
    M sim/batch_analysis.py
    M sim/cells/CSTR6.py
    M sim/cfg.py
    ? data/batch1/batch1_0_0.json
    ? data/batch1/batch1_0_0_cfg.json
    ? data/batch1/batch1_0_0_traces.png
    ? data/batch1/batch1_0_1.json
    ? data/batch1/batch1_0_10.json
    ? data/batch1/batch1_0_10_cfg.json
    ? data/batch1/batch1_0_10_traces.png
    ? data/batch1/batch1_0_11.json
    ? data/batch1/batch1_0_11_cfg.json
    ? data/batch1/batch1_0_11_traces.png
    ? data/batch1/batch1_0_12.json
    ? data/batch1/batch1_0_12_cfg.json
    ? data/batch1/batch1_0_12_traces.png
    ? data/batch1/batch1_0_13.json
    ? data/batch1/batch1_0_13_cfg.json
    ? data/batch1/batch1_0_13_traces.png
    ? data/batch1/batch1_0_14.json
    ? data/batch1/batch1_0_14_cfg.json
    ? data/batch1/batch1_0_14_traces.png
    ? data/batch1/batch1_0_15.json
    ? data/batch1/batch1_0_15_cfg.json
    ? data/batch1/batch1_0_15_traces.png
    ? data/batch1/batch1_0_16.json
    ? data/batch1/batch1_0_16_cfg.json
    ? data/batch1/batch1_0_16_traces.png
    ? data/batch1/batch1_0_17_cfg.json
    ? data/batch1/batch1_0_18_cfg.json
    ? data/batch1/batch1_0_19_cfg.json
    ? data/batch1/batch1_0_1_cfg.json
    ? data/batch1/batch1_0_1_traces.png
    ? data/batch1/batch1_0_2.json
    ? data/batch1/batch1_0_2_cfg.json
    ? data/batch1/batch1_0_2_traces.png
    ? data/batch1/batch1_0_3.json
    ? data/batch1/batch1_0_3_cfg.json
    ? data/batch1/batch1_0_3_traces.png
    ? data/batch1/batch1_0_4.json
    ? data/batch1/batch1_0_4_cfg.json
    ? data/batch1/batch1_0_4_traces.png
    ? data/batch1/batch1_0_5.json
    ? data/batch1/batch1_0_5_cfg.json
    ? data/batch1/batch1_0_5_traces.png
    ? data/batch1/batch1_0_6.json
    ? data/batch1/batch1_0_6_cfg.json
    ? data/batch1/batch1_0_6_traces.png
    ? data/batch1/batch1_0_7.json
    ? data/batch1/batch1_0_7_cfg.json
    ? data/batch1/batch1_0_7_traces.png
    ? data/batch1/batch1_0_8.json
    ? data/batch1/batch1_0_8_cfg.json
    ? data/batch1/batch1_0_8_traces.png
    ? data/batch1/batch1_0_9.json
    ? data/batch1/batch1_0_9_cfg.json
    ? data/batch1/batch1_0_9_traces.png
    ? data/batch1/batch1_1_0_cfg.json
    ? data/batch1/batch1_1_10_cfg.json
    ? data/batch1/batch1_1_11_cfg.json
    ? data/batch1/batch1_1_12_cfg.json
    ? data/batch1/batch1_1_13_cfg.json
    ? data/batch1/batch1_1_14_cfg.json
    ? data/batch1/batch1_1_15_cfg.json
    ? data/batch1/batch1_1_16_cfg.json
    ? data/batch1/batch1_1_17_cfg.json
    ? data/batch1/batch1_1_18_cfg.json
    ? data/batch1/batch1_1_19_cfg.json
    ? data/batch1/batch1_1_1_cfg.json
    ? data/batch1/batch1_1_2_cfg.json
    ? data/batch1/batch1_1_3_cfg.json
    ? data/batch1/batch1_1_4_cfg.json
    ? data/batch1/batch1_1_5_cfg.json
    ? data/batch1/batch1_1_6_cfg.json
    ? data/batch1/batch1_1_7_cfg.json
    ? data/batch1/batch1_1_8_cfg.json
    ? data/batch1/batch1_1_9_cfg.json
    ? data/batch1/batch1_2_0_cfg.json
    ? data/batch1/batch1_2_10_cfg.json
    ? data/batch1/batch1_2_11_cfg.json
    ? data/batch1/batch1_2_12_cfg.json
    ? data/batch1/batch1_2_13_cfg.json
    ? data/batch1/batch1_2_14_cfg.json
    ? data/batch1/batch1_2_15_cfg.json
    ? data/batch1/batch1_2_16_cfg.json
    ? data/batch1/batch1_2_17_cfg.json
    ? data/batch1/batch1_2_18_cfg.json
    ? data/batch1/batch1_2_19_cfg.json
    ? data/batch1/batch1_2_1_cfg.json
    ? data/batch1/batch1_2_2_cfg.json
    ? data/batch1/batch1_2_3_cfg.json
    ? data/batch1/batch1_2_4_cfg.json
    ? data/batch1/batch1_2_5_cfg.json
    ? data/batch1/batch1_2_6_cfg.json
    ? data/batch1/batch1_2_7_cfg.json
    ? data/batch1/batch1_2_8_cfg.json
    ? data/batch1/batch1_2_9_cfg.json
    ? data/batch1/batch1_3_0_cfg.json
    ? data/batch1/batch1_3_10_cfg.json
    ? data/batch1/batch1_3_11_cfg.json
    ? data/batch1/batch1_3_12_cfg.json
    ? data/batch1/batch1_3_13_cfg.json
    ? data/batch1/batch1_3_14_cfg.json
    ? data/batch1/batch1_3_15_cfg.json
    ? data/batch1/batch1_3_16_cfg.json
    ? data/batch1/batch1_3_17_cfg.json
    ? data/batch1/batch1_3_18_cfg.json
    ? data/batch1/batch1_3_19_cfg.json
    ? data/batch1/batch1_3_1_cfg.json
    ? data/batch1/batch1_3_2_cfg.json
    ? data/batch1/batch1_3_3_cfg.json
    ? data/batch1/batch1_3_4_cfg.json
    ? data/batch1/batch1_3_5_cfg.json
    ? data/batch1/batch1_3_6_cfg.json
    ? data/batch1/batch1_3_7_cfg.json
    ? data/batch1/batch1_3_8_cfg.json
    ? data/batch1/batch1_3_9_cfg.json
    ? data/batch1/batch1_4_0_cfg.json
    ? data/batch1/batch1_4_10_cfg.json
    ? data/batch1/batch1_4_11_cfg.json
    ? data/batch1/batch1_4_12_cfg.json
    ? data/batch1/batch1_4_13_cfg.json
    ? data/batch1/batch1_4_14_cfg.json
    ? data/batch1/batch1_4_15_cfg.json
    ? data/batch1/batch1_4_16_cfg.json
    ? data/batch1/batch1_4_17_cfg.json
    ? data/batch1/batch1_4_18_cfg.json
    ? data/batch1/batch1_4_19_cfg.json
    ? data/batch1/batch1_4_1_cfg.json
    ? data/batch1/batch1_4_2_cfg.json
    ? data/batch1/batch1_4_3_cfg.json
    ? data/batch1/batch1_4_4_cfg.json
    ? data/batch1/batch1_4_5_cfg.json
    ? data/batch1/batch1_4_6_cfg.json
    ? data/batch1/batch1_4_7_cfg.json
    ? data/batch1/batch1_4_8_cfg.json
    ? data/batch1/batch1_4_9_cfg.json
    ? data/batch1/batch1_batch.json
    ? data/batch1/batch1_batchScript.py
    ? data/batch1/batch1_netParams.py
    ? data/v36_manualTune/v36_tune1.json
    Add Comment Click to expand inline 142 lines

    sergio [5:37 PM] 
    i modified hgignore to include batch1

    [5:38] 
    but nothing else

    joe [5:39 PM] 
    Let’s clean up your hg a little…

    [5:40] 
    cat .hgignore; echo “data” >> .hgignore; cat .hgignore

    [5:40] 
    Enter this into terminal, please: `cat .hgignore; echo "data" >> .hgignore; cat .hgignore`

    [5:40] 
    send me output please

    sergio [5:41 PM] 
    added this Plain Text snippet
    \#notebook.org\#
    notebook.org~
    hass2016
    #batch1
    batch_data
    batch_figs
    .pyc
    .mod
    x86_64
    #data
    #.hgignore
    .DS_Store
    .nfs\#notebook.org\#
    notebook.org~
    hass2016
    #batch1
    batch_data
    batch_figs
    .pyc
    .mod
    x86_64
    #data
    #.hgignore
    .DS_Store
    .nfs“data”
    Add Comment Click to expand inline 25 lines

    joe [5:42 PM] 
    Okay, that didn’t do quite what I expected.

    [5:43] 
    Open your .hgignore file in an editor

    [5:43] 
    I would make it look just like this:

    sergio [5:43 PM] 
    ok

    joe [5:44 PM] 
    added this C snippet
    hass2016
    batch_data
    batch_figs
    .pyc
    .mod
    x86_64
    data
    .DS_Store
    .nfs
    Add Comment Collapse

    joe [5:44 PM] 
    You want to track your notebook in Hg, so I removed that.

    [5:44] 
    You shouldn’t really track output data, because that is reproducible with your code.

    [5:45] 
    So I uncommented data

    [5:45] 
    Once you get that done, show me the output of `hg status` again please.

    sergio [5:45 PM] 
    ok

    [5:46] 
    but the nb thing are actually cool

    joe [5:46 PM] 
    ??

    [5:47] 
    Did having the notebook in .hgignore do something I’m not aware of?

    sergio [5:47 PM] 
    those  some weird files created with emacs: #noteboo.org#; notebook.org~

    joe [5:48 PM] 
    Oh, I see.  Do you use emacs?  I just edit my nb in Sublime.

    [5:48] 
    So I guess I don’t ever get those files…

    [5:49] 
    Yeah, you can leave those in your .hgignore then.

    sergio [5:51 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% hg status
    M .hgignore
    M sim/batch_analysis.py
    M sim/cells/CSTR6.py
    M sim/cfg.py
    Add Comment

    joe [5:51 PM] 
    That looks much better!

    [5:51] 
    Now give me the output of `hg diff`

    sergio [5:53 PM] 
    added this Plain Text snippet
    diff -r 70be314e6757 .hgignore
    --- a/.hgignore Mon Jun 26 18:26:34 2017 -0400
    +++ b/.hgignore Mon Jun 26 20:52:49 2017 -0400
    @@ -1,13 +1,11 @@
     \#notebook.org\#
     notebook.org~
     hass2016
    -batch1
     batch_data
     batch_figs
     .pyc
     .mod
     x86_64
    -#data
    -#.hgignore
    +data
     .DS_Store
    -.nfs
    \ No newline at end of file
    +.nfs
    diff -r 70be314e6757 sim/batch_analysis.py
    --- a/sim/batch_analysis.py Mon Jun 26 18:26:34 2017 -0400
    +++ b/sim/batch_analysis.py Mon Jun 26 20:52:49 2017 -0400
    @@ -11,7 +11,7 @@
     """
     from batch_utils import *
     from cfg import cfg
    -#import batch_utils
    +import batch_utils
     import json
     from matplotlib import pyplot as plt
     from pprint import pprint
    diff -r 70be314e6757 sim/cells/CSTR6.py
    --- a/sim/cells/CSTR6.py  Mon Jun 26 18:26:34 2017 -0400
    +++ b/sim/cells/CSTR6.py  Mon Jun 26 20:52:49 2017 -0400
    @@ -22,7 +22,7 @@
     bdendL = 265.920165144
     bdendDiam = 1.02617341611
    -# passive properties
    +# passive properties
     axonCap = 1.98999103645
     somaCap = 1.98838095104
     apicCap = 1.9931856141
    @@ -35,7 +35,7 @@
     # Na, K reversal potentials calculated from BenS internal/external solutions via Nernst eq.
     p_ek = -104.0 # these reversal potentials for in vitro conditions
    -p_ena = 42.0
    +p_ena = 42.0
     # h-current
     h.erev_h = h.erev_ih = -37.0 # global
     gbar_h = 9.99986721729e-06
    @@ -52,9 +52,9 @@
     # A few kinetic params changed vis-a-vis kap.mod defaults:
     kap_vhalfn = 32.7885075379
     kap_tq   = -52.0967985869
    -kap_vhalfl = -59.7867409796 #
    +kap_vhalfl = -59.7867409796 #
    -# other ion channel parameters
    +# other ion channel parameters
     cal_gcalbar = 4.41583533572e-06
     can_gcanbar = 4.60717910591e-06
     cat_gcatbar = 1.00149259311e-06
    @@ -62,11 +62,11 @@
     kBK_gpeak = 5.09733585163e-05
     kBK_caVhminShift = 43.8900261407
     cadad_depth = 0.119408607923
    -cadad_taur = 99.1146852282
    +cadad_taur = 99.1146852282
     gbar_nap = 0.00301840094235
     gbar_ican = 0.000106856758751
    -
    +
     ###############################################################################
     # CSTR6 Cell
     ###############################################################################
    @@ -118,13 +118,13 @@
       axon.gbar_kap = gbar_kap * kap_gbar_axonm
      def set_calprops (self,sec):
    -  sec.gcalbar_cal = cal_gcalbar
    -  sec.gcanbar_can = can_gcanbar
    +  sec.gcalbar_cal = cal_gcalbar
    +  sec.gcanbar_can = can_gcanbar
       sec.gcatbar_cat = cat_gcatbar
       sec.gpeak_kBK = kBK_gpeak
       sec.caVhmin_kBK = -46.08 + kBK_caVhminShift
       sec.depth_cadad = cadad_depth
    -  sec.taur_cadad = cadad_taur
    +  sec.taur_cadad = cadad_taur
       #sec.gbar_ican = gbar_ican
      def set_somag (self):
    @@ -133,7 +133,7 @@
       self.set_calprops(sec)
       #sec.gbar_nap = gbar_nap
    - def set_bdendg (self):
    + def set_bdendg (self):
       sec = self.Bdend
       sec.gbar_ih = gbar_h # Ih
       #sec.gbar_nap = gbar_nap
    @@ -170,7 +170,7 @@
       for sec in self.all_sec:
        sec.ek = p_ek # K+ current reversal potential (mV)
        sec.ena = p_ena # Na+ current reversal potential (mV)
    -   sec.Ra = rall; sec.e_pas = Vrest # passive
    +   sec.Ra = rall; sec.e_pas = Vrest # passive
        sec.gbar_nax  = gbar_nax # Na
        sec.gbar_kdr  = gbar_kdr # KDR
        sec.vhalfn_kdr = kdr_vhalfn # KDR kinetics
    @@ -193,12 +193,12 @@
        sec.insert('kdr') # K delayed rectifier current
        sec.insert('kap') # K-A current
       for sec in [self.Adend3, self.Adend2, self.Adend1, self.Bdend, self.soma]:
    -   sec.insert('ih') # h-current
    +   sec.insert('ih') # h-current
        sec.insert('ca_ion') # calcium channels
        sec.insert('cal') # cal_mig.mod
        sec.insert('can') # can_mig.mod
        sec.insert('cat') # cat_mig.mod
    -   sec.insert('cadad') # cadad.mod - calcium decay
    +   sec.insert('cadad') # cadad.mod - calcium decay
        sec.insert('kBK') # kBK.mod - ca and v dependent k channel
        #sec.insert('nap') # nap_sidi.mod
        #sec.insert('ican') # ican_sidi.mod
    @@ -250,29 +250,29 @@
        somaRM = 10590.6461169
        apicRM = 13889.6757076
        bdendRM = 7068.31281683
    -   rall = 70.0015514222
    +   rall = 70.0015514222
        Vrest = -72 #-87.1335623948
    -   h.v_init = -72 #-88.7986728464
    +   h.v_init = -72 #-88.7986728464
        gbar_h = 3.3176340367e-05
    -   axonCap = 2.4630760526
    -   somaCap = 2.4998269977
    -   apicCap = 2.74242941886
    -   bdendCap = 2.74086279376
    -   somaL = 48.4123467666
    +   axonCap = 2.4630760526
    +   somaCap = 2.4998269977
    +   apicCap = 2.74242941886
    +   bdendCap = 2.74086279376
    +   somaL = 48.4123467666
        somaDiam = 28.2149102762
    -   apicL = 261.904636003
    +   apicL = 261.904636003
        apicDiam = 1.5831889597
    -   bdendL = 299.810775175
    +   bdendL = 299.810775175
        bdendDiam = 2.2799248874
    -   axonL = 594.292937602
    -   axonDiam = 1.40966286462
    +   axonL = 594.292937602
    +   axonDiam = 1.40966286462
        h_ascale = 0.00320887293027
    -   h_bscale = 0.285307415701
    -   h_ashift = 119.696272155
    -   h_aslope = 7.09800576233
    -   h_bslope = 23.2995848558
    -   gbar_nap = 0.0
    -   gbar_ican = 0.0
    +   h_bscale = 0.285307415701
    +   h_ashift = 119.696272155
    +   h_aslope = 7.09800576233
    +   h_bslope = 23.2995848558
    +   gbar_nap = 0.0
    +   gbar_ican = 0.0
        kap_vhalfn = 32.179925527
        kBK_caVhminShift = 89.9991422912
    @@ -293,29 +293,29 @@
        somaRM = 25551.9729631
        apicRM = 48333.5799025
        bdendRM = 11763.9607778
    -   rall = 114.969186163
    +   rall = 114.969186163
        Vrest = -79.8821836579
    -   h.v_init = -92.8364820902
    +   h.v_init = -92.8364820902
        gbar_h = 3.13760461868e-05
    -   axonCap = 1.87389705992
    -   somaCap = 1.89133252551
    -   apicCap = 2.49841939531
    +   axonCap = 1.87389705992
    +   somaCap = 1.89133252551
    +   apicCap = 2.49841939531
        bdendCap = 2.46671987855
    -   somaL = 48.4123467666
    +   somaL = 48.4123467666
        somaDiam = 28.2149102762
    -   apicL = 261.904636003
    +   apicL = 261.904636003
        apicDiam = 1.5831889597
    -   bdendL = 299.810775175
    +   bdendL = 299.810775175
        bdendDiam = 2.2799248874
    -   axonL = 594.292937602
    +   axonL = 594.292937602
        axonDiam = 1.40966286462
        h_ascale = 0.00365676240119
    -   h_bscale = 0.26993550346
    -   h_ashift = 115.040811905
    -   h_aslope = 7.63692206734
    -   h_bslope = 37.2740194128
    -   gbar_nap = 0.0
    -   gbar_ican = 0.0
    +   h_bscale = 0.26993550346
    +   h_ashift = 115.040811905
    +   h_aslope = 7.63692206734
    +   h_bslope = 37.2740194128
    +   gbar_nap = 0.0
    +   gbar_ican = 0.0
        # properties from evolution
        kBK_gpeak = 4.2923494376e-05
    @@ -337,4 +337,3 @@
       print s, '=',str(p*fctr),str(p/fctr),str(p),'True'
      else:
       print s, ' = ' , str(p/fctr), str(p*fctr), str(p), 'True'
    -
    diff -r 70be314e6757 sim/cfg.py
    --- a/sim/cfg.py  Mon Jun 26 18:26:34 2017 -0400
    +++ b/sim/cfg.py  Mon Jun 26 20:52:49 2017 -0400
    @@ -78,17 +78,17 @@
     #         'V_Bdend1': {'sec':'Bdend1', 'loc':0.5, 'var':'v'}
              #'I_AMPA_Adend2': {'sec':'Adend2', 'loc':0.5, 'synMech': 'AMPA', 'var': 'i'}
              }
    -
    +
     cfg.recordStims = False
    -cfg.recordStep = 0.1 #sampling rate, orig =1.0
    +cfg.recordStep = 0.1 #sampling rate, orig =1.0
     #------------------------------------------------------------------------------
     # Saving
     #------------------------------------------------------------------------------
    -cfg.simLabel = 'v36_tune1'
    -cfg.saveFolder = '../data/v36_manualTune'
    +#cfg.simLabel = 'v36_tune1'
    +#cfg.saveFolder = '../data/v36_manualTune'
     cfg.savePickle = False
     cfg.saveJson = True
     cfg.saveDataInclude = ['simData', 'simConfig', 'netParams']#, 'net']
    @@ -110,7 +110,7 @@
     #cfg.analysis['plotTraces'] = {'include':[('IT2',0),('IT2',10),('IT2',20)],'oneFigPer':'trace',
     #               'figSize': (12,8),'saveFig':'../data/figs/traces_IT','showFig': True}
    -cfg.analysis['plotTraces'] = {'include':[],'oneFigPer':'trace', 'ylim':[-90,50],
    +cfg.analysis['plotTraces'] = {'include':[],'oneFigPer':'trace',# 'ylim':[-90,50],
                    'figSize': (12,8),'saveFig':True,'showFig':False} #'../data/figs/traces_PV2'
     #cfg.analysis['plotTraces'] = {'include':[('PT5',0),('PT5',10),('PT5',15)],'oneFigPer':'trace',
    Add Comment Click to expand inline 260 lines

    joe [5:55 PM] 
    Thanks.

    [5:56] 
    Okay, so running the batch works in this repo?

    sergio [5:56 PM] 
    it does

    [5:56] 
    I did the init.py and then batch.py

    joe [5:57 PM] 
    Perfect.  So let’s commit and push so I can pull.

    sergio [5:57 PM] 
    ok

    joe [5:57 PM] 
    hg commit -m “Batches working or somesuch”

    [5:57] 
    hg push

    sergio [5:58 PM] 
    ok

    joe [6:03 PM] 
    I am not getting figs out…

    [6:03] 
    Let’s make sure it works right out of the box.

    [6:03] 
    Delete your serg_temp dir and:

    [6:03] 
    mkdir serg_temp ; cd serg_temp ; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee ; cd eee/sim/mod ; mkmod ; cd .. ; ./runbatch

    [6:04] 
    And let me know if you get figures in serg_temp/eee/data/batch1

    sergio [6:05 PM] 
    ok I’m running the batch

    joe [6:12 PM] 
    Figs?

    sergio [6:12 PM] 
    nop

    [6:12] 
    even worse than before

    joe [6:12 PM] 
    How so?

    sergio [6:13 PM] 
    added this Plain Text snippet
    Warning: Could not load netParams from command line path or from default netParams.py
    Add Comment

    sergio [6:13 PM] 
    let me try to do it again

    [6:13] 
    but I need to do something

    [6:13] 
    I’ll be back like in 30 mins

    joe [6:13 PM] 
    Yeah, let’s take a break.

    [6:14] 
    Ugh. This can get frustrating.

    sergio [6:14 PM] 
    yep, it happens sometimes

    [6:15] 
    ok joe I’ll be back soon

    joe [6:15 PM] 
    Cool. Let me know.

    sergio [6:19 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% mkmod
    Search path for mod files is /usr/site/nrniv/local/mod
    grep: nafx.mod: No such file or directory
    nafx.mod NOT FOUND; check env variable MODL_INCLUDE.
    Add Comment

    sergio [6:19 PM] 
    I remember that part

    [6:19] 
    I don’t know why my neuron was not able to compile those files

    [6:20] 
    I copied them from neurosim

    [6:20] 
    there are like 5-10 mod files

    joe [6:21 PM] 
    That’s when you started from scratch in serg_temp?

    sergio [6:22 PM] 
    yep that’s the one from scratch

    joe [6:22 PM] 
    Well that could be the problem…

    sergio [6:24 PM] 
    ok I”ll be back

    joe [6:26 PM] 
    I didn’t have a problem compiling.

    [6:26] 
    When you get back, let’s make sure all your Neurosim repos are up to date.

    sergio [6:26 PM] 
    ok

    sergio [6:58 PM] 
    I’m back

    joe [6:58 PM] 
    So, let’s make sure you’re up to date.

    [6:59] 
    Enter this and send me output: `cd /usr/site/nrniv/local; hg status; hg incoming`

    sergio [7:00 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% cd /usr/site/nrniv/local; hg status; hg incoming
    M mod/misc.h
    comparing with ssh://sergioangulo@ag.neurosim.downstate.edu//u/sergioangulo/site/nrniv/local
    searching for changes
    no changes found
    Add Comment

    joe [7:01 PM] 
    Hmmm… Not what I was expecting…

    joe [7:02 PM] 
    added this Perl snippet
    graham-mac% cd /usr/site/nrniv/local; hg status; hg incoming
    comparing with ssh://no.neurosim.downstate.edu//usr/site/nrniv/local
    searching for changes
    no changes found
    Add Comment

    joe [7:04 PM] 
    Show me the output of cat .hg/hgrc

    joe [7:05 PM] 
    added this Shell snippet
    graham-mac% cat .hg/hgrc
    # example repository config (see 'hg help config' for more info)
    [paths]
    default = ssh://no.neurosim.downstate.edu//usr/site/nrniv/local
    ​
    # path aliases to other clones of this repo in URLs or filesystem paths
    # (see 'hg help config.paths' for more info)
    #
    # default-push = ssh://jdoe@example.net/hg/jdoes-fork
    # my-fork   = ssh://jdoe@example.net/hg/jdoes-fork
    # my-clone   = /home/jdoe/jdoes-clone
    ​
    [ui]
    # name and email (local to this repository, optional), e.g.
    # username = Jane Doe <jdoe@example.com>
    graham-mac% 
    Add Comment Collapse

    sergio [7:06 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% cat .hg/hgrc
    # example repository config (see "hg help config" for more info)
    [paths]
    default = ssh://sergioangulo@ag.neurosim.downstate.edu//u/sergioangulo/site/nrniv/local
    # path aliases to other clones of this repo in URLs or filesystem paths
    # (see "hg help config.paths" for more info)
    #
    # default-push = ssh://jdoe@example.net/hg/jdoes-fork
    # my-fork   = ssh://jdoe@example.net/hg/jdoes-fork
    # my-clone   = /home/jdoe/jdoes-clone
    [ui]
    # name and email (local to this repository, optional), e.g.
    # username = Jane Doe <jdoe@example.com>
    Add Comment Collapse

    sergio [7:07 PM] 
    I’m linked to ‘ag’

    [7:07] 
    apparently

    joe [7:08 PM] 
    That shouldn’t matter…  But I thought you would be linked to `/usr/site/nrniv/local` instead of `//u/sergioangulo/site/nrniv/local`

    sergio [7:09 PM] 
    should I change that on hgrc?

    joe [7:09 PM] 
    It’s like you’ve got a personal copy of the repo on Neurosim, and then you pull/push from that for local…

    [7:10] 
    First let’s see if your copy is up-to-date.

    [7:11] 
    Oof, yeah, you are way out of date.

    [7:11] 
    To see for yourself: `sshno; cd /u/sergioangulo/site/nrniv/local; hg incoming`

    [7:12] 
    Here’s what I think we should do.

    [7:13] 
    Delete the repo and start over.

    sergio [7:13 PM] 
    yep last update feb-7th

    joe [7:14 PM] 
    First actually, let’s see what the change to misc.h was…

    [7:14] 
    hg diff

    [7:14] 
    and send me output

    sergio [7:15 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% hg diff
    diff -r 139041d36809 mod/misc.h
    --- a/mod/misc.h  Sat Jan 28 17:34:37 2017 -0500
    +++ b/mod/misc.h  Mon Jun 26 22:15:10 2017 -0400
    @@ -5,7 +5,7 @@
     #include <limits.h> /* contains LONG_MAX */
     #include <time.h>
     #include <sys/time.h>
    -#include <values.h>
    +//#include <values.h>
     #include <pthread.h>
     #if !defined(t)
    Add Comment Collapse

    sergio [7:15 PM] 
    I did that today

    joe [7:16 PM] 
    Cool.  So what I’m thinking is we delete your /usr/site/nrniv/local directory and then clone from the right place.

    sergio [7:16 PM] 
    perfect

    joe [7:17 PM] 
    So, let’s do this:

    [7:18] 
    `cd /usr/site/nrniv; rm -r local; hg clone ssh://no.neurosim.downstate.edu//usr/site/nrniv/local`

    sergio [7:18 PM] 
    perfect

    [7:18] 
    done

    joe [7:19 PM] 
    Okay, now make sure that .hg/hgrc default has:

    [7:19] 
    [paths]
    default = ssh://no.neurosim.downstate.edu//usr/site/nrniv/local

    [7:20] 
    cd local; cat .hg/hgrc

    sergio [7:21 PM] 
    added this Plain Text snippet
    # example repository config (see 'hg help config' for more info)
    [paths]
    default = ssh://no.neurosim.downstate.edu//usr/site/nrniv/local
    # path aliases to other clones of this repo in URLs or filesystem paths
    # (see 'hg help config.paths' for more info)
    #
    # default-push = ssh://jdoe@example.net/hg/jdoes-fork
    # my-fork   = ssh://jdoe@example.net/hg/jdoes-fork
    # my-clone   = /home/jdoe/jdoes-clone
    [ui]
    # name and email (local to this repository, optional), e.g.
    # username = Jane Doe <jdoe@example.com>
    Add Comment Collapse

    joe [7:21 PM] 
    perfect.

    [7:22] 
    Now let’s check the other repos.

    sergio [7:22 PM] 
    oh

    [7:22] 
    they are like 3, right?

    joe [7:22 PM] 
    cd /usr/site/nrniv/simctrl

    [7:23] 
    cat .hg/hgrc

    sergio [7:23 PM] 
    added this Plain Text snippet
    # example repository config (see "hg help config" for more info)
    [paths]
    default = ssh://sergioangulo@ag.neurosim.downstate.edu//u/sergioangulo/site/nrniv/simctrl
    # path aliases to other clones of this repo in URLs or filesystem paths
    Add Comment Click to expand inline 14 lines

    joe [7:24 PM] 
    added and commented on this Plain Text snippet
    repos = OrderedDict()
    repos["/usr/site/nrniv/local"        ] = "hg"
    repos["/usr/site/nrniv/simctrl"       ] = "hg"
    repos["/usr/site/scripts"          ] = "hg"
    repos["/usr/site/config"           ] = "hg"
    repos["/usr/site/site-lisp"         ] = "hg"
    repos["/usr/site/nrniv/local/python/netpyne" ] = "git"
    1 Comment Click to expand inline 7 lines
    There are six, including netpyne

    sergio [7:24 PM] 
    same issue

    joe [7:24 PM] 
    `cd /usr/site/nrniv; rm -r simctrl; hg clone ssh://no.neurosim.downstate.edu//usr/site/nrniv/simcrtl`

    [7:25] 
    And make sure its .hg/hgrc has the right default.

    [7:26] 
    `cd /usr/site/; rm -r scripts; hg clone ssh://no.neurosim.downstate.edu//usr/site/scripts`

    [7:26] 
    Check .hg/hgrc

    sergio [7:26 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% cd /usr/site/nrniv; rm -r simctrl; hg clone ssh://no.neurosim.downstate.edu//usr/site/nrniv/simcrtl
    remote: abort: there is no Mercurial repository here (.hg not found)!
    abort: no suitable response from remote hg!
    Add Comment

    sergio [7:26 PM] 
    I saw the typo

    joe [7:26 PM] 
    sorry should be simctrl not

    sergio [7:27 PM] 
    got iy

    [7:27] 
    it

    joe [7:27 PM] 
    `cd /usr/site/; rm -r config; hg clone ssh://no.neurosim.downstate.edu//usr/site/config`

    [7:28] 
    aaand `cd /usr/site/; rm -r site-lisp; hg clone ssh://no.neurosim.downstate.edu//usr/site/site-lisp`

    sergio [7:28 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% cd simctrl
    Sergios-MacBook-2% cat .hg/hgrc
    # example repository config (see 'hg help config' for more info)
    [paths]
    default = ssh://no.neurosim.downstate.edu//usr/site/nrniv/simctrl
    # path aliases to other clones of this repo in URLs or filesystem paths
    # (see 'hg help config.paths' for more info)
    #
    # default-push = ssh://jdoe@example.net/hg/jdoes-fork
    # my-fork   = ssh://jdoe@example.net/hg/jdoes-fork
    # my-clone   = /home/jdoe/jdoes-clone
    [ui]
    # name and email (local to this repository, optional), e.g.
    # username = Jane Doe <jdoe@example.com>
    Add Comment Collapse

    joe [7:29 PM] 
    Let me know when you’ve got those done, and we’ll check your Netpyne.

    sergio [7:29 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% cat .hg/hgrc
    # example repository config (see 'hg help config' for more info)
    [paths]
    default = ssh://no.neurosim.downstate.edu//usr/site/config
    # path aliases to other clones of this repo in URLs or filesystem paths
    # (see 'hg help config.paths' for more info)
    #
    # default-push = ssh://jdoe@example.net/hg/jdoes-fork
    # my-fork   = ssh://jdoe@example.net/hg/jdoes-fork
    # my-clone   = /home/jdoe/jdoes-clone
    [ui]
    # name and email (local to this repository, optional), e.g.
    # username = Jane Doe <jdoe@example.com>
    Add Comment Collapse

    sergio [7:30 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% cat .hg/hgrc
    # example repository config (see 'hg help config' for more info)
    [paths]
    default = ssh://no.neurosim.downstate.edu//usr/site/site-lisp
    Add Comment Click to expand inline 15 lines

    sergio [7:30 PM] 
    perfect

    joe [7:31 PM] 
    Good.

    sergio [7:31 PM] 
    all of them working

    joe [7:31 PM] 
    Now to check Netpyne.

    [7:32] 
    `cd /usr/site/nrniv/local/python/netpyne; git fetch; git status`

    sergio [7:32 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% cd /usr/site/nrniv/local/python/netpyne; git fetch; git status
    /usr/site/nrniv/local/python/netpyne: No such file or directory.
    fatal: Not a git repository (or any of the parent directories): .git
    fatal: Not a git repository (or any of the parent directories): .git
    Add Comment

    sergio [7:32 PM] 
    I installed netpyne with pip install

    joe [7:33 PM] 
    Huh.  I think you’re better off using the development branch of Netpyne, so that we get Salva’s bug fixes right away…

    sergio [7:33 PM] 
    perfect

    joe [7:34 PM] 
    So maybe uninstall from pip first?  Let me Google…

    [7:34] 
    Yeah, should just be `pip uninstall netpyne`

    sergio [7:35 PM] 
    done

    [7:35] 
    it was easy that one

    joe [7:35 PM] 
    Whew! :slightly_smiling_face:

    [7:36] 
    Okay, now `cd /usr/site/nrniv/local/python/; git clone https://github.com/Neurosim-lab/netpyne.git; cd netpyne; git checkout development; git branch`

    sergio [7:38 PM] 
    nice

    [7:38] 
    Branch development set up to track remote branch development from origin.
    Switched to a new branch ‘development’
    [asterisk] development
      master

    joe [7:38 PM] 
    Perfect!

    [7:39] 
    Okay, so now let’s get you the means to check Nsim status and update.

    [7:39] 
    Change to your home directory and open .tcshrc in an editor.

    [7:39] 
    Add the following lines:

    joe [7:39 PM] 
    added this Shell snippet
    alias nsimstatus 'python /usr/site/nrniv/local/python/nsimrepos.py'
    alias nsimupdate 'python /usr/site/nrniv/local/python/nsimrepos.py update'
    Add Comment

    joe [7:39 PM] 
    Save, close, and restart Terminal.

    [7:40] 
    Then reopen Terminal and enter `nsimstatus` and copy me output.

    sergio [7:43 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% nsimstatus
    ===============================================================================
    Checking status of Hg repo: /usr/site/nrniv/local
    ===============================================================================
    Output from 'hg status':
    Output from 'hg incoming':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/nrniv/local
    searching for changes
    no changes found
    Output from 'hg outgoing':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/nrniv/local
    searching for changes
    no changes found
    ===============================================================================
    Checking status of Hg repo: /usr/site/nrniv/simctrl
    ===============================================================================
    Output from 'hg status':
    Output from 'hg incoming':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/nrniv/simctrl
    searching for changes
    no changes found
    Output from 'hg outgoing':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/nrniv/simctrl
    searching for changes
    no changes found
    ===============================================================================
    Checking status of Hg repo: /usr/site/scripts
    ===============================================================================
    Output from 'hg status':
    M mkmod
    Output from 'hg incoming':
    comparing with ssh://sergioangulo@ag.neurosim.downstate.edu//u/sergioangulo/site/scripts
    searching for changes
    no changes found
    Output from 'hg outgoing':
    comparing with ssh://sergioangulo@ag.neurosim.downstate.edu//u/sergioangulo/site/scripts
    searching for changes
    no changes found
    ===============================================================================
    Checking status of Hg repo: /usr/site/config
    ===============================================================================
    Output from 'hg status':
    Output from 'hg incoming':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/config
    searching for changes
    no changes found
    Output from 'hg outgoing':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/config
    searching for changes
    no changes found
    ===============================================================================
    Checking status of Hg repo: /usr/site/site-lisp
    ===============================================================================
    Output from 'hg status':
    Output from 'hg incoming':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/site-lisp
    searching for changes
    no changes found
    Output from 'hg outgoing':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/site-lisp
    searching for changes
    no changes found
    ===============================================================================
    Checking status of Git repo: /usr/site/nrniv/local/python/netpyne
    ===============================================================================
    Output from 'git fetch; git status':
    On branch development
    Your branch is up-to-date with 'origin/development'.
    nothing to commit, working tree clean
    Add Comment Collapse

    sergio [7:43 PM] 
    I need to modify scripts

    joe [7:44 PM] 
    I just saw that too.

    [7:44] 
    `cd /usr/site/; rm -r scripts; hg clone ssh://no.neurosim.downstate.edu//usr/site/scripts`

    [7:45] 
    Then do nsimstatus again and make sure it’s good.

    [7:46] 
    I use `nsimstatus` about once a week to make sure I’m up to date.  If I’m not, I then do `nsimupdate`

    sergio [7:47 PM] 
    nice

    sergio [7:47 PM] 
    added this Plain Text snippet
    Sergios-MacBook-2% nsimstatus
    ===============================================================================
    Checking status of Hg repo: /usr/site/nrniv/local
    ===============================================================================
    Output from 'hg status':
    Output from 'hg incoming':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/nrniv/local
    searching for changes
    no changes found
    Output from 'hg outgoing':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/nrniv/local
    searching for changes
    no changes found
    ===============================================================================
    Checking status of Hg repo: /usr/site/nrniv/simctrl
    ===============================================================================
    Output from 'hg status':
    Output from 'hg incoming':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/nrniv/simctrl
    searching for changes
    no changes found
    Output from 'hg outgoing':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/nrniv/simctrl
    searching for changes
    no changes found
    ===============================================================================
    Checking status of Hg repo: /usr/site/scripts
    ===============================================================================
    Output from 'hg status':
    Output from 'hg incoming':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/scripts
    searching for changes
    no changes found
    Output from 'hg outgoing':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/scripts
    searching for changes
    no changes found
    ===============================================================================
    Checking status of Hg repo: /usr/site/config
    ===============================================================================
    Output from 'hg status':
    Output from 'hg incoming':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/config
    searching for changes
    no changes found
    Output from 'hg outgoing':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/config
    searching for changes
    no changes found
    ===============================================================================
    Checking status of Hg repo: /usr/site/site-lisp
    ===============================================================================
    Output from 'hg status':
    Output from 'hg incoming':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/site-lisp
    searching for changes
    no changes found
    Output from 'hg outgoing':
    comparing with ssh://no.neurosim.downstate.edu//usr/site/site-lisp
    searching for changes
    no changes found
    ===============================================================================
    Checking status of Git repo: /usr/site/nrniv/local/python/netpyne
    ===============================================================================
    Output from 'git fetch; git status':
    On branch development
    Your branch is up-to-date with 'origin/development'.
    nothing to commit, working tree clean
    Add Comment Collapse

    sergio [7:47 PM] 
    I didn’t know about it

    joe [7:48 PM] 
    I just added it a couple weeks ago, because my stuff was always getting out of date.  :slightly_smiling_face:

    sergio [7:48 PM] 
    I will updated every week

    [7:48] 
    nice one

    [7:49] 
    that was your post!

    [7:49] 
    and bill commented on it

    joe [7:49 PM] 
    Cool, so now we’re on the same page.

    [7:49] 
    Let’s check your Netpyne.

    [7:49] 
    ipython

    [7:49] 
    import netpyne

    [7:50] 
    netpyne.__file__

    [7:51] 
    Should be:

    [7:51] 
    In [1]: import netpyne

    In [2]: netpyne.__file__
    Out[2]: ‘/usr/site/nrniv/local/python/netpyne/netpyne/__init__.pyc’

    sergio [7:51 PM] 
    added this Plain Text snippet
    In [1]: import netpyne
    ---------------------------------------------------------------------------
    ImportError                Traceback (most recent call last)
    <ipython-input-1-87232e4577cf> in <module>()
    ----> 1 import netpyne
    ImportError: No module named netpyne
    Add Comment Collapse

    joe [7:52 PM] 
    Is it still in your Python path?

    joe [7:52 PM] 
    added this Plain Text snippet
    graham-mac% echo $PYTHONPATH
    /usr/site/nrniv/local/python/netpyne:/Applications/NEURON-7.5/nrn/lib/python/:/usr/site/nrniv/local/python:/usr/site/../arch/nrn/share/python/lib/python:/Users/graham/anaconda/bin:/Users/graham/anaconda/lib/python2.7:/usr/lib/python2.7
    graham-mac% 
    Add Comment

    sergio [7:53 PM] 
    maybe becuase I did pip install, I didn’t need the path

    [7:53] 
    let me check

    sergio [7:53 PM] 
    added this Plain Text snippet
    /Users/sergioangulo/anaconda/lib/python2.7:/usr/lib/python2.7:/usr/site/../arch/nrn/share/python/lib/python
    Add Comment

    joe [7:54 PM] 
    Yeah, so we need to add it.  One sec…

    [7:56] 
    Add this line to your .tcshrc file:

    joe [7:56 PM] 
    added this C snippet
    setenv PYTHONPATH /usr/site/nrniv/local/python/netpyne:$PYTHONPATH
    Add Comment

    joe [7:56 PM] 
    Then reopen Terminal and try importing Netpyne again.

    sergio [7:57 PM] 
    added this Plain Text snippet
    In [1]: import netpyne
    In [2]: netpyne.__file__
    Out[2]: '/usr/site/nrniv/local/python/netpyne/netpyne/__init__.py'
    Add Comment

    joe [7:57 PM] 
    Et voila!

    sergio [7:57 PM] 
    perfect!

    joe [7:58 PM] 
    So now, theoretically, we should have the same setup.

    sergio [7:58 PM] 
    that was super helpful

    [7:58] 
    thanks joe!

    joe [7:59 PM] 
    No problem.

    [7:59] 
    I think I’m done working for the day.

    [7:59] 
    Gonna hit the gym.

    [7:59] 
    We can work on getting batches going tomorrow.

    sergio [7:59 PM] 
    sounds great!

    [7:59] 
    thanks a lot again!

    joe [8:00 PM] 
    Buenas noches.  Hasta manana!

    new messages
    sergio [8:00 PM] 
    hasta mañana!

** Done for the day.


* 2017-06-27 -- Back in the batching business

** Plan

Create cell models, one per major change
Get back useful old code
Ensure it all runs 
Switch to DMS NMDA synapse
Work on article draft

** Cell models

SPI6 is original cell model
Created eee6, same as SPI6 but with 200um basal dendrite length
Created eee7, same as eee6 but with two basal dendrites
Will create eee7us, same as eee7 but with dendritic spines with uniform density
Will create eee7ps, same as eee7 but with physiological spine density

** f-I relationships

I want to run a batch which generates the data necessary for f-I relationship plotting

Getting stim levels from experimental data:
    
    graham-mac% cd /u/graham/projects/eee/data/
    graham-mac% ipython
    In [1]: import numpy as np
    In [2]: np.load("BS0284_lstimamp.npy")
    Out[2]: 
    array([-0.15, -0.1 ,  0.05,  0.1 ,  0.15,  0.2 ,  0.25,  0.3 ,  0.35,
            0.4 ,  0.45,  0.5 ,  0.55,  0.6 ])

Stim levels:
[-0.15, -0.1, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6]

Created new folder: batch_fi

Need to symlink batch stuff into new dir:
    ln -s /path/to/original /path/to/symlink

    ln -s /u/graham/projects/eee/sim/batches/runmybatches /u/graham/projects/eee/sim/batch_fi/runmybatches
    ln -s /u/graham/projects/eee/sim/batches/batch_analysis.py /u/graham/projects/eee/sim/batch_fi/batch_analysis.py
    ln -s /u/graham/projects/eee/sim/batches/batch_utils.py /u/graham/projects/eee/sim/batch_fi/batch_utils.py
    ln -s /u/graham/projects/eee/sim/batches/batch_init.py /u/graham/projects/eee/sim/batch_fi/batch_init.py

Also need to symlink the mod directory:
ln -s /u/graham/projects/eee/sim/mod/x86_64/ /u/graham/projects/eee/sim/batch_fi/x86_64

And need copies of cfg.py, netParams.py, and my_batches.py.

Now modifying those.

** Problems running batches

Solution:
https://docs.google.com/document/d/1OFwB2tP_qtOJsgZ1aPgD5iGYVBWHqkAHfFC4VAS12_M/edit#

I added the following to my .tcshrc file:
    ### Added by Joe Graham 2017/06/27
    setenv PYTHONHOME /Users/graham/anaconda/
    setenv LD_LIBRARY_PATH /Users/graham/anaconda/lib:$LD_LIBRARY_PATH
    setenv PYTHONPATH /Applications/NEURON-7.5/nrn/lib/python:$PYTHONPATH

Chat log:

    joe [10:50 AM] 
    I’m trying to run a batch, but having trouble debugging…  Salva always recommends executing files in the order `netParams.py`, `batch_init.py`, and then `my_batches.py` in order to debug.  My problem is they all execute without an error, but I don’t get any output from `my_batches.py`…  Suggestions?

    billl [10:51 AM] 
    sim.create() to make sure you get the network you wanted

    [10:52] 
    then after do sim.run() make sure  sorry sim.runSim() i think -- to make sure that the sim completed -- can check h.t and a bunch of voltages

    [10:52] 
    then set up a record from outside of netpyne to simply record a partial raster or a couple of voltages since then prob just a record problem

    joe [10:52 AM] 
    Thanks, Bill, I’ll try that out.

    salvadord [10:56 AM] 
    so single sim via batch_init.py generates output?

    [10:57] 
    when you run my_batches does the sim complete (ie. you get to “plotting raster”, “saving data …” etc ?

    joe [11:00 AM] 
    Single sim generates output.  Let me run again to see how whole batch completes.

    billl [11:01 AM] 
    oh i was at wrong scale - i was trying to debug the single sim -- sorry

    joe [11:02 AM] 
    I never see “plotting raster”, etc.  Just a lot of this `Job in rank id:  0.0
    nrniv batch_init.py simConfig=batch_data/dendNa_stimamp/dendNa_stimamp_4_9_cfg.json netParams=batch_data/dendNa_stimamp/dendNa_stimamp_netParams.py` and then it ends without an error…

    salvadord [11:04 AM] 
    ok so you can actually run that command manually to see what error is — `nrniv batch_init.py simConfig=bat ... `

    [11:05] 
    (during batch the error is probably caught in try, except)

    joe [11:07 AM] 
    Weird.  When I run `nrniv batch_init.py` I get an import error for matplotlib…

    joe [11:07 AM] 
    added this Perl snippet
    Traceback (most recent call last):
     File "batch_init.py", line 13, in <module>
      from netpyne import sim
     File "/usr/site/nrniv/local/python/netpyne/netpyne/sim.py", line 20, in <module>
      import analysis
     File "/usr/site/nrniv/local/python/netpyne/netpyne/analysis.py", line 12, in <module>
      import matplotlib.pyplot as plt
    ImportError: No module named matplotlib.pyplot
    Add Comment Collapse

    joe [11:08 AM] 
    Should there be more to the command?  I’m not sure what you meant by `simConfig=bat ...`

    billl [11:08 AM] 
    nrniv -python

    joe [11:09 AM] 
    Tried it with -python.  Same error.

    billl [11:09 AM] 
    looks like a PYTHONPATH problem

    [11:09] 
    how about with python?

    joe [11:11 AM] 
    No, when I just open Python or iPython matplotlib imports just fine…

    billl [11:11 AM] 
    so run using python

    [11:11] 
    instead of nrniv

    joe [11:13 AM] 
    That works fine.

    joe [11:13 AM] 
    added this Perl snippet
    Last login: Tue Jun 27 11:10:02 on ttys010
    graham-mac% eee
    cd /u/graham/projects/eee/sim
    graham-mac% cd batch_fi/
    graham-mac% 
    graham-mac% ipython -i batch_init.py
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul 2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.
    ​
    IPython 5.1.0 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    ​
    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod NMDA.mod GABAA.mod GABAB.mod
    ​
    Creating network of 1 cell populations on 1 hosts...
     Number of cells on node 0: 1 
     Done; cell creation time = 0.00 s.
    Making connections...
     Number of connections on node 0: 0 
     Done; cell connection time = 0.00 s.
    Adding stims...
     Number of stims on node 0: 3 
     Done; cell stims creation time = 0.00 s.
    Recording 2 traces of 2 types on node 0
    ​
    Running simulation for 1000.0 ms...
    0.1 s
    0.2 s
    0.3 s
    0.4 s
    0.5 s
    0.6 s
    0.7 s
    0.8 s
    0.9 s
     Done; run time = 0.16 s; real-time ratio: 6.14.
    ​
    Gathering data...
     Done; gather time = 0.00 s.
    ​
    Analyzing...
     Cells: 1
     Connections: 1 (1.00 per cell)
     Synaptic contacts: 2 (2.00 per cell)
     Spikes: 0 (0.00 Hz)
      PT5B : 0.000 Hz
     Simulated time: 1.0 s; 1 workers
     Run time: 0.16 s
    Saving output as batch_data/fI_sims.json ... 
    Finished saving!
     Done; saving time = 0.16 s.
    Plotting recorded cell traces ...
     Done; plotting time = 0.37 s
    ​
    Total time = 0.70 s
    ​
    In [1]: 
    Add Comment Collapse

    billl [11:13 AM] 
    ok so ... uhmm what's the problem?

    joe [11:13 AM] 
    There’s no output when I run my_batches.py

    [11:13] 
    And no error message

    billl [11:13 AM] 
    i was suggesting you run with python not nrniv

    [11:14] 
    and you said 'that works fine'  but ok you dind't get what i was suggesting

    joe [11:14 AM] 
    I thought I ran with python (snippet above): ipython -i batch_init.py

    [11:15] 
    What are you suggesting?

    billl [11:16 AM] 
    ok it said nrniv above;  also would suggest avoid ipython when doing a batch

    [11:16] 
    has it's own set of wrappers etc

    [11:16] 
    sorry hadn't read the snippet ; just reading the convo

    salvadord [11:18 AM] 
    ah so seems some issue with nrniv not being properly configured with pythonpath — what machine u running on?

    joe [11:19 AM] 
    Running locally.

    [11:19] 
    Back in 15 and I’ll run on Neurosim.

    billl [11:22 AM] 
    locally!! -- on a mac!!  oh i see

    salvadord [11:31 AM] 
    that explains everything :slightly_smiling_face:

    [11:32] 
    joe, works for me locally, u can try fixing your paths — I added some notes on paths here: https://docs.google.com/document/d/1OFwB2tP_qtOJsgZ1aPgD5iGYVBWHqkAHfFC4VAS12_M/edit#heading=h.1xoy9zi1ayg3

    joe [11:35 AM] 
    Thanks Salva, I’ll try that.

    [11:35] 
    On zn I get that weird erev error that seems to pop up occasionally…

    joe [11:35 AM] 
    added this Perl snippet
    zn% python netParams.py
    NEURON -- VERSION 7.5 master (e3f1629+) 2017-06-13
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    ​
    Traceback (most recent call last):
     File "netParams.py", line 30, in <module>
      cellRule = netParams.importCellParams(label='SPI6', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName='../cells/SPI6.py', cellName='SPI6')
     File "/usr/site/nrniv/local/python/netpyne/netpyne/specs.py", line 330, in importCellParams
      secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
     File "/usr/site/nrniv/local/python/netpyne/netpyne/utils.py", line 169, in importCell
      exec('import ' + moduleName + ' as tempModule') in globals(), locals() # import module dynamically
     File "<string>", line 1, in <module>
     File "../cells/SPI6.py", line 35, in <module>
      h.erev_ih = -37.0 # global
    LookupError: 'erev_ih' is not a defined hoc variable name.
    Add Comment Collapse

    billl [11:36 AM] 
    nrnivmodl done?

    salvadord [11:37 AM] 
    do u also get it if you just run the SPI6.py cell separately?

    [11:37] 
    also make sure symlink to x86_64 from … everywhere!

    billl [11:38 AM] 
    ln -s mod/x86_64

    [11:38] 
    from the ..

    [11:38] 
    also something mkmod supposed to do

    [11:38] 
    from mod/..

    joe [11:39 AM] 
    Forgot to compile on zn.  That solves erev problem.  :flushed:

    billl [11:39 AM] 
    shouldn't have to copmile on zn since all NFS

    [11:39] 
    but if didn't compile at all then ..

** Back to batching f-I relationships

It works!

cd /u/graham/projects/eee/sim/batch_fi
./runmybatches

Need to adjust stim amplitudes.

Will try the same as original experimental values:
[-0.15, -0.1, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6]

Looks like good levels.  Negative values not necessary for fI.


* 2017-06-28 -- Spine distributions

** TODO

Finish cell models
Get back useful old code
Ensure it all runs 
Switch to DMS NMDA synapse
Work on article draft

** Added cfg.checkErrors = True

salvadord [6:56 AM] 
@joe @sergio @penny @billl @ahseidenstein @rtekin @jchen.6727 @btessler - can you help us debug/improve the error checking in netpyne by setting `cfg.checkErrors = True` and letting us know if error msgs are useful, missing, wrong, not clear, etc ? thanks!

** Cell models

SPI6 is original cell model
Created eee6, same as SPI6 but with 200um basal dendrite length
Created eee7, same as eee6 but with two basal dendrites
Will create eee7us, same as eee7 but with dendritic spines with uniform density
Will create eee7ps, same as eee7 but with physiological spine density

*** Need to know how many spines

Will have same number in uniform (eee7us) and physiological (eee7ps) spine distributions.

Digitization of Srdjan's spine distribution figure.
20170524_095412.png

Original article:
https://paperpile.com/view/52f45757-b65d-07fb-90e2-230a3f02a9c7

Column 1 is microns from soma
Column 2 is number of spines per 10 um dendrite length

Data points cleaned up:
10   0.982
20   4.677
30   10.91
40   14.72
50   18.24
60   18.76
70   19.05
80   17.15
90   17.38
100  16.17
110  15.36
120  15.07
130  15.24
140  13.97
150  12.53
160  12.64
170  11.84
180  9.988
190  11.43

For Python purposes:

distance = range(10, 200, 10)
numspines = [0.982, 4.677, 10.91, 14.72, 18.24, 18.76, 19.05, 17.15, 17.38, 16.17, 15.36, 15.07, 15.24, 13.97, 12.53, 12.64, 11.84, 9.988, 11.43]

Number of spines
sum: 256.1
mean density (spines/um): 1.35
mean spacing (um): 0.74

Will use 255 spines (to have an odd number as is good for NEURON)

** Creating cell models with spines

Created eee7us.py as a copy of eee7.py

*** Adding spine parameters to cell model:
  # spine properties 
    spineNum  = 255   # number of spines to add
    spineLocs = []    # array of spine locations (0 to 1)
    headL     = 1.0 
    headDiam  = 1.0
    neckL     = 1.0
    neckDiam  = 0.2
    necknseg  = 1
    spineRM   = 17000.0
    spineRa   = 105.0
    spineCap  = 1.0

*** Need two spineLocs arrays:
1) uniform distribution
np.linspace(0.0, 1.0, num=spineNum)

2) given distribution

spineDist = [0.982, 4.677, 10.91, 14.72, 18.24, 18.76, 19.05, 17.15, 17.38, 16.17, 15.36, 15.07, 15.24, 13.97, 12.53, 12.64, 11.84, 9.988, 11.43]

To get the number of spines in each 1/len(spineDist) long section of dendrite:
spinenums = np.round(spineNum * np.array(spineDist)/sum(spineDist))
spinenums = [  1.,   5.,  11.,  15.,  18.,  19.,  19.,  17.,  17.,  16.,  15.,
        15.,  15.,  14.,  12.,  13.,  12.,  10.,  11.]

Then we want to space that number of spines evenly with each each section:

np.linspace(start, stop, num=50, endpoint=False)

numsecs = len(spinenums)
spineLocs = []
for ind, spinenum in enumerate(spinenums):
    print()
    print("ind = " + str(ind))
    start = ind * (1./numsecs)
    stop = (ind + 1) * (1./numsecs)
    num = spinenums[ind]
    print start, stop, num
    spineLocs.extend(list(np.linspace(start, stop, num=num, endpoint=False)))

That works!

SpineLocs histogram:
file:gif/20170628_184750.png

Make it a function:

def getspineLocs(spinenums):
    if type(spinenums) is int:
        spinenums = [spinenums]
    numsecs = len(spinenums)
    spineLocs = []
    for ind, spinenum in enumerate(spinenums):
        start = ind * (1./numsecs)
        stop = (ind + 1) * (1./numsecs)
        num = spinenums[ind]
        spineLocs.extend(list(np.linspace(start, stop, num=num, endpoint=False)))
    return(spineLocs)


*** Need methods for neuron objects:

To add spines:

  def add_spines(self):
    self.necks = []
    self.heads = []
    self.spines = []
    for spineind in range(spineNum):
        self.add_comp('neck_' + str(spineind))
        self.add_comp('head_' + str(spineind))
        neck = getattr(self, 'neck_' + str(spineind))
        head = getattr(self, 'head_' + str(spineind))
        self.necks.append(neck)
        self.heads.append(head)
        self.spines.append([neck, head])
        neck.L    = neckL
        neck.diam = neckDiam
        neck.nseg = necknseg
        head.L    = headL
        head.diam = headDiam
        neck.connect(self.Bdend1, spineLocs[spineind], 0.0)
        head.connect(neck, 1.0, 0.0)

To set spine properties:

  def set_spine_props(self):
    for sec in self.necks: sec.cm = spineCap
    for sec in self.heads: sec.cm = spineCap
    for sec in self.necks: sec.g_pas = 1.0/spineRM
    for sec in self.heads: sec.g_pas = 1.0/spineRM
    for sec in self.necks: sec.Ra = spineRa
    for sec in self.heads: sec.Ra = spineRa


* 2017-06-29 -- Spine distributions

** TODO

Finish cell models
Code repeatable analysis
Retrieve useful batch params
Switch to DMS NMDA synapse
Work on article draft

** Improving getspineLocs()

Want it to be able to take in an arbitrary distribution, normalize it, and then 
return appropriate spineLocs

my_dist = [0, 1, 2, 3, 0]  # branch of whatever length, number of spines in 5 bins
my_dist = np.array(my_dist).astype(float)
norm_dist = np.array(my_dist)/sum(my_dist)
print(norm_dist)

[ 0.          0.16666667  0.33333333  0.5         0.        ]

If we want to distribute 100 spines in those 5 bins by this distribution:

numspines = 100
my_dist = [0, 1, 2, 3, 0]  # branch of whatever length, number of spines in 5 bins
my_dist = np.array(my_dist).astype(float)
norm_dist = np.array(my_dist)/sum(my_dist)
spine_dist = np.round(numspines * norm_dist)
print(sum(spine_dist))
print(spine_dist)

Combine that with the function from yesterday to get:

def getspineLocs(numspines, spinedist=[1]):
    numsecs = len(spinedist)
    spineLocs = []

    my_dist = np.array(spinedist).astype(float)
    norm_dist = np.array(my_dist)/sum(my_dist)
    spines_dist = np.round(numspines * norm_dist)

    for ind, spinenum in enumerate(spines_dist):
        start = ind * (1./numsecs)
        stop = (ind + 1) * (1./numsecs)
        num = spines_dist[ind]
        spineLocs.extend(list(np.linspace(start, stop, num=num, endpoint=False)))
    
    return(spineLocs)

** Make sure cells are all functional

Trying to use all cells in single netParams.py so each gets simulated
But only Cell 0 is showing up in plots
Problem may be cell numbering...

Changing IDs in cells:

SPI6:   0 (no change)
eee6:   1
eee7:   2
eee7us: 3
eee7ps: 4

Running batch_fi/runmybatches

Will run again with oneFigPer set to 'trace' instead of 'cell'

cfg.analysis['plotTraces'] = {'include': ['PT5B'], 'oneFigPer': 'trace', 'saveFig': True, 
                              'showFig': False, 'figSize': (10,8), 'timeRange': [0,cfg.duration]}


* 2017-07-06 -- Batches and analysis

** TODO

Code repeatable analysis for cells
Retrieve useful batch params
Switch to DMS NMDA synapse
Work on article draft

** Running batches

I was trying to have sim.py run all batches (if needed) and then do the analysis.

But, even though the output of the batches is fine, for some reason the program
hangs in Python afterwards, never exits.

Looked into sys.exit() -- doesn't work

Looked into os._exit() -- should work but doesn't

I'll have to separate the batch generation and analysis in sim.py.

Ugh.  After running one my_batches.py file, the terminal gets stuck in Python 
and no way of exiting seems to work.  Means I can't automatically generate all
batch sims -- will need to generate each set of batches manually


** Repeatable analysis

For each cell, we want:

- Series of stim pulses --> Frequency-current relationship
- Calculate rheobase
- Single AP --> Calculate backpropagating action potential (bAP) amplitude and 
                delay vs. distance from soma
- Increasing glutamate stim --> plateau figure
- Variety of parameter values vs glutamate stim amplitude:
-- NMDA decay time constant
-- Glutamate stim location
-- Spine neck resistance

*** fI relationship


* 2017-07-10 -- Batching multiple cells, or trying to

** TODO

Code repeatable analysis for cells
Retrieve useful batch params
Switch to DMS NMDA synapse
Work on article draft
Fix alignment problem in plotrelation2
Improving analysis code to handle any number of params

** Batch analysis

*** Stim pulse series --> fI relationship

First step: plot voltage traces from a batch

Getting an error:

    In [11]: batch_analysis.plot_vtraces('dendNa_stimamp')
    Reading data...
    0 files missing
    ---------------------------------------------------------------------------
    KeyError                                  Traceback (most recent call last)
    <ipython-input-11-25a6aa93839e> in <module>()
    ----> 1 batch_analysis.plot_vtraces('dendNa_stimamp')

    /u/graham/projects/eee/sim/batches/batch_fi/batch_analysis.py in plot_vtraces(batchname, secs, par1label, par2label, save, outputdir)
        477 
        478     for ind, sec in enumerate(secs):
    --> 479         output = get_vtraces(params, data, section=sec)
        480         if ind == 0:
        481             fig1 = plotrelation2(par1label=par1label, par2label=par2label, swapaxes=True, **output)

    /u/graham/projects/eee/sim/batches/batch_fi/batch_analysis.py in get_vtraces(params, data, cell, section, stable)
        192     for key, datum in data.iteritems():
        193         grouped = False
    --> 194         cellLabel = datum['simData'][seckey].keys()[0]
        195         vtrace = datum['simData'][seckey][cellLabel]
        196         if not timesteps:

    KeyError: u'V_V_Bdend'

Problem seems to be in plot_vtraces, line 475:
    secs = [d for d in simdata if str(d[0:2]) == "V_"]

The name of each sec includes "V_".  Need to strip that from the sec name.

This strips the "V_" from the sec name:
    secs = [d[2:] for d in simdata if str(d[0:2]) == "V_"]

New problem:

    graham-mac% eee ; ipython -i ieee.py
    cd /u/graham/projects/eee/sim
    In [1]: cd batches/batch_fi/
    /u/graham/projects/eee/sim/batches/batch_fi
    In [2]: batch_analysis.plot_vtraces("dendNa_stimamp")
    Reading data...
    0 files missing

    ---------------------------------------------------------------------------
    IndexError                                Traceback (most recent call last)
    <ipython-input-2-3cf3f09a61c9> in <module>()
    ----> 1 batch_analysis.plot_vtraces("dendNa_stimamp")

    /u/graham/projects/eee/sim/batches/batch_analysis.py in plot_vtraces(batchname, secs, par1label, par2label, save, outputdir)
        482 
        483     for ind, sec in enumerate(secs):
    --> 484         output = get_vtraces(params, data, section=sec)
        485         if ind == 0:
        486             fig1 = plotrelation2(par1label=par1label, par2label=par2label, swapaxes=True, **output)

    /u/graham/projects/eee/sim/batches/batch_analysis.py in get_vtraces(params, data, cell, section, stable)
        197         print("############################################################")
        198 
    --> 199         cellLabel = datum['simData'][seckey].keys()[0]
        200         vtrace = datum['simData'][seckey][cellLabel]
        201         if not timesteps:

    IndexError: list index out of range

    In [3]: params, data = batch_utils.load_batch('dendNa_stimamp')
    Reading data...
    0 files missing

    In [4]: datum = data[data.keys()[0]]

    In [5]: datum.keys()
    Out[5]: [u'netpyne_version', u'net', u'simConfig', u'simData', 'paramValues']

    In [6]: datum['simData'].keys()
    Out[6]: 
    [u'spkt',
     u'avgRate',
     u'spkid',
     u'V_soma',
     u'V_Bdend2',
     u'V_Bdend1',
     u'V_Bdend',
     u'popRates',
     u't']

    In [7]: type(datum['simData']['V_soma'])
    Out[7]: collections.OrderedDict

    In [8]: datum['simData']['V_soma'].keys()
    Out[8]: [u'cell_0']

    In [9]: datum['simData']['V_Bdend'].keys()
    Out[9]: [u'cell_0']

    In [10]: datum['simData']['V_Bdend1'].keys()
    Out[10]: []

The problem seems to be that simData will include V_secname even if there is no
cell with that sec.  So, I need to exclude sections with no voltage traces from
plot_vtraces.

Fixing batch_analysis.plot_vtraces:

    sim_data = data[data.keys()[0]]['simData']
    simdata_keys = data[data.keys()[0]]['simData'].keys()
    secs_all = [d for d in simdata_keys if str(d[0:2]) == "V_"]
    secs = [sec[2:] for sec in secs_all if len(sim_data[sec].keys()) > 0]

Now it works properly.

There is one minor problem with the plot: 
file:gif/20170710_115048.png

The x-alignment of the bottom row of plots is different from the other rows...

The problem seems to be the "stable" option in get_vtraces...  When I set
stable = None, the alignment is fine.

I'll add this to my TODO list and look at it later.  I probably should have the
plotting function handle clipping the traces instead of the analysis.

** Back to plotting

For each cell, we want:

- Series of stim pulses --> Frequency-current relationship
- Calculate rheobase
- Single AP --> Calculate backpropagating action potential (bAP) amplitude and 
                delay vs. distance from soma
- Increasing glutamate stim --> plateau figure
- Variety of parameter values vs glutamate stim amplitude:
-- NMDA decay time constant
-- Glutamate stim location
-- Spine neck resistance

*** fI relationship

Original experimental values of stim amp:
[-0.15, -0.1, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6]

I'll leave off the negatives:
[0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6]

First to generate a batch of sims in batch_fi/my_batches.py:

    # Varying current clamp amplitude for fI calculation
    batch = {}
    batch["label"] = "fi_curve"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[("IClamp1", "amp")] = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6]
    batch["params"] = params
    batches[batch["label"]] = batch

Getting an error because my code wants there to be two parameters...

    In [7]: output = batch_analysis.meas_freq(params, data)
    ---------------------------------------------------------------------------
    IndexError                                Traceback (most recent call last)
    <ipython-input-7-55e415c5fcfd> in <module>()
    ----> 1 output = batch_analysis.meas_freq(params, data)

    /u/graham/projects/eee/sim/batches/batch_analysis.pyc in meas_freq(params, data)
        139     (number of spikes - 1) / (time of last spike - time of first spike)"""
        140     p1vals = params[0]['values']
    --> 141     p2vals = params[1]['values']
        142     p1valsdic = {val: i for i,val in enumerate(p1vals)}
        143     p2valsdic = {val: i for i,val in enumerate(p2vals)}

    IndexError: list index out of range

Will add improving analysis code to handle any number of params to TODO list

For now, I'll put in a dummy second parameter with one value.

    # Varying current clamp amplitude for fI calculation
    batch = {}
    batch["label"] = "fi_curve"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[("IClamp1", "amp")] = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6]
    params[('NetStim1', 'weight', 0)] = [0.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Commands to run batches:
    graham-mac% eee; cd batches/batch_fi/; ./runmybatches

To plot voltage traces:
    graham-mac% eee ; ipython -i ieee.py
    In [1]: cd batches/batch_fi
    In [2]: batch_analysis.plot_vtraces('fi_curve', par1label = "i", par2label="")

The file sim.py will eventually run all sims and analysis.  For now it generates 
voltage traces for batch_fi

Now to get the fI relationship, using meas_freq and plotscalar2 from batch_analysis

    In [1]: cd batches/batch_fi/
    In [2]: params, data = batch_utils.load_batch('fi_curve')
    In [3]: output = batch_analysis.meas_freq(params, data)
    In [4]: batch_analysis.plotscalar2(output, params)

That works!

** Now to try to simulate multiple cells at the same time

Adding a cell rule to netParams.py:
    # EEE cell model (6 compartments, Bdend L = 200)
    cellRule = netParams.importCellParams(label='eee6', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName='../cells/eee6.py', cellName='eee6')

Getting an import error:

    In [2]: execfile("netParams.py")
    ---------------------------------------------------------------------------
    ImportError                               Traceback (most recent call last)
    <ipython-input-2-026584e2bad9> in <module>()
    ----> 1 execfile("netParams.py")

    /u/graham/projects/eee/sim/batches/batch_fi/netParams.py in <module>()
         31 
         32 # EEE cell model (6 compartments, Bdend L = 200)
    ---> 33 cellRule = netParams.importCellParams(label='eee6', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName='../cells/eee6.py', cellName='eee6')
         34 
         35 # EEE cell model (7 compartments, extra Bdend)

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
        328             label = int(self._labelid)
        329             self._labelid += 1
    --> 330         secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
        331         cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
        332 

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
        168             sys.path.insert(0, filePath)
        169         moduleName = fileNameOnly.split('.py')[0]  # remove .py to obtain module name
    --> 170         exec('import ' + moduleName + ' as tempModule') in globals(), locals() # import module dynamically
        171         modulePointer = tempModule
        172         if isinstance(cellArgs, dict):

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in <module>()

    ImportError: No module named eee6

Maybe the path to eee6.py is wrong...

That seems to have been the problem.  Added the following to netParams.py:

    # Find path to cells directory
    curpath = os.getcwd()
    while os.path.split(curpath)[1] != "sim":
      curpath = os.path.split(curpath)[0]
    cellpath = os.path.join(curpath, "cells")

And then changed the cell rules to:

    cellRule = netParams.importCellParams(label='eee6', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee6.py'), cellName='eee6')

*** Now using multiple cell rules to import multiple cells

The following is now in batches/batch_fi/netParams.py:

    # Original cell model
    cellRule = netParams.importCellParams(label='SPI6', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'SPI6.py'), cellName='SPI6')

    # EEE cell model (6 compartments, Bdend L = 200)
    cellRule = netParams.importCellParams(label='eee6', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee6.py'), cellName='eee6')

    # EEE cell model (7 compartments, extra Bdend)
    cellRule = netParams.importCellParams(label='eee7', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7.py'), cellName='eee7')

But only one cell seems to get recorded...  

Trying the following modification to cfg.py:

    cfg.analysis['plotTraces'] = {'include': 'all', 'oneFigPer': 'cell', 'saveFig': True, 
                              'showFig': False, 'figSize': (10,8), 'timeRange': [0,cfg.duration]}

Getting an error:

    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]
    Loading file batch_data/fi_curve/fi_curve_2_0_cfg.json ... 
    Loading simConfig...
    Importing netParams from batch_data/fi_curve/fi_curve_netParams.py
    ERROR: StimSourceParams -> 'simType': Invalid parameter specified. Values specified are ['delay', 'amp', 'dur'], while allowed values are: ['del', 'dur', 'amp', 'rate']

Changing 'delay' to 'del' in netParams, but I don't see why this would become a problem now...

    netParams.stimSourceParams[iclabel] = {'type': 'IClamp', 'del': ic['start'], 'dur': ic['dur'], 'amp': ic['amp']}

That got rid of the error, but the sims still aren't running.

Trying putting 'all' in a list: ['all']

It runs now!  But, there is still only plots for one cell.  Will have to ask Salva.


* 2017-07-11 -- Simulating all cells simultaneously

** TODO

Run sims with multiple cells
Code more analysis for cells
Switch to DMS NMDA synapse
Work on article draft
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params
Change all 'Bdend' to 'Bdend1'

** Run sims with multiple cells

*** Asking for help.

Chat log:


    joe [8:07 AM] 
    I’m trying to include multiple cells in netParams so that a single batch will run the same sims on all the different cells, but I’m a bit confused and having trouble getting it to work.

    joe [8:08 AM] 
    added this JavaScript/JSON snippet: netParams.py
    """
    netParams.py 
    Specifications for EEE model using NetPyNE
    ​
    Originally:
    High-level specifications for M1 network model using NetPyNE
    Contributors: salvadordura@gmail.com
    """
    ​
    from netpyne import specs
    import os
    ​
    # Find path to cells directory
    curpath = os.getcwd()
    while os.path.split(curpath)[1] != "sim":
      curpath = os.path.split(curpath)[0]
    cellpath = os.path.join(curpath, "cells")
    ​
    try:
      from __main__ import cfg # import SimConfig object with params from parent module
    except:
      from cfg import cfg # if no simConfig in parent module, import directly from cfg module
    ​
    ###############################################################################
    #
    # NETWORK PARAMETERS
    #
    ###############################################################################
    ​
    netParams = specs.NetParams()  # object of class NetParams to store the network parameters
    ​
    ###############################################################################
    # Cell parameters
    ###############################################################################
    ​
    # Original cell model
    cellRule = netParams.importCellParams(label='SPI6', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'SPI6.py'), cellName='SPI6')
    ​
    # EEE cell model (6 compartments, Bdend L = 200)
    cellRule = netParams.importCellParams(label='eee6', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee6.py'), cellName='eee6')
    ​
    # EEE cell model (7 compartments: extra Bdend)
    cellRule = netParams.importCellParams(label='eee7', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7.py'), cellName='eee7')
    ​
    # EEE cell model with uniform spine distribution
    cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')
    ​
    # EEE cell model with physiological spine distribution
    cellRule = netParams.importCellParams(label='eee7ps', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7ps.py'), cellName='eee7ps')
    ​
    # define section lists
    cellRule['secLists']['alldend'] = ['Bdend', 'Bdend1', 'Bdend2', 'Adend1', 'Adend2', 'Adend3']
    cellRule['secLists']['apicdend'] = ['Adend1', 'Adend2', 'Adend3']
    cellRule['secLists']['basaldend'] = ['Bdend', 'Bdend1', 'Bdend2']
    ​
    for secName,sec in cellRule['secs'].iteritems(): 
      sec['vinit'] = -75.0413649414 # set vinit for all secs
      if secName in cellRule['secLists']['alldend']: 
        sec['mechs']['nax']['gbar'] = cfg.dendNa # set dend Na gmax for all dends
        sec['mechs']['kdr']['gbar'] = cfg.dendK * sec['mechs']['kdr']['gbar'] 
        sec['mechs']['kap']['gbar'] = cfg.dendK * sec['mechs']['kap']['gbar'] 
      if secName in cellRule['secLists']['basaldend']:
        sec["geom"]["Ra"] = cfg.BdendRa
    ​
    ###############################################################################
    # Population parameters
    ###############################################################################
    ​
    netParams.popParams['PT5B'] = {'cellModel': 'HH_reduced', 'cellType': 'PT', 'numCells': 1}
    ​
    ###############################################################################
    # Synaptic mechanism parameters
    ###############################################################################
    ​
    netParams.synMechParams['NMDA'] = {'mod': 'MyExp2SynNMDABB', 'tau1NMDA': cfg.tau1NMDA, 'tau2NMDA': cfg.tau2NMDA, 'e': 0}
    netParams.synMechParams['AMPA'] = {'mod': 'AMPA'}
    ​
    ###############################################################################
    # Current inputs (IClamp)
    ###############################################################################
    ​
    if cfg.addIClamp: 
      for iclabel in [k for k in dir(cfg) if k.startswith('IClamp')]:
        ic = getattr(cfg, iclabel, None) # get dict with params
    ​
        # add stim source
        netParams.stimSourceParams[iclabel] = {'type': 'IClamp', 'del': ic['start'], 'dur': ic['dur'], 'amp': ic['amp']}
        #netParams.stimSourceParams[iclabel] = {'type': 'IClamp', 'delay': ic['start'], 'dur': ic['dur'], 'amp': ic['amp']}
        
        # connect stim source to target
        netParams.stimTargetParams[iclabel+'_'+ic['pop']] = \
          {'source': iclabel, 'conds': {'popLabel': ic['pop']}, 'sec': ic['sec'], 'loc': ic['loc']}
    ​
    ​
    ###############################################################################
    # NetStim inputs
    ###############################################################################
    if cfg.addNetStim:
      for nslabel in [k for k in dir(cfg) if k.startswith('NetStim')]:
        ns = getattr(cfg, nslabel, None)
    ​
        # add stim source
        netParams.stimSourceParams[nslabel] = {'type': 'NetStim', 'start': ns['start'], 'interval': ns['interval'], 'noise': ns['noise'], 'number': ns['number']}
    ​
        # connect stim source to target
        for i in range(len(ns['synMech'])):
          if ns['synMech'][i] == 'AMPA': 
            ns['weight'][i] = ns['weight'][0] * cfg.ratioAMPANMDA
          netParams.stimTargetParams[nslabel+'_'+ns['pop']+'_'+ns['synMech'][i]] = \
            {'source': nslabel, 'conds': {'popLabel': ns['pop']}, 'sec': ns['sec'], 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': ns['weight'][i], 'delay': ns['delay']}
    ​
    ​
    Add Comment Click to expand inline 113 lines

    joe [8:08 AM] 
    I import all the cells into the same pop (so that changes to the pop affect all cells).

    [8:10] 
    I set cfg to plot all: `cfg.analysis['plotTraces'] = {'include': ['all'], 'oneFigPer': 'cell', 'saveFig': True, 'showFig': False, 'figSize': (10,8), 'timeRange': [0,cfg.duration]}`

    [8:10] 
    But I only get traces out for one cell.

    [8:11] 
    How do I make sure that all the cells are in the sim, and get plots for all of them?

    salvadord [8:12 AM] 
    hmm seems that here you only have 1 population with 1 cell ?

    joe [8:13 AM] 
    Should each cell be in a different pop?

    salvadord [8:13 AM] 
    do you want to have multiple cells in the same sim? or run different sims each one with a different cell?

    joe [8:14 AM] 
    I want to run a set battery of sims on each cell.

    salvadord [8:14 AM] 
    ok, but each sim will just simulate 1 cell right?

    [8:14] 
    so the plotTraces is associated to the sim (not the batch) so it will plot just the 1 cell

    joe [8:15 AM] 
    I was thinking of having all cell models in the same sim (but unconnected), so that, e.g. iClamp would send the same input to each cell.

    salvadord [8:15 AM] 
    y thats possible too

    joe [8:16 AM] 
    What would you recommend?

    salvadord [8:16 AM] 
    but then need to create multiple populations

    joe [8:16 AM] 
    Ahh, okay, I was wondering if I needed multiple pops.

    [8:16] 
    Can a pop in Netpyne use more than one cell model?

    salvadord [8:17 AM] 
    hmm technically yeah… since there is no cell model per se, but its actually cell rules that get applied based on conditions

    [8:17] 
    so you could have >1 cell rules that apply to the same population

    [8:17] 
    eg. based on the location of cells

    [8:18] 
    but usually we’ve just been using the attribtues ‘cellModel’ and ‘cellType’ to associate 1 cell rule to 1 pop

    [8:19] 
    the idea is that via popParams you create a set of cells with some attributes (cellType, cellModel, x,y,z location etc)

    [8:19] 
    and the you use cellParams to define the properties of these cells using rules

    [8:20] 
    eg. all cells with attribute cellType=X should have these morphology

    [8:21] 
    you could potentially create a cell rule to eg. change just a specific channel conductance for cells within cortical depth x and y

    joe [8:23 AM] 
    Thanks, Salva, I think I’m getting it.

    [8:24] 
    So I think I’ll put each cell in a different pop.  Then one more questions arises: how would I attach an iClamp to multiple pops?

    [8:24] 
    `cfg.IClamp1 = {'pop': 'PT5B', 'sec': 'soma', 'loc': 0.5, 'start': 200, 'dur': 1000, 'amp': 0.0}`

    [8:25] 
    Can I put a list into the ‘pop’?

    salvadord [8:25 AM] 
    the rules feature can be a bit confusing (and not everyone likes it) but I think its more flexible and could be useful for more complex models in the future

    [8:25] 
    you can just set ‘pop’: [‘pop1’,‘pop2’]

    joe [8:25 AM] 
    Yeah, it’s taking a little getting used to, but I can see the great flexibility it offers.

    [8:25] 
    Thanks!  I’ll try that.

    salvadord [8:26 AM] 
    since that ‘pop’ param in cfg really corresponds to the ‘conds’: {‘pop’: [‘pop1’, ‘pop2’]} in stimTargetParams

    [8:27] 
    check in netParams.py how the IClamps in cfg are converted to stimSourceParams and stimTargetParams
    (the only reason they are also in cfg is so that you can parametrize them in batch sims)

    joe [8:29 AM] 
    Aha! Making more sense all the time.  :sweat_smile:

*** Plan

Put each cell in a different pop 
Configure iClamp to stim all pops 
Configure cfg to plot all pops

*** Actions

Giving each cell a different type in netParams.

    # Original cell model
    cellRule = netParams.importCellParams(label='SPI6', conds={'cellType': 'SPI6Type', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'SPI6.py'), cellName='SPI6')

    # EEE cell model (6 compartments, Bdend L = 200)
    cellRule = netParams.importCellParams(label='eee6', conds={'cellType': 'eee6Type', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee6.py'), cellName='eee6')

    # EEE cell model (7 compartments: extra Bdend)
    cellRule = netParams.importCellParams(label='eee7', conds={'cellType': 'eee7Type', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7.py'), cellName='eee7')

    # EEE cell model with uniform spine distribution (7 comps)
    cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'eee7usType', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')

    # EEE cell model with physiological spine distribution (7 comps)
    cellRule = netParams.importCellParams(label='eee7ps', conds={'cellType': 'eee7psType', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7ps.py'), cellName='eee7ps')

Creating a different population for each cell type.

    #netParams.popParams['PT5B'] =  {'cellModel': 'HH_reduced', 'cellType': 'PT', 'numCells': 1}
    netParams.popParams['SPI6Pop'] =  {'cellModel': 'HH_reduced', 'cellType': 'SPI6Type', 'numCells': 1}
    netParams.popParams['eee6Pop'] =  {'cellModel': 'HH_reduced', 'cellType': 'eee6Type', 'numCells': 1}
    netParams.popParams['eee7Pop'] =  {'cellModel': 'HH_reduced', 'cellType': 'eee7Type', 'numCells': 1}
    netParams.popParams['eee7usPop'] =  {'cellModel': 'HH_reduced', 'cellType': 'eee7usType', 'numCells': 1}
    netParams.popParams['eee7psPop'] =  {'cellModel': 'HH_reduced', 'cellType': 'eee7psType', 'numCells': 1}

Adding all pops to iClamp 

    #cfg.IClamp1 = {'pop': 'PT5B', 'sec': 'soma', 'loc': 0.5, 'start': 200, 'dur': 1000, 'amp': 0.0}
    cfg.IClamp1 = {'pop': ['SPI6Pop', 'eee6Pop', 'eee7Pop', 'eee7usPop', 'eee7psPop'], 'sec': 'soma', 'loc': 0.5, 'start': 200, 'dur': 1000, 'amp': 0.0}

Now to give it a try!

Grrr.  It runs, but no output.  Time to debug: netParams, batch_init, my_batches

Debug netParams:

    graham-mac% eee ; cd batches/batch_fi ; ipython -i netParams.py
    ...
    ---------------------------------------------------------------------------
    NameError                                 Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_fi/netParams.py in <module>()
         44 
         45 # EEE cell model with uniform spine distribution (7 comps)
    ---> 46 cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'eee7usType', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')
         47 
         48 # EEE cell model with physiological spine distribution (7 comps)

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
        328             label = int(self._labelid)
        329             self._labelid += 1
    --> 330         secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
        331         cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
        332 

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
        168             sys.path.insert(0, filePath)
        169         moduleName = fileNameOnly.split('.py')[0]  # remove .py to obtain module name
    --> 170         exec('import ' + moduleName + ' as tempModule') in globals(), locals() # import module dynamically
        171         modulePointer = tempModule
        172         if isinstance(cellArgs, dict):

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in <module>()

    /u/graham/projects/eee/sim/cells/eee7us.py in <module>()
         37 spineCap  = 1.0
         38 spineDist = [0.982, 4.677, 10.91, 14.72, 18.24, 18.76, 19.05, 17.15, 17.38, 16.17, 15.36, 15.07, 15.24, 13.97, 12.53, 12.64, 11.84, 9.988, 11.43]
    ---> 39 spineLocs = getspineLocs(spineNum, spinedist=[1])
         40 
         41 # geom properties

    /u/graham/projects/eee/sim/cells/eee7us.py in getspineLocs(numspines, spinedist)
         16   numsecs = len(spinedist)
         17   spineLocs = []
    ---> 18   my_dist = np.array(spinedist).astype(float)
         19   norm_dist = np.array(my_dist)/sum(my_dist)
         20   spines_dist = np.round(numspines * norm_dist)

    NameError: global name 'np' is not defined

Need to import numpy as np in eee7us and eee7ps.

Trying again.

    graham-mac% eee ; cd batches/batch_fi ; ipython -i netParams.py
    cd /u/graham/projects/eee/sim
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul  2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.

    IPython 5.1.0 -- An enhanced Interactive Python.
    ?         -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help      -> Python's own help system.
    object?   -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod NMDA.mod GABAA.mod GABAB.mod
    ---------------------------------------------------------------------------
    NameError                                 Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_fi/netParams.py in <module>()
         44 
         45 # EEE cell model with uniform spine distribution (7 comps)
    ---> 46 cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'eee7usType', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')
         47 
         48 # EEE cell model with physiological spine distribution (7 comps)

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
        328             label = int(self._labelid)
        329             self._labelid += 1
    --> 330         secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
        331         cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
        332 

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
        171         modulePointer = tempModule
        172         if isinstance(cellArgs, dict):
    --> 173             cell = getattr(modulePointer, cellName)(**cellArgs) # create cell using template, passing dict with args
        174         else:
        175             cell = getattr(modulePointer, cellName)(*cellArgs)  # create cell using template, passing list with args

    /u/graham/projects/eee/sim/cells/eee7us.py in __init__(self, x, y, z, ID)
        114     self.set_props()
        115     self.add_spines()
    --> 116     self.set_spine_props()
        117     self.name = "eee7us"
        118 

    /u/graham/projects/eee/sim/cells/eee7us.py in set_spine_props(self)
        171     for sec in self.necks: sec.cm = spineCap
        172     for sec in self.heads: sec.cm = spineCap
    --> 173     for sec in self.necks: sec.g_pas = 1.0/spineRM
        174     for sec in self.heads: sec.g_pas = 1.0/spineRM
        175     for sec in self.necks: sec.Ra = spineRa

    NameError: g_pas, the mechanism does not exist at <eee7us.eee7us instance at 0x106890d88>.neck_0(0.5)

Looks like I need to insert the mechanism into the spine necks and heads:
    sec.insert('pas') # passive

Modifying set_spine_props:

    def set_spine_props(self):
        for sec in self.necks: sec.insert('pas')
        for sec in self.heads: sec.insert('pas')
        for sec in self.necks: sec.cm = spineCap
        for sec in self.heads: sec.cm = spineCap
        for sec in self.necks: sec.g_pas = 1.0/spineRM
        for sec in self.heads: sec.g_pas = 1.0/spineRM
        for sec in self.necks: sec.Ra = spineRa
        for sec in self.heads: sec.Ra = spineRa

Trying again.  Whoops.  Also need to change it in eee7ps.

Getting a different error:

    graham-mac% eee ; cd batches/batch_fi ; ipython -i netParams.py
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_fi/netParams.py in <module>()
         96                 # connect stim source to target
         97                 netParams.stimTargetParams[iclabel+'_'+ic['pop']] = \
    ---> 98                         {'source': iclabel, 'conds': {'popLabel': ic['pop']}, 'sec': ic['sec'], 'loc': ic['loc']}
         99 
        100 

    TypeError: cannot concatenate 'str' and 'list' objects

Probably because ic['pop'] is now a list instead of a string.  I think I'll have
loop over the pops in ic['pop']

Modifying netParams:

    # connect stim source to target
    #netParams.stimTargetParams[iclabel+'_'+ic['pop']] = \
    # {'source': iclabel, 'conds': {'popLabel': ic['pop']}, 'sec': ic['sec'], 'loc': ic['loc']}
    
    for curpop in ic['pop']:
      netParams.stimTargetParams[iclabel+'_'+curpop = \
        {'source': iclabel, 'conds': {'popLabel': ic['pop']}, 'sec': ic['sec'], 'loc': ic['loc']}

netParams works now!  Trying batch run again.

Still no output figures.  Back to debugging.  Netparams works, so I'll exec batch_init.py

    graham-mac% eee ; cd batches/batch_fi ; ipython -i batch_init.py
    ---------------------------------------------------------------------------
    KeyError                                  Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_fi/batch_init.py in <module>()
         33 
         34 # setup variables to record for each cell (spikes, V traces, etc)
    ---> 35 sim.setupRecording()
         36 
         37 # run parallel Neuron simulation

    /usr/site/nrniv/local/python/netpyne/netpyne/simFuncs.pyc in setupRecording()
        686 
        687         # get actual cell objects to record from, both from recordCell and plotCell lists
    --> 688         cellsRecord = getCellsList(sim.cfg.recordCells)+cellsPlot
        689 
        690         for key in sim.cfg.recordTraces.keys(): sim.simData[key] = Dict()  # create dict to store traces

    /usr/site/nrniv/local/python/netpyne/netpyne/simFuncs.pyc in getCellsList(include)
        736 
        737         elif isinstance(condition, basestring):  # entire pop
    --> 738             cellGids.extend(list(sim.net.pops[condition].cellGids))
        739 
        740         elif isinstance(condition, tuple) or isinstance(condition, list):  # subset of a pop with relative indices

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in __getitem__(self, k)
        144 
        145     def __getitem__(self, k):
    --> 146         return super(ODict, self).__getitem__(k)
        147 
        148 

    KeyError: 'PT5B'

It seems I still have a PT5B pop somewhere...  

It's in the cfg.py file.  Changing 'PT5B' to 'all': cfg.recordCells = ['all']

It works!  But there is some weirdness in the figures, most likely because not all
cells have a Bdend1...  The six-compartment cells have Bdend, while the seven-
compartment cells have Bdend1 and Bdend2.  

I think I'll add changing all 'Bdend's to 'Bdend1's to my TODO list

So simulating multiple cells in one batch now works.  Committing now.  :)


** Change Bdend to Bdend1 everywhere it appears

Changed all in SPI6.py, will test now to ensure still works.

Still works.  Changing in eee6.py now.  
Removing: cfg.recordTraces['V_Bdend'] = {'sec': 'Bdend', 'loc': 0.5, 'var': 'v'}

Still works.  Committing now.


** Plot voltage traces for each cell

Adding cellID as an input to get_vtraces and plot_vtraces

Getting an error:

    ---------------------------------------------------------------------------
    KeyError                                  Traceback (most recent call last)
    <ipython-input-2-dd6b04d89690> in <module>()
    ----> 1 batch_analysis.plot_vtraces('fi_curve')

    /u/graham/projects/eee/sim/batches/batch_analysis.py in plot_vtraces(batchname, cellID, secs, par1label, par2label, save, outputdir)
        483 
        484     for ind, sec in enumerate(secs):
    --> 485         output = get_vtraces(params, data, cellID=cellID, section=sec)
        486         if ind == 0:
        487             fig1 = plotrelation2(par1label=par1label, par2label=par2label, swapaxes=True, **output)

    /u/graham/projects/eee/sim/batches/batch_analysis.py in get_vtraces(params, data, cellID, section, stable)
        197         print seckey
        198         print(datum['simData'][seckey].keys())
    --> 199         vtrace = datum['simData'][seckey][cellLabel]
        200         if not timesteps:
        201             timesteps = len(vtrace)

    KeyError: 'cell_0'

Apparently because not all cells have all secs...

Adding an if statement to get_vtraces.  That doesn't work.  

I think I need to prevent plot_vtraces from calling get_vtraces if the cell 
doesn't have the section requested.

Changing such that secs_present are only the secs each cell has:

    if secs is None:
        sim_data = data[data.keys()[0]]['simData']
        simdata_keys = data[data.keys()[0]]['simData'].keys()
        secs_all = [d for d in simdata_keys if str(d[0:2]) == "V_"]
        secs_present = [sec for sec in secs_all if cellLabel in sim_data[sec].keys()]
        secs = [sec[2:] for sec in secs_present if len(sim_data[sec].keys()) > 0]
        secs.sort()

Et voila!  

** Improvements to plot_vtraces

Need to have cell ID in the title and in the filename.

** Examine voltage traces

graham-mac% eee ; ipython -i ieee.py
In [1]: cd batches/batch_fi/


* 2017-07-12 -- Problem after problem with running pop sims

** TODO

Add cell name to title and filename in plots
Explore fI curves
Code more analysis for cells
Switch to DMS NMDA synapse
Work on article draft
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Improvements to plot_vtraces

Need to have cell ID in the title and in the filename.

Modified get_vtraces:
    output['autotitle'] = "Voltage Traces from " + cellLabel

Modified plot_vtraces:
    fig1.savefig(os.path.join(outputdir, batchname + "_" + cellLabel + "_vtrace_1.png"))
    fig2.savefig(os.path.join(outputdir, batchname + "_" + cellLabel + "_vtrace_2.png"))

That works! 

To plot and save figures for all cells:
    graham-mac% eee ; ipython -i ieee.py
    In [1]: cd batches/batch_fi/   
    In [2]: for cell in range(5):
       ...:     batch_analysis.plot_vtraces('fi_curve', cellID=cell)
       ...:     


** Examine voltage traces for fI curve

The iClamp amplitude is clearly too high, after the first couple stim amps the 
cells go into depolarization blockade.

But these are the same amplitudes used in the experimental cell that SPI6 was 
fitted to (fitted to fI relationship).

I will reset all variables to original and re-sim to see effect.

Current cfg values:

    cfg.dendNa = 0.00345
    cfg.tau1NMDA = 15
    cfg.tau2NMDA = 300
    cfg.BdendRa = 114.510490019

Default values for those params:

    dendNa = 0.0345117294903
    tau1NMDA = 15
    tau2NMDA = 150
    BdendRa = 114.510490019

Only change seems to be dendNa.  Changing and running sims.

Same problem: stim is too high...  Looking into this.

Current values:
[0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6]

Older values:
params[("IClamp1", "amp")] = list(np.arange(-2.0, 8.0, 1.0)/10.0)

Just switched to an old version of SPI6 to see effect of these current clamp
amplitudes, and the old version showed the same response.  Will worry about later.

For now, switching to generating figures for CNS poster.

** Probem with cfg

It seems like the cfg file stuff is only being applied to the last cell in the 
population.

That was indeed the case.  Just spent a long time figuring out the problem.

** Everything seems to be working now

To run batches:
    graham-mac% eee ; cd batches/batch_fi ; ./runmybatches

To plot vtraces:
    graham-mac% eee ; ipython -i ieee.py
    In [1]: cd batches/batch_fi/
    In [2]: for cell in range(5):
   ...:     batch_analysis.plot_vtraces('NMDA_glut', cellID=cell, par2label="GlutStim") 

But the range of amplitudes with reasonable outputs is much smaller...  


* 2017-07-13 -- Figures for CNS poster

** TODO

Generate spine figures for CNS poster
Code more analysis for cells
Switch to DMS NMDA synapse
Work on article draft
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Finding good glutamate stim weight (NMDA weight)

Figure out good glut stim weight range first:

All figs good up to weight 0.015
Maybe plot a range of 5 values from 0 to 0.015

Will now sim and plot with glut_weights = [0.003,  0.006,  0.009,  0.012,  0.015]

Trying again with [0.008, 0.010, 0.012, 0.014, 0.016]

Using glut_stim_weight = [0.011, 0.012, 0.013, 0.014, 0.015] and
tau2NMDA = [150, 300, 600, 900]

These should be final:
glut_stim_weight = [0.010, 0.011, 0.012, 0.013, 0.014] and
tau2NMDA = [150, 300, 600, 900]

These values look good.  Committing.


** Improving plot_vtraces

*** Want to have soma always plotted first

Added the following to plot_vtraces to move soma to front of list:
    if "soma" in secs:
        secs.insert(0, secs.pop(secs.index("soma")))

*** Want ability to plot all cells at once 
(loading data repetetively is slow)

Added a for loop to plot_vtraces:

    if type(cellIDs) is int:
            cellIDs = [cellIDs]
        elif cellIDs is None:
            cellIDs = []
            for cell in data[data.keys()[0]]['net']['cells']:
                cellIDs.append(cell['gid'])

        for cellID in cellIDs:
            ...

It works!

*** Adding cell type to figure title

In get_vtraces:

    cellType = str(data[data.keys()[0]]['net']['cells'][cellID]['tags']['cellType'])
    ...
    output['autotitle'] = "Voltage Traces from " + cellLabel + " (" + cellType + ")"

Success.

** Figures for CNS poster

graham-mac% eee ; cd batches/batch_fi ; ./runmybatches
graham-mac% eee ; ipython -i ieee.py
In [2]: cd batches/batch_fi/
In [3]: batch_analysis.plot_vtraces('NMDArise_glut', par2label="GlutStim", par1label="NMDArise")
In [4]: batch_analysis.plot_vtraces('NMDAdecay_glut', par2label="GlutStim", par1label="NMDAdecay")

Commit changeset: 335:00f7e24bf2bb

Will put the following figures in the poster:
  NMDArise_glut_cell_2_vtrace_1.png
  NMDAdecay_glut_cell_2_vtrace_1.png

** Spine figures for CNS poster

Want a figure comparing uniform versus physiological spine distribution.

I'm thinking of activating one spine with glutamate, comparing two params:
  glut_stim_amp: [0.010, 0.011, 0.012, 0.013, 0.014]
  spine number:  [50, 100, 150, 200, 250]

Commands:
  graham-mac% eee ; cd batches/batch_spineLoc ; ./runmybatches
  In [1]: cd batches/batch_spineLoc/
  In [2]: batch_analysis.plot_vtraces('spine_loc', par2label="GlutStim", par1label="ActiveSpine")

Not much difference in output for different spine stims...

** Different spine figure for CNS poster

Will vary Rneck and glut stim amp.

Added batch varying Rneck to spine_loc dir.

Commands:
  graham-mac% eee ; cd batches/batch_spineLoc ; ./runmybatches
  In [1]: cd batches/batch_spineLoc/
  In [2]: batch_analysis.plot_vtraces('rneck', par2label="GlutStim", par1label="Rneck")

Odd: Rneck doesn't seem to be changing in eee7us, but it does in eee7ps...

Wow, the problem was that some of the netParams.py was in spaces and some was in tabs.

Changed file to all spaces instead of tabs.

Now it works, but the plots are a bit odd... No more spiking.  

Going to try running batches again -- the batch command didn't exit cleanly.

Still no spiking.  Will double glut stim amplitude and try again.

Damn.  The eee7us cell doesn't seem to get Rneck varied.  Looking into this.

This is weird.  When I set eee7us and eee7ps so that they are identical (other 
than name/label), the output for the two is different.

*** May have found the problem

    In [15]: np.cellParams['eee7us']['secs']['neck_0']
    Out[15]: {mechs: {pas: {e: -70.0, g: 5.882352941176471e-05}}, geom: {nseg: 1, diam: 0.2, L: 1.0, cm: 1.0, Ra: 105.0}, topol: {childX: 0.0, parentSec: 'Bdend1', parentX: 0.0}, vinit: -75.0413649414}

    In [16]: np.cellParams['eee7ps']['secs']['neck_0']
    Out[16]: {mechs: {pas: {e: -70.0, g: 5.882352941176471e-05}}, geom: {nseg: 1, diam: 0.2, L: 1.0, cm: 1.0, Ra: 157.08000000000004}, topol: {childX: 0.0, parentSec: 'Bdend1', parentX: 0.0}, vinit: -75.0413649414}

For some reason, the Ra of eee7us is not getting changed.  Looking into this.

Finally!  The problem was that I was using a cellRule to try to assign Rneck instead
of just changing the sec directly.

Solution:

    for cell_label, cell_params in netParams.cellParams.iteritems():
        for secName,sec in cell_params['secs'].iteritems(): 
            ...
            if "neck" in secName:
                diam = sec['geom']['diam']
                leng = sec['geom']['L']
                sec['geom']['Ra'] = cfg.Rneck * 100 * 3.1416 * (diam/2) * (diam/2) / leng

** Spine distribution figure

Doubling glut stim amp to see spiking.  Not a lot of spiking.

Increasing glut stim to 10x initial.

Decreasing glut stim to 5x.


*** My workflow

Make changes to my_batches.py

graham-mac% eee ; cd batches/batch_spineLoc ; ./runmybatches
graham-mac% eee ; ipython -i ieee.py
In [1]: cd batches/batch_spineLoc/ 
In [2]: batch_analysis.plot_vtraces('rneck', par2label="GlutStim", par1label="Rneck", cellIDs=[3,4])

Look at figures.


* 2017-07-14 -- Batches and figures for CNS 

** TODO

Code more analysis for cells
Implement distributed and punctate glutamate stim
Switch to DMS NMDA synapse
Work on article draft
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Figures for CNS poster:

First generate the necessary batches:
    graham-mac% eee ; cd batches/batch_nmda ; ./runmybatches
    graham-mac% eee ; cd batches/batch_spineLoc ; ./runmybatches

Then generate the plots:

    In [1]: cd batches/batch_nmda
    In [2]: batch_analysis.plot_vtraces('NMDAdecay_glut', par2label="GlutStim", par1label="NMDAdecay")  
    In [3]: batch_analysis.plot_vtraces('NMDArise_glut', par2label="GlutStim", par1label="NMDArise") 
    In [4]: cd batches/batch_spineLoc
    In [5]: batch_analysis.plot_vtraces('rneck', par2label="GlutStim", par1label="Rneck")     
    In [6]: batch_analysis.plot_vtraces('spine_loc', par2label="GlutStim", par1label="ActiveSpine") 

Figures in poster:

file:gif/20170714_132749.png
file:gif/20170714_132813.png
file:gif/20170714_132827.png
file:gif/20170714_132839.png


* 2017-07-18 -- Working on article draft 

** TODO

Work on article draft -- methods and figures
Code more analysis for cells
Implement distributed and punctate glutamate stim
Switch to DMS NMDA synapse
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Current article draft

The Impact of Input Distribution on Glutamate-Mediated Plateau Potentials in Basal Dendrites of Cortical Pyramidal Neurons — A Modeling Study

Introduction
Plateaus have been observed in vitro
there is also evidence of plateaus in vivo
what is the importance of plateaus 
what kinds of stimulation can produce plateaus
what is spread and how does it affect other basals and apical dend

we start with a simplified model to thoroughly explore param space, particularly wrt different assumptions about the role of spines

Methods
we have a full model and made a reduced model from that that shares transfer impedance properties (Fig ##)

Simulation Methods:
Simplified (7 compartment) and full-reconstruction (54 compartment) models
Cell properties fitted to mouse M1 current-clamp results using PRAXIS and Evolutionary Multi-objective Optimization (EMO)
Network simulation
Models will be available on ModelDB (starting with #195615)

Results
No spines 
Fig ##: no spines, punctate inputs
Fig ##: no spines, uniform distrib inputs
Fig ##: no spines, realistic distrib inputs

With spines
Fig ##: spines, punctate inputs
Fig ##: spines, uniform distrib inputs
Fig ##: spines, realistic distrib inputs

Spines + spillover
Fig ##: local spillover, uniform distrib inputs
Fig ##: local spillover, realistic distrib inputs
Fig ##: overlapping spillover, uniform distrib inputs
Fig ##: overlapping spillover, realistic distrib inputs

Discussion
Effects of different distributions

Effects of spine neck R

Consideration of spine as ephys or cphys unit

Effects on soma and other dends (basilar, apical)


* 2017-07-19 -- EEE article draft

** TODO

Work on article draft -- methods and figures
Code more analysis for cells
Implement distributed and punctate glutamate stim
Switch to DMS NMDA synapse
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Article draft

The Impact of Input Distribution on Glutamate-Mediated Plateau Potentials in Basal Dendrites of Cortical Pyramidal Neurons — A Modeling Study

Introduction
Plateaus have been observed in vitro

there is also evidence of plateaus in vivo

what is the importance of plateaus -- we hypothesize EEE

what kinds of stimulation can produce plateaus

what is spread and how does it affect other basals and apical dend

we start with a simplified model to thoroughly explore param space, particularly wrt different assumptions about the role of spines
Methods
Simulation Methods:

Simulations were run in the NEURON (version 7.5) simulation environment (Carnevale & Hines, 2009).  NetPyNE (Network development Python package for NEURON) was used to organize, parallelize and analyze simulations (Dura-Bernal et al., 2016) (Lytton et al., 2016), along with custom Python code.  All code and data necessary to run the simulations used in this study are available at the online computational neuroscience database ModelDB (McDougal et al., 2017) at https://senselab.med.yale.edu/ModelDB/MODELID.

Cell model was based on a previous model of a corticospinal pyramidal neuron fitted to mouse neocortical M1 current-clamp results using an adaptive coordinate descent algorithm (PRAXIS) and Evolutionary Multi-objective Optimization (EMO)  (Neymotin et al., 2017).

Realistic spine distribution and spine morphology based on data from mouse M2 Layer II/III pyramidal neurons (Ballesteros-Yáñez, Benavides-Piccione, Elston, Yuste, & DeFelipe, 2006).  

Results
No spines 
Fig ##: no spines, punctate inputs
Fig ##: no spines, uniform distrib inputs
Fig ##: no spines, realistic distrib inputs

With spines
Fig ##: spines, punctate inputs
Fig ##: spines, uniform distrib inputs
Fig ##: spines, realistic distrib inputs

Spines + spillover
Fig ##: local spillover, uniform distrib inputs
Fig ##: local spillover, realistic distrib inputs
Fig ##: overlapping spillover, uniform distrib inputs
Fig ##: overlapping spillover, realistic distrib inputs
Discussion
Effects of different distributions

Effects of spine neck R

Consideration of spine as ephys or cphys unit

Effects on soma and other dends (basilar, apical)

Implications for EEE



Ballesteros-Yáñez, I., Benavides-Piccione, R., Elston, G. N., Yuste, R., & DeFelipe, J. (2006). Density and morphology of dendritic spines in mouse neocortex. Neuroscience, 138(2), 403–409.
Carnevale, N. T., & Hines, M. L. (2009). The NEURON Book (1st ed.). New York, NY, USA: Cambridge University Press.
Dura-Bernal, S., Suter, B. A., Neymotin, S. A., Kerr, C. C., Quintana, A., Gleeson, P., … Lytton, W. W. (2016). NetPyNE: a Python package for NEURON to facilitate the development, parallel simulation and analysis of biological neuronal networks. Computational Neuroscience (CNS) 2016. Retrieved from http://neurosimlab.org/salvadord/CNS16_poster.pdf
Lytton, W. W., Seidenstein, A. H., Dura-Bernal, S., McDougal, R. A., Schürmann, F., & Hines, M. L. (2016). Simulation Neurotechnologies for Advancing Brain Research: Parallelizing Large Networks in NEURON. Neural Computation, 28(10), 2063–2090.
McDougal, R. A., Morse, T. M., Carnevale, T., Marenco, L., Wang, R., Migliore, M., … Hines, M. L. (2017). Twenty years of ModelDB and beyond: building essential modeling tools for the future of neuroscience. Journal of Computational Neuroscience, 42(1), 1–10.
Neymotin, S. A., Suter, B. A., Dura-Bernal, S., Shepherd, G. M. G., Migliore, M., & Lytton, W. W. (2017). Optimizing computer models of corticospinal neurons to replicate in vitro dynamics. Journal of Neurophysiology, 117(1), 148–162.



* 2017-07-20 -- Function to compare cells

** TODO

Work on article draft -- methods and figures
Code more analysis for cells
Implement distributed and punctate glutamate stim
Switch to DMS NMDA synapse
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Working on article draft

https://docs.google.com/document/d/1lx1tQutiy1Qd9iSM3HJMyghEMA5EHKr4eN9qPQdhbPQ/edit#

** Need better way of comparing different cells

Will try using cfg file to set cell type as a parameter, for automated cell-to-cell
comparisons.

Working in batch_nmda dir.

Code from my_batches:

    # Varying NetStim cell pop and glutamate stim amplitude
    batch = {}
    batch["label"] = "celltype_glut"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[('NetStim1', 'pop')] = ['SPI6Pop', 'eee6Pop', 'eee7Pop', 'eee7usPop', 'eee7psPop']
    params[('NetStim1', 'weight', 0)] = list(np.array(glut_stim_weight) * 1.0)
    batch["params"] = params
    batches[batch["label"]] = batch

To run batches:

    graham-mac% eee ; cd batches/batch_nmda ; ./runmybatches

To generate voltage traces figures:

    graham-mac% eee ; ipython -i ieee.py
    In [1]: cd batches/batch_nmda/
    In [2]: batch_analysis.plot_vtraces('celltype_glut', par2label="GlutStim", par1label="CellType")

Problem: only one cell receives glutamate NetStim input in each figure 
(there are 10 figures instead of 2)

*** Possible solutions:

1. Modify get_vtraces such that if cellID is set to None, it returns voltage traces
for each cell

2. Create a new function that outputs appropriate cell v_traces for use in plotrelation2

Solution 2 seems better, because then, instead of simulating each cell each time
(even when the cell gets no input), I can stim all cells at the same time.

*** Solution 2

Step 1: run a 1d batch varying glutamate stim amp for each cell

    # Varying glutamate stim amplitude (1D batch)
    batch = {}
    batch["label"] = "glut"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[('NetStim1', 'weight', 0)] = list(np.array(glut_stim_weight) * 1.0)
    batch["params"] = params
    batches[batch["label"]] = batch

Step 2: create plot_vtraces_multicell as a copy of plot_vtraces

Step 3: transform output from get_vtraces to be compatible with plotrelation2

    graham-mac% eee ; ipython -i ieee.py
    In [1]: cd batches/batch_nmda/
    In [2]: params, data = batch_utils.load_batch('glut')
    In [3]: params
    Out[3]: 
    [{u'label': [u'NetStim1', u'weight', 0],
      u'values': [0.01, 0.011, 0.012, 0.013, 0.014]}]
    In [5]: foo = batch_analysis.get_vtraces(params, data)
    In [6]: foo
    Out[6]: 
    {'autotitle': 'Voltage Traces from cell_0 (SPI6Type)',
     'autoxlabel': 'Time (ms)',
     'autoylabel': 'Membrane Potential (mV)',
     'legendlabel': 'soma',
     'params': [{u'label': [u'NetStim1', u'weight', 0],
       u'values': [0.01, 0.011, 0.012, 0.013, 0.014]}],
     'xvector': array([  0.00000000e+00,   1.00000000e-01,   2.00000000e-01, ...,
              1.19970000e+03,   1.19980000e+03,   1.19990000e+03]),
     'yarray': array([[-75.04136494, -75.08449168, -75.12951278, ..., -80.72605164,
             -80.7261506 , -80.72624952],
            [-75.04136494, -75.08449168, -75.12951278, ..., -80.69651284,
             -80.69662168, -80.69673048],
            [-75.04136494, -75.08449168, -75.12951278, ..., -80.66669308,
             -80.6668119 , -80.66693069],
            [-75.04136494, -75.08449168, -75.12951278, ..., -80.63632725,
             -80.63645622, -80.63658514],
            [-75.04136494, -75.08449168, -75.12951278, ..., -80.60536365,
             -80.60550291, -80.60564212]])}

I need to append the cells to 'params'
    params.append({'label': 'Cell', 'values':['SPI6Pop', 'eee6Pop', 'eee7Pop', 'eee7usPop', 'eee7psPop']})

The 'xvector' can remain the same

I need to add the other cells' data to 'yarray' for each sec
    
    Need to loop through cells, then secs, creating a yarray for each sec,
    then feeding all sec arrays into plotrelation2 one at a time

    (multiple cells per yarray, one yarray per sec)

    yarray should be np.shape = (len(p1), len(p2), len(xvector))
                              = (len(p1), numcells, len(xvector))

Having problems.  Will look at tomorrow.


* 2017-07-21 -- Cell comparison plot (plot_vtraces_multicell)

Current changeset: 342:fc405ab1c786
Committing now, but may need to revert some files to this point after multicell works

** Working on multicell figure

To run:
    graham-mac% eee ; ipython -i ieee.py
    In [1]: cd batches/batch_nmda/
    In [2]: batch_analysis.plot_vtraces_multicell('glut')

Running multicell generates two plots as expected, but only plots soma voltage 
and then crashes:

    ---------------------------------------------------------------------------
    IndexError                                Traceback (most recent call last)
    <ipython-input-3-2b771e33e65e> in <module>()
    ----> 1 batch_analysis.plot_vtraces_multicell('glut')

    /u/graham/projects/eee/sim/batches/batch_analysis.py in plot_vtraces_multicell(batchname, cellIDs, secs, par1label, par2label, save, outputdir)
        567             cellType = data[data.keys()[0]]['net']['cells'][cellID]['tags']['cellType']
        568             cellDict['values'].append(cellType + "_" + str(cellID))
    --> 569             temp_output = get_vtraces(params, data, cellID=cellID, section=sec)
        570             cellTraces.append(temp_output['yarray'])
        571 

    /u/graham/projects/eee/sim/batches/batch_analysis.py in get_vtraces(params, data, cellID, section, stable)
        211             for paramindex, param in enumerate(params):
        212                 if 'group' not in param:
    --> 213                     tracesindex.append(paramvaluedicts[paramindex][datum['paramValues'][paramindex]])
        214                 elif param['group'] is False:
        215                     tracesindex.append(paramvaluedicts[paramindex][datum['paramValues'][paramindex]])

    IndexError: tuple index out of range

Problem may be that not every cell has every sec...  (e.g. SPI6 doesn't have Bdend2)

Trying to figure out the problem.

Problem seems to be that get_vtraces (which requires as input 'params') is only 
getting the one param used in the batch.

I will try adding the cells as the second param in plot_vtraces_multicell before
inputting to get_vtraces

Ugh.  I'm going to try using a "cfg.multicell" batch variable to see if that works.

** cfg.multicell

Added to my_batches:

    # Varying glutamate stim amplitude (1D batch) and multicell
    batch = {}
    batch["label"] = "glut_multicell"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[('NetStim1', 'weight', 0)] = list(np.array(glut_stim_weight) * 1.0)
    params["multicell"] = ['SPI6Pop', 'eee6Pop', 'eee7Pop', 'eee7usPop', 'eee7psPop']
    batch["params"] = params
    batches[batch["label"]] = batch

Well, this method would probably work, but it generates too many sims (it 
generates a set of sims for each cfg.multicell, even though that doesn't change
anything in the sims).

** Taking a step back

Plan for how to do this:

In plot_vtraces_multicell:
1) get a list of secs and cells
2) for each sec
      for each cell
          if cell has sec
              get_vtraces
          else
              return Nones same shape as vtraces
3) Assemble yarray from cells
4) Modify 'params' such that Cells are in par2 (needed in plotrelation2 for labeling)
4) plot with plotrelation2

Making progress!  Now soma shows up in both plots, and Bdend1 shows up in first 
row of first plot

*** New error:

    In [1]: cd batches/batch_nmda/
    /u/graham/projects/eee/sim/batches/batch_nmda

    In [2]: batch_analysis.plot_vtraces_multicell('glut')
    Reading data...
    0 files missing

    soma


    SPI6Type

    -----------------------------------------------
    Running get_vtraces
    ('params   = ', [{u'values': [0.01, 0.011, 0.012, 0.013, 0.014, 0.015], u'label': [u'NetStim1', u'weight', 0]}])
    ('cellID   = ', 0)
    ('section  = ', u'soma')
    -----------------------------------------------

    eee6Type

    -----------------------------------------------
    Running get_vtraces
    ('params   = ', [{u'values': [0.01, 0.011, 0.012, 0.013, 0.014, 0.015], u'label': [u'NetStim1', u'weight', 0]}])
    ('cellID   = ', 1)
    ('section  = ', u'soma')
    -----------------------------------------------

    eee7Type

    -----------------------------------------------
    Running get_vtraces
    ('params   = ', [{u'values': [0.01, 0.011, 0.012, 0.013, 0.014, 0.015], u'label': [u'NetStim1', u'weight', 0]}])
    ('cellID   = ', 2)
    ('section  = ', u'soma')
    -----------------------------------------------

    eee7usType

    -----------------------------------------------
    Running get_vtraces
    ('params   = ', [{u'values': [0.01, 0.011, 0.012, 0.013, 0.014, 0.015], u'label': [u'NetStim1', u'weight', 0]}])
    ('cellID   = ', 3)
    ('section  = ', u'soma')
    -----------------------------------------------

    eee7psType

    -----------------------------------------------
    Running get_vtraces
    ('params   = ', [{u'values': [0.01, 0.011, 0.012, 0.013, 0.014, 0.015], u'label': [u'NetStim1', u'weight', 0]}])
    ('cellID   = ', 4)
    ('section  = ', u'soma')
    -----------------------------------------------
    yarray shape
    (6, 5, 12000)
    yarray shape
    (5, 6, 12000)

    Bdend1


    SPI6Type

    -----------------------------------------------
    Running get_vtraces
    ('params   = ', [{u'values': [0.01, 0.011, 0.012, 0.013, 0.014, 0.015], u'label': [u'NetStim1', u'weight', 0]}])
    ('cellID   = ', 0)
    ('section  = ', u'Bdend1')
    -----------------------------------------------

    eee6Type

    -----------------------------------------------
    Running get_vtraces
    ('params   = ', [{u'values': [0.01, 0.011, 0.012, 0.013, 0.014, 0.015], u'label': [u'NetStim1', u'weight', 0]}])
    ('cellID   = ', 1)
    ('section  = ', u'Bdend1')
    -----------------------------------------------

    eee7Type

    -----------------------------------------------
    Running get_vtraces
    ('params   = ', [{u'values': [0.01, 0.011, 0.012, 0.013, 0.014, 0.015], u'label': [u'NetStim1', u'weight', 0]}])
    ('cellID   = ', 2)
    ('section  = ', u'Bdend1')
    -----------------------------------------------

    eee7usType

    -----------------------------------------------
    Running get_vtraces
    ('params   = ', [{u'values': [0.01, 0.011, 0.012, 0.013, 0.014, 0.015], u'label': [u'NetStim1', u'weight', 0]}])
    ('cellID   = ', 3)
    ('section  = ', u'Bdend1')
    -----------------------------------------------

    eee7psType

    -----------------------------------------------
    Running get_vtraces
    ('params   = ', [{u'values': [0.01, 0.011, 0.012, 0.013, 0.014, 0.015], u'label': [u'NetStim1', u'weight', 0]}])
    ('cellID   = ', 4)
    ('section  = ', u'Bdend1')
    -----------------------------------------------
    yarray shape
    (6, 5, 12000)
    ---------------------------------------------------------------------------
    IndexError                                Traceback (most recent call last)
    <ipython-input-2-2b771e33e65e> in <module>()
    ----> 1 batch_analysis.plot_vtraces_multicell('glut')

    /u/graham/projects/eee/sim/batches/batch_analysis.py in plot_vtraces_multicell(batchname, cellIDs, secs, par1label, par2label, save, outputdir)
        614             fig2 = plotrelation2(par1label=par1label, par2label=par2label, swapaxes=True, **output)
        615         else:
    --> 616             fig1 = plotrelation2(par1label=par1label, par2label=par2label, swapaxes=False, fig=fig1, **output)
        617             fig2 = plotrelation2(par1label=par1label, par2label=par2label, swapaxes=True, fig=fig2, **output)
        618 

    /u/graham/projects/eee/sim/batches/batch_analysis.py in plotrelation2(yarray, xvector, params, swapaxes, par1label, par2label, title, xlabel, ylabel, marker, shareyall, color, fig, **kwargs)
        461 
        462                 axes = fig.get_axes()
    --> 463                 axes[subplotind].plot(xvector, yarray[p1ind][p2ind], marker=marker, color=color, alpha=0.75, label=legendlabel)
        464                 subplotind += 1
        465 

    IndexError: index 5 is out of bounds for axis 0 with size 5

**** Solved error

Problem was I kept appending cell names to cellParams in a loop, thus repeating values

*** New error:

    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    <ipython-input-2-2b771e33e65e> in <module>()
    ----> 1 batch_analysis.plot_vtraces_multicell('glut')

    /u/graham/projects/eee/sim/batches/batch_analysis.py in plot_vtraces_multicell(batchname, cellIDs, secs, par1label, par2label, save, outputdir)
        618         output = deepcopy(temp_output)
        619         output['autotitle'] = 'Multicell Voltage Traces'
    --> 620         output['yarray'] = np.stack(cellTraces, axis=1)
        621         output['params'].append(cellparams)
        622 

    /usr/local/lib/python2.7/site-packages/numpy/core/shape_base.pyc in stack(arrays, axis)
        337     shapes = set(arr.shape for arr in arrays)
        338     if len(shapes) != 1:
    --> 339         raise ValueError('all input arrays must have the same shape')
        340 
        341     result_ndim = arrays[0].ndim + 1

    ValueError: all input arrays must have the same shape

Print statements while running:

    cellTraces shapes
    (6, 12000)
    (6, 12000)
    (6, 12000)
    (6, 12000)
    (6, 12000)

Print statements before crash:

    cellTraces shapes
    (12000,)
    (12000,)
    (6, 12000)
    (6, 12000)
    (6, 12000)

The problem is that if a cell doesn't have a sec, it still needs an array of NaNs
for each parameter value, not just one array of NaNs

Got it working.

** Generating a figure: one synapse on dendrite

file:gif/20170721_glut_multicell_vtrace_2.png

Inlcuding it in the article draft.

** Changing Tau2NMDA to 600 and rerunning figure

Everything works, and the plateaus are longer.


* 2017-07-24 -- Article, figures 

** TODO

Work on article draft -- methods and figures
Code more analysis for cells
Implement distributed and punctate glutamate stim
Switch to DMS NMDA synapse
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Getting an error in plot_vtraces

Error:

    In [5]: batch_analysis.plot_vtraces('NMDAdecay_glut', par1label="glut amp", par2label="cell")
    Reading data...
    0 files missing
    ---------------------------------------------------------------------------
    UnboundLocalError                         Traceback (most recent call last)
    <ipython-input-5-7a589e64cc4c> in <module>()
    ----> 1 batch_analysis.plot_vtraces('NMDAdecay_glut', par1label="glut amp", par2label="cell")

    /u/graham/projects/eee/sim/batches/batch_analysis.pyc in plot_vtraces(batchname, cellIDs, secs, par1label, par2label, save, outputdir)
        513             if not os.path.isdir(outputdir):
        514                 os.mkdir(outputdir)
    --> 515             fig1.savefig(os.path.join(outputdir, batchname + "_" + cellLabel + "_vtrace_1.png"))
        516             fig2.savefig(os.path.join(outputdir, batchname + "_" + cellLabel + "_vtrace_2.png"))
        517 

    UnboundLocalError: local variable 'fig1' referenced before assignment

Looking into problem.

Added print statements to see cells and secs as code cycles through.  Output:

    In [2]: batch_analysis.plot_vtraces('NMDAdecay_glut', par1label="glut amp", par2label="NMDAdecay")
    Reading data...
    0 files missing
    ('cellIDs   : ', [0, 1, 2, 3, 4])

    ('  cellLabel: ', 'cell_0')
    ('     secs  : ', [])
    UnboundLocalError...
    
So, for some reason, the code is not finding the secs.  Looking into this.

Weird.  It seems there was a problem with the initial batch simulation...  
There are figures output by Netpyne, but they are blank.  NMDArise_glut seems 
to have worked (figures are not blank).  Will try plotting this batch.

That worked.  So I need to figure out the problem with the NMDAdecay batch.

I'll do that in the new batch I'm creating.

** Starting a new batch folder: nospine_onesyn

Copying batch_nmda folder and cleaning up

Commented out all batches except NMDA decay.  Running now to see if there's 
an error.

    graham-mac% eee ; cd batches/batch_nospines_onesyn ; ./runmybatches

Well, the batch ran, and I was able to generate the vtrace plots, but there 
is no activity in the traces.

Looking into this.

Solution: at first I had named pops, types, and cells with a suffix (e.g. 
eee6Pop, eee6Type, and eee6Cell) so I could tell them apart in the code, 
but then decided that was unneccesary.  But I forgot to change names in cfg.py.

Rerunning now.  

Functional now.  Moving on to article figures.

** Figures for article

Results
No spines 
Fig ##: no spines, punctate inputs
Fig ##: no spines, uniform distrib inputs
Fig ##: no spines, realistic distrib inputs

With spines
Fig ##: spines, punctate inputs
Fig ##: spines, uniform distrib inputs
Fig ##: spines, realistic distrib inputs

Spines + spillover
Fig ##: local spillover, uniform distrib inputs
Fig ##: local spillover, realistic distrib inputs
Fig ##: overlapping spillover, uniform distrib inputs
Fig ##: overlapping spillover, realistic distrib inputs

** No spines figures

*** Punctate inputs 

Plan:
    1 synapse
    5 synapses
    10 synapses

  vs.
    Glutamate stim amp (NMDA syn weight)
    NMDA Tau2 (decay time constant)
    Location in Bdend

*** One synapse

batch dir: 
    /u/graham/projects/eee/sim/batches/batch_nospines_onesyn/

Added batches to my_batches.py:
    /u/graham/projects/eee/sim/batches/batch_nospines_onesyn/my_batches.py

Adding file to analyze these batches:
    /u/graham/projects/eee/sim/batches/batch_nospines_onesyn/analyze.py

So now to analyze this batch:
    graham-mac% eee ; cd batches/batch_nospines_onesyn ; ipython -i analyze.py

A few problems:
    
    1) par1 and par2 labeling is switched (glutLoc_glutAmp, NMDAdecay_glutAmp)
    2) glutLoc multicell has no activity
    3) NMDAdecay multicell has no activity

Solutions:

1) Problem is likely in get_vtraces

        graham-mac% eee ; ipython -i ieee.py
        In [1]: cd batches/batch_nospines_onesyn/
        In [2]: params, data = batch_utils.load_batch("NMDAdecay_glutAmp")
        In [3]: params
        Out[3]: 
        [{u'label': u'tau2NMDA', u'values': [75, 150, 300, 600, 1200]},
         {u'label': [u'NetStim1', u'weight', 0],
          u'values': [0.01, 0.011, 0.012, 0.013, 0.014, 0.015]}]
        In [4]: out = batch_analysis.get_vtraces(params, data)
        In [5]: out
        Out[5]: 
        {'autotitle': 'Voltage Traces from cell_0 (SPI6)',
         'autoxlabel': 'Time (ms)',
         'autoylabel': 'Membrane Potential (mV)',
         'legendlabel': 'soma',
         'params': [{u'label': u'tau2NMDA', u'values': [75, 150, 300, 600, 1200]},
          {u'label': [u'NetStim1', u'weight', 0],
           u'values': [0.01, 0.011, 0.012, 0.013, 0.014, 0.015]}],
         'xvector': array([  0.00000000e+00,   1.00000000e-01,   2.00000000e-01, ...,
                  1.19970000e+03,   1.19980000e+03,   1.19990000e+03]),
         'yarray': ...

    Well, the params are in the right order in both load_batch and get_vtraces.

    So, the problem must be in plotrelation2.

    Changing lines 422 and 424 from:
        plt.ylabel(par1label + " = " + str(p1val), fontsize="x-small")
        plt.title(par2label + " = " + str(p2val), fontsize="x-small")

    To:
        plt.ylabel(par2label + " = " + str(p2val), fontsize="x-small")
        plt.title(par1label + " = " + str(p1val), fontsize="x-small")

    Ignore the above.  Problem was simple: had wrong order in analyze.py

2 and 3) problem is in cfg.py

    The default value for glut amp is zero, so unless glut amp is being varied,
    there is no stim.

    Changing default NMDA weight (glut amp):  cfg.weightNMDA = 0.012 

*** Five synapses

Copied dir batch_nospines_onesyn to batch_nospines_5syns

Editing files to create 5 synapses

Running batches:
    graham-mac% eee ; cd batches/batch_nospines_5syns ; ./runmybatches

Got an error: need to remember that Netpyne wants lists instead of arrays 
(so that they are JSON serializable)

Batches that completed: glutLoc, glutLoc_glutAmp
Batches that did not: glutAmp, NMDAdecay, NMDAdecay_glutAmp

Looking into problem.

I think I needed 'synsPerConn' in NetStim.

Now all batches worked.

*** Variable number of synapses

Copied batch_nospines_5syns to batch_nospines_varsyns

Batches run, but getting an error:
Error: The length of the list of locations does not match synsPerConn (distributing uniformly)

Looking into this.

Solved the problem by modifying cfg to inlcude synsPerConn.  Funtional now.

** Adding figures to article draft

file:gif/20170724_glutLoc_multicell_vtrace_2.png
file:gif/20170724_NMDAdecay_multicell_vtrace_2.png
file:gif/20170724_numsyns_multicell_vtrace_2.png


* 2017-07-25 -- Distributed glutamate stim 

** TODO

Work on article draft -- methods and figures
Code more analysis for cells
Switch to DMS NMDA synapse
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Simulate 255 synaptic inputs

Will leave out SPI6 from now on, as its Bdend length is different from the rest

Created batch_nospines_255syns

Now to create two spine distributions: one uniform and one physiological

Uniform is easy: 
    
    usl = np.linspace(0.0, 1.0, num=255)

Physiological uses function getspineLocs (in cell model files):

    def getspineLocs(numspines, spinedist=[1]):
      numsecs = len(spinedist)
      spineLocs = []
      my_dist = np.array(spinedist).astype(float)
      norm_dist = np.array(my_dist)/sum(my_dist)
      spines_dist = np.round(numspines * norm_dist)
      for ind, spinenum in enumerate(spines_dist):
        start = ind * (1./numsecs)
        stop = (ind + 1) * (1./numsecs)
        num = spines_dist[ind]
        spineLocs.extend(list(np.linspace(start, stop, num=num, endpoint=False)))
      return(spineLocs)

With spinedist approximated from figure from Srdjan:

    spineDist = [0.982, 4.677, 10.91, 14.72, 18.24, 18.76, 19.05, 17.15, 17.38, 16.17, 15.36, 15.07, 15.24, 13.97, 12.53, 12.64, 11.84, 9.988, 11.43]

So physiological spine dist is:

    psl = getspineLocs(255, spineDist)

Getting a JSON serializable error.  Have to make these variables into lists.
Hmmm... That didn't work.  Doing some Googling.

It looks like array.tolist() is better than list(array): 
    https://stackoverflow.com/questions/26646362/numpy-array-is-not-json-serializable

Still a problem, because while psl is a list, it contains numpy.float64's 
instead of float's

Changing a line in getspineLocs from:
    spineLocs.extend(list(np.linspace(start, stop, num=num, endpoint=False)))

To:
    spineLocs.extend(np.linspace(start, stop, num=num, endpoint=False).tolist())

Still doesn't work:
    TypeError: array([usl values]) is not JSON serializable

Found the problem: I had an np array in cfg.py, not just in my_batches.py.
Now it runs without that error, but no figure outputs.

Debugging.  
    
    Exec netParams.py: no problems
    
    Exec batch_init.py: problem

        You can not locate a point process at
         position 0 or 1 if it needs an ion
        NEURON: ca_ion can't be inserted in this node
         near line 0
         ko0_k_ion = 2.5
                        ^
                MyExp2SynNMDABB(0)
        ---------------------------------------------------------------------------
        RuntimeError                              Traceback (most recent call last)
        <ipython-input-2-aa3ffd6f2f80> in <module>()
        ----> 1 execfile("batch_init.py")

        /u/graham/projects/eee/sim/batches/batch_nospines_255syns/batch_init.py in <module>()
             30 
             31 # add network stimulation
        ---> 32 sim.net.addStims()
             33 
             34 # setup variables to record for each cell (spikes, V traces, etc)

        /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in addStims(self)
            149                             params[sourceParam] = strParams[sourceParam+'List'][postCellGid] if sourceParam+'List' in strParams else source.get(sourceParam)
            150 
        --> 151                         postCell.addStim(params)  # call cell method to add connections
            152 
            153         print('  Number of stims on node %i: %i ' % (sim.rank, sum([len(cell.stims) for cell in self.cells])))

        /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addStim(self, params)
            986                 'seed': params['seed'] if 'seed' in params else sim.cfg.seeds['stim']}
            987 
        --> 988             self.addConn(connParams, netStimParams)
            989 
            990 

        /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addConn(self, params, netStimParams)
            695         # Add synaptic mechanisms
            696         if not pointp: # check not a point process
        --> 697             synMechs, synMechSecs, synMechLocs = self._setConnSynMechs(params, secLabels)
            698             if synMechs == -1: return
            699 

        /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in _setConnSynMechs(self, params, secLabels)
           1142 
           1143         # add synaptic mechanism to section based on synMechSecs and synMechLocs (if already exists won't be added)
        -> 1144         synMechs = [self.addSynMech(synLabel=params['synMech'], secLabel=synMechSecs[i], loc=synMechLocs[i]) for i in range(synsPerConn)]
           1145 
           1146         return synMechs, synMechSecs, synMechLocs

        /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addSynMech(self, synLabel, secLabel, loc)
            593                 if not synMech.get('hSyn'):  # if synMech doesn't have NEURON obj, then create
            594                     synObj = getattr(h, synMechParams['mod'])
        --> 595                     synMech['hSyn'] = synObj(loc, sec=sec['hSec'])  # create h Syn object (eg. h.Exp2Syn)
            596                     for synParamName,synParamValue in synMechParams.iteritems():  # add params of the synaptic mechanism
            597                         if synParamName not in ['label', 'mod', 'selfNetCon', 'loc']:

        RuntimeError: hoc error

Problem seems to be that my synlocs include positions 0 and/or 1, which cannot 
be used if a point process with ions is there.

Yeah, both usl and psl start at 0.0 and end at 1.0.

I think I will use 257 synapses instead of 255, and then remove the first and last.

    e.g.: usl = np.linspace(0.0, 1.0, num=257).tolist()[1:-1]

Trying runmybatches again: no crash, but no output figures.

Debugging:
    exec netParams.py: no problem
    exec batch_init.py: same error about 0 or 1

Checking spinelocs:
    usl doesn't include 0 or 1
    psl doesn't either

I'm at a loss.  I think I'll try using usl and psl directly instead of as 
parameters in a batch.

Still didn't work, same error.  

Aha, changed the usl in cfg.py to:
    usl = np.linspace(0.0, 1.0, num=numsyns+2).tolist()[1:-1]

And now it works.

Except when I try to plot I get another error:

    graham-mac% eee ; cd batches/batch_nospines_255syns ; ipython -i analyze.py
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_nospines_255syns/analyze.py in <module>()
         11 batches1D = ["synDist"]
         12 
    ---> 13 batch_analysis.plot_vtraces_multicell('synDist', par1label="Dist", par2label="cell")
         14 
         15 

    /u/graham/projects/eee/sim/batches/batch_nospines_255syns/batch_analysis.pyc in plot_vtraces_multicell(batchname, cellIDs, secs, par1label, par2label, save, outputdir)
        565 
        566             if cellLabel in sim_data[secLabel].keys():
    --> 567                 temp_output = get_vtraces(params, data, cellID=cellID, section=sec)
        568                 cellTraces.append(temp_output['yarray'])
        569             else:

    /u/graham/projects/eee/sim/batches/batch_nospines_255syns/batch_analysis.pyc in get_vtraces(params, data, cellID, section, stable)
        184         paramnames.append(param['label'])
        185         paramvalues.append(param['values'])
    --> 186         paramvaluedicts.append({val: ind for ind, val in enumerate(param['values'])})
        187         if 'group' not in param:
        188             arrayshape.append(len(param['values']))

    /u/graham/projects/eee/sim/batches/batch_nospines_255syns/batch_analysis.pyc in <dictcomp>((ind, val))
        184         paramnames.append(param['label'])
        185         paramvalues.append(param['values'])
    --> 186         paramvaluedicts.append({val: ind for ind, val in enumerate(param['values'])})
        187         if 'group' not in param:
        188             arrayshape.append(len(param['values']))

    TypeError: unhashable type: 'list'

It seems that a dict key is getting a list, which is not allowed.

Yeah, there are two values of the param synlocs, each of which is a list.  
I'll try changing them to tuples, which a dict accepts.

I made the synlocs values into tuples in my_batches.py:
    # Varying synapse distribution (1D batch)
    batch = {}
    batch["label"] = "synDist"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["synlocs"] = [tuple(usl), tuple(psl)]
    batch["params"] = params
    batches[batch["label"]] = batch

Needed more tuples...  It works, but it seems like more trouble than it's worth.
And in the figure, the labels for param synlocs is the huge list (er, tuple) of
synlocs.  

Committing now to keep a record of how I did it, in case I want to try again 
in the future.

changeset:   358:89c5694a62ba

There doesn't seem to be much difference between the two syn distributions
anyway (at least for now when syns are on Bdend instead of on spines)

file:gif/20170725_synDist_multicell_vtrace_1.png

Top row is uniform syn distribution, bottom row is physiological distribution

** Project Meeting

Penny is working on complex morphology, adding NMDA/AMPA to a branch, 
and trying to stim twice in 20 ms interval to mimic effect Srdjan sees
experimentally

Joe shouldn't bother switching to the Destexhe NMDA channel until after 
first paper

Sergio: someone at meeting is doing very similar work
    /u/sergioangulo/papers/papoutsi2017.pdf
    /u/sergioangulo/papers/Psarrou2014.pdf
    /u/sergioangulo/papers/papoutsi2013.pdf

Where to submit EEE first paper?  eNeuro


* 2017-07-26 -- Moving glut input to spines

** TODO

Work on article draft -- methods and figures
Code more analysis for cells
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Comparing location of syns (dend vs spines)

Copied batch_nospines_255syns to batch_tospines

Will put same number of syns on Bdend1 and on spines on Bdend1 and compare

Now will exclude SPI6, eee6, and eee7, focusing only on models with spines:
eee7us and eee7ps



* 2017-07-27 -- Moving syns to spines

** TODO

Compare glut stim on Bdend with stim on spines
Work on article draft -- methods and figures
Code more analysis for cells
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Dends vs spines

Placing the input at the base of the spine necks is equivalent to having them
on the dendritic shaft (tip from Michael Hines)

Now to generate batch figs with spines at base of necks and at tips of heads

Updating getspineLocs in the cell models. 

Now to apply a single glut input either on dend or on spine head, and vary:
  stim loc along Bdend
  stim amplitude
  NMDA decay time constant

  

* 2017-07-31 -- Moving syns to spines

** TODO

Compare glut stim on Bdend with stim on spines
Work on article draft -- methods and figures
Code more analysis for cells
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Moving stim to spines

Working in: eee/sim/batches/batch_tospines

Right now I want to apply the glut stim to the base of the spine neck and 
the tip of the spine head and compare the difference, across variables:
    spine number
    stim amplitude
    NMDA decay time constant
for uniform and physiological spine distributions:
    eee7us
    eee7ps

Adding cellRules to netParams to group spine heads and necks:
    
    cellRule['secLists']['spineheads'] = []
    cellRule['secLists']['spinenecks'] = []

    for cell_label, cell_params in netParams.cellParams.iteritems():
        for secName,sec in cell_params['secs'].iteritems(): 
            ...
            if "head" in secName:
                cellRule['secLists']['spineheads'].append(secName)
            if "neck" in secName:
                diam = cellRule['secs'][secName]['geom']['diam']
                leng = cellRule['secs'][secName]['geom']['L']
                if cfg.Rneck:
                    cellRule['secs'][secName]['geom']['Ra'] = cfg.Rneck * 100 * 3.1416 * (diam/2) * (diam/2) / leng
                cellRule['secLists']['spinenecks'].append(secName)

Fixed a couple problems with getspineLocs, but it is not always producing the 
right number of spineLocs...

    In [21]: len(getspineLocs(255, spinedist=[1]))

        raise Exception("Error: number of synapses (%i) not equal to desired number (%i)." % (len(spineLocs), numspines))
        
    Out[21]: 256

    In [22]: len(getspineLocs(255, spinedist=[1, 1]))
    Out[22]: 255

    In [23]: len(getspineLocs(255, spinedist=[1, 1, 1]))

        raise Exception("Error: number of synapses (%i) not equal to desired number (%i)." % (len(spineLocs), numspines))
        
    Out[23]: 257

Need to fix this problem before moving on.  I think I will create an array of 
Nones the desired size of spineLocs, then loop through it, figuring out the 
spacing between spines at each step and adding it to the current spineLoc.  

Need spineLocs[0] > 0.0 and spineLocs[-1] < 1.0

I'll use a default spacing from the ends determined by the number of spines.

Default spacing = 1.0 / numSpines

Moving getspineLocs to batch_utils (since more than one cell calls it, should 
have just one copy instead of a different copy in each cell)

Got it working (differently from ideas above):

    def getspineLocs(numspines, spinedist=[1]):
        numspines += 2
        numsecs = len(spinedist)
        spinespersec = []
        total_weight = sum(spinedist)
        for weight in spinedist:
            weight = float(weight)
            if weight > 0:
                share = weight / total_weight
            else:
                share = 0.0
            distributed = round(share * numspines)
            spinespersec.append(distributed)
            total_weight -= weight
            numspines -= distributed
        spineLocs = []
        for index, spines in enumerate(spinespersec):
            start = index * (1./numsecs)
            stop = (index + 1) * (1./numsecs)
            spineLocs.extend(np.linspace(start, stop, num=spines, endpoint=False).tolist())
        spineLocs = spineLocs[1:-1]
        return spineLocs

Thanks to stack overflow post here:
https://stackoverflow.com/questions/9088403/distributing-integers-using-weights-how-to-calculate

** Back to moving stim to spines

Right now I want to apply the glut stim to the base of the spine neck and 
the tip of the spine head and compare the difference, across variables:
    spine number
    stim amplitude
    NMDA decay time constant
for uniform and physiological spine distributions:
    eee7us
    eee7ps

*** Attempted to run batches, no output --> debugging

    graham-mac% eee ; cd batches/batch_tospines ; ipython -i 
    In [1]: execfile("netParams.py")
    ...
    In [2]: execfile("batch_init.py")

    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]

    Creating network of 2 cell populations on 1 hosts...
      Number of cells on node 0: 2 
      Done; cell creation time = 0.11 s.
    Making connections...
      Number of connections on node 0: 0 
      Done; cell connection time = 0.00 s.
    Adding stims...
    NEURON: not a Python nrn.Segment
     near line 0
     ko0_k_ion = 2.5
                    ^
            MyExp2SynNMDABB(...)
    ---------------------------------------------------------------------------
    RuntimeError                              Traceback (most recent call last)
    <ipython-input-2-aa3ffd6f2f80> in <module>()
    ----> 1 execfile("batch_init.py")

    /u/graham/projects/eee/sim/batches/batch_tospines/batch_init.py in <module>()
         30 
         31 # add network stimulation
    ---> 32 sim.net.addStims()
         33 
         34 # setup variables to record for each cell (spikes, V traces, etc)

    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in addStims(self)
        149                             params[sourceParam] = strParams[sourceParam+'List'][postCellGid] if sourceParam+'List' in strParams else source.get(sourceParam)
        150 
    --> 151                         postCell.addStim(params)  # call cell method to add connections
        152 
        153         print('  Number of stims on node %i: %i ' % (sim.rank, sum([len(cell.stims) for cell in self.cells])))

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addStim(self, params)
        986                 'seed': params['seed'] if 'seed' in params else sim.cfg.seeds['stim']}
        987 
    --> 988             self.addConn(connParams, netStimParams)
        989 
        990 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addConn(self, params, netStimParams)
        695         # Add synaptic mechanisms
        696         if not pointp: # check not a point process
    --> 697             synMechs, synMechSecs, synMechLocs = self._setConnSynMechs(params, secLabels)
        698             if synMechs == -1: return
        699 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in _setConnSynMechs(self, params, secLabels)
       1142 
       1143         # add synaptic mechanism to section based on synMechSecs and synMechLocs (if already exists won't be added)
    -> 1144         synMechs = [self.addSynMech(synLabel=params['synMech'], secLabel=synMechSecs[i], loc=synMechLocs[i]) for i in range(synsPerConn)]
       1145 
       1146         return synMechs, synMechSecs, synMechLocs

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addSynMech(self, synLabel, secLabel, loc)
        593                 if not synMech.get('hSyn'):  # if synMech doesn't have NEURON obj, then create
        594                     synObj = getattr(h, synMechParams['mod'])
    --> 595                     synMech['hSyn'] = synObj(loc, sec=sec['hSec'])  # create h Syn object (eg. h.Exp2Syn)
        596                     for synParamName,synParamValue in synMechParams.iteritems():  # add params of the synaptic mechanism
        597                         if synParamName not in ['label', 'mod', 'selfNetCon', 'loc']:

    RuntimeError: hoc error

*** Solution

When I change the syn loc from 0.0 to 0.1 on the neck, it starts working. 

I had this problem awhile ago, and it seems that one can't use 0.0 or 1.0 as 
locs if there are ions present...  I'll have to ask about this.

Batches run now.

    # Varying glutamate stim amplitude (1D batch)
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[('NetStim1', 'weight', 0)] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    batch["params"] = params
    batches[batch["label"]] = batch


    # Varying NMDA decay time constant (1D batch)
    batch = {}
    batch["label"] = "NMDAdecay"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["tau2NMDA"] = NMDAdecays
    batch["params"] = params
    batches[batch["label"]] = batch

And figures are generated:

    graham-mac% eee ; ipython -i ieee.py
    In [1]: cd batches/batch_tospines
    In [6]: batch_analysis.plot_vtraces_multicell('glutAmp', par1label="GlutAmp", par2label="cell")
    In [8]: batch_analysis.plot_vtraces_multicell('NMDAdecay', par1label="NMDAdecay", par2label="cell")


* 2017-08-01 -- Moving syns to spines, project meeting

** TODO

Compare glut stim on Bdend with stim on spines
Work on article draft -- methods and figures
Code more analysis for cells
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Updating Neurosim code

graham-mac% nsimstatus
graham-mac% nsimupdate

** Moving stim to spines

Plotted stim at base of neck yesterday, now to plot for stim at spine head

Changes in cfg.py:
    cfg.numsyns = 1
    #cfg.synsecs = 'neck_1'
    #cfg.synlocs = 0.1
    cfg.synsecs = 'head_1'
    cfg.synlocs = 1.0

And to run:
    graham-mac% eee; cd batches/batch_tospines/; ./runmybatches

No output.  I'll bet it's the problem with 0.0/1.0...  

Debugging.

    In [1]: execfile("netParams.py")
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod NMDA.mod GABAA.mod GABAB.mod

    In [2]: execfile("batch_init.py")

    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]

    Creating network of 2 cell populations on 1 hosts...
      Number of cells on node 0: 2 
      Done; cell creation time = 0.10 s.
    Making connections...
      Number of connections on node 0: 0 
      Done; cell connection time = 0.00 s.
    Adding stims...
    You can not locate a point process at
     position 0 or 1 if it needs an ion
    NEURON: ca_ion can't be inserted in this node
     near line 0
     ko0_k_ion = 2.5
                    ^
            MyExp2SynNMDABB(1)
    ---------------------------------------------------------------------------
    RuntimeError                              Traceback (most recent call last)
    <ipython-input-2-aa3ffd6f2f80> in <module>()
    ----> 1 execfile("batch_init.py")

    /u/graham/projects/eee/sim/batches/batch_tospines/batch_init.py in <module>()
         30 
         31 # add network stimulation
    ---> 32 sim.net.addStims()
         33 
         34 # setup variables to record for each cell (spikes, V traces, etc)

    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in addStims(self)
        149                             params[sourceParam] = strParams[sourceParam+'List'][postCellGid] if sourceParam+'List' in strParams else source.get(sourceParam)
        150 
    --> 151                         postCell.addStim(params)  # call cell method to add connections
        152 
        153         print('  Number of stims on node %i: %i ' % (sim.rank, sum([len(cell.stims) for cell in self.cells])))

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addStim(self, params)
        981                 'seed': params['seed'] if 'seed' in params else sim.cfg.seeds['stim']}
        982 
    --> 983             self.addConn(connParams, netStimParams)
        984 
        985 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addConn(self, params, netStimParams)
        690         # Add synaptic mechanisms
        691         if not pointp: # check not a point process
    --> 692             synMechs, synMechSecs, synMechLocs = self._setConnSynMechs(params, secLabels)
        693             if synMechs == -1: return
        694 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in _setConnSynMechs(self, params, secLabels)
       1137 
       1138         # add synaptic mechanism to section based on synMechSecs and synMechLocs (if already exists won't be added)
    -> 1139         synMechs = [self.addSynMech(synLabel=params['synMech'], secLabel=synMechSecs[i], loc=synMechLocs[i]) for i in range(synsPerConn)]
       1140 
       1141         return synMechs, synMechSecs, synMechLocs

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addSynMech(self, synLabel, secLabel, loc)
        588                 if not synMech.get('hSyn'):  # if synMech doesn't have NEURON obj, then create
        589                     synObj = getattr(h, synMechParams['mod'])
    --> 590                     synMech['hSyn'] = synObj(loc, sec=sec['hSec'])  # create h Syn object (eg. h.Exp2Syn)
        591                     for synParamName,synParamValue in synMechParams.iteritems():  # add params of the synaptic mechanism
        592                         if synParamName not in ['label', 'mod', 'selfNetCon', 'loc']:

    RuntimeError: hoc error

Looks like the same problem.  I'll switch loc to 0.9 and try again.

    cfg.numsyns = 1
    #cfg.synsecs = 'neck_1'
    #cfg.synlocs = 0.1
    cfg.synsecs = 'head_1'
    cfg.synlocs = 0.9

Yeah, now it works.

Asked for help with this problem in Slack.

    joe [8:55 AM] 
    I’m having this weird problem where I can’t put NMDA at 0.0 on spine necks or at 1.0 on spine heads…  Any suggestions?

    salvadord [8:57 AM] 
    thats not allowed in Neuron if the syn makes use of an ion

    [9:00] 
    can use 0.00001 and 0.99999

So it looks like it's not actually a problem.

I will rerun head and neck stim at 0.00001 and 0.99999, but first, I am
going to add the ability to add a title to plot_vtraces and plot_vtraces_multicell

** Adding ability to change filename of saved figures 

e.g. tag one "head" and one "neck"

Now, if you have a "filename=" input to plot_vtraces or plot_vtraces_multicell,
it appends that to the end of the filename.

** Comparing head and neck syns

file:gif/20170801_094640.png

** Making a plot of spine distribution

file:gif/20170801_112001.png

Adding it to the article summary

** Working on spillover

Syns are working on spine heads and necks.  Time for spillover:
activating syns on head and neck 

Creating new dir (batch_spillover) as copy of batch_tospines

Adding a second Netstim (one for heads, one for necks)

Time for project meeting.

** EEE Meeting

Joe: brief update on getting to spillover

Bill: want spillover to dendritic shaft, not spine necks 
      (be careful with description)

Bill: Joe should work on Netpyne development

Joe: concerned about conductances in spines, based on cell model
     
     conductances get inserted in all_sec: 

          def insert_conductances (self):
            for sec in self.all_sec:
              sec.insert('k_ion')
              sec.insert('na_ion')
              sec.insert('pas') # passive
              sec.insert('nax') # Na current
              sec.insert('kdr') # K delayed rectifier current
              sec.insert('kap') # K-A current

      and the gbars get set for all_sec:

            def set_props (self):
              ...
              for sec in self.all_sec:
                sec.ek = p_ek # K+ current reversal potential (mV)
                sec.ena = p_ena # Na+ current reversal potential (mV)
                sec.Ra = rall; sec.e_pas = Vrest # passive      
                sec.gbar_nax    = gbar_nax # Na      
                sec.gbar_kdr    = gbar_kdr # KDR
                sec.vhalfn_kdr = kdr_vhalfn # KDR kinetics 
                sec.gbar_kap    = gbar_kap # K-A
                sec.vhalfn_kap = kap_vhalfn # K-A kinetics
                sec.vhalfl_kap = kap_vhalfl
                sec.tq_kap = kap_tq


Bill: Bill Ross would be the guy to ask about channels in spines

Bill: but there were problems with the SPI6 cell model I'm using anyway,
      Salva corrected them, Joe should correct as well


** Chat about correcting cell problems

    salvadord [Today at 12:23 PM] 
    in #eee-theory
    /u/salvadord/Models/m1/sim/cells/PTcell.hoc and /u/salvadord/Models/m1/sim/netParams.py (line 116)


    21 replies
    joe [1 hour ago] 
    @salvadord , is this the cell where you made the corrections?


    salvadord [1 hour ago] 
    yes, but some of the corrections (all?) are made directly in netParams.py; also this cell uses a different ih channel which reproduces some features that the prev one didn’t, so I had to adapt some other params to compensate and keep similar fI curve


    joe [1 hour ago] 
    Okay, thanks! I’ll look in netParams to see changes.


    joe [1 hour ago] 
    Why the switch of ih channel? Should I switch to the new one?


    salvadord [43 minutes ago] 
    hmm not sure… in summary there’s evidence that for strong inputs, ih reduces the output of neurons, despite ih being depolarizing

    salvadord [43 minutes ago] 
    for weak inputs the opposite is true: ih increases cell output

    salvadord [42 minutes ago] 
    this is kind of paradigmatic and the cell with the prev ih channel did not reproduce this effect

    salvadord [42 minutes ago] 
    but the new ih channel includes a leak current that enables the cell to match many of these findings

    salvadord [42 minutes ago] 
    /u/salvadord/Papers/Migl12.pdf

    salvadord [41 minutes ago] 
    /u/salvadord/Papers/Shee11.pdf

    salvadord [41 minutes ago] 
    also see my poster results - top row

    salvadord [40 minutes ago] 
    I’d say unless u are planning to show ih modulatory effects its not crucial

    joe [38 minutes ago] 
    Thanks Salva.

    joe [27 minutes ago] 
    Hey, I was trying to take a look at the papers you linked to, but they don’t seem to exist…

    salvadord [24 minutes ago] 
    woops just pushed Migl12.pdf … Shee11.pdf is actually there

    joe [21 minutes ago] 
    Got the Migliore one. Permission denied on the Shee.

    joe [21 minutes ago] 
    Interesting stuff, I hadn’t heard of ih acting that way. I don’t think I need to worry about it for this model though.

    salvadord [18 minutes ago] 
    hmm weird permissions … ok changed

    salvadord [18 minutes ago] 
    yeah the ih channel is super interesting… lots of controversy too

    salvadord [17 minutes ago] 
    the Sheets paper is interesting… and its by our m1 collab gordon shepherd

    joe [15 minutes ago] 
    Perfect. Thanks!

** Downloaded Ih articles from Salva and Dendritic Spines book from Yuste

** Back to spillover

Working on it.


* 2017-08-04 -- Spillover

** TODO

Spillover
Work on article draft -- methods and figures
Code more analysis for cells
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Updating neurosim repos

graham-mac% nsimstatus
graham-mac% nsimupdate

It seems I somehow modified SPI6 in the Neurosim repo: /usr/site/nrniv/local
Checking this.

Yeah, all the "Bdend" have been changed to "Bdend1".  I must have done this 
before I made my SPI6 a local copy.

I'll go ahead and revert in /usr/site/nrniv/local

    graham-mac% hg status
    M python/SPI6.py
    graham-mac% hg revert python/SPI6.py
    graham-mac% hg status
    ? python/SPI6.py.orig
    graham-mac% rm python/SPI6.py.orig
    graham-mac% hg status
    graham-mac% 

** Spine electrophysiology

I became concerned recently about which channels should be in the spines (i.e. 
do spines have active conductances).

So I found Rafael Yuste's book "Dendritic Spines", from p. 181 (my emphasis):

    """
    The biochemical compartmentalization at individual spines is well demonstrated. At the same time, many theoretical studies have highlighted the role that spines could play in the electrical transformation of synaptic inputs. ***Recent data have demonstrated that spines indeed possess voltage-dependent conductances.*** Moreover, new experiments indicate that the spine neck can substantially filter membrane potential. Finally, spine sodium channels substantially amplify synaptic potentials and could enhance dendritic backpropagation. The purpose of the local amplification of the EPSP, followed by its subsequent filtering by the spine neck is still unclear, but may be related to enhancing the activation of NMDARs, while at the same time maximizing the number of inputs that a neuron can receive and preventing their interaction. In any case, spines appear to have a significant electrical role, one that could greatly influence synaptic transmis- sion and plasticity, dendritic integration, and the function of many neural circuits.
    """

So, it looks like I should keep the active conductances in the spines.

It would be interesting to see how changing the spine conductances affects output.

From Yuste, p. 193:

    """
    the spine repertoire of active conductances, particularly of sodium and potassium channels, needs to be better elucidated; the density values, subtypes, kinetics, and their subsequent influence on electrical behavior are of particular importance. 
    """


* 2017-08-07 -- Spillover

** TODO

Spillover
Update cells with Salvador's improvements
Work on article draft -- methods and figures
Code more analysis for cells
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Spillover

So I want spillover onto the dendrite shaft (will be applied at the base of the
spine neck).  

I want to be able to choose one or any number of spines, apply a certain weight 
of NMDA activation, and have a variable percentage of that activation also 
impinge on the dendrite shaft.  Also should have a variable delay between 
spine head and dend shaft activation.

Variables desired:
  1) center of activation (one spine number)
  2) distance of spread across spines (number of spines to be activated)
  3) delay to reach dendritic shaft
  4) percentage of stim weight seen at shaft

I think it would be easiest to have NMDA/AMPA synapses located at each spine 
head and spine neck base.  Inactive synapses will have their weight set to zero.

This would require creation of a list of weights (mostly zeros) for the heads
and for the necks.

Question: how to apply weight to shaft?  As fraction of total weight, or as 
percentage of weight applied to spine head, or as independent value?

Working on this now.

*** Netpyne documentation for weight

http://www.neurosimlab.org/netpyne/reference.html#connectivity-rules

    weight (optional) - Strength of synaptic connection (e.g. 0.01).
    Associated to a change in conductance, but has different meaning and scale depending on the synaptic mechanism and cell model.

    Can be defined as a function (see Functions as strings).

    If omitted, defaults to netParams.defaultWeight = 1.

    If have list of synMechs, can have single weight for all, or list of weights (one per synMech, e.g. for 2 synMechs: [0.1, 0.01]).

    If have synsPerConn > 1, can have single weight for all, or list of weights (one per synapse, e.g. if synsPerConn = 3: [0.2, 0.3, 0.4])

    If have both a list of synMechs and synsPerConn > 1, can have a 2D list for each synapse of each synMech (e.g. for 2 synMechs and synsPerConn = 3: [[0.2, 0.3, 0.4], [0.02, 0.04, 0.03]])


*** eee/sim/batches/batch_spillover/cfg.py

Added the following:

    # glutLoc should be a spine number (0 to 255)
    # glutSpread should be the number of spines to spread to 
    #  (tarts at glutLoc spine and increases; shouldn't come to > spine 255)
    cfg.glutSpine     = 1
    cfg.glutSpread    = 1

    # spillDelay is time to reach dendritic shaft in ms
    # spillFraction is the percentage of weight reaching the dendritic shaft
    cfg.spillDelay    = 10.0
    cfg.spillFraction = 10.0

     cfg.NetStim1 = {'pop': ['eee7us', 'eee7ps'], 'loc': 0.99999, 'sec': 'spineheads', 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.weightNMDA/cfg.glutSpread, cfg.weightNMDA*cfg.ratioAMPANMDA/cfg.glutSpread], 'delay': 1.0}

    cfg.NetStim2 = {'pop': ['eee7us', 'eee7ps'], 'loc': 0.00001, 'sec': 'spinenecks', 'synMech': 'NMDA', 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': cfg.weightNMDA*cfg.spillFraction/cfg.glutSpread, 'delay': 1.0 + cfg.spillDelay}


*** eee/sim/batches/batch_spillover/netParams.py

Added:
    numSpines = len(cellRule['secLists']['spineheads'])

Now I need to create lists for weight, loc, and delay, based on the variables 
from cfg.py

Each list will be numSpines long.

Initialization of lists:

    spine_glut_weight = np.zeros(numSpines) 
    spine_glut_loc    = 0.99999 * np.ones(numSpines)
    spine_glut_delay  = np.ones(numSpines)

    shaft_glut_weight = np.zeros(numSpines)
    shaft_glut_loc    = 0.00001 * np.ones(numSpines)
    shaft_glut_delay  = spine_glut_delay + cfg.spillDelay * np.zeros(numSpines)

So really the only lists we need to modify are the weights.

    indWeightNMDA = cfg.weightNMDA / cfg.glutSpread
    activeSpines = cfg.glutSpine + np.arange(cfg.glutSpread)

    spine_glut_weight[activeSpines] = indWeightNMDA
    shaft_glut_weight[activeSpines] = indWeightNMDA * spillFraction

Now I need to modify netParams stimTargetParams such that it is different
for the head and shaft stims.

Modified NetStim inputs:

    if cfg.addNetStim:
        
        for nslabel in [k for k in dir(cfg) if k.startswith('NetStim')]:
            ns = getattr(cfg, nslabel, None)

            if ns['sec'] == 'spineheads':
                cur_weight = spine_NMDA_weight
                cur_loc    = spine_glut_loc 
                cur_delay  = spine_glut_delay
            elif ns['sec'] == 'spinenecks':
                cur_weight = shaft_glut_weight
                cur_loc    = shaft_glut_loc
                cur_delay  = shaft_glut_delay
            else:
                print("######################################################")
                print("NetStim sec needs to be 'spineheads' or 'spinenecks'")
                print("######################################################")

            # add stim source
            netParams.stimSourceParams[nslabel] = {'type': 'NetStim', 'start': ns['start'], 'interval': ns['interval'], 'noise': ns['noise'], 'number': ns['number']}

            # connect stim source to target
            for i in range(len(ns['synMech'])):
                if ns['synMech'][i] == 'AMPA': 
                    #ns['weight'][i] = ns['weight'][0] * cfg.ratioAMPANMDA
                    cur_weight = cur_weight * cfg.ratioAMPANMDA
                for curpop in ic['pop']:
                    netParams.stimTargetParams[nslabel+'_'+curpop+'_'+ns['synMech'][i]] = \
                        {'source': nslabel, 'conds': {'popLabel': ns['pop']}, 'sec': ns['sec'], 'synsPerConn': numSpines, 'loc': cur_loc, 'synMech': ns['synMech'][i], 'weight': cur_weight, 'delay': cur_delay}

** Trying out spillover

Executing netParams.py

Hmmm...  Having a problem: the length of the secLists for spinehead and 
spineneck are twice as long as they should be.

Sure enough, each spinehead/neck is in the list twice.  Looking into this.

Ahh, so there are two cells in the cellRule.  Also, looking at the dict of 
spineheads and spinenecks, they are unordered, so I will need a different
way of specifying which ones to stimulate.

Instead of having a big list (containing each spine) of mostly zero weights,
I will instead have a small list of activeSpineHeads and activeSpineNecks,
with small lists of their weights, locs, etc.

Made changes in netParams, fixed a few minor bugs, and it executes.

Made a couple batches in my_batches.py and now attempting to sim.
    graham-mac% eee ; cd batches/batch_spillover ; ./runmybatches

No output.  NetParams executes, so now to execute batch_init

Huh.  It can't seem to find netParams...   

Asking for help on Slack:

    joe [5:45 PM] 
    I’m trying to get spillover batches running, but when I `execfile("batch_init.py")` , I get: `Warning: Could not load netParams from command line path or from default netParams.py` , even though netParams.py is in the dir and executes fine…  Any ideas?

    joe [5:46 PM] 
    added this Perl snippet: netParams error
    Last login: Mon Aug 7 17:42:49 on ttys001
    graham-mac% eee ; ipython -i ieee.py
    cd /u/graham/projects/eee/sim
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul 2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.
    ​
    IPython 5.1.0 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    ​
    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod NMDA.mod GABAA.mod GABAB.mod
    ​
    In [1]: cd batches/batch_spillover
    /u/graham/projects/eee/sim/batches/batch_spillover
    ​
    In [2]: execfile("netParams.py")
    activeSpineHeads:
    ['head_1']
    ​
    In [3]: execfile("batch_init.py")
    ​
    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]
    ​
    Warning: Could not load netParams from command line path or from default netParams.py
    ---------------------------------------------------------------------------
    AttributeError              Traceback (most recent call last)
    <ipython-input-3-aa3ffd6f2f80> in <module>()
    ----> 1 execfile("batch_init.py")
    ​
    /u/graham/projects/eee/sim/batches/batch_spillover/batch_init.py in <module>()
       18 
       19 # create network object and set cfg and net params
    ---> 20 sim.initialize(simConfig = cfg, netParams = netParams)
       21 
       22 # instantiate network populations
    ​
    /usr/site/nrniv/local/python/netpyne/netpyne/simFuncs.pyc in initialize(netParams, simConfig, net)
       40     simTestObj = sim.SimTestObj(simConfig.checkErrorsVerbose)
       41     simTestObj.netParams = netParams
    ---> 42     simTestObj.runTests()
       43 
       44   # for testing validation
    ​
    /usr/site/nrniv/local/python/netpyne/netpyne/tests/tests.pyc in runTests(self)
      1423     if self.verboseFlag:
      1424       print (" *** Running tests *** ")
    -> 1425     self.runPopTests() # run pop tests
      1426     self.runNetTests() # run net tests
      1427     self.runCellTests() # run cell tests
    ​
    /usr/site/nrniv/local/python/netpyne/netpyne/tests/tests.pyc in runPopTests(self)
      2328       # print (" *** Running pop tests *** ")
      2329 
    -> 2330     popParams = self.netParams.popParams
      2331     for testName, popTestObj in self.testParamsMap["pop"].items():
      2332       self.execRunTests(popTestObj, popParams)
    ​
    AttributeError: 'dict' object has no attribute 'popParams'
    ​
    sergio [5:46 PM] 
    only happens to me if there is a bug in the code

    joe [5:47 PM] 
    Yeah, but netParams executes fine…  Where else could a bug be that would do this?

Will commit and push now.

** Change all symlinks to relative paths

So that they will work on anybody's machine.

Example:
    graham-mac% eee
    graham-mac% cd batches/batch_spillover
    graham-mac% ls -l
    ...
    lrwxr-xr-x  1 graham  staff    48 Jul 13 11:25 batch_init.py@ -> /u/graham/projects/eee/sim/batches/batch_init.py
    ...
    graham-mac% rm batch_init.py    
    graham-mac% ln -s ../batch_init.py batch_init.py
    graham-mac% ls -l
    ...
    lrwxr-xr-x  1 graham  staff    16 Aug  7 19:32 batch_init.py@ -> ../batch_init.py
    ...

Finished for batch_spillover, need to do for the rest of the batch dirs.

** Worked out a bunch of problems with Salva

Chat log:

    joe [5:47 PM] 
    Yeah, but netParams executes fine…  Where else could a bug be that would do this?


    joe [5:53 PM] 
    Just committed and pushed.  @salvadord , do you have any ideas?


    salvadord [6:20 PM] 
    pulling and checking


    joe [6:21 PM] 
    :slightly_smiling_face:


    salvadord [6:23 PM] 
    its an error in sid’s error checking code — just set `cfg.checkErrors = False` — @sidmitra can you have a look please? thx


    joe [6:26 PM] 
    Whew! Thanks, Salva.


    [6:28] 
    Hmmm… I’m still getting `Warning: Could not load netParams from command line path or from default netParams.py`


    [6:28] 
    And then it crashes on an error I assume is because netParams didn’t load…


    salvadord [6:46 PM] 
    added and commented on this Plain Text snippet
    Salvador-Duras-MacBook-Pro% cd batches/batch_spillover/
    Salvador-Duras-MacBook-Pro% ipy netParams.py 
    Python 2.7.12 |Anaconda 2.0.1 (x86_64)| (default, Jul 2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.
    IPython 5.1.0 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 (1487:91186d5e6fd3) 2016-12-20
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    ---------------------------------------------------------------------------
    ImportError                Traceback (most recent call last)
    /u/salvadord/Documents/ISB/Models/eee/sim/batches/batch_spillover/netParams.py in <module>()
       44 
       45 # EEE cell model with uniform spine distribution (7 comps)
    ---> 46 cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'eee7us', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')
       47 
       48 # EEE cell model with physiological spine distribution (7 comps)
    /u/salvadord/Documents/ISB/Models/netpyne_repo/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
      328       label = int(self._labelid)
      329       self._labelid += 1
    --> 330     secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
      331     cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
      332 
    /u/salvadord/Documents/ISB/Models/netpyne_repo/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
      168       sys.path.insert(0, filePath)
      169     moduleName = fileNameOnly.split('.py')[0] # remove .py to obtain module name
    --> 170     exec('import ' + moduleName + ' as tempModule') in globals(), locals() # import module dynamically
      171     modulePointer = tempModule
      172     if isinstance(cellArgs, dict):
    /u/salvadord/Documents/ISB/Models/netpyne_repo/netpyne/utils.pyc in <module>()
    /u/salvadord/Documents/ISB/Models/eee/sim/cells/eee7us.py in <module>()
       9 from math import exp,log
       10 import numpy as np
    ---> 11 from batch_utils import getspineLocs
       12 
       13 Vrest    = -88.5366550238
    ImportError: No module named batch_utils
    1 Comment Collapse
    I’m getting this error… Im I missing batch_utils somwhere?



    billl [6:48 PM] 
    @salva -- you are asking sid?


    joe [6:50 PM] 
    @batch_utils: Yeah, batch_utils should be symlinked from sim/batches into sim/batches/batch_spillover.


    salvadord [7:11 PM] 
    ah ic, maybe u can add a script/func that does that, so people who pull from your repo can use easily


    [7:12] 
    aah the symlink is there but is hardcoded to your path: batch_utils.py@ -> /u/graham/projects/eee/sim/batches/batch_utils.py


    [7:13] 
    so guess if make realative paths should work ok


    joe [7:16 PM] 
    Oh, thanks! I thought it was set up so it would use relative paths.


    [7:17] 
    I’ll fix that.


    salvadord [7:19 PM] 
    added and commented on this Plain Text snippet
    /u/salvadord/Documents/ISB/Models/eee/sim/cells/eee7us.py in <module>()
       55 p_ena = 42.0
       56 # h-current
    ---> 57 h.erev_ih = -37.0 # global
       58 gbar_h = 0.000140956438043
       59 h_gbar_tuft = 0.00565 # mho/cm^2 (based on Harnett 2015 J Neurosci)
    LookupError: 'erev_ih' is not a defined hoc variable name.
    1 Comment Collapse
    anything symlinks required for the mod files?



    joe [7:21 PM] 
    I’ve had that problem before.  Let me search my nb


    [7:24] 
    Oh, yeah, so there should be a symlink to eee/sim/x86_64 in the batch_spillover dir as well…


    salvadord [7:25 PM] 
    right makes sense


    joe [7:25 PM] 
    Figuring out how to do relative symlinks now, and then I’ll update…


    salvadord [7:26 PM] 
    added and commented on this Plain Text snippet
    NameError                 Traceback (most recent call last)
    /u/salvadord/Documents/ISB/Models/eee/sim/batches/batch_spillover/netParams.py in <module>()
       59 numActiveSpines = cfg.glutSpread
       60 
    ---> 61 spine_NMDA_weight = np.ones(numActiveSpines)
       62 spine_glut_loc  = 0.99999 * np.ones(numActiveSpines)
       63 spine_glut_delay = np.ones(numActiveSpines)
    NameError: name 'np' is not defined
    1 Comment Collapse
    seems like numpy not imported in netParams?



    joe [7:27 PM] 
    Whoops, I guess not.


    joe [7:36 PM] 
    Okay, changed all batch_spillover symlinks to relative and added numpy import to netParams.  Committed and pushed.


    salvadord [7:52 PM] 
    so u get any error now if run netParams.py?


    salvadord [7:53 PM] 
    added and commented on this Plain Text snippet
    Salvador-Duras-MacBook-Pro% ipy batch_init.py
    Python 2.7.12 |Anaconda 2.0.1 (x86_64)| (default, Jul 2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.
    IPython 5.1.0 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 (1487:91186d5e6fd3) 2016-12-20
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod NMDA.mod GABAA.mod GABAB.mod
    activeSpineHeads:
    ['head_1']
    Creating network of 2 cell populations on 1 hosts...
     Number of cells on node 0: 2 
     Done; cell creation time = 0.10 s.
    Making connections...
     Number of connections on node 0: 0 
     Done; cell connection time = 0.00 s.
    Adding stims...
    ---------------------------------------------------------------------------
    TypeError                 Traceback (most recent call last)
    /u/salvadord/Documents/ISB/Models/eee/sim/batches/batch_spillover/batch_init.py in <module>()
       30 
       31 # add network stimulation
    ---> 32 sim.net.addStims()
       33 
       34 # setup variables to record for each cell (spikes, V traces, etc)
    /u/salvadord/Documents/ISB/Models/netpyne_repo/netpyne/network.pyc in addStims(self)
      154               params[sourceParam] = strParams[sourceParam+'List'][postCellGid] if sourceParam+'List' in strParams else source.get(sourceParam)
      155 
    --> 156             postCell.addStim(params) # call cell method to add connections
      157 
      158     print(' Number of stims on node %i: %i ' % (sim.rank, sum([len(cell.stims) for cell in self.cells])))
    /u/salvadord/Documents/ISB/Models/netpyne_repo/netpyne/cell.pyc in addStim(self, params)
      953         return
      954 
    --> 955     sec = self.secs[params['sec']]
      956 
      957     if not 'loc' in params: params['loc'] = 0.5 # default stim location
    TypeError: unhashable type: 'list'
    1 Comment Collapse
    netParams.py works for me, but I get this error with batch_init.py … same for u?



    joe [7:58 PM] 
    Same here.

    salvadord [7:59 PM] 
    error seems to do with the ‘sec’ used in the netstims … lms

    joe [8:03 PM] 
    I’m working on it also.  Let me know if you figure something out.

    salvadord [8:11 PM] 
    fixed that one … was netpyne bug — pushed fix to netpyne repo and updated nsim

    [8:11] 
    now getting different error :slightly_smiling_face:

    salvadord [8:12 PM] 
    added and commented on this Plain Text snippet
    NEURON: not a Python nrn.Segment
     near line 0
     ko0_k_ion = 2.5
            ^
        MyExp2SynNMDABB(...)
    ---------------------------------------------------------------------------
    RuntimeError               Traceback (most recent call last)
    /u/salvadord/Documents/ISB/Models/eee/sim/batches/batch_spillover/batch_init.py in <module>()
       30 
       31 # add network stimulation
    ---> 32 sim.net.addStims()
       33 
       34 # setup variables to record for each cell (spikes, V traces, etc)
    /u/salvadord/Documents/ISB/Models/netpyne_repo/netpyne/network.pyc in addStims(self)
      154               params[sourceParam] = strParams[sourceParam+'List'][postCellGid] if sourceParam+'List' in strParams else source.get(sourceParam)
      155 
    --> 156             postCell.addStim(params) # call cell method to add connections
      157 
      158     print(' Number of stims on node %i: %i ' % (sim.rank, sum([len(cell.stims) for cell in self.cells])))
    /u/salvadord/Documents/ISB/Models/netpyne_repo/netpyne/cell.py in addStim(self, params)
      979         'seed': params['seed'] if 'seed' in params else sim.cfg.seeds['stim']}
      980 
    --> 981       self.addConn(connParams, netStimParams)
      982 
      983 
    /u/salvadord/Documents/ISB/Models/netpyne_repo/netpyne/cell.py in addConn(self, params, netStimParams)
      690     # Add synaptic mechanisms
      691     if not pointp: # check not a point process
    --> 692       synMechs, synMechSecs, synMechLocs = self._setConnSynMechs(params, secLabels)
      693       if synMechs == -1: return
      694 
    /u/salvadord/Documents/ISB/Models/netpyne_repo/netpyne/cell.py in _setConnSynMechs(self, params, secLabels)
      1138 
      1139     # add synaptic mechanism to section based on synMechSecs and synMechLocs (if already exists won't be added)
    -> 1140     synMechs = [self.addSynMech(synLabel=params['synMech'], secLabel=synMechSecs[i], loc=synMechLocs[i]) for i in range(synsPerConn)]
      1141 
      1142     return synMechs, synMechSecs, synMechLocs
    /u/salvadord/Documents/ISB/Models/netpyne_repo/netpyne/cell.py in addSynMech(self, synLabel, secLabel, loc)
      588         if not synMech.get('hSyn'): # if synMech doesn't have NEURON obj, then create
      589           synObj = getattr(h, synMechParams['mod'])
    --> 590           synMech['hSyn'] = synObj(loc, sec=sec['hSec']) # create h Syn object (eg. h.Exp2Syn)
      591           for synParamName,synParamValue in synMechParams.iteritems(): # add params of the synaptic mechanism
      592             if synParamName not in ['label', 'mod', 'selfNetCon', 'loc']:
    RuntimeError: hoc error
    1 Comment Collapse
    this seems related to syn location … maybe placing on edge (0.0 or 1.0) ?

    joe [8:12 PM] 
    Great, thanks!

    [8:13] 
    Lemme update and see.

    [8:15] 
    Yeah, I get the same error.

    [8:15] 
    I don’t think it’s syn loc… I’ve had that problem and the error was different.

    [8:15] 
    `NEURON: not a Python nrn.Segment`

    joe [8:21 PM] 
    Huh. I’m not sure what the problem is, but I’ll keep looking.

    salvadord [8:22 PM] 
    seems like loc is a 1-element array — [0.999] — instead of float

    joe [8:25 PM] 
    I changed it to a list, and same problem.

    [8:26] 
    Doesn’t loc need to be a list if there is to be more than one synsPerConn?

    [8:27] 
    Or can it be one value?  From Netpyne documentation, it looked like weight, loc, and delay need to be lists the same size as synsPerConn…

    salvadord [8:28 PM] 
    ah sorry that part can be confusing… it can be always be a single value even if have synperconn>1 … and in fact seems like for stimTargetParams needs to be single value

    [8:29] 
    does that work for u? or need list?

    joe [8:29 PM] 
    Single value is all I need.  Let me try that.

    [8:31] 
    Woohoo! And then D’oh!  A new error anyway!

    joe [8:32 PM] 
    added this Plain Text snippet
    Creating network of 2 cell populations on 1 hosts...
     Number of cells on node 0: 2 
     Done; cell creation time = 0.12 s.
    Making connections...
     Number of connections on node 0: 0 
     Done; cell connection time = 0.00 s.
    Adding stims...
    ---------------------------------------------------------------------------
    TypeError                 Traceback (most recent call last)
    <ipython-input-2-aa3ffd6f2f80> in <module>()
    ----> 1 execfile("batch_init.py")
    /u/graham/projects/eee/sim/batches/batch_spillover/batch_init.py in <module>()
       30 
       31 # add network stimulation
    ---> 32 sim.net.addStims()
       33 
       34 # setup variables to record for each cell (spikes, V traces, etc)
    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in addStims(self)
      154               params[sourceParam] = strParams[sourceParam+'List'][postCellGid] if sourceParam+'List' in strParams else source.get(sourceParam)
      155 
    --> 156             postCell.addStim(params) # call cell method to add connections
      157 
      158     print(' Number of stims on node %i: %i ' % (sim.rank, sum([len(cell.stims) for cell in self.cells])))
    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addStim(self, params)
      979         'seed': params['seed'] if 'seed' in params else sim.cfg.seeds['stim']}
      980 
    --> 981       self.addConn(connParams, netStimParams)
      982 
      983 
    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addConn(self, params, netStimParams)
      762           else:
      763             sec = self.secs[synMechSecs[i]]
    --> 764             postTarget = synMechs[i]['hSyn'] # local synaptic mechanism
      765 
      766           if netStimParams:
    TypeError: 'NoneType' object has no attribute '__getitem__'
    Add Comment Collapse

    salvadord [8:32 PM] 
    yup, looking at it :slightly_smiling_face:

    joe [8:35 PM] 
    This error may be because my NetStim1 (spineheads) has two synMechs (NMDA and AMPA) while NetStim2 (spillover, spinenecks) has only one (NMDA).

    [8:35] 
    I wasn’t quite sure how to deal with that, and I’m not sure I did it correctly…

    [8:36] 
    Does anything obvious jump out at you?

    salvadord [8:36 PM] 
    y that solves the problem… but not sure exactly why that should be the case :confused:


    [8:37] 
    u should be able to provide stims to any arbitrary set of synMechs


    joe [8:37 PM] 
    What solves the problem?


    salvadord [8:37 PM] 
    using [‘NMDA’, ‘AMPA’] for netstim2


    joe [8:38 PM] 
    Huh.


    salvadord [8:39 PM] 
    huh also if you use [‘NMDA’]


    joe [8:40 PM] 
    Hahaha!


    [8:40] 
    Yeah, on subsequent iterations, I get ns[‘synMech’][i] =


    [8:40] 
    N


    [8:40] 
    M


    [8:40] 
    D


    [8:40] 
    A


    [8:41] 
    Yup.  Once I put ‘NMDA’ in a list, it works fine!


    [8:42] 
    Thanks for all your help, Salva!


    salvadord [8:42 PM] 
    hehe ok well I’ll fix that one tomorrow, should be possible to put outside list


    [8:42] 
    thx for help debugging


    joe [8:42 PM] 
    Always glad to help break things.  :wink:


* 2017-08-08 -- Spillover batching

** TODO

Spillover
Update cells with Salvador's improvements
Chagne all symlinks to relative links
Work on article draft -- methods and figures
Code more analysis for cells
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Spillover

*** Finding good glut stim amp values

Running first batches:
    graham-mac% eee ; cd batches/batch_spillover ; ./runmybatches

Glut stim is way too high, each trace shows depolarization block.

Reducing stim by half and trying again.

  In my_batches.py:
      glut_stim_scale = 0.5 #1.0

  In cfg.py:
      cfg.weightNMDA = 0.006 #0.012 

Glut stim still way too high, each trace shows depolarization block.

Reducing stim to 1/10 original and trying again.

  In my_batches.py:
      glut_stim_scale = 0.1 #1.0

  In cfg.py:
      cfg.weightNMDA = 0.0012 #0.012 

Too low now, no spiking.  Increasing to 20% of original

  In my_batches.py:
      glut_stim_scale = 0.2 #1.0

  In cfg.py:
      cfg.weightNMDA = 0.0024 #0.012 

Still too low.  Increasing to 30% of original.

  In my_batches.py:
      glut_stim_scale = 0.3 #1.0

  In cfg.py:
      cfg.weightNMDA = 0.0036 #0.012 

Now I'm getting depol block.  Seems like the range of glut stim amplitudes
that generates spiking but not depol block is quite small...

Changing to 25% of original:

  In my_batches.py:
      glut_stim_scale = 0.25 #1.0

  In cfg.py:
      cfg.weightNMDA = 0.003 #0.012 

Now output looks okay -- no depol block.

*** Adding more batches to explore variables

First, changing the spine where glut stim is applied to further out Bdend1:
  cfg.glutSpine = 50

Variables of interest:
  cfg.glutSpine     = 50
  cfg.glutSpread    = 1
  cfg.spillDelay    = 10.0
  cfg.spillFraction = 10.0

So I will make batches varying glutAmp, and
  1) glutSpine     = [0, 50, 100, 150, 200, 250]
  2) glutSpread    = [1, 5, 10, 15, 20]
  3) spillDelay    = [0, 5, 10, 15, 20]
  4) spillFraction =  

*** Whoops! spillFraction is set to 10.0 when it should be 0.10

This likely explains the need for reduced glut stim amplitude.

Changing default spillFraction to 0.1 and rerunning glutAmp batches.

Yup.  Not enough stim now for spiking.  Increasing glutAmp to its original values.

Now stim amp is too low for spiking.  Trying 1.5x values.
Too low.  Trying 2.0x values.

Looks okay, but the glutAmp range is too narrow.

Changing from default values x 2:
  [0.02, 0.022, 0.024, 0.026, 0.028, 0.030]
to:
  [0.01, 0.02, 0.03, 0.04, 0.05]

Odd.  Now glutAmp doesn't seem to be varied -- spike trains are all the same
Huh.  Even changing the glut_stim_scale to 10 has no effect.  What happened?

Changing back to default values x2 and seeing what happens.

What?! Spike traces are still all the same for all values of glutAmp.  Gah!

Maybe it has something to do with changing spillFraction?  Setting it to 0.0...

That results in less spiking, as expected, but traces all still identical across
glutAmp values...

Changing cfg.glutSpine back to = 1

That results in less spiking, but still no change in spikes across glutAmp.  

Bizarre.  Deleting all .pyc files and trying again.  No effect.

I'm at a loss.  I copied batch_spillover dir to my desktop and will revert 
netParams.py, cfg.py, and my_batches.py to last commit.

    graham-mac% hg revert sim/batches/batch_spillover/cfg.py
    graham-mac% hg revert sim/batches/batch_spillover/my_batches.py
    graham-mac% hg revert sim/batches/batch_spillover/netParams.py
    graham-mac% hg status
    M notebook.org
    ? sim/batches/batch_spillover/cfg.py.orig
    ? sim/batches/batch_spillover/my_batches.py.orig
    ? sim/batches/batch_spillover/netParams.py.orig

Looking back at previous batches from today, I realize glutAmp wasn't being 
varied in any of them.

** Asking for help on Slack

Committing and pushing first.

    joe [10:34 AM] 
    Speaking of breaking things…  @salvadord , could you take a look at my repo when you have a moment?  I’m trying to vary the NMDA weight in the spillover dir, and Netpyne says it is changing the values, but my print statements show the values all being the same…


    salvadord [10:36 AM] 
    sure np, was just fixing ysterdays bug … might be having lunch soon, so maybe check after


    joe [10:38 AM] 
    No worries.  To run batch and see print statements: `cd eee/sim/batches/batch_spillover ; ./runmybatches`


** Varying parameters

  1) glutSpine     = [0, 50, 100, 150, 200, 250]
  2) glutSpread    = [1, 5, 10, 15, 20]
  3) spillDelay    = [0, 5, 10, 15, 20]
  4) spillFraction = [0, 5, 10, 15, 20]

Added batches to my_batches.py:

    # Varying glutamate stim amplitude (1D batch)
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[('NetStim1', 'weight', 0)] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim spine number (0 near soma)
    batch = {}
    batch["label"] = "glutSpine"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpine"] = [0, 50, 100, 150, 200, 250]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate spread (how many spines activated)
    batch = {}
    batch["label"] = "glutSpread"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpine"] = [1, 5, 10, 15, 20]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate spill delay
    batch = {}
    batch["label"] = "spillDelay"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["spillDelay"] = [0, 5, 10, 15, 20]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate spill fraction
    batch = {}
    batch["label"] = "spillFraction"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["spillFraction"] = [0.0, 0.05, 0.010, 0.015, 0.020]
    batch["params"] = params
    batches[batch["label"]] = batch

And modified analyze.py to generate plots for all batches.

The batches all ran and analyze.py produced figures.  But, there is no spiking.
Will increase default NMDA weight and rerun batches.  
(Weight from 0.25 * 0.012 to 0.012)

Salva had me update Netpyne and try again, but most parameters still not
getting varied...  

Digging around...


* 2017-08-09 -- Spillover and helping Sergio

** TODO

Spillover batching -- get varying
Update cells with Salvador's improvements
Chagne all symlinks to relative links
Work on article draft -- methods and figures
Code more analysis for cells
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Spillover batching -- get varying

Only one batch of sims is seeing its parameters varied.

Chat with Salva:

    salvadord [7:17 PM] 
    which of the batches is getting varied?

    [7:18] 
    @joe

    salvadord [7:23 PM] 
    so I tested glutSpine and that one does change… guess I was lucky with my 1st choice!

    salvadord [7:48 PM] 
    for the batch that modifies `params[('NetStim1', 'weight', 0)]`, the reason it doesn’t vary is that in netParams you are setting the weight to a fixed value (`cur_weight = list(spine_NMDA_weight`) instead of using the value from cfg

    [7:49] 
    perhaps the other batches also have issues in how they are implemented in netParams?

    joe [9:35 PM] 
    Yeah, I was wondering if that might be a problem…  Ultimately, it all comes from `cfg.weightNMDA`, but it’s a bit roundabout…

    [9:35] 
    `spine_NMDA_weight = [indWeightNMDA for head in activeSpineHeads]`

    [9:35] 
    and

    [9:36] 
    `indWeightNMDA = cfg.weightNMDA / cfg.glutSpread`

    [9:39] 
    Tomorrow I’ll try `cur_weight = list([cfg.weightNMDA / cfg.glutSpread for head in activeSpineHeads])`

    [9:39] 
    Buenas noches.

    ----- Today August 9th, 2017 -----
    salvadord [5:55 AM] 
    hmm ok as long as all that is in netParams, it should work… I’ll check again

    joe [7:21 AM] 
    So you think it should work as is?

    [7:23] 
    I was going through Netpyne code yesterday, trying to figure out how exactly the batching replaces cfg.parameter_value for each sim…

    [7:24] 
    Right now, I think my code requires netParams to be executed before each sim to update e.g. cur_weight.

    [7:24] 
    Could you give me a quick rundown of how Netpyne replaces cfg.parameter_values, @salvadord ?

    [7:25] 
    When you have time.  No hurry.

I'll try setting:
  cur_weight = list([cfg.weightNMDA / cfg.glutSpread for head in activeSpineHeads])

And seeing if that forces Netpyne to vary cur_weight for each sim.

Nope.

** Possible breakthrough

I started printing cfg.weightNMDA in netParams, and it isn't being varied.
This actually makes sense, because cfg.weightNMDA isn't a parameter in 
my batch, ('NetStim1', 'weight', 0) is the parameter:

    # Varying glutamate stim amplitude (1D batch)
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[('NetStim1', 'weight', 0)] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    batch["params"] = params
    batches[batch["label"]] = batch

I'm going to try changing the batch to vary cfg.weightNMDA.  Then, netParams 
will have to set ('NetStim1', 'weight', 0) using that value...

    # Varying glutamate stim amplitude (1D batch)
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["weightNMDA"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    batch["params"] = params
    batches[batch["label"]] = batch

Crossing my fingers...

Eureka.  Now the glut stim is being varied.  Whew!

No spiking, will increase weight.  Changing glut_stim_scale from 0.25 to 1.0

Still no spiking.  Increasing glut_stim_scale to 2.0.

Getting spiking now, but also getting depol block in eee7us at the highest 
glutAmp (0.3)

** Chat with Salva

    salvadord [8:52 AM] 
    added this Plain Text snippet: batch steps
    1) copy netParams.py (or whatever names specified) to batch folder
    2) load cfg (SimConfig object) from cfg.py (or whatever file is specified)
    3) iterate param combinations:
     3a) modify cfg (SimConfig object) 
     3b) save cfg to .json file
     3c) run simulation by passing netParams.py and cfg.json files; this means code in netParams.py is executed but cfg is a set of fixed saved values.

    joe [9:00 AM] 
    Thanks, Salva, that was just what I was looking for.

    salvadord [9:12 AM] 
    ah right so problem is that what you are changing in batch is cfg.NetStim1[‘weight’][0] , but waht you are using in netParams is cfg.weighNMDA which hasnt been changed

    joe [9:18 AM] 
    Yeah, I can see that now.

    [9:19] 
    I changed my batch to vary weightNMDA, and used that to set (‘NetStim1’, ‘weight’, 0) in netParams, and now it’s working.  :sweat_smile:

    salvadord [9:20 AM] 
    great!

    joe [9:20 AM] 
    Thanks again.

** Working with Sergio on plateaus in simplified cell model

Our outputs don't match.

Chat with Sergio:


    sergio [9:58 AM] 
    Hi Joe

    joe [9:59 AM] 
    Hey Sergio. How’s it going?

    sergio [9:59 AM] 
    everything is fine

    [9:59] 
    doing sims

    [10:00] 
    you have been working hard

    joe [10:00 AM] 
    Trying to make progress and wrap up this simplified cell model.

    [10:00] 
    Lots of work, but unfortunately, not as much progress.  :sweat_smile:

    [10:01] 
    How’s your sims coming along?

    sergio [10:01 AM] 
    I think that for every step, I do two backwards

    joe [10:02 AM] 
    Hahaha! I often feel the same way!

    sergio [10:02 AM] 
    hehe I’m trying to break the cycle

    [10:03] 
    so I’m working with your cell

    [10:03] 
    and did stim to the basal dendrite at the location 0.3

    [10:03] 
    with only NMDA

    joe [10:04 AM] 
    How’s it working out?

    sergio [10:04 AM] 
    uploaded and commented on this image: batch_4_5_traces.png
    1 Comment
    tau2 1200; weight 0.1

    joe [10:05 AM] 
    Nice plateau!

    sergio [10:05 AM] 
    I am trying to use as guide the plateaus from the poster

    sergio [10:05 AM] 
    shared this file
    EEE_CNS_poster_2017
    Presentation from Google Drive
    Click to open in Google Drive
    1 Comment

    sergio [10:06 AM] 
    but I have a question about the weights

    [10:06] 
    it seems that I need to do higher weight to induce the plateau

    [10:07] 
    I’m using the NMDA from MyExp2SynNMDABB

    [10:08] 
    and the eee7.py cell

    joe [10:08 AM] 
    With the simplified model, I think the weight will be pretty arbitrary.  I think.

    sergio [10:09 AM] 
    also do you use only NMDA for the sims in the poster?

    [10:10] 
    not the combination AMPA/NMDA

    joe [10:10 AM] 
    I’m using NMDA and AMPA.

    [10:11] 
    I set the weight for NMDA and then use a ratio to set AMPA weight.

    sergio [10:11 AM] 
    ok

    [10:11] 
    what is the best ratio?

    joe [10:12 AM] 
    But AMPA doesn’t seem to contribute much.  At least at the ratio I’ve been using.

    `cfg.ratioAMPANMDA = 0.2`

    [10:12] 
    So the AMPA weight is `cfg.weightNMDA*cfg.ratioAMPANMDA`

    sergio [10:13 AM] 
    ok let me configure that

    joe [10:15 AM] 
    added this JavaScript/JSON snippet: Here are the param values from my cfg.py
    ###############################################################################
    # Parameters
    ###############################################################################
    cfg.dendNa = 0.00345 
    ​
    cfg.tau1NMDA = 15
    cfg.tau2NMDA = 600
    ​
    cfg.BdendRa = 114.510490019
    ​
    cfg.ratioAMPANMDA = 0.2
    cfg.weightNMDA = 0.012
    ​
    cfg.dendK = 1.0
    ​
    # glutLoc should be a spine number (0 to 255)
    # glutSpread should be the number of spines to spread to 
    # (starts at glutLoc spine and increases; shouldn't come to > spine 255)
    cfg.glutSpine   = 1
    cfg.glutSpread  = 1
    ​
    # spillDelay is time to reach dendritic shaft in ms
    # spillFraction is the percentage of weight reaching the dendritic shaft
    cfg.spillDelay  = 10.0
    cfg.spillFraction = 0.0 #0.10
    Add Comment Collapse

    joe [10:16 AM] 
    Hey Sergio, I’m going to hit the gym.  I’ll be back in awhile.

    sergio [10:16 AM] 
    ok

    [10:16] 
    thanks Joe!

    joe [10:16 AM] 
    No problem.  Talk to you in a bit.

    joe [1:03 PM] 
    Okay, I’m running your batch.  How did you generate the plot?

    sergio [1:04 PM] 
    it does generate the plot in the folder of the batch

    joe [1:05 PM] 
    Hmmm… Didn’t generate plots then…

    sergio [1:06 PM] 
    oh noo

    [1:06] 
    did it produce at least an empty  plot?

    joe [1:06 PM] 
    Give me a minute to see what’s going on…

    [1:07] 
    No, no plots at all.  Would be in `eee/data/batch_dend`, right?

    sergio [1:08 PM] 
    yep

    joe [1:08 PM] 
    My neighbor needs some help moving heavy boxes.  Sorry, back in maybe 30.

    sergio [1:09 PM] 
    ok no problem

    joe [1:09 PM] 
    In the meantime, could you pull a temp_sergio of your repo, compile, run batch, etc., to make sure it works out of the box?

    [1:09] 
    pull should be clone

    sergio [1:09 PM] 
    perfect

    joe [1:10 PM] 
    Great.  Back soon.

    sergio [1:24 PM] 
    added this Plain Text snippet
    mkdir serg_temp; cd serg_temp; hg clone /u/sergioangulo/projects/eee ; cd eee/sim/mod; mkmod; cd ..; ./runbatch; cd ../data/batch_dend; ls *.png
    Add Comment

    sergio [1:24 PM] 
    it did work on neurosim

    joe [1:58 PM] 
    I’m back.  Gonna figure out why it didn’t work on my machine.

    sergio [2:05 PM] 
    ok joe

    joe [2:05 PM] 
    I did a fresh clone, and its running now and producing figs.  :slightly_smiling_face:

    sergio [2:05 PM] 
    yaay

    joe [3:10 PM] 
    Found one easy-to-fix problem, now working on a hard-to-find one…

    [3:10] 
    Easy: needed to reduce nax_gbar in dends to 10% of prior value

    sergio [3:11 PM] 
    oh great

    joe [3:11 PM] 
    Hard: it looks to me like NMDAw isn’t actually getting varied.

    [3:12] 
    Do you see increasing plateau/spikes with increasing NMDAw in the figures?

    sergio [3:12 PM] 
    I was coding that one this morning

    [3:12] 
    yep

    joe [3:12 PM] 
    To me, it looks like at one value of Tau2, output from all diff NMDAw are the same…

    sergio [3:12 PM] 
    let me check

    [3:14] 
    it doesn’t change the value of the weight

    joe [3:15 PM] 
    added this Plain Text snippet: Added print statements to your netParams
    #------------------------------------------------------------------------------
    # NetStim inputs
    #------------------------------------------------------------------------------
    if cfg.addNetStim:
     #cfg.NetStim1 = {'pop':'PT5','sec':'Bdend1','loc':0.3,'synMech':['NMDA'],'start':200,'interval':20,'noise':0.1,'number':1,'weight':0.1,'delay': 1}
     # single NetStim
     for key in [k for k in dir(cfg) if k.startswith('NetStim')]:
      params = getattr(cfg, key, None) 
      
      cfg.analysis['plotTraces']['include'].append((params['pop'],0)) # record that pop
      # add stim source
      netParams.stimSourceParams[key] = {
       'type': 'NetStim',
       'start': params['start'],
       'interval': params['interval'],
       'noise': params['noise'],
       'number': params['number']}
      
      # connect stim source to target
      for i, syn in enumerate(params['synMech']):
       synWeight = params['weight'][i]
       netParams.stimTargetParams[key+'_'+params['pop']+'_'+syn] = {
        'source': key,
        'conds': {'popLabel': params['pop']},
        'sec': params['sec'],
        'loc': params['loc'],
        'synMech': syn,
        'weight': synWeight, #params['weight'],
        'delay': params['delay']}
       print
       print("====================================================================")
       print("syn: ", syn)
       print("synWeight: ", synWeight)
       print("====================================================================")
       print
    Add Comment Collapse

    sergio [3:15 PM] 
    do you think it is a problem in the batch?

    joe [3:15 PM] 
    added this JavaScript/JSON snippet: This is the output every time
    ​
    ====================================================================
    ('syn: ', u'AMPA')
    ('synWeight: ', 0.020000000000000004)
    ====================================================================
    ​
    ​
    ====================================================================
    ('syn: ', u'NMDA')
    ('synWeight: ', 0.1)
    ====================================================================
    ​
    Add Comment Collapse

    joe [3:16 PM] 
    I think it’s a problem in netParams

    sergio [3:16 PM] 
    ok

    joe [3:16 PM] 
    I believe it’s because you’re setting synWeight like this: `synWeight = params['weight'][i]`

    sergio [3:16 PM] 
    it is using only the value in NetParams

    [3:17] 
    I mean cfg

    joe [3:17 PM] 
    When it should be more like `if syn is NMDA: synWeight=cfg.NMDAw`

    sergio [3:17 PM] 
    ok

    joe [3:18 PM] 
    I’ll try to get it working.

    [3:18] 
    Just giving you a heads-up so you can dig around as well.

    sergio [3:18 PM] 
    ok

    [3:18] 
    let me try to modify it

    joe [3:40 PM] 
    added this Plain Text snippet: netParams -- now varies NMDAw
    #------------------------------------------------------------------------------
    # NetStim inputs
    #------------------------------------------------------------------------------
    if cfg.addNetStim:
     #cfg.NetStim1 = {'pop':'PT5','sec':'Bdend1','loc':0.3,'synMech':['NMDA'],'start':200,'interval':20,'noise':0.1,'number':1,'weight':0.1,'delay': 1}
     # single NetStim
     for key in [k for k in dir(cfg) if k.startswith('NetStim')]:
      params = getattr(cfg, key, None) 
      
      cfg.analysis['plotTraces']['include'].append((params['pop'],0)) # record that pop
      # add stim source
      netParams.stimSourceParams[key] = {
       'type': 'NetStim',
       'start': params['start'],
       'interval': params['interval'],
       'noise': params['noise'],
       'number': params['number']}
      
      # connect stim source to target
      for i, syn in enumerate(params['synMech']):
       if syn == "NMDA":
        synWeight = cfg.NMDAw
       elif syn == "AMPA":
        synWeight = cfg.NMDAw * 0.2
       #synWeight = params['weight'][i]
       netParams.stimTargetParams[key+'_'+params['pop']+'_'+syn] = {
        'source': key,
        'conds': {'popLabel': params['pop']},
        'sec': params['sec'],
        'loc': params['loc'],
        'synMech': syn,
        'weight': synWeight, #params['weight'],
        'delay': params['delay']}
       print
       print("====================================================================")
       print("syn: ", syn)
       print("synWeight: ", synWeight)
       print("====================================================================")
       print
    Add Comment Collapse

    joe [3:42 PM] 
    Now I can see that NMDAw is being varied, but the traces still don’t match up with mine for the same inputs/

    [3:42] 
    Gonna keep looking.

    sergio [3:42 PM] 
    thanks joe!

    [3:42] 
    are we using the same location?

    joe [3:43 PM] 
    Good question…

    [3:43] 
    No, my loc is actually 0.5

    [3:43] 
    But that shouldn’t make such a big difference like I’m seeing.

    [3:43] 
    I’ll try running yours with loc = 0.5 just to be sure…

    [3:44] 
    Oh, and you should change line 52 of your eee7.py to `nax_gbar_dendm = 0.1 #1.0
    `

    sergio [3:45 PM] 
    ok

    [3:45] 
    that was my next qs

    joe [3:51 PM] 
    Yeah, the loc can’t account for the diff…  Now I’m worried that my netParams has been doing something wrong with AMPA… :confounded:

    sergio [3:53 PM] 
    nooo

    joe [4:03 PM] 
    Whew.  That’s not the problem.

    [4:03] 
    Of course, now I have to find the problem…

    sergio [4:09 PM] 
    good to find out it was fine!

    joe [4:09 PM] 
    :+1:

    sergio [4:15 PM] 
    joe, I need to run to have a haircut before they close for today

    [4:15] 
    I’ll connect after that

    joe [4:15 PM] 
    Cool, Serg. I needed a break anyway.

    sergio [4:16 PM] 
    ok

    joe [4:16 PM] 
    All this bug-hunting wears a guy out!

    [4:16] 
    Hasta luego.

    sergio [4:16 PM] 
    hasta luego!

* 2017-08-10 -- Matching models

** TODO

Match models with Sergio's
Spillover batching -- get varying
Update cells with Salvador's improvements
Chagne all symlinks to relative links
Work on article draft -- methods and figures
Code more analysis for cells
Fix alignment problem in plotrelation2
Improve analysis code to handle any number of params

** Chat with Penny regarding spines


    penny [8:20 AM] 
    @joe Hi, Joe, do you mind to give a brief review on how u model spine head and spine neck? Were they at different nseg and have different membrane resistance? How do u determine the size of each spine and distance between them? Sorry, u must have mentioned it before... I am still catching up the very basic. Do u have some good reference I could read? Thanks!!!

    joe [8:24 AM] 
    Sure thing.  Let me finish my breakfast and I’ll pull together some info.

    penny [8:24 AM] 
    Thanks thanks! No hurry~:grin:

    joe [9:03 AM] 
    @penny , here is the article from Srdjan that I used to set spine density:

    [9:03] 
    https://paperpile.com/view/52f45757-b65d-07fb-90e2-230a3f02a9c7

    [9:03] 
    (Let me know if you can or can’t access the Paperpile link)

    penny [9:03 AM] 
    Cool! Thanks ! I can view it :grin::grin::grin:

    joe [9:07 AM] 
    Perfect.  Rafael Yuste literally wrote the book on dendritic spines:

    [9:07] 
    https://paperpile.com/view/259bb2ce-4d5a-056a-99c5-b5dec8c44a95

    joe [9:21 AM] 
    added and commented on this Plain Text snippet: Spine properties
      Parameter      Popovic et al.     Chiu et al.
      ===========================================================
      Neck diameter    0.2 um         0.2 um
      Neck length     1 um          0.43 um
      Head diameter    1 um          0.61 um
      Head length     1 um          1.07 um
      Ra         105 Ωcm         200 Ωcm
      Cm         1 µf/cm2        1.5 µf/cm2
      g_pas        1/17000 S/cm2      1/20000 S/cm2  
    1 Comment Collapse
    I’m using the Popovic values.

    joe [9:21 AM] 
    Popovic: https://paperpile.com/view/b1cf2475-36c9-0ea1-93b1-df54e1cd77ba

    [9:21] 
    Chiu: https://paperpile.com/view/ee52815b-1e12-0f88-8e07-8409ef88b291

    [9:22] 
    @penny, let me know if/when you want to see some of the code I use to implement spines.


** Changing all repo symlinks to relative so others can use

First, copying batch_nmda to batch_nmda_sergio, then I can revert batch_nmda 
to its original code.

Copied, now will commit.  
changeset:   375:376cec44f142

Example of relative symlinking:
    graham-mac% eee
    graham-mac% cd batches/batch_spillover
    graham-mac% ls -l
    ...
    lrwxr-xr-x  1 graham  staff    48 Jul 13 11:25 batch_init.py@ -> /u/graham/projects/eee/sim/batches/batch_init.py
    ...
    graham-mac% rm batch_init.py    
    graham-mac% ln -s ../batch_init.py batch_init.py
    graham-mac% ls -l
    ...
    lrwxr-xr-x  1 graham  staff    16 Aug  7 19:32 batch_init.py@ -> ../batch_init.py
    ...

I need to do this in each batch dir:

    batch_fi
    batch_nmda
    batch_nmda_sergio
    batch_nospines_5syns
    batch_nospines_255syns
    batch_nospines_onesyn
    batch_nospines_varsyns
    batch_spillover
    batch_spineLoc
    batch_tospines

For the following files/dirs:

    batch_analysis.py
    batch_init.py
    batch_utils.py
    runmybatches
    x86_64

That's a lot of symlinking.  I think I'll put together a quick Python script 
to handle it.

Added the following function to batch_utils.py:

    def rel_symlinks(batchesDir=None):
        """Create relative symlinks to necessary utility code in each batch dir."""

        import os
        if batchesDir is None:
            batchesDir = os.getcwd()

        os.chdir(batchesDir)
        print("Current directory: %s" % (os.getcwd()))

        links = ["batch_analysis.py", "batch_init.py", "batch_utils.py", "runmybatches", "x86_64"]

        batch_dirs = [name for name in os.listdir(batchesDir) if os.path.isdir(os.path.join(batchesDir, name)) and name.startswith("batch_")]

        for batch_dir in batch_dirs:
            os.chdir(batch_dir)
            print("  Current directory: %s" % (os.getcwd()))

            for link in links:
                if os.path.islink(link):
                    print("    Current link: %s" % (link))
                    print("      rm " + link)
                    os.system("rm " + link)
                    if link == "x86_64":
                        print("      ln -s ../../" + link + " " + link)
                        os.system("ln -s ../../" + link + " " + link)
                    else:
                        print("      ln -s ../" + link + " " + link)
                        os.system("ln -s ../" + link + " " + link)

            os.chdir(os.path.dirname(os.getcwd()))

It seems to have worked.  All symlinks seem to be relative now.  :)

Wait, the x86_64 symlinks didn't get made...  Ahh, x86_64 was in .hgignore.
I removed it from .hgignore, added the symlinks to Hg, and added it again.

** Matching models with Sergio

Sergio's parameter values in the batch:

    params['tau2NMDA'] = [1.0, 2.0, 4.0, 6.0, 8.0]
    params['NMDAw'] =[0.01, 0.02, 0.04, 0.06, 0.08, 0.1]

I will match these in batch_nmda_sergio/my_batches.py

    params["tau2NMDA"] = [150, 300, 600, 900, 1200]
    params[('NetStim1', 'weight', 0)] = list(np.array(glut_stim_weight) * 1.0)

Actually, his tau2NMDA is already the same as mine.  I just need:

    params[('NetStim1', 'weight', 0)] = [0.01, 0.02, 0.04, 0.06, 0.08, 0.1]

But, first I'm going to save sim time by reducing number of values.

Sergio's:
    params['tau2NMDA'] = [1.0, 4.0]
    params['NMDAw'] =[0.04, 0.06, 0.08, 0.1]
Mine:
    params["tau2NMDA"] = [150, 600]
    params[('NetStim1', 'weight', 0)] = [0.04, 0.06, 0.08, 0.1]

Changing line 52 of my and Sergio's eee7.py to:
    nax_gbar_dendm = 0.1 #1.0

Modified my netParams and cfg to only sim eee7 (instead of all cell models)

Now to run them both and compare.

To run mine:
    cd /u/graham/projects/eee/sim/batches/batch_nmda_sergio/; ./runmybatches
To run Sergio's:
    cd ~/serg_temp/eee/sim/; ./runbatch

Big differences.  Looking into it.

Sergio didn't change his AMPA to the Neurosim default yet.  In his netParams:
    netParams.synMechParams['AMPA'] = {'mod':'MyExp2SynBB', 'tau1': 0.05, 'tau2': 5.3, 'e': 0}

I changed it to:
    netParams.synMechParams['AMPA'] = {'mod': 'AMPA'}

Which should be the same as mine.

Rerunning Sergio's batch.

Still not a match.  See chat log below for details.  Done for the day.

*** Chat with Sergio


    sergio [7:54 AM] 
    Hi Joe


    [7:54] 
    sorry yesterday I did not connect again


    [7:55] 
    I had dinner with my wife after the haircut


    joe [7:55 AM] 
    No worries.  I ended up having dinner and a movie with some friends.


    sergio [7:55 AM] 
    nice


    joe [7:55 AM] 
    I suppose it’s okay for you to *occasionally* spend some time with the wife.  :wink:


    sergio [7:55 AM] 
    hehehe


    [7:56] 
    yes, she asks for time sometimes


    joe [7:56 AM] 
    Computational neuroscience is a demanding mistress. n


    sergio [7:56 AM] 
    hehehehe


    [7:56] 
    all of you were connected on sunday


    joe [7:57 AM] 
    It’s so hot here that there’s not much to do outside.  Sometimes work is the best option.


    [7:58] 
    I’m gonna have a quick breakfast and then get back to figuring out why our models aren’t the same.


    sergio [7:58 AM] 
    perfect


    sergio [9:19 AM] 
    uploaded this image: batch_4_4_traces.png
    Add Comment



    sergio [9:19 AM] 
    this is very similar to one of your traces


    [9:20] 
    but I'm using 0.08 for the weight on the NMDA


    [9:20] 
    I am using the AMPA from MyExp2Syn


    [9:21] 
    shoould I change to the AMPA mod file at the neurosim repo?


    sergio [9:21 AM] 
    added this Plain Text snippet
    >>> sim.net.cells[0].secs
    {Bdend1: {ions: {na: {i: 10.0, e: 42.0, o: 140.0}, ca: {i: 5e-05, e: 132.4579341637009, o: 2.0}, k: {i: 54.4, e: -104.0, o: 2.5}}, mechs: {kBK: {tau: 1.0, caPmax: 1.0, caPmin: 0.0, caVhh: 0.002, caVhmin: -2.1899738592999967, gpeak: 5.09733585163e-05, caPh: 0.002, caPk: 1.0, k: 17.0, caVhmax: 155.67}, pas: {e: -88.5366550238, g: 7.620207783345154e-05}, cadad: {taur: 99.1146852282, depth: 0.119408607923, kt: 0.0, cainf: 0.00024, kd: 0.0}, ih: {aslope: 11.9, gbar: 0.000140956438043, ascale: 0.00643, bslope: 33.1, bscale: 0.193, ashift: 154.9}, kap: {vhalfn: 32.7885075379, gbar: 0.0898600246397, sh: 0.0, vhalfl: -59.7867409796, tq: -52.0967985869}, can: {gcanbar: 4.60717910591e-06}, cal: {gcalbar: 4.41583533572e-06}, nax: {gbar: 0.00345117294903, sh: 0.0}, kdr: {gbar: 0.0131103978049, sh: 0.0, vhalfn: 11.6427471384}}, synMechs: [{loc: 0.5, hSyn: MyExp2SynBB[0], e: 0, label: 'AMPA', tau2: 5.3, tau1: 0.05, mod: 'MyExp2SynBB'}, {loc: 0.5, hSyn: MyExp2SynNMDABB[0], e: 0, tau1NMDA: 15.0, label: 'NMDA', tau2NMDA: 150.0, mod: 'MyExp2SynNMDABB'}], hSec: <netpyne.cell.CompartCell object at 0x7f5229d1dcd0>.Bdend1, geom: {nseg: 99, diam: 2.2799248874, L: 200.0, cm: 1.89771901209, Ra: 114.510490019}, topol: {childX: 0.0, parentSec: 'soma', parentX: 0.5}, vinit: -75.0413649414}, Bdend2: {ions: {na: {i: 10.0, e: 42.0, o: 140.0}, ca: {i: 5e-05, e: 132.4579341637009, o: 2.0}, k: {i: 54.4, e: -104.0, o: 2.5}}, mechs: {kBK: {tau: 1.0, caPmax: 1.0, caPmin: 0.0, caVhh: 0.002, caVhmin: -2.1899738592999967, gpeak: 5.09733585163e-05, caPh: 0.002, caPk: 1.0, k: 17.0, caVhmax: 155.67}, pas: {e: -88.5366550238, g: 7.620207783345154e-05}, cadad: {taur: 99.1146852282, depth: 0.119408607923, kt: 0.0, cainf: 0.00024, kd: 0.0}, ih: {aslope: 11.9, gbar: 0.000140956438043, ascale: 0.00643, bslope: 33.1, bscale: 0.193, ashift: 154.9}, kap: {vhalfn: 32.7885075379, gbar: 0.0898600246397, sh: 0.0, vhalfl: -59.7867409796, tq: -52.0967985869}, can: {gcanbar: 4.60717910591e-06}, cal: {gcalbar: 4.41583533572e-06}, nax: {gbar: 0.00345117294903, sh: 0.0}, kdr: {gbar: 0.0131103978049, sh: 0.0, vhalfn: 11.6427471384}}, hSec: <netpyne.cell.CompartCell object at 0x7f5229d1dcd0>.Bdend2, geom: {nseg: 99, diam: 2.2799248874, L: 200.0, cm: 1.89771901209, Ra: 114.510490019}, topol: {childX: 0.0, parentSec: 'soma', parentX: 0.5}, vinit: -75.0413649414}, soma: {ions: {na: {i: 10.0, e: 42.0, o: 140.0}, ca: {i: 5e-05, e: 132.4579341637009, o: 2.0}, k: {i: 54.4, e: -104.0, o: 2.5}}, mechs: {kBK: {tau: 1.0, caPmax: 1.0, caPmin: 0.0, caVhh: 0.002, caVhmin: -2.1899738592999967, gpeak: 5.09733585163e-05, caPh: 0.002, caPk: 1.0, k: 17.0, caVhmax: 155.67}, pas: {e: -88.5366550238, g: 5.404892936362239e-05}, kdmc: {gbar: 0.000447365630734}, cadad: {taur: 99.1146852282, depth: 0.119408607923, kt: 0.0, cainf: 0.00024, kd: 0.0}, ih: {aslope: 11.9, gbar: 0.000140956438043, ascale: 0.00643, bslope: 33.1, bscale: 0.193, ashift: 154.9}, kap: {vhalfn: 32.7885075379, gbar: 0.0898600246397, sh: 0.0, vhalfl: -59.7867409796, tq: -52.0967985869}, can: {gcanbar: 4.60717910591e-06}, cal: {gcalbar: 4.41583533572e-06}, nax: {gbar: 0.0345117294903, sh: 0.0}, kdr: {gbar: 0.0131103978049, sh: 0.0, vhalfn: 11.6427471384}}, hSec: <netpyne.cell.CompartCell object at 0x7f5229d1dcd0>.soma, geom: {nseg: 1, diam: 28.2149102762, L: 48.4123467666, cm: 1.78829677463, Ra: 114.510490019}, topol: {}, vinit: -75.0413649414}, Adend1: {ions: {na: {i: 10.0, e: 42.0, o: 140.0}, ca: {i: 5e-05, e: 132.4579341637009, o: 2.0}, k: {i: 54.4, e: -104.0, o: 2.5}}, mechs: {kBK: {tau: 1.0, caPmax: 1.0, caPmin: 0.0, caVhh: 0.002, caVhmin: -2.1899738592999967, gpeak: 5.09733585163e-05, caPh: 0.002, caPk: 1.0, k: 17.0, caVhmax: 155.67}, pas: {e: -88.5366550238, g: 9.30129299683914e-05}, cadad: {taur: 99.1146852282, depth: 0.119408607923, kt: 0.0, cainf: 0.00024, kd: 0.0}, ih: {aslope: 11.9, gbar: 0.0009508884978406061, ascale: 0.00643, bslope: 33.1, bscale: 0.193, ashift: 154.9}, kap: {vhalfn: 32.7885075379, gbar: 0.0898600246397, sh: 0.0, vhalfl: -59.7867409796, tq: -52.0967985869}, can: {gcanbar: 4.60717910591e-06}, cal: {gcalbar: 4.41583533572e-06}, nax: {gbar: 0.00345117294903, sh: 0.0}, kdr: {gbar: 0.0131103978049, sh: 0.0, vhalfn: 11.6427471384}}, hSec: <netpyne.cell.CompartCell object at 0x7f5229d1dcd0>.Adend1, geom: {nseg: 1, diam: 1.5831889597, L: 261.904636003, cm: 1.03418636866, Ra: 114.510490019}, topol: {childX: 0.0, parentSec: 'soma', parentX: 1.0}, vinit: -75.0413649414}, Adend2: {ions: {na: {i: 10.0, e: 42.0, o: 140.0}, ca: {i: 5e-05, e: 132.4579341637009, o: 2.0}, k: {i: 54.4, e: -104.0, o: 2.5}}, mechs: {kBK: {tau: 1.0, caPmax: 1.0, caPmin: 0.0, caVhh: 0.002, caVhmin: -2.1899738592999967, gpeak: 5.09733585163e-05, caPh: 0.002, caPk: 1.0, k: 17.0, caVhmax: 155.67}, pas: {e: -88.5366550238, g: 9.30129299683914e-05}, cadad: {taur: 99.1146852282, depth: 0.119408607923, kt: 0.0, cainf: 0.00024, kd: 0.0}, ih: {aslope: 11.9, gbar: 0.00565, ascale: 0.00643, bslope: 33.1, bscale: 0.193, ashift: 154.9}, kap: {vhalfn: 32.7885075379, gbar: 0.0898600246397, sh: 0.0, vhalfl: -59.7867409796, tq: -52.0967985869}, can: {gcanbar: 4.60717910591e-06}, cal: {gcalbar: 4.41583533572e-06}, nax: {gbar: 0.00345117294903, sh: 0.0}, kdr: {gbar: 0.0131103978049, sh: 0.0, vhalfn: 11.6427471384}}, hSec: <netpyne.cell.CompartCell object at 0x7f5229d1dcd0>.Adend2, geom: {nseg: 1, diam: 1.5831889597, L: 261.904636003, cm: 1.03418636866, Ra: 114.510490019}, topol: {childX: 0.0, parentSec: 'Adend1', parentX: 1.0}, vinit: -75.0413649414}, Adend3: {ions: {na: {i: 10.0, e: 42.0, o: 140.0}, ca: {i: 5e-05, e: 132.4579341637009, o: 2.0}, k: {i: 54.4, e: -104.0, o: 2.5}}, mechs: {kBK: {tau: 1.0, caPmax: 1.0, caPmin: 0.0, caVhh: 0.002, caVhmin: -2.1899738592999967, gpeak: 5.09733585163e-05, caPh: 0.002, caPk: 1.0, k: 17.0, caVhmax: 155.67}, pas: {e: -88.5366550238, g: 9.30129299683914e-05}, cadad: {taur: 99.1146852282, depth: 0.119408607923, kt: 0.0, cainf: 0.00024, kd: 0.0}, ih: {aslope: 11.9, gbar: 0.00565, ascale: 0.00643, bslope: 33.1, bscale: 0.193, ashift: 154.9}, kap: {vhalfn: 32.7885075379, gbar: 0.0898600246397, sh: 0.0, vhalfl: -59.7867409796, tq: -52.0967985869}, can: {gcanbar: 4.60717910591e-06}, cal: {gcalbar: 4.41583533572e-06}, nax: {gbar: 0.00345117294903, sh: 0.0}, kdr: {gbar: 0.0131103978049, sh: 0.0, vhalfn: 11.6427471384}}, hSec: <netpyne.cell.CompartCell object at 0x7f5229d1dcd0>.Adend3, geom: {nseg: 1, diam: 1.5831889597, L: 261.904636003, cm: 1.03418636866, Ra: 114.510490019}, topol: {childX: 0.0, parentSec: 'Adend2', parentX: 1.0}, vinit: -75.0413649414}, axon: {ions: {na: {i: 10.0, e: 42.0, o: 140.0}, k: {i: 54.4, e: -104.0, o: 2.5}}, mechs: {kdmc: {gbar: 0.00894731261468}, nax: {gbar: 0.1725586474515, sh: 0.0}, kap: {vhalfn: 32.7885075379, gbar: 0.4493001231985, sh: 0.0, vhalfl: -59.7867409796, tq: -52.0967985869}, pas: {e: -88.5366550238, g: 0.00025347188561059}, kdr: {gbar: 0.0655519890245, sh: 0.0, vhalfn: 11.6427471384}}, hSec: <netpyne.cell.CompartCell object at 0x7f5229d1dcd0>.axon, geom: {nseg: 1, diam: 1.40966286462, L: 594.292937602, cm: 1.01280903702, Ra: 114.510490019}, topol: {childX: 0.0, parentSec: 'soma', parentX: 0.0}, vinit: -75.0413649414}}
    Add Comment Collapse



    joe [9:23 AM] 
    Let me check which AMPA I’m using…  Yeah, we should def use the same one.


    [9:24] 
    Your plateau trace is looking pretty good!


    sergio [9:24 AM] 
    ok let me change that


    joe [9:27 AM] 
    Yeah, you’re using `netParams.synMechParams['AMPA'] = {'mod':'MyExp2SynBB', 'tau1': 0.05, 'tau2': 5.3, 'e': 0}`


    [9:27] 
    I’m using `netParams.synMechParams['AMPA'] = {'mod': 'AMPA'}`


    [9:27] 
    Could you please make that change, commit and push.  Then I’ll pull and we’ll be on the same page.


    sergio [9:28 AM] 
    sure


    joe [9:48 AM] 
    Let me know when I can pull.


    sergio [9:54 AM] 
    let me run one batch to see if it’s working


    joe [9:54 AM] 
    Perfect.


    sergio [10:00 AM] 
    ok joe


    [10:01] 
    you have to compile again


    joe [10:01 AM] 
    Will do.  Give me a minute


    joe [10:07 AM] 
    Okay, the batch is running.  brb


    sergio [10:08 AM] 
    ok joe


    [10:08] 
    let me have lunch also


    [10:08] 
    i’ll be back in 30 mins


    joe [10:08 AM] 
    Cool.  We’ll reconvene then.


    sergio [10:08 AM] 
    ok


    sergio [11:08 AM] 
    Hi Joe, I’m back


    joe [11:10 AM] 
    Great.  I’m starting a new batch using my code, but setting param variables to the same as yours.  Hopefully we’ll end up with the same output from both!


    [11:10] 
    I need a little while to change all my repo symlinks to relative.


    sergio [11:11 AM] 
    ok Joe


    joe [1:05 PM] 
    Okay, I think I got my symlink situation fixed.


    [1:06] 
    Would you mind seeing if this works:


    joe [1:06 PM] 
    added this Shell snippet
    rm -r eee_joe ; mkdir eee_joe ; cd eee_joe ; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee ; cd eee/sim/mod ; mkmod ; cd ../batches/batch_nmda_sergio ; mkdir batch_data ; ./runmybatches
    Add Comment



    sergio [1:08 PM] 
    sure


    [1:13] 
    it’s running the batch!


    joe [1:13 PM] 
    Fantastic!


    [1:13] 
    Okay, I need some lunch.


    sergio [1:14 PM] 
    ok Joe


    [1:14] 
    thanks for your help


    joe [1:16 PM] 
    We’re not done yet!  We still have to get the two outputs to match. :sweat_smile:


    sergio [1:16 PM] 
    ohh


    [1:16] 
    ok


    joe [1:16 PM] 
    But that’ll have to wait until I get some food in my belly.


    sergio [1:16 PM] 
    buen provecho!


    joe [1:16 PM] 
    I’ll be back in awhile.


    [1:16] 
    Gracias!


    joe [3:48 PM] 
    Back at it.  I’m working on getting my batch_nmda_sergio to match up with the output from your code.


    sergio [3:49 PM] 
    ok Joe


    [3:49] 
    tell me if I can do something


    joe [3:50 PM] 
    Will do.


    joe [4:36 PM] 
    Found one problem, you never changed your AMPA to the Neurosim default.


    joe [4:36 PM] 
    added this Plain Text snippet
    #netParams.synMechParams['AMPA'] = {'mod':'MyExp2SynBB', 'tau1': 0.05, 'tau2': 5.3, 'e': 0}
    netParams.synMechParams['AMPA'] = {'mod': 'AMPA'}
    Add Comment



    joe [4:36 PM] 
    Running your batch again now.


    sergio [4:37 PM] 
    I tried to use your same parameter.multi


    joe [4:38 PM] 
    Ahh, okay.  But you also need to change it in your netParams, like the code snippet I just added.


    [4:38] 
    That doesn’t quite solve it, though it does change your trace a little.


    joe [4:39 PM] 
    uploaded this image: My output
    Add Comment



    sergio [4:39 PM] 
    I remembered doing that change


    joe [4:40 PM] 
    uploaded this image: Yours with old AMPA
    Add Comment



    sergio [4:40 PM] 
    added this Plain Text snippet
    zn% hg tip
    changeset:  97:d6cf140dda37
    tag:     tip
    user:    Sergio Angulo <sergio.angulo@gmail.com>
    date:    Thu Aug 10 13:00:16 2017 -0400
    summary:   new parameters.multi and AMPA
    1 Comment Collapse



    joe [4:40 PM] 
    uploaded this image: Yours with same AMPA as mine
    Add Comment



    sergio [4:42 PM] 
    yep it looks different


    joe [4:42 PM] 
    commented on sergio’s snippet Untitled
    Weird… I’m not getting this when I try hg pull



    sergio [4:43 PM] 
    let me update the repo directory


    [4:44] 
    ok I just did it


    joe [4:46 PM] 
    added this Perl snippet: hg paths
    graham-mac% cd /u/graham/projects/eee
    graham-mac% hg paths
    default = ssh://no.neurosim.downstate.edu//u/graham/projects/eee
    graham-mac%
    graham-mac%
    graham-mac% cd ~/serg_temp/eee
    graham-mac% hg paths
    default = /u/sergioangulo/projects/eee
    Add Comment Collapse



    sergio [4:47 PM] 
    yep it is the same


    joe [4:48 PM] 
    My default includes the sshno stuff, but yours doesn’t…


    sergio [4:49 PM] 
    is this from neurosim?


    joe [4:50 PM] 
    Yeah, I cloned your repo to serg_temp


    [4:50] 
    Why don’t you edit your `eee/.hg/hgrc` file.


    [4:51] 
    Change `default = /u/sergioangulo/projects/eee`


    [4:51] 
    to `default = ssh://no.neurosim.downstate.edu//u/sergioangulo/projects/eee`


    [4:51] 
    Then anyone who clones your repo can update it with `hg pull`


    sergio [4:52 PM] 
    ok


    joe [4:52 PM] 
    I’m working on my machine, not Neurosim.


    [4:53] 
    With your current default, anyone working on Neurosim machine can update, but nobody remote can.


    [4:53] 
    With the new default, it should work for everyone.


    sergio [4:54 PM] 
    ok


    [4:54] 
    can i have 2 defaults?


    joe [4:54 PM] 
    Change it?  Could you commit and push, and I’ll clone a new copy.


    sergio [4:54 PM] 
    or just one


    joe [4:55 PM] 
    You can have a sep default for push/pull, I think.


    sergio [4:58 PM] 
    ok I changed that


    [4:58] 
    and commited


    [4:59] 
    and pushed it


    sergio [5:00 PM] 
    added this Plain Text snippet
    no% hg tip
    changeset:  98:d1246dd1e79f
    tag:     tip
    user:    Sergio Angulo <sergio.angulo@gmail.com>
    date:    Thu Aug 10 19:56:39 2017 -0400
    summary:   changed default pointer
    Add Comment Click to expand inline 7 lines



    sergio [5:00 PM] 
    last update


    joe [5:02 PM] 
    Trying it now.


    [5:04] 
    Okay, got the latest now.  Thanks!


    sergio [5:08 PM] 
    great!


    joe [5:37 PM] 
    Damn.  Still not getting a match.


    [5:37] 
    Our cells are definitely identical.


    [5:37] 
    The batch inputs should be identical.


    sergio [5:38 PM] 
    it is very difficult


    joe [5:38 PM] 
    added this PHP snippet
    My params:
      # Varying NMDA decay time constant and glutamate stim amplitude
      batch = {}
      batch["label"] = "sergio"
      batch["cfgFile"] = "cfg.py"
      batch["netParamsFile"] = "netParams.py"
      params = OrderedDict()
      params["tau2NMDA"] = [150, 600]
      params[('NetStim1', 'weight', 0)] = [0.04, 0.06, 0.08, 0.1]
      batch["params"] = params
      batches[batch["label"]] = batch
      
    Yours:
        def dendPlateau():
          params = specs.ODict()
    ​
          #params['tau2NMDA'] = [1.0, 2.0, 4.0, 6.0, 8.0]
          params['tau2NMDA'] = [1.0, 4.0]
          #params[('NetStim1', 'weight')] = [0.01, 0.02, 0.04, 0.06, 0.08, 0.1]
          #params['NMDAw']  = list(np.arange(0.3, 0.8, 0.1)/10.0)
          params['NMDAw'] = [0.04, 0.06, 0.08, 0.1]
    ​
          b = Batch(params=params, netParamsFile='netParams.py', cfgFile='cfg.py')
    ​
          grouped = [] # list of params that are grouped (vary together)
          for p in b.params:
            if p['label'] in grouped: p['group'] = True
          return b
    Add Comment Click to expand inline 28 lines



    joe [5:39 PM] 
    And the NMDA and AMPA mod files should be the same now.


    sergio [5:40 PM] 
    it is the same mod files


    [5:41] 
    I copied your parameter.multi to avoid any confusion


    joe [5:42 PM] 
    It seems to me: if our cells are the same, our AMPA/NMDA is the same, and the settings of the AMPA/NMDA stim are the same


    [5:42] 
    then our output should be the same.


    [5:42] 
    What other difference could there be?


    sergio [5:43 PM] 
    the only that I can think of is to compare all the properties of the cells


    [5:44] 
    in the output


    [5:44] 
    with net.sim.cells[0].secs


    joe [5:45 PM] 
    I need a break.  If you have time to look for a diff, that’d be awesome.


    sergio [5:45 PM] 
    perfect


    [5:45] 
    i'll do that


    joe [5:45 PM] 
    Awesome.  Thanks!  Back in a bit.


    [5:47] 
    I just pushed my latest repo.


    joe [5:49 PM] 
    added and commented on this CoffeeScript snippet: changes I made to your repo
    graham-mac% pwd
    /Users/graham/serg_temp/eee
    graham-mac% hg status
    M sim/batch.py
    M sim/cfg.py
    graham-mac% 
    graham-mac% hg diff
    diff -r d1246dd1e79f sim/batch.py
    --- a/sim/batch.py  Thu Aug 10 19:56:39 2017 -0400
    +++ b/sim/batch.py  Thu Aug 10 17:49:11 2017 -0700
    @@ -66,9 +66,11 @@
     def dendPlateau():
      params = specs.ODict()
     
    - params['tau2NMDA'] = [1.0, 2.0, 4.0, 6.0, 8.0]
    + #params['tau2NMDA'] = [1.0, 2.0, 4.0, 6.0, 8.0]
    + params['tau2NMDA'] = [1.0, 4.0]
      #params[('NetStim1', 'weight')] = [0.01, 0.02, 0.04, 0.06, 0.08, 0.1]
    - params['NMDAw'] = list(np.arange(0.3, 0.8, 0.1)/10.0)
    + #params['NMDAw']  = list(np.arange(0.3, 0.8, 0.1)/10.0)
    + params['NMDAw'] = [0.04, 0.06, 0.08, 0.1]
     
      b = Batch(params=params, netParamsFile='netParams.py', cfgFile='cfg.py')
     
    diff -r d1246dd1e79f sim/cfg.py
    --- a/sim/cfg.py  Thu Aug 10 19:56:39 2017 -0400
    +++ b/sim/cfg.py  Thu Aug 10 17:49:11 2017 -0700
    @@ -85,6 +85,8 @@
     #          'g_NMDA_Bdend1': {'sec':'Bdend1', 'loc':0.3, 'synMech': 'NMDA', 'var': 'sNMDA'} #'var': 'g'  for the NMDA DMS       
     #          'I_AMPA_Adend3': {'sec':'Adend3', 'loc':0.5, 'synMech': 'AMPA', 'var': 'i'}
              }
    +cfg.recordTraces['V_Bdend1'] = {'sec': 'Bdend1', 'loc': 0.5, 'var': 'v'}
    +cfg.recordTraces['V_Bdend2'] = {'sec': 'Bdend2', 'loc': 0.5, 'var': 'v'}
     
     cfg.recordStims = False
     cfg.recordStep = 0.1 #sampling rate, orig =1.0, 1=1khz, 0.1=10khz, 0.05=20khz
    @@ -118,8 +120,8 @@
     #                      ('PV6',0),('SOM6',0),('VIP6',0)],
     #                'oneFigPer':'trace','figSize':(12,8),'ylim':[-90,50],'saveFig':'../data/figs/traces_inh','showFig':True}
     
    -cfg.analysis['plotTraces'] = {'include':[],'oneFigPer':'trace','ylim':[-100,50],
    -               'figSize': (12,8),'saveFig':True,'showFig':False}
    +cfg.analysis['plotTraces'] = {'include':[],'oneFigPer':'cell',
    +               'figSize': (10,8),'saveFig':True,'showFig':False}
     
     #cfg.analysis['plotTraces'] = {'include':[('IT5',0),('IT5',10),('PT5',0),('PT5',10)],'oneFigPer':'trace','ylim':[-90,50],
     #                'figSize': (12,8),'saveFig':'traces','showFig':True}
    @@ -209,7 +211,7 @@
            ## pop, sec, loc, synMech, start, interval, noise, number, weight, delay
     #cfg.NetStim1 = ['PT5', ['Bdend1', 0.3], ['AMPA','NMDA'], 200, 20, 0.1, 1,0,1]#[0.00,0.00], 1]
     #cfg.NetStim1 = ['PT5', ['Bdend1', 0.3], ['NMDA'], 200, 20, 0.1, 1, 0.1, 1]
    -cfg.NetStim1 = {'pop':'PT5','sec':'Bdend1','loc':0.5,'synMech':['AMPA','NMDA'],'start':200,'interval':20,'noise':0.1,'number':1,'weight':[0.1, 0.1],'delay': 1}
    +cfg.NetStim1 = {'pop':'PT5','sec':'Bdend1','loc':0.5,'synMech':['AMPA','NMDA'],'start':200,'interval':20,'noise':0.0,'number':1,'weight':[0.1, 0.1],'delay': 1}
     #cfg.NetStim2 = ['VIP5', ['soma', 0.5], ['AMPA'], 2000, 20, 0.1, 50, 0.3, 1]
     #cfg.NetStim3 = ['VIP2', ['soma', 0.5], ['AMPA'], 2000, 20, 0.1, 50, 0.3, 1]
     #cfg.NetStim4 = ['VIP6', ['soma', 0.5], ['AMPA'], 2000, 20, 0.1, 50, 0.3, 1]
    graham-mac% 
    1 Comment Collapse
    Our sims should be identical…



    sergio [5:50 PM] 
    thanks Joe!


    sergio [6:27 PM] 
    added this Plain Text snippet
    no% pwd
    /u/sergioangulo/projects/eee_joe/eee/sim/batches
    no% ls
    batch_analysis.py  batch_nospines_varsyns/ cfg.pyc
    batch_data/   batch_spillover/   __init__.py
    batch_fi/    batch_spineLoc/   my_batches.py
    batch_init.py    batch_tospines/   netParams_AMPAw_NMDAw.py
    batch_nmda/   batch_utils.py    netParams.py
    batch_nmda_sergio/  batch_utils.pyc   runmybatches*
    batch_nospines_255syns/ cfg_bAP.py    x86_64@
    batch_nospines_5syns/  cfg_bAP.pyc
    batch_nospines_onesyn/  cfg.py
    no% ipython -i
    Python 2.7.6 (default, Oct 26 2016, 20:30:19) 
    Type "copyright", "credits" or "license" for more information.
    IPython 5.4.1 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    In [1]: execfile('netParams.py')
    NEURON -- VERSION 7.5 master (e3f1629+) 2017-06-13
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     misc.mod stats.mod infot.mod vecst.mod nstim.mod samnutils.mod MyExp2SynNMDABB.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod can_mig.mod cal_mig.mod savedist.mod h_kole.mod kBK.mod AMPA.mod NMDA.mod GABAA.mod GABAB.mod
    ---------------------------------------------------------------------------
    ImportError                Traceback (most recent call last)
    <ipython-input-1-5f137b9a3b6c> in <module>()
    ----> 1 execfile('netParams.py')
    /u/sergioangulo/projects/eee_joe/eee/sim/batches/netParams.py in <module>()
       30 
       31 # PT cell params (6-comp)
    ---> 32 cellRule = netParams.importCellParams(label='EEE_SPI7', conds={'cellType': 'PT', 'cellModel': 'HH_reduced'}, fileName='../cells/SPI7.py', cellName='SPI7')
       33 
       34 # define section lists
    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
      328       label = int(self._labelid)
      329       self._labelid += 1
    --> 330     secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
      331     cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
      332 
    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
      168       sys.path.insert(0, filePath)
      169     moduleName = fileNameOnly.split('.py')[0] # remove .py to obtain module name
    --> 170     exec('import ' + moduleName + ' as tempModule') in globals(), locals() # import module dynamically
      171     modulePointer = tempModule
      172     if isinstance(cellArgs, dict):
    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in <module>()
    ImportError: No module named SPI7
    Add Comment Collapse



    sergio [6:27 PM] 
    am i doing everything right?


    joe [7:13 PM] 
    Should be working in `batches/batches_nmda_sergio`


    slackbot [7:13 PM] Only visible to you
    sergio is currently in Do Not Disturb mode and may not be alerted of this message right away. If it’s urgent, ​​​click here​​​ to send a notification now. Keep in mind, if the recipient has all notifications turned off, they will only get your message when they’re back online.

    How does Do Not Disturb work? Learn more in this Help Center article: Do Not Disturb


    joe [7:15 PM] 
    added this Shell snippet
    cd /u/sergioangulo/projects/eee_joe/eee/sim/batches/batch_nmda_sergio ; ./runmybatches ; cd batch_data/sergio ; ls

* 2017-08-11 -- Matching models

** TODO

Match models with Sergio's
Spillover batching -- get varying
Update cells with Salvador's improvements
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params

** Matching a single sim (Joe/Sergio)

Our cell files (eee7.py) are exactly the same, as confirmed by a diff.

Our NMDA and AMPA mod files should be exactly the same -- Sergio copied my 
parameters.multi file and switched from a different AMPA to the standard 
Neurosim one I was using.

Our inputs to the NMDA/AMPA should be the same, judging by our batch input files

But our outputs are not the same!  Time to recheck everything.

Sergio suggests comparing `net.sim.cells[0].secs` between our sims, but need 
just one sim for that.  

I’m thinking I’ll set our cfg files exactly the same, then get output by 
running batch_init and compare between our output.

I did that, and it looks like the only difference is that I forgot to change
tau2NMDA to 150 in my cfg (-Joe +Sergio)

-            'synMechs': [{'e': 0,
+            'synMechs': [{'hSyn': AMPA[0],
+                          'label': 'AMPA',
+                          'loc': 0.5,
+                          'mod': 'AMPA'},
+                         {'e': 0,
                           'hSyn': MyExp2SynNMDABB[0],
                           'label': 'NMDA',
                           'loc': 0.5,
                           'mod': 'MyExp2SynNMDABB',
-                          'tau1NMDA': 15,
-                          'tau2NMDA': 600},
-                         {'hSyn': AMPA[0],
-                          'label': 'AMPA',
-                          'loc': 0.5,
-                          'mod': 'AMPA'}],
+                          'tau1NMDA': 15.0,
+                          'tau2NMDA': 150.0}],


Changing that and trying again.

Now the two outputs look identical. :) 

Time to try running a full batch and seeing what we get.

Committing first.  
changeset:   379:272336c5c53a

** Matching full batches

Trying lower weights to avoid depol block.

In my_batches.py:
    params[('NetStim1', 'weight', 0)] = [0.010, 0.011, 0.012, 0.013, 0.014, 0.015] #[0.04, 0.06, 0.08, 0.1]

Looks good, but no spiking.  Increasing weights:
    params[('NetStim1', 'weight', 0)] = [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08]

And adding another tau2NMDA value:
    params["tau2NMDA"] = [150, 300, 600, 900]

Changing glut amp to:
    params[('NetStim1', 'weight', 0)] = [0.050, 0.055, 0.060, 0.065, 0.070, 0.075]

Values look good!  Now to set the same values for Sergio's sim and see what the 
output is.

    def dendPlateau():
      params = specs.ODict()

      params['tau2NMDA'] = [1.0, 2.0, 4.0, 6.0]
      params['NMDAw'] = [0.050, 0.055, 0.060, 0.065, 0.070, 0.075]

      b = Batch(params=params, netParamsFile='netParams.py', cfgFile='cfg.py')

      grouped = []  # list of params that are grouped (vary together)
      for p in b.params:
        if p['label'] in grouped: p['group'] = True
      return b

Sergio's sims now outputs the same thing.  :) :) :)

file:gif/20170811_150800.png


* 2017-08-14 -- Spillover batching

** TODO

Spillover batching -- get varying
Update cells with Salvador's improvements
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params

** Preparing to explore spillover

Here are the new "standard" NMDA weights (glutamate stim amplitude):
[0.050, 0.055, 0.060, 0.065, 0.070, 0.075]

Made some changes to netParams and cfg when working with Sergio to match our 
sim outputs.

Renaming netParams.py and cfg.py from batch_nmda_sergio to netParams_.py and 
cfg_.py, and copying over to batch_spillover so that I can do a diff in 
Sublime.

*** netParams diff

    
    --- /u/graham/projects/eee/sim/batches/batch_spillover/netParams.py Wed Aug  9 08:20:20 2017
    +++ /u/graham/projects/eee/sim/batches/batch_spillover/netParams_.py Fri Aug 11 08:40:39 2017
    @@ -9,18 +9,17 @@
     
     from netpyne import specs
     import os
    -import numpy as np
     
     # Find path to cells directory
     curpath = os.getcwd()
     while os.path.split(curpath)[1] != "sim":
    -    curpath = os.path.split(curpath)[0]
    +   curpath = os.path.split(curpath)[0]
     cellpath = os.path.join(curpath, "cells")
     
     try:
    -    from __main__ import cfg  # import SimConfig object with params from parent module
    +   from __main__ import cfg  # import SimConfig object with params from parent module
     except:
    -    from cfg import cfg  # if no simConfig in parent module, import directly from cfg module
    +   from cfg import cfg  # if no simConfig in parent module, import directly from cfg module
     
     ###############################################################################
     #
    @@ -41,65 +40,40 @@
     #cellRule = netParams.importCellParams(label='eee6', conds={'cellType': 'eee6', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee6.py'), cellName='eee6')
     
     # EEE cell model (7 compartments: extra Bdend)
    -#cellRule = netParams.importCellParams(label='eee7', conds={'cellType': 'eee7', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7.py'), cellName='eee7')
    +cellRule = netParams.importCellParams(label='eee7', conds={'cellType': 'eee7', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7.py'), cellName='eee7')
     
     # EEE cell model with uniform spine distribution (7 comps)
    -cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'eee7us', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')
    +#cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'eee7us', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')
     
     # EEE cell model with physiological spine distribution (7 comps)
    -cellRule = netParams.importCellParams(label='eee7ps', conds={'cellType': 'eee7ps', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7ps.py'), cellName='eee7ps')
    +#cellRule = netParams.importCellParams(label='eee7ps', conds={'cellType': 'eee7ps', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7ps.py'), cellName='eee7ps')
     
     # define section lists
     cellRule['secLists']['alldend'] = ['Bdend1', 'Bdend2', 'Adend1', 'Adend2', 'Adend3']
     cellRule['secLists']['apicdend'] = ['Adend1', 'Adend2', 'Adend3']
     cellRule['secLists']['basaldend'] = ['Bdend1', 'Bdend2']
    -cellRule['secLists']['stimheads'] = []
    -cellRule['secLists']['stimnecks'] = []
     
    -# set up spine stim
    -numActiveSpines = cfg.glutSpread
    -spine_glut_delay  = np.ones(numActiveSpines)
    -shaft_glut_delay  = spine_glut_delay + cfg.spillDelay * np.ones(numActiveSpines)
    -
    -indWeightNMDA = cfg.weightNMDA / cfg.glutSpread
    -activeSpineNums = cfg.glutSpine + np.arange(cfg.glutSpread)
    -activeSpineHeads = ["head_" + str(num) for num in activeSpineNums]
    -activeSpineNecks = ["neck_" + str(num) for num in activeSpineNums]
    -
    -spine_NMDA_weight = [indWeightNMDA for head in activeSpineHeads]
    -shaft_glut_weight = [indWeightNMDA * cfg.spillFraction for neck in activeSpineNecks]
    -
    -# apply values to parameters
    -for cell_label, cell_params in netParams.cellParams.iteritems():
    -    for secName,sec in cell_params['secs'].iteritems(): 
    -        sec['vinit'] = -75.0413649414  # set vinit for all secs
    -        if secName in cellRule['secLists']['alldend']:  
    -            sec['mechs']['nax']['gbar'] = cfg.dendNa # set dend Na gmax for all dends
    -            sec['mechs']['kdr']['gbar'] = cfg.dendK * sec['mechs']['kdr']['gbar'] 
    -            sec['mechs']['kap']['gbar'] = cfg.dendK * sec['mechs']['kap']['gbar']  
    -        if secName in cellRule['secLists']['basaldend']:
    -            sec["geom"]["Ra"] = cfg.BdendRa
    -        #if "head" in secName:
    -        #    cellRule['secLists']['spineheads'].append(secName)
    -        if "neck" in secName:
    -            diam = cellRule['secs'][secName]['geom']['diam']
    -            leng = cellRule['secs'][secName]['geom']['L']
    -            if hasattr(cfg, 'Rneck'):
    -                cellRule['secs'][secName]['geom']['Ra'] = cfg.Rneck * 100 * 3.1416 * (diam/2) * (diam/2) / leng
    -        #    cellRule['secLists']['spinenecks'].append(secName)
    -        
    +# for cell_label, cell_params in netParams.cellParams.iteritems():
    +#  for secName,sec in cell_params['secs'].iteritems(): 
    +#      sec['vinit'] = -75.0413649414  # set vinit for all secs
    +#      if secName in cellRule['secLists']['alldend']:  
    +#          sec['mechs']['nax']['gbar'] = cfg.dendNa # set dend Na gmax for all dends
    +#          sec['mechs']['kdr']['gbar'] = cfg.dendK * sec['mechs']['kdr']['gbar'] 
    +#          sec['mechs']['kap']['gbar'] = cfg.dendK * sec['mechs']['kap']['gbar']  
    +#      if secName in cellRule['secLists']['basaldend']:
    +#          sec["geom"]["Ra"] = cfg.BdendRa
     
     ###############################################################################
     # Population parameters
     ###############################################################################
     
    -#netParams.popParams['PT5B'] =  {'cellModel': 'HH_reduced', 'cellType': 'PT', 'numCells': 1}
    +#netParams.popParams['PT5B'] = {'cellModel': 'HH_reduced', 'cellType': 'PT', 'numCells': 1}
     
     #netParams.popParams['SPI6']  = {'cellModel':'HH_reduced', 'cellType':'SPI6', 'numCells':1}
     #netParams.popParams['eee6']  = {'cellModel':'HH_reduced', 'cellType':'eee6', 'numCells':1}
    -#netParams.popParams['eee7']  = {'cellModel':'HH_reduced', 'cellType':'eee7', 'numCells':1}
    -netParams.popParams['eee7us']= {'cellModel':'HH_reduced', 'cellType':'eee7us', 'numCells':1}
    -netParams.popParams['eee7ps']= {'cellModel':'HH_reduced', 'cellType':'eee7ps', 'numCells':1}
    +netParams.popParams['eee7']  = {'cellModel':'HH_reduced', 'cellType':'eee7', 'numCells':1}
    +#netParams.popParams['eee7us']= {'cellModel':'HH_reduced', 'cellType':'eee7us', 'numCells':1}
    +#netParams.popParams['eee7ps']= {'cellModel':'HH_reduced', 'cellType':'eee7ps', 'numCells':1}
     
     
     ###############################################################################
    @@ -113,68 +87,45 @@
     # Current inputs (IClamp)
     ###############################################################################
     
    -if cfg.addIClamp:   
    -    for iclabel in [k for k in dir(cfg) if k.startswith('IClamp')]:
    -        ic = getattr(cfg, iclabel, None)  # get dict with params
    +if cfg.addIClamp:  
    +   for iclabel in [k for k in dir(cfg) if k.startswith('IClamp')]:
    +       ic = getattr(cfg, iclabel, None)  # get dict with params
     
    -        # add stim source
    -        netParams.stimSourceParams[iclabel] = {'type': 'IClamp', 'del': ic['start'], 'dur': ic['dur'], 'amp': ic['amp']}
    -        
    -        # connect stim source to target
    -        #netParams.stimTargetParams[iclabel+'_'+ic['pop']] = \
    -        #   {'source': iclabel, 'conds': {'popLabel': ic['pop']}, 'sec': ic['sec'], 'loc': ic['loc']}
    -        
    -        for curpop in ic['pop']:
    -            netParams.stimTargetParams[iclabel+'_'+curpop] = \
    -                {'source': iclabel, 'conds': {'popLabel': ic['pop']}, 'sec': ic['sec'], 'loc': ic['loc']}
    +       # add stim source
    +       netParams.stimSourceParams[iclabel] = {'type': 'IClamp', 'del': ic['start'], 'dur': ic['dur'], 'amp': ic['amp']}
    +       
    +       # connect stim source to target
    +       #netParams.stimTargetParams[iclabel+'_'+ic['pop']] = \
    +       #   {'source': iclabel, 'conds': {'popLabel': ic['pop']}, 'sec': ic['sec'], 'loc': ic['loc']}
    +       
    +       for curpop in ic['pop']:
    +           netParams.stimTargetParams[iclabel+'_'+curpop] = \
    +               {'source': iclabel, 'conds': {'popLabel': ic['pop']}, 'sec': ic['sec'], 'loc': ic['loc']}
     
     ###############################################################################
     # NetStim inputs
     ###############################################################################
     if cfg.addNetStim:
    -    
    -    for nslabel in [k for k in dir(cfg) if k.startswith('NetStim')]:
    -        ns = getattr(cfg, nslabel, None)
    -        print
    -        print(nslabel)
    -        print("cfg.weightNMDA = ", cfg.weightNMDA)
    +   for nslabel in [k for k in dir(cfg) if k.startswith('NetStim')]:
    +       ns = getattr(cfg, nslabel, None)
     
    -        if ns['sec'] == 'spineheads':
    -            print
    -            print ns['sec']
    -            ns['sec']  = list(activeSpineHeads)
    -            #cur_weight = list(spine_NMDA_weight)
    -            cur_weight = list([cfg.weightNMDA / cfg.glutSpread for head in activeSpineHeads])
    -            cur_loc    = 0.99999
    -            cur_delay  = list(spine_glut_delay)
    -            print(ns['sec'])
    -            print("cur_weight: ", cur_weight)
    -            print("cur_delay : ", cur_delay)
    -        elif ns['sec'] == 'spinenecks':
    -            print
    -            print ns['sec']
    -            ns['sec']  = list(activeSpineNecks)
    -            cur_weight = list(shaft_glut_weight)
    -            cur_loc    = 0.00001
    -            cur_delay  = list(shaft_glut_delay)
    -            print(ns['sec'])
    -            print("cur_weight: ", cur_weight)
    -            print("cur_delay : ", cur_delay)
    -        else:
    -            print("######################################################")
    -            print("NetStim sec needs to be 'spineheads' or 'spinenecks'")
    -            print("######################################################")
    +       # add stim source
    +       netParams.stimSourceParams[nslabel] = {'type': 'NetStim', 'start': ns['start'], 'interval': ns['interval'], 'noise': ns['noise'], 'number': ns['number']}
     
    -        # add stim source
    -        netParams.stimSourceParams[nslabel] = {'type': 'NetStim', 'start': ns['start'], 'interval': ns['interval'], 'noise': ns['noise'], 'number': ns['number']}
    +       # connect stim source to target
    +       for i in range(len(ns['synMech'])):
    +           if ns['synMech'][i] == 'AMPA': 
    +               ns['weight'][i] = ns['weight'][0] * cfg.ratioAMPANMDA
    +           
    +           print
    +           print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
    +           print("ns['synMech'][i]: ", ns['synMech'][i])
    +           print("ns['weight'][i]: ", ns['weight'][i])
    +           print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
    +           print
     
    -        # connect stim source to target
    -        for i in range(len(ns['synMech'])):
    -            if ns['synMech'][i] == 'AMPA': 
    -                #ns['weight'][i] = ns['weight'][0] * cfg.ratioAMPANMDA
    -                cur_weight = list(np.array(cur_weight) * cfg.ratioAMPANMDA)
    -            for curpop in ns['pop']:
    -                netParams.stimTargetParams[nslabel+'_'+curpop+'_'+ns['synMech'][i]] = \
    -                    {'source': nslabel, 'conds': {'popLabel': ns['pop']}, 'sec': ns['sec'], 'synsPerConn': numActiveSpines, 'loc': cur_loc, 'synMech': ns['synMech'][i], 'weight': cur_weight, 'delay': cur_delay}
    +           for curpop in ns['pop']:
    +               netParams.stimTargetParams[nslabel+'_'+curpop+'_'+ns['synMech'][i]] = \
    +                   {'source': nslabel, 'conds': {'popLabel': ns['pop']}, 'sec': ns['sec'], 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': ns['weight'][i], 'delay': ns['delay']}
 
*** cfg diff

    --- /u/graham/projects/eee/sim/batches/batch_spillover/cfg.py Tue Aug  8 11:46:59 2017
    +++ /u/graham/projects/eee/sim/batches/batch_spillover/cfg_.py Fri Aug 11 09:10:51 2017
    @@ -17,7 +17,7 @@
     #
     ###############################################################################
     
    -cfg.checkErrors = True
    +cfg.checkErrors = False
     
     ###############################################################################
     # Run parameters
    @@ -38,7 +38,7 @@
     cfg.recordTraces = {'V_soma': {'sec': 'soma', 'loc': 0.5, 'var': 'v'}}
     cfg.recordTraces['V_Bdend1'] = {'sec': 'Bdend1', 'loc': 0.5, 'var': 'v'}
     cfg.recordTraces['V_Bdend2'] = {'sec': 'Bdend2', 'loc': 0.5, 'var': 'v'}
    -cfg.recordCells = ['eee7us', 'eee7ps']
    +cfg.recordCells = ['all']
     cfg.recordStims = False  
     cfg.recordStep = 0.1 
     
    @@ -46,7 +46,7 @@
     ###############################################################################
     # Saving
     ###############################################################################
    -cfg.simLabel = 'spillover'
    +cfg.simLabel = 'nmda_match'
     cfg.saveFolder = 'batch_data'
     cfg.savePickle = False
     cfg.saveJson = True
    @@ -58,6 +58,8 @@
     ###############################################################################
     cfg.analysis['plotTraces'] = {'include': ['all'], 'oneFigPer': 'cell', 'saveFig': True, 
                                   'showFig': False, 'figSize': (10,8), 'timeRange': [0,cfg.duration]}
    +#cfg.analysis['plotTraces'] = {'include': ['PT5B'], 'oneFigPer': 'cell', 'saveFig': True, 
    +#                            'showFig': False, 'figSize': (10,8), 'timeRange': [0,cfg.duration]}
     
     
     ###############################################################################
    @@ -66,31 +68,19 @@
     cfg.dendNa = 0.00345 
     
     cfg.tau1NMDA = 15
    -cfg.tau2NMDA = 600
    +cfg.tau2NMDA = 150 #600
     
     cfg.BdendRa = 114.510490019
     
     cfg.ratioAMPANMDA = 0.2
    -cfg.weightNMDA = 0.012
    +cfg.weightNMDA = 0.1 
     
     cfg.dendK = 1.0
    -
    -# glutLoc should be a spine number (0 to 255)
    -# glutSpread should be the number of spines to spread to 
    -#  (starts at glutLoc spine and increases; shouldn't come to > spine 255)
    -cfg.glutSpine     = 1
    -cfg.glutSpread    = 1
    -
    -# spillDelay is time to reach dendritic shaft in ms
    -# spillFraction is the percentage of weight reaching the dendritic shaft
    -cfg.spillDelay    = 10.0
    -cfg.spillFraction = 0.0 #0.10
    -
     
     ###############################################################################
     # Current inputs 
     ###############################################################################
    -cfg.addIClamp = 1
    +cfg.addIClamp = 0
     
     #cfg.IClamp1 = {'pop': 'PT5B', 'sec': 'soma', 'loc': 0.5, 'start': 200, 'dur': 1000, 'amp': 0.0}
     cfg.IClamp1 = {'pop': ['SPI6', 'eee6', 'eee7', 'eee7us', 'eee7ps'], 'sec': 'soma', 'loc': 0.5, 'start': 200, 'dur': 1000, 'amp': 0.0}
    @@ -101,11 +91,5 @@
     ###############################################################################
     cfg.addNetStim = 1
     
    -cfg.NetStim1 = {'pop': ['eee7us', 'eee7ps'], 'loc': 0.99999, 'sec': 'spineheads', 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.weightNMDA/cfg.glutSpread, cfg.weightNMDA*cfg.ratioAMPANMDA/cfg.glutSpread], 'delay': 1.0}
    +cfg.NetStim1 = {'pop': ['eee7'], 'sec': 'Bdend1', 'loc': 0.5, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.weightNMDA, cfg.weightNMDA * cfg.ratioAMPANMDA], 'delay': 1}
     
    -cfg.NetStim2 = {'pop': ['eee7us', 'eee7ps'], 'loc': 0.00001, 'sec': 'spinenecks', 'synMech': ['NMDA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': cfg.weightNMDA*cfg.spillFraction/cfg.glutSpread, 'delay': 1.0 + cfg.spillDelay}
    -
    -#cfg.NetStim1 = {'pop': ['eee7us', 'eee7ps'], 'sec': cfg.NS1_synsecs, 'synsPerConn': cfg.NS1_numsyns, 'loc': cfg.NS1_synlocs, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.weightNMDA/cfg.NS1_numsyns, cfg.weightNMDA*cfg.ratioAMPANMDA/cfg.NS1_numsyns], 'delay': 1}
    -
    -#cfg.NetStim2 = {'pop': ['eee7us', 'eee7ps'], 'sec': cfg.NS2_synsecs, 'synsPerConn': cfg.NS2_numsyns, 'loc': cfg.NS2_synlocs, 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.weightNMDA/cfg.NS2_numsyns, cfg.weightNMDA*cfg.ratioAMPANMDA/cfg.NS2_numsyns], 'delay': 1}
    -


*** Making changes to netParams and cfg

Commenting out all cells without spines, only using spiny cells from now on:
eee7us and eee7ps

Getting rid of old cfg values that we are no longer varying.

Deleting netParams_.py and cfg_.py (originals in batches/batch_nmda_sergio)


** Exploring spillover

Generating 1D batches:

    graham-mac% eee ; cd batches/batch_spillover ; ./runmybatches

*** Batches


    # Varying glutamate stim amplitude (1D batch)
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["weightNMDA"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim spine number (0 near soma)
    batch = {}
    batch["label"] = "glutSpine"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpine"] = [0, 50, 100, 150, 200, 250]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate spread (how many spines activated)
    batch = {}
    batch["label"] = "glutSpread"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpread"] = [1, 5, 10, 15, 20, 50]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate spill delay
    batch = {}
    batch["label"] = "spillDelay"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["spillDelay"] = [0., 5., 10., 15., 20.]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate spill fraction
    batch = {}
    batch["label"] = "spillFraction"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["spillFraction"] = [0.0, 0.05, 0.10, 0.15, 0.20]
    batch["params"] = params
    batches[batch["label"]] = batch

*** Fixing some minor bugs

Nothing worth noting.

*** Glut stim amplitude

In the glutAmp batch, every trace shows depolarization block.  Decreasing glut 
amp by 0.5
  In my_batches.py:
    glut_stim_scale = 0.5 #1.0

Much better, goes from 1 spike to about 10.  Would be better from 0 spikes and up.

Changing default values from:
  [ 0.025 ,  0.0275,  0.03  ,  0.0325,  0.035 ,  0.0375]
To:
  [ 0.0225 , 0.025 ,  0.0275,  0.03  ,  0.0325,  0.035]
And:
  glut_stim_scale = 1.0

Also changing 
  cfg.glutSpine = 50
Instead of equal to 1 (moving stim away from soma, as physiologically expected)

Looks good, still one spike at lowest stim, but I'll leave it for now.

Changing the default NMDAweight to cfg.weightNMDA = 0.03 (middle of good range)

Changing spillover fraction from 0.0 to cfg.spillFraction = 0.10

Rerunning all 1D batches.  Looking good.

Will run 2D batches and then examine and discuss output.

** 2D spillover batches

# 2D batches


    # Varying glutamate stim amplitude and glutamate stim spine number (0 near soma)
    batch = {}
    batch["label"] = "glutAmp_glutSpine"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["weightNMDA"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["glutSpine"] = [0, 50, 100, 150, 200, 250]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude and glutamate spread
    batch = {}
    batch["label"] = "glutAmp_glutSpread"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["weightNMDA"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["glutSpread"] = [1, 10, 20, 50, 100]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude and glutamate spill delay
    batch = {}
    batch["label"] = "glutAmp_spillDelay"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["weightNMDA"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["spillDelay"] = [0., 5., 10., 15., 20.]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude and glutamate spill fraction
    batch = {}
    batch["label"] = "glutAmp_spillFraction"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["weightNMDA"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["spillFraction"] = [0.0, 0.05, 0.10, 0.15, 0.20]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim spine number and glutamate spread
    batch = {}
    batch["label"] = "glutSpine_glutSpread"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpine"] = [0, 50, 100, 150, 200]
    params["glutSpread"] = [1, 10, 20, 50]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim spine number and spill delay
    batch = {}
    batch["label"] = "glutSpine_spillDelay"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpine"] = [0, 50, 100, 150, 200]
    params["spillDelay"] = [0., 5., 10., 15., 20.]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim spine number and spill fraction
    batch = {}
    batch["label"] = "glutSpine_spillFraction"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpine"] = [0, 50, 100, 150, 200]
    params["spillFraction"] = [0.0, 0.05, 0.10, 0.15, 0.20]
    batch["params"] = params
    batches[batch["label"]] = batch

** Adding batches

Spill fraction doesn't seem to have much effect...  Using larger values to 
ensure it is being varied and has an effect:

    # Varying glutamate spill fraction, making it bigger
    batch = {}
    batch["label"] = "spillFractionBig"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["spillFraction"] = [0.0, 0.25, 0.50, 0.75, 1.0]
    batch["params"] = params
    batches[batch["label"]] = batch

2D batches all ran.


* 2017-08-15 -- Spillover batching and EEE meeting

** TODO

Spillover batching -- examine output
EEE project meeting
Update cells with Salvador's improvements
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params

** Spillover outputs

Modified batches/batch_spillover/analyze.py to make all figures

Now modifying to generate one pdf including all figures.

Changing parameter name "weightNMDA" to "glutAmp" for better plotting

Running batches and generating figures.
    graham-mac% cd batches/batch_spillover ; ./runmybatches 
    graham-mac% cd batches/batch_spillover ; ipython -i analyze.py

Adding/running another batch: glutSpreadLow, to zoom in on area of interest
(current glutSpread changes a lot from 1 to 10, but not so much from 10 to 100)

** Preparing for project meeting

Put together a Google doc/pdf of my output figures for discussion.

https://docs.google.com/document/d/1U25P6Da8R23bJ4M79zkw3VQk4LkxZkoLenGJpVroqmA/edit

file:gif/20170815_EEE_Project_Meeting_update.pdf

** EEE project meeting

Sergio and Joe should switch from MyExp2SynNMDABB to DMS NMDA mod.

NMDA decay time constant should probably be kept to less than 300 ms

Joe emails Srdjan to ask for feedback on spillover figures



* 2017-08-21 -- DMS NMDA

** TODO

Switch to DMS for NMDA, match output with Sergio 
Spillover batching -- examine output
Update cells with Salvador's improvements
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params

** Switching to DMS NMDA

*** Chat log

    billl [8:44 AM] 
    DMS all go in easily? -- haven't heard anything from you guys so guess i can just assume that??


    sergio [9:17 AM] 
    uploaded this image: IE balance, NMDA DMS (beta: 150 ms)
    Add Comment



    billl [9:18 AM] 
    so not working but took you a week to show me that? :(  @joe


    sergio [9:18 AM] 
    uploaded this image: VIP stim to inhibit inhibitory neurons
    Add Comment



    billl [9:18 AM] 
    working for hyou?


    [9:18] 
    you guys been on vacation this week? -- better if can let me know ahead of time


    [9:21] 
    @joe


    [9:21] 
    ? @sergio?


    sergio [9:22 AM] 
    we have been working, I have been some issues modifying the beta parameters on the NMDA DMS


    [9:22] 
    the ones that produces longer plateaus for Penny


    [9:23] 
    so I focus on the network part to see if I can produce the plateaus


    billl [9:23 AM] 
    but haven't been talking to joe and penny (and me) about this -- what issues?  how is joe doing?  how is penny doing?


    [9:24] 
    i'm annoyed (as you can see) -- we had a plan to do somehting and nothing got done all week for some reason


    [9:24] 
    penny had this work so seemed trivial for you and joe to get it working but not done


    [9:25] 
    sorry, i should have gotten on this sooner (ie on wednesday) but i do expect you guys to speak up if things don't work and then by thurs or fri we should have spoken to make next step anyway -- at very least @joe and @sergio would need to cooperate to get this thing going sinc using same cell


    penny [9:28 AM] 
    Sorry, we didn't figure out the problem last week. I am using "nrnivmodl" to compile the mod files, would that be the problem?


    billl [9:28 AM] 
    anyway joe not here now so guess we're all at loose ends -- we can discuss tomrorow during meeting why/how/if week of work was lost and how to prevent another lost week


    [9:29] 
    you can use nrnivmodl if you prefer -- have to make sure is same files


    [9:29] 
    but particularly silly if we spent the whole week waiting for someone to check on 2 files!


    penny [9:30 AM] 
    We are using the same file.


    billl [9:32 AM] 
    good


    penny [9:33 AM] 
    I can't load the model into NetPyNE properly last week, I compared all the parameters, they were exactly the same. But NetPyNE can not generate the same simulation result as in NetCon. Salva helped me to solved the problem. The development version of NetPyNE works :grin:


    joe [9:37 AM] 
    Sorry, I'll be at my computer in a couple hours. Watching the eclipse with friends.


    sergio [9:38 AM] 
    ok Penny, I can take a look of your model and see if something is different importing the mod file. Do you have a repo?


    salvadord [9:39 AM] 
    dont think penny tried the DMS syn yet with netpyne (since was just IClamp), but maybe she can try now see if it works


    penny [9:39 AM] 
    Yep~ Give me 5 mins, let me upload a working file on github


    [9:40] 
    Salva is right, I have a working file with DMS sys, but not in netpyne. I can give u that first and update it again when I test it in netpyne


    sergio [9:40 AM] 
    ok


    [9:44] 
    I tried to modify the params of the NMDA DMS hoc file but it didn’t make any difference


    billl [9:52 AM] 
    penny you are not my responsiblity so not complaining about you but not sure why the other 2 guys didn't get anything done ; meetings now; ttyl


    penny [9:58 AM] 
    Understand. Here is the repo: https://github.com/super-penguin/NetPyNE_learning.git                 Sergio, try the Experiment_8_21.py, if it works then that means the problem is not compiling mod files.
    GitHub
    super-penguin/NetPyNE_learning
    Contribute to NetPyNE_learning development by creating an account on GitHub.
     


    sergio [10:11 AM] 
    ok Penny


    [10:12] 
    just run the file on ipython?


    penny [10:14 AM] 
    I think that would work, or from terminal. From terminal: git clone https://github.com/super-penguin/NetPyNE_learning.git; Then cd the folder; type python compile.py first to comple. Then run python Experiment_8_21.py


    [10:14] 
    If its not working, let me know

    [10:15] 
    no ";"   not sure why ";" sticks to the link

    sergio [10:21 AM] 
    added and commented on this Plain Text snippet
    In [1]: execfile('Experiment_8_21.py')
    Warning: no DISPLAY environment variable.
    --No graphics will be displayed.
    NEURON -- VERSION 7.5 master (0388d94) 2017-08-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    1 Comment Click to expand inline 82 lines
    seems like an error from neurosim

    penny [10:27 AM] 
    that seems like problem with plotting

    salvadord [10:27 AM] 
    worked ok in my laptop; seems error just due to ssh’ing and no DISPLAY — try adding `import matplotlib; matplotlib.use('Agg') ` at top of file

    sergio [10:28 AM] 
    let me change the ssh connection

    salvadord [10:30 AM] 
    change how?

    sergio [10:31 AM] 
    now it runs

    penny [10:33 AM] 
    Okay~ then I think the problem is how to add it correctly into your parameters.multi

    sergio [10:35 AM] 
    let me grab a sandwich and I’ll be back in 15 mins

    penny [10:36 AM] 
    They have to have different names with the original NMDA and AMPA mod files in the local folder. Both the mod file same and POINT_PROCESS name in the file

    billl [10:36 AM] 
    ouch ;  so we're precisely at the point where we were last tuesday :(

    sergio [11:44 AM] 
    added this Plain Text snippet: compiling with nrnivmodl on zn
    /usr/site/../arch/nrn/x86_64/bin/nrnmech_makefile:94: recipe for target 'libnrnmech.la' failed
    make: *** [libnrnmech.la] Error 1
    Add Comment

    sergio [11:47 AM] 
    I changed the name of the file name and POINT_PROCESS for the NMDA mod file

    [11:48] 
    but still have problems

    billl [12:11 PM] 
    so we decided (on tuesday) to use mkmod -- what was problem with that?

    [12:11] 
    is joe back?

    [12:11] 
    maybe easier to get started when we have everyone

    joe [12:12 PM] 
    I’m back and ready to get to work on DMS.  Sorry about the lack of progress.

    billl [12:13 PM] 
    ok sure so let's try with mkmod and with the standard header with just the DMS NMDA and make sure that that compiles

    sergio [12:14 PM] 
    compiling the NMDA DMS from parameter.multi with mkmod is not a problem

    [12:15] 
    the NMDA.mod file is created and functional

    [12:15] 
    the problem is to modify the parameters inside

    [12:15] 
    like beta or Cdur

    billl [12:16 PM] 
    do you have a parameters.multi file that also has your other stuff as DEFAULT lines?

    [12:16] 
    lms the parameter.multi file -- i'll just mirror (or can pull if easier for you)

    sergio [12:17 PM] 
    added this Plain Text snippet: parameters.multi

    sergio [12:18 PM] 
    that’s the file that I use

    billl [12:19 PM] 
    maybe we can take out the izhi?  and some of the other stuff?  - what stuff are we actually using?  -- then we can all share same file

    joe [12:20 PM] 
    Stripping it to the bare essentials sounds good to me.

    sergio [12:20 PM] 
    I can work on that

    billl [12:21 PM] 
    ok but for the present the thing does compile and there is not any name clashes?  ie the 2 different NMDAs ??

    joe [12:21 PM] 
    Hey, maybe we could have more frequent (scheduled) check-in mini-meetings?

    billl [12:22 PM] 
    that would be great

    joe [12:22 PM] 
    A time when we can discuss any problems without feeling like we’re interrrupting other work.

    billl [12:22 PM] 
    ...  btw my work is mostly to manage this lab so you're never interrupting me :)

    joe [12:23 PM] 
    :sweat_smile:

    billl [12:23 PM] 
    but yeah i think regular schedule would be good -- just check in with each other for 5-10 min see if any problems

    sergio [12:23 PM] 
    sounds good to me

    joe [12:23 PM] 
    Sounds great.

    billl [12:23 PM] 
    maybe same time as we do on tues we could check in on the other days?

    joe [12:24 PM] 
    That works for me!

    billl [12:24 PM] 
    of course some days i may miss but if at least you guys are coordinated that will be great

    joe [12:26 PM] 
    No problem.  I’ll take the lead on calling a quick meeting 3:15p Eastern to check in and discuss problems and direction.

    [12:27] 
    Okay, I’m going to work on compiling DMS.

    billl [12:27 PM] 
    btw file has to be called parameters.multi -- somehow it doesnloads from here as something .txt

    sergio [12:28 PM] 
    maybe I just copied and paste the content of the file and created a text file after that

    billl [12:28 PM] 
    also i couldn't compile at all due to the DOS carriage returns - had to fix that first

    [12:28] 
    nuisence to go back and forth with DOS since they use different conventions

    [12:29] 
    ok now i compiled from that with no errors

    joe [12:34 PM] 
    added this Perl snippet: I deleted everything in my mod dir except parameters.multi and compiled, out of curiosity.
     graham-mac% cd /u/graham/projects/eee/simDMS/mod
    graham-mac% mkmod
    Search path for mod files is /usr/site/nrniv/local/mod
    grep: misc: No such file or directory
    grep: .mod: No such file or directory
    .mod NOT FOUND; check env variable MODL_INCLUDE.
    Add Comment Collapse

    joe [12:35 PM] 
    So we do need misc.h for some reason?

    [12:36] 
    @sergio, what all files do you have in your mod dir?

    sergio [12:38 PM] 
    there are for the different cells that I use. But let me check to see if I’m compiling extra stuff

    joe [12:39 PM] 
    Do you get the same error when you compile with just parameters.multi in your dir?

    sergio [12:41 PM] 
    let me compile from scratch

    [12:45] 
    it works fine

    joe [12:50 PM] 
    So when you just have `parameters.multi` in your mod dir it compiles fine?

    billl [12:51 PM] 
    misc.h is needed -- should get linked in but maybe an error in mkmod

    sergio [12:51 PM] 
    yep I cloned the repo to a new dir and compile over there

    billl [12:53 PM] 
    ok fixed mkmod and pushed to neurosim

    [12:53] 
    should do the misc.h link now

    joe [12:54 PM] 
    Thx! Trying now.

    joe [1:02 PM] 
    added and commented on this Perl snippet: compiling
    graham-mac% cd /u/graham/projects/eee/simDMS/mod
    graham-mac% ls
    parameters.multi
    graham-mac% mkmod
    Search path for mod files is /usr/site/nrniv/local/mod
    grep: misc: No such file or directory
    grep: .mod: No such file or directory
    .mod NOT FOUND; check env variable MODL_INCLUDE.
    graham-mac% ls
    misc.h@     parameters.multi
    graham-mac% 
    1 Comment Collapse
    Now mkmod creates a symlink to misc.h, but I still get the same error…

    billl [1:03 PM] 
    are you working with a DOS file or a unix file?

    joe [1:03 PM] 
    How would I know the difference?  Which file?

    billl [1:03 PM] 
    parameters.multi

    [1:03] 
    in emacs the mode line tells you the kind of file

    [1:04] 
    this file is in a repo? -- i can pull and check

    [1:04] 
    the one sergio posted previously was a DOS file

    [1:04] 
    and i got those same errors

    joe [1:04 PM] 
    Okay, I copied and pasted Sergio’s into a file.

    billl [1:05 PM] 
    if it's sergio's then it's DOS

    joe [1:05 PM] 
    That must be the problem.

    billl [1:05 PM] 
    we need to work with unix stuff please

    joe [1:05 PM] 
    I will certainly try to. :sweat_smile:

    [1:06] 
    Can I pull a copy of parameters.multi in unix from somewhere?

    billl [1:06 PM] 
    i'm not sure what mac is using now --  Unix traditionally uses \012, one kind of Windows I/O uses \015\012, and Mac OS uses \015 -- but that's prob the old macOS

    [1:07] 
    why don't you push it and i'll pull fix and push back

    joe [1:07 PM] 
    Will do.  One sec.


    billl [1:07 PM] 
    yeah that's the old one -- i haven't seen any mac problems in past few years i don't think


    sergio [1:09 PM] 
    sorry about the DOS problem, I just copied the text of the original file


    billl [1:10 PM] 
    original from where? -- do we have a DOS file lurking in some remote corner of our filesystem? -- heaven forfend -- we must now hunt that down


    [1:10] 
    or are you saying you copied onto a DOS machien?


    [1:11] 
    MSWindows machine


    joe [1:11 PM] 
    Okay, I pushed: /u/graham/projects/eee/sim/modDMS/parameters.multi


    billl [1:12 PM] 
    tried to find out how to detect filetype but seems like nothing easy


    sergio [1:12 PM] 
    I just created a text snippet from the file my repo


    billl [1:12 PM] 
    so repo is that dir? or the ..?


    [1:12] 
    so we better check your repo too -- where is that?


    joe [1:12 PM] 
    Maybe copying from Slack is encoded in DOS instead of unix?


    billl [1:13 PM] 
    copying to or from slack will use the machine type if do c&p -- if do an upload or download will get the exact file


    sergio [1:13 PM] 
    repo is: /u/sergioangulo/projects/eee


    billl [1:13 PM] 
    added this Perl snippet: test code
    (! -l "../$uname") and (symlink("mod/$uname","../$uname") || print "Can't create link from ../$uname\n");
    symlink("$local/mod/misc.h","misc.h"); 
    ​
    while (<IN>) {
     if $_
     if ($_ =~ /$block_regexp/) {
      $curfile && &printit; # print the previous block
      $curfile = $4;    # name comes from the 4th parenset in block_regexp
      if ($clean && -f ($objfile = $ENV{"CPU"}."/".$curfile.".o")) {
       print "Remove $objfile.\n"; unlink($objfile);
      }
      push(@lines,$_);
    ​
     } elsif ($_ =~ /^LDFLAGS (.+)/) {
      $loadflags .= qq| $1|;
     } elsif ($_ =~ /^INCFLAGS (.+)/) {
      $incflags .= qq| $1|;
     } elsif ($_ =~ /^DEFAULT/) {
      $curfile && &printit; # finish off a block if needed
      chop; @res=split / /; 
      if (! -f ($filename=$res[1])) { $filename = $res[1].".mod"; }
      push(@modfiles,$res[1]);  # stem only to run nrnmodl on
      if (($clean || $sections{$res[1]}) && -f ($objfile = $ENV{"CPU"}."/".$res[1].".o")) {
       print "Remove: $objfile.\n"; unlink($objfile);
      }
      if ($res[2] =~ /[0-9]+/ && $filecreate) { # a version number
       $co = 0;     # a flag
       if (-e "RCS/$filename,v") {
      print "Checking out version 1.$res[2] of $filename.\n";
      $co = 1;
      `co -r1.$res[2] $filename`;
       } else {
      foreach $dir (@modpath) { # look for the file and create link
       if (-e "$dir/RCS/$filename,v") { # save and terminate loop
        print "Checking out version 1.$res[2] of $dir/$filename.\n";
        unlink($filename);
        # must use full RCS path to get file into current dir
        # instead of into remote directory
        `co -r1.$res[2] $dir/RCS/$filename,v`;
        $co = 1;
        last; 
       }
      }
       }
       ($co==1) || die "WARNING RCS VERSION FOR $filename NOT FOUND.\n";
       # look for the file in MODL_INCLUDE path
      } elsif (-e $filename) {  
       $co = 1;
      } else {
       $co = 0;
       foreach $dir (@modpath) { # look for the file and create link
      if (-e "$dir/$filename") { # save and terminate loop
       $co = 1;
       symlink("$dir/$filename",$filename) || die "can't link to $dir/$filename\n";
       last;
      }
       }
      }
      if ($co == 0 && $filecreate) { # couldn't find the file so look for RCS
       if (-e "RCS/$filename,v") {
      print "Checking out $filename.\n";
      $co = 1; `co $filename`;
       } else {
      foreach $dir (@modpath) { # look for the file and create link
       if (-e "$dir/RCS/$filename,v") { # save and terminate loop
        print "Checking out $dir/$filename.\n";
        `co $dir/$filename`;
        symlink("$dir/$filename",$filename);
        $co = 1;
        last; 
       }
      }
       }
      }
      if (`grep -c //@ $filename`+0 > 0) { # look for '//@' which will need processing
       push(@modfiles,pop(@modfiles)."_"); # stem_
       $f1="$modfiles[$#modfiles].mod";
       if ((! -f $f1) || (-M $filename < -M $f1)) {
      &verbatize($filename); # replace //@ with bracketing VERBATIM/ENDVERBATIM
       }
      }
      ($co==1) || die "$filename NOT FOUND; check env variable MODL_INCLUDE.\n";
     } elsif ($#lines >= 0) {   # only add lines if in a block
      push(@lines,$_);
     }
    }
    ​
    # need to do terminal check
    $curfile && &printit;
    ​
    $nrnmodlflag || print "COMPILATION COMMAND: \n";
    # tell user the mod files being included
    print "\t$nrnmodl @modfiles\n"; 
    if ($grep) {
      grep($_.=".mod",@modfiles); # put .mod back on ends for filenames
      print "grep $grep @modfiles\n";
      system("grep $grep @modfiles");
    }
    if ($fullname) {
      grep($_.=".mod",@modfiles); # put .mod back on ends for filenames
      open(GREP,"grep INCLUDE @modfiles|");
      while (<GREP>) {
       if (/"/) { 
         s/[^"]+"([^"]+)"/\1/;
       $filename=$_; chop $filename;
       if (grep($_ eq $filename,@modfiles)) { next; }
       push(@modfiles,$filename);
         if (! -e $filename) {  
        foreach $dir (@modpath) { # look for the file and create link
         if (-e "$dir/$filename") { # save and terminate loop
          symlink("$dir/$filename",$filename) || die "can't link to $dir/$filename\n";
          last;
         }
        }
       }
        }
      }
      print "\n\t@modfiles\n";
      if ($tar) {
       $dstr = $name.`datestring`;
       print (($tar==1)?
         "Creating $dstr.tar; use 'tar rhf $dstr.tar $dstr/filename' if need to append\n":
         "Creating $dstr.zip; use 'zip -g $dstr.zip $dstr/filename' if need to append\n");
       symlink(".",$dstr);
       if (-e "../batch_.hoc"){
      symlink("../batch_.hoc","batch_.hoc"); 
      push(@modfiles,"batch_.hoc"); 
       } else {
      # print "\tNO batch_.hoc\n";
       }
       symlink("$local/mod/misc.h","misc.h"); 
       # push(@modfiles,"misc.h"); 
       foreach $file (@ATAR) { 
      ($d,$f)= ($file =~ m|^(.+)/([^/]+)$|);
      if ($d!~/^$/) {
       symlink("$file","$f"); 
       push(@links,$f);
      } elsif (-e "../$file") {
       $f=$file;
       symlink("../$file","$file"); 
       push(@links,$file);
      }
      push(@modfiles,$f);
       }
       grep($_="$dstr/$_",@modfiles);
       if ($tar==1) {`tar czhf $dstr.tgz @modfiles`;} else {
      unlink $dstr.zip;
      `zip $dstr.zip @modfiles`;
       }
       unlink $dstr;
       unlink @links;
      }
    }
    if ($nrnmodlflag) {
      if ($loadflags) { $nrnmodl .= qq| -loadflags "$loadflags"|; }
      $definc = "export DEFAULT_INCLUDES=\"-I/$local/mod";
      if ($incflags) { $definc .= " ".$incflags; }
      $definc .= "\"";
      (system("$definc;$nrnmodl @modfiles") == 0) || die "ERROR IN COMPILATION\n";
    }
    ​
    if ($nsp) {  # new special
     open(IN,$oldsp);
     open(OUT,"> $newsp");
     while (<IN>) {
      $_ =~ /libnrnmech/ and s|$uname/.libs/libnrnmech.so|$newlib|;
      print OUT;
     }
     close IN; close OUT; chmod 0755, $newsp;
     print "\t******** Moving special to $newsp ********\n";
     rename($oldlib,$newlib);
     rename("spe.SAV",$oldsp);
     rename("lib.SAV",$oldlib);
    }
    ​
    # print lines into a new file called $curfile.mod
    # clear the lines array and the curfile name
    sub printit { 
      push(@modfiles,$curfile); # name of a file to run nrnmodl on
      if ($filecreate && (! %sections || $sections{$curfile})) {
      $curfile .= ".mod"; # real file name
      if ((! -f $curfile) || (-M $file < -M $curfile)) {
       print "Creating $curfile\n";
       open(OUT,"> $curfile") || die "Can't open $curfile.\n";
       print OUT @lines;
       close(OUT);
      }
      }
      @lines = ();    # clear the array
      $curfile = "";
    }
    ​
    # verbatize makes a line marked by //@ into a VERBATIM block
    # need to sheer off the '{' and anything following so that brackets match for nocmodl
    # NB can't use if/else block where the if is VERBATIM since then the else is unprecedented
    # for nocmodl
    sub verbatize {
     ($in)=@_;
     $out=$in; $out=~s/\.mod/_.mod/;
     open(I,"<$in"); open(O,">$out"); 
     while (<I>) {
      if (m|//@|) {
       if (m|([^{]+)({.+)//.+|) {
      print O "VERBATIM\n$1\nENDVERBATIM\n$2\n";
       } else {
      print O "VERBATIM\n$_\nENDVERBATIM\n";
       }
      } else {
       print O;
      }
     }
    }
    Add Comment Click to expand inline 213 lines



    sergio [1:13 PM] 
    file is:  /u/sergioangulo/projects/eee/sim/mod/parameters.multi


    billl [1:13 PM] 
    hmm i am mistaken


    [1:14] 
    it got turned into DOS! -- frightening


    [1:14] 
    ok so avoid c&p


    joe [1:14 PM] 
    Yeah, c&p in Slack also messes up quotation marks.


    billl [1:14 PM] 
    ouch


    [1:15] 
    ok so here is how you can tell -- use the file command
    file /u/billl/Downloads/test_code.pl
    /u/billl/Downloads/test_code.pl: ASCII text, with CRLF line terminators


    [1:15] 
    CRLF is DOS termiator


    joe [1:17 PM] 
    graham-mac% file /u/graham/projects/eee/sim/modDMS/parameters.multi 
    /u/graham/projects/eee/sim/modDMS/parameters.multi: ASCII text, with CRLF line terminators


    [1:17] 
    Yup.


    [1:18] 
    Let me know when you push Unix version, pls.


    billl [1:19 PM] 
    let me try upload


    billl [1:19 PM] 
    added this Plain Text snippet: parameters.multi
    :DEFAULT clampex
    DEFAULT misc
    DEFAULT stats
    DEFAULT infot
    Add Comment Click to expand inline 151 lines



    billl [1:19 PM] 
    now you download and see if that one ok


    joe [1:20 PM] 
    graham-mac% file /u/graham/projects/eee/sim/modDMS/parameters.multi
    /u/graham/projects/eee/sim/modDMS/parameters.multi: ASCII text


    [1:20] 
    Looks good.


    salvadord [1:20 PM] 
    think can use Sublime Text to convert: File->Save with Encoding->UTF-8


    billl [1:20 PM] 
    that would work;  does sublime show filetype?


    joe [1:21 PM] 
    Perfect.  Now mkmod works. :slightly_smiling_face:


    sergio [1:21 PM] 
    yep it does


    billl [1:21 PM] 
    @sergio not getting error so presumably not a problem for his file


    joe [1:22 PM] 
    https://stackoverflow.com/questions/11899843/fixing-sublime-text-2-line-endings
    stackoverflow.com
    Fixing Sublime Text 2 line endings?
    Here is my Settings - User config: { "auto_indent": true, "color_scheme": "Packages/Color Scheme - Default/Twilight.tmTheme", "default_line_ending": "LF", "detect_indentation": tru...
     


    [1:22] 
    Under view --> Line Endings


    billl [1:23 PM] 
    lesson is to not use c&p for files that other people need to use - ok for just messageing text pieces


    joe [1:23 PM] 
    Good to know.


    [1:25] 
    So now we should have to add Cdur to RANGE in order to be able to change the value?


    billl [1:27 PM] 
    do you want them to be different in all of the syns?


    [1:27] 
    guess idea would be to at least have the spillover ones be longer i guess?


    [1:28] 
    so perhaps should make that range then?  or have 2 types -- NMDA vs esynNMDA


    [1:28] 
    esyn for extrasynaptic


    [1:28] 
    ?


    [1:29] 
    similarly could also either make Alpha and Beta RANGE or only consider as two types


    [1:29] 
    maybe two types is cleaner since less likely to get into mixups ?


    joe [1:30 PM] 
    Right, I thought we wanted to increase Cdur for spillover.


    billl [1:31 PM] 
    can do from parameters.multi by simply making another one


    [1:31] 
    NEURON{ POINT_PROCESS NMDA_spill


    [1:31] 
    NEURON{ POINT_PROCESS NMDAesyn


    [1:31] 
    whatever we want to call it (but let's all call it the same thing)


    [1:31] 
    can set that one to have a longer CDUR to start with in   Cdur  = 1.  (ms)     : transmitter duration (rising phase)
    and then also modify later in the py or netpyne files


    joe [1:41 PM] 
    added and commented on this Plain Text snippet: parameters.multi with NMDAesyn
    :DEFAULT clampex
    DEFAULT misc
    DEFAULT stats
    DEFAULT infot
    DEFAULT vecst
    DEFAULT nstim
    DEFAULT samnutils
    DEFAULT MyExp2SynBB
    DEFAULT MyExp2SynNMDABB
    :DEFAULT izhi2007a
    :DEFAULT izhi2007b
    : Ben Suter ion channels
    DEFAULT h_BS
    DEFAULT kap_BS
    DEFAULT kdmc_BS
    DEFAULT kdr_BS
    DEFAULT nax_BS
    : Mainen/Sej cell ion channels
    :DEFAULT naz
    :DEFAULT km
    :DEFAULT kv
    :DEFAULT kca
    :DEFAULT Nca
    DEFAULT cadad
    : mig ion channels
    DEFAULT cat_mig
    DEFAULT can_mig
    DEFAULT cal_mig
    : calcium activated k channel
    DEFAULT cagk
    : k channel with ca and voltage dependence - responsible for fast part of AHP
    DEFAULT IC
    : from Ben
    DEFAULT savedist
    : Harnett 2015 H channel
    DEFAULT h_harnett
    : Kole 2006 H channel
    DEFAULT h_kole
    : BK channel with ca and voltage dependence
    DEFAULT kBK
    : ih used for basket cells
    DEFAULT HCN1
    : channels for LTS1
    :DEFAULT na2_mh
    : ar is HCN - anomalous rectifier
    DEFAULT ar_traub
    DEFAULT cat_traub
    DEFAULT cal_mh
    : persistent sodium channel
    DEFAULT nap_sidi
    : ican (calcium dependent cation non-specific channel)
    DEFAULT ican_sidi
    : based on destexhe
    DEFAULT gabab
    : homeostatic synapse
    :DEFAULT hsyn
    : Channels for 3-comp FScell 
    DEFAULT nafx
    DEFAULT kdrin
    DEFAULT IKsin
    DEFAULT hin
    DEFAULT canin
    DEFAULT kapin
    DEFAULT kctin
    DEFAULT cadyn
    : Channels for 3-comp LTScell 
    DEFAULT kapcb
    DEFAULT catcb
    : NMDA and AMPA mod files from Neurosim repo /usr/site/nrniv/local/mod
    :DEFAULT AMPA
    :DEFAULT NMDA_
    :DEFAULT nmda
    :Vecstim used for long-range pops
    DEFAULT vecstim
    :* SYNAPSES
    :** AMPA
    NEURON {POINT_PROCESS AMPA}
    PARAMETER {
     Cdur = 0.3  (ms)    : transmitter duration (rising phase)
     Alpha = 0.47 (/ms mM)  : forward (binding) rate
     Beta = 0.18 (/ms)    : backward (unbinding) rate
     Erev = 0 (mV)    : reversal potential
    }
    INCLUDE "netcon.inc"
    :** NMDA
    NEURON{ POINT_PROCESS NMDA
     RANGE B, Alpha, Beta 
     GLOBAL mg
    }
    PARAMETER {
     mg    = 1.  (mM)    : external magnesium concentration
     Cdur = 1. (ms)   : transmitter duration (rising phase)
     Alpha = 4. (/ms mM)  : forward (binding) rate
     Beta = 0.0067 (/ms)   : backward (unbinding) rate 1/150
     Erev = 0. (mV)   : reversal potential
    }
    ASSIGNED { B }
    INCLUDE "netcon.inc"
    : EXTRA BREAKPOINT MUST BE BELOW THE INCLUDE
    BREAKPOINT {
     rates(v)
     g = g * B : hence g = gmax * R * B
     i = i * B : hence i = g*(v - Erev)
    }
    PROCEDURE rates(v(mV)) {
     TABLE B
     DEPEND mg
     FROM -100 TO 80 WITH 180
     B = 1 / (1 + exp(0.062 (/mV) * -v) * (mg / 3.57 (mM)))
    }
    :** NMDA -- extrasynaptic
    NEURON{ POINT_PROCESS NMDAesyn
     RANGE B, Cdur, Alpha, Beta 
     GLOBAL mg
    }
    PARAMETER {
     mg    = 1.  (mM)    : external magnesium concentration
     Cdur = 1. (ms)   : transmitter duration (rising phase)
     Alpha = 4. (/ms mM)  : forward (binding) rate
     Beta = 0.0067 (/ms)   : backward (unbinding) rate 1/150
     Erev = 0. (mV)   : reversal potential
    }
    ASSIGNED { B }
    INCLUDE "netcon.inc"
    : EXTRA BREAKPOINT MUST BE BELOW THE INCLUDE
    BREAKPOINT {
     rates(v)
     g = g * B : hence g = gmax * R * B
     i = i * B : hence i = g*(v - Erev)
    }
    PROCEDURE rates(v(mV)) {
     TABLE B
     DEPEND mg
     FROM -100 TO 80 WITH 180
     B = 1 / (1 + exp(0.062 (/mV) * -v) * (mg / 3.57 (mM)))
    }
    :** GABAA
    NEURON { POINT_PROCESS GABAA }
    PARAMETER {
     Cdur = 0.3  (ms)    : transmitter duration (rising phase)
     Alpha = 10  (/ms mM)  : forward (binding) rate
     Beta = 0.16 (/ms)    : backward (unbinding) rate
     Erev = -80  (mV)    : reversal potential
    }
    INCLUDE "netcon.inc"
    1 Comment Click to expand inline 182 lines
    It compiles.  I’m going to try modifying values now.



    billl [1:43 PM] 
    @sergio - you wokring with same file?  - oh but did we get rid of all the rubbish yet?  - -how about getting rid of the commented out lines?  -- do you need infot?  could keep stats and misc maybe since have some helper functions but you're prob not using them either


    joe [1:44 PM] 
    I’m not exactly sure what all we need, but would be nice to be lean and mean.


    sergio [1:44 PM] 
    ok let me work on that


    billl [1:44 PM] 
    you can grep all of your insert statements to see what you are using


    [1:45] 
    also would need to find the PPs but other than synspases don't think you have anything special


    [1:45] 
    but good to know what you are using


    sergio [1:46 PM] 
    so the idea would be to go to netparams and look for all the inserts


    [1:46] 
    ?


    billl [1:48 PM] 
    perhaps most of the files are .py Class or .hoc template files so not there


    joe [1:49 PM] 
    I think Netpyne handles the `insert`s


    billl [1:49 PM] 
    oh ok then sergio would be right


    joe [1:49 PM] 
    I don’t have any in netParams


    billl [1:49 PM] 
    ok so then sergio would be wrong


    [1:49] 
    sergio, are you right or wrong?


    [1:49] 
    usualy would be a template or Class -- thought you made a class joe?


    [1:50] 
    for the 6cmp model


    joe [1:50 PM] 
    Ahhh, the `insert`s are in the cell files.


    billl [1:50 PM] 
    y


    sergio [1:50 PM] 
    so I can execute netParams.py on ipython and then look in the output from `netParams.cellParams`


    billl [1:50 PM] 
    but sergio will have a lot more cell types


    [1:51] 
    that sounds good sergio -- will that work @salvadord  ?


    [1:51] 
    give it a try -- i'm heading out now; bbl


    sergio [1:52 PM] 
    I have all the mechs


    salvadord [1:53 PM] 
    netParams.cellParasm — y that should show you all mechs, syns etc


    [1:53] 
    inserts are implemented internally in netpyne


    [1:53] 
    if importing cell, you can of course look for inserts in original cell file


    sergio [1:54 PM] 
    salva


    joe [1:56 PM] 
    I’m going to play around with my parameters.multi.  Sergio, when you finish removing all the fluff, will you share me your parameters.multi please?


    sergio [1:57 PM] 
    ok

*** Need to redo all symlinks to mod dir

How to symlink:
    ln -s /path/to/original /path/to/symlink

Locations which need symlink:
    eee/sim
    eee/sim/batches
    all batch folders in eee/sim/batches

Example commands for hardlink:
    cd /u/graham/projects/eee/sim
    ln -s /u/graham/projects/eee/sim/mod/x86_64 x86_64

For relative links:

    cd /u/graham/projects/eee/sim
    ls -l
    rm -r x86_64
    ls -l
    ln -s mod/x86_64 x86_64
    ls -l

    cd /u/graham/projects/eee/sim/batches
    ls -l
    rm -r x86_64
    ln -s ../mod/x86_64 x86_64
    ls -l

Actually, no need to change symlinks for batches/batch_NAME because they are
all already relative symlinked to sim/x86_64

** Switching mod files to new DMS

*** Working in eee/sim/batches/batch_spillover/netParams.py

Changing:
    netParams.synMechParams['NMDA'] = {'mod': 'MyExp2SynNMDABB', 'tau1NMDA': cfg.tau1NMDA, 'tau2NMDA': cfg.tau2NMDA, 'e': 0}

To:
    netParams.synMechParams['NMDA'] = {'mod': 'NMDA', 'Cdur': cfg.CdurNMDAScale * 1.0}
    netParams.synMechParams['NMDAesyn'] = {'mod': 'NMDAesyn', 'Cdur': cfg.CdurNMDAEsynScale * 1.0}

*** Working in eee/sim/batches/batch_spillover/cfg.py

Adding params:
    cfg.CdurNMDAScale = 1.0
    cfg.CdurNMDAEsynScale = 1.0

Changing:
    cfg.NetStim2 = {'pop': ['eee7us', 'eee7ps'], 'loc': 0.00001, 'sec': 'spinenecks', 'synMech': ['NMDA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': cfg.glutAmp*cfg.spillFraction/cfg.glutSpread, 'delay': 1.0 + cfg.spillDelay}

To:
    cfg.NetStim2 = {'pop': ['eee7us', 'eee7ps'], 'loc': 0.00001, 'sec': 'spinenecks', 'synMech': ['NMDAesyn'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': cfg.glutAmp*cfg.spillFraction/cfg.glutSpread, 'delay': 1.0 + cfg.spillDelay}

*** Working in my_batches.py

Commented out all old batches and added:

    # Varying Cdur in synaptic and extrasynaptic NMDA receptors
    batch = {}
    batch["label"] = "Cdur_CdurEsyn"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["CdurNMDAScale"] = [0.1, 1, 10, 100]
    params["CdurNMDAEsynScale"] = [0.1, 1, 10, 100]
    batch["params"] = params
    batches[batch["label"]] = batch

** Running and analyzing batch

Commands:

    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_spillover/
    graham-mac% ./runmybatches

    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_spillover
    graham-mac% ipython -i
    In [1]: import batch_utils
    In [2]: import batch_analysis
    In [3]: batch_analysis.plot_vtraces("Cdur_CdurEsyn")

Output:

The batch ran, and analysis produced figures.  :)

However, there is no activity.  :(

Will try increasing the weight until I see activity.

*** Figuring out appropriate NMDA weight

my_batches.py

    # Varying glutamate amplitude and Cdur in synaptic NMDA receptors
    batch = {}
    batch["label"] = "glutAmp_Cdur"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns) 
    params["CdurNMDAScale"] = [0.1, 1, 10, 100]
    #params["CdurNMDAEsynScale"] = [0.1, 1, 10, 100]
    batch["params"] = params
    batches[batch["label"]] = batch

Will run with glut_stim_scale = 10

    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_spillover/ ; rm -r batch_data ; ./runmybatches
    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_spillover/ ; ipython -i analyze.py

Still no response.  Increasing glut_stim_scale = 100

Still no response.  Increasing glut_stim_scale = 1000

Still no response.  Increasing glut_stim_scale = 1000000

Still no response.  This is getting a bit ridiculuous.  There must be a problem 
somewhere.  Committing, pushing, asking for help, and then getting some dinner.

Adding print statements to netParams and running batch.

    for curpop in ns['pop']:
        print("================================================")
        print(curpop)
        print(ns['synMech'][i])
        print(cur_weight)
        print("================================================")

The print statements all show the proper weight.

But when I load the data, there is a weird difference between 
  datum['simConfig']['NetStim1'] and 
  datum['net']['params']['stimTargetParams']['NetStim1_eee7us_NMDA']

datum['simConfig']['NetStim1'] (partial):
    u'NetStim1',
    OrderedDict([(u'delay', 1.0),
                 (u'interval', 1000),
                 (u'loc', 0.99999),
                 (u'noise', 0.0),
                 (u'number', 1),
                 (u'sec', [u'head_50']),
                 (u'start', 200),
                 (u'synMech', [u'NMDA', u'AMPA']),
                 (u'weight', [0.03, 0.006])])),

Notice weight for NMDA is 0.03 (incorrect value)

datum['net']['params']['stimTargetParams']['NetStim1_eee7us_NMDA']:
    OrderedDict([(u'delay', [1.0]),
             (u'source', u'NetStim1'),
             (u'synsPerConn', 1),
             (u'sec', [u'head_50']),
             (u'synMech', u'NMDA'),
             (u'conds', OrderedDict([(u'popLabel', [u'eee7us', u'eee7ps'])])),
             (u'loc', 0.99999),
             (u'weight', [22500.0])])

Notice weight is 22500 (correct value)

Asking for help in Slack again.  Will commit and push now.

** Chat log


    sergio [6:00 PM] 
    I’m not seeing any response also in my network


    sergio [6:18 PM] 
    added and commented on this Plain Text snippet: PT5 Bdend1 params
    In [8]: netParams.cellParams.PT5_reduced.secs.Bdend1
    Out[8]: {ions: {na: {i: 10.0, e: 42.0, o: 140.0}, ca: {i: 5e-05, e: 132.4579341637009, o: 2.0}, k: {i: 54.4, e: -104.0, o: 2.5}}, mechs: {kBK: {tau: 1.0, caPmax: 1.0, caPmin: 0.0, caVhh: 0.002, caVhmin: -2.1899738592999967, gpeak: 5.09733585163e-05, caPh: 0.002, caPk: 1.0, k: 17.0, caVhmax: 155.67}, pas: {e: -88.5366550238, g: 7.620207783345154e-05}, cadad: {taur: 99.1146852282, depth: 0.119408607923, kt: 0.0, cainf: 0.00024, kd: 0.0}, ih: {aslope: 11.9, gbar: 0.000140956438043, ascale: 0.00643, bslope: 33.1, bscale: 0.193, ashift: 154.9}, kap: {vhalfn: 32.7885075379, gbar: 0.0898600246397, sh: 0.0, vhalfl: -59.7867409796, tq: -52.0967985869}, can: {gcanbar: 4.60717910591e-06}, cal: {gcalbar: 4.41583533572e-06}, nax: {gbar: 0.00345117294903, sh: 0.0}, kdr: {gbar: 0.0131103978049, sh: 0.0, vhalfn: 11.6427471384}}, geom: {nseg: 99, diam: 2.2799248874, L: 200.0, cm: 1.89771901209, Ra: 114.510490019}, _repr_mimebundle_: {}, vinit: -75.0413649414, topol: {childX: 0.0, parentSec: 'soma', parentX: 0.5}}
    2 Comments Collapse
    it seems that is not inserting any syn mechanism



    sergio [6:49 PM] 
    added this Plain Text snippet: Synaptic mechs on Bdend1
    In [5]: netParams.cellParams.PT5_reduced.secs.Bdend1.synMechs
    Out[5]: {_repr_mimebundle_: {}}
    Add Comment



    joe [6:53 PM] 
    That’s a bit weird.  I’m also having a weird problem.


    joe [6:54 PM] 
    added this JavaScript/JSON snippet: Problem with DMS NMDA weight
    I added print statements to netParams and ran the batch
    ​
      for curpop in ns['pop']:
        print("================================================")
        print(curpop)
        print(ns['synMech'][i])
        print(cur_weight)
        print("================================================")
    ​
    The print statements all show the proper weight.
    ​
    But when I load the data, there is a weird difference between 
     datum['simConfig']['NetStim1'] and 
     datum['net']['params']['stimTargetParams']['NetStim1_eee7us_NMDA']
    ​
    datum['simConfig']['NetStim1'] (partial):
      u'NetStim1',
      OrderedDict([(u'delay', 1.0),
             (u'interval', 1000),
             (u'loc', 0.99999),
             (u'noise', 0.0),
             (u'number', 1),
             (u'sec', [u'head_50']),
             (u'start', 200),
             (u'synMech', [u'NMDA', u'AMPA']),
             (u'weight', [0.03, 0.006])])),
    ​
    Notice weight for NMDA is 0.03 (incorrect value)
    ​
    datum['net']['params']['stimTargetParams']['NetStim1_eee7us_NMDA']:
      OrderedDict([(u'delay', [1.0]),
           (u'source', u'NetStim1'),
           (u'synsPerConn', 1),
           (u'sec', [u'head_50']),
           (u'synMech', u'NMDA'),
           (u'conds', OrderedDict([(u'popLabel', [u'eee7us', u'eee7ps'])])),
           (u'loc', 0.99999),
           (u'weight', [22500.0])])
    ​
    Notice weight is 22500 (correct value)
    Add Comment Collapse



    sergio [6:57 PM] 
    that’s strange


    joe [6:57 PM] 
    Yeah, especially since everything worked fine with the Exp2syn mod.


    sergio [7:00 PM] 
    let me try on exp2syn


    sergio [7:14 PM] 
    it’s not working also


    penny [7:39 PM] 
    22500!:scream:
     2 replies Last reply 13 hours ago View thread


    salvadord [7:43 PM] 
    commented on sergio’s snippet PT5 Bdend1 params
    you won’t see synMechs in the cellParams — they are only added once connections are made — you can inspect eg. sim.net.cells[0].secs.soma.synMechs



    salvadord [7:46 PM] 
    @joe - so works ok with exp2syn but not with dms?


    [7:50] 
    is problem just with batch or also single sim?


    joe [7:55 PM] 
    I’ve just been running batches.  I’ll try a single sim.


    joe [8:15 PM] 
    I’ve been running single sims and changing weight in cfg.  Same problem: I can see proper value in my print statements, but I’m not seeing any response.


    [8:15] 
    I’ll keep digging around, I just wanted to make sure I wasn’t missing something simple.


    salvadord [8:17 PM] 
    where’s single sim example so I can try?


    joe [8:19 PM] 
    I just ran batch_init to get a single sim.


    [8:20] 
    in eee/sim/batches/batch_spillover


    salvadord [8:34 PM] 
    check whether the stims are actually being created, and what weight they have


    [8:35] 
    eg. sim.net.cells[0].stims


    joe [8:36 PM] 
    In [6]: sim.net.cells[0].stims
    Out[6]: []


    [8:37] 
    And in looking, somehow I lost the spine where the stim should be…


    [8:37] 
    In [5]: sim.net.cells[0].secs[‘head50’]
    Out[5]: {}


    salvadord [8:37 PM] 
    so maybe something else wrong with sim? guess 1st make sure stim created


    [8:38] 
    then can actually check weight in `sim.net.cells[0].conns` and NEURON netcon weight in  `sim.net.cells[0].conns[0]['hNetcon']`


    joe [8:40 PM] 
    Thanks for the tips.  I’ll keep digging.


* 2017-08-22 -- DMS NMDA and project meeting

** TODO

Switch to DMS for NMDA, match output with Sergio 
Spillover batching -- examine output
Update cells with Salvador's improvements
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params

** Working on DMS

Got it working.  Problem was Salva had changed 'popLabel' to 'pop'.

*** Chat log

    sergio [8:49 AM] 
    added this Plain Text snippet: syn mechs for PT5
    Check netParams:
    In [2]: netParams.connParams
    Out[2]: ConnParams()
    In [3]: netParams.stimSourceParams
    Out[3]: 
    StimSourceParams([('NetStim1',
              {'interval': 100,
              'noise': 0.1,
              'number': 1,
              'start': 200,
              'type': 'NetStim'})])
    In [4]: netParams.stimTargetParams
    Out[4]: 
    StimTargetParams([('NetStim1_PT5_AMPA',
              {'conds': {'popLabel': 'PT5'},
              'delay': 1,
              'loc': 0.5,
              'sec': 'Bdend1',
              'source': 'NetStim1',
              'synMech': 'AMPA',
              'weight': 0.020000000000000004}),
             ('NetStim1_PT5_NMDA',
              {'conds': {'popLabel': 'PT5'},
              'delay': 1,
              'loc': 0.5,
              'sec': 'Bdend1',
              'source': 'NetStim1',
              'synMech': 'NMDA',
              'weight': 0.1})])
    then sim.net.cells[0]:
    >>> sim.net.cells[0].conns
    []
    >>> sim.net.cells[0].secs.soma.synMechs
    >>> {}
    >>> sim.net.cells[0].secs.Bdend1.synMechs
    {}
    1 Comment Collapse



    sergio [8:50 AM] 
    I tried to check if the netstim params were in the input


    billl [8:50 AM] 
    so need 2 types of NMDA now right?


    [8:50] 
    are you looking for netstims or netcons or synapses?


    sergio [8:51 AM] 
    the netstim at this moment. I’m not seeing any response to the netstim even with the exp2syn mechs


    billl [8:53 AM] 
    so you only have 1 netstim?  that's for whole network?


    sergio [8:54 AM] 
    I have 2 netstim in general. One for the basal dendrite in PT5 with AMPA and NMDA and one for the other cells (AMPA)


    [8:54] 
    For this sim I just tried the single cell and basal dendrite


    billl [8:54 AM] 
    that's for an initial trigger for the cells?  -- also have bg netstims or not?


    sergio [8:56 AM] 
    I do have a bigger netstim with just AMPA for all the cells


    billl [8:56 AM] 
    bigger?  or more netstims?


    sergio [8:57 AM] 
    I mean a netstim that is the input to all the populations


    billl [8:57 AM] 
    1 netstim with many netcons -- what is that one for?


    sergio [8:59 AM] 
    I did it in previous sim to make the different population to fire. For the last sims, I was just doing a netstim to the basal dendrite of the PT5, and  AMPA to the soma of VIP5 interneurons


    salvadord [9:00 AM] 
    commented on sergio’s snippet syn mechs for PT5
    do u have just 1 cell in this example?



    sergio [9:00 AM] 
    yep salva


    salvadord [9:02 AM] 
    so what changed here? before u were having no problems when adding stims? is it just because u changed the syn to DMS?


    sergio [9:06 AM] 
    before I compiled NMDA DMS and worked, but couldn’t change parameters. Then try to compile the mod file from Penny, but didn’t work. Yesterday, we were working compiling the NMDA DMS and changing the params with Joe. But we didn’t response after stim. I changed to exp2syn to see if it was just a problem with the NMDA DMS file, but it didn’t work either.


    salvadord [9:06 AM] 
    so what changed in repo from when it was working to when it wasnt?


    joe [9:06 AM] 
    Yeah, I’m also having (new) problems with the switch to DMS…


    salvadord [9:06 AM] 
    (with the expsyn)


    joe [9:07 AM] 
    I’m about to try switching back to exp2syn to see if that works.


    salvadord [9:07 AM] 
    but joe does is still work for you if use expsyn… ok


    sergio [9:08 AM] 
    We were working in the parameter.multi file only


    joe [9:08 AM] 
    Oh, that’s true…  Could we be needing one of the files we took out of parameters.multi?


    sergio [9:11 AM] 
    added this Plain Text snippet: non mechs left out
    DEFAULT misc
    DEFAULT stats
    DEFAULT infot
    DEFAULT samnutils
    DEFAULT savedist
    Add Comment



    sergio [9:11 AM] 
    these are the only ones that were not mechs and I didn’t include in the parameters.multi


    billl [9:12 AM] 
    don't need exp2syn in parameters.multi since that is builtin


    [9:12] 
    you  also took out all those unused channel params right?


    sergio [9:13 AM] 
    yep


    billl [9:13 AM] 
    great


    sergio [9:13 AM] 
    I checked all of them and run the sims to see if they were working


    salvadord [9:20 AM] 
    sergio replace all ‘popLabel’ (deprecated) with ‘pop’  — had automatic replacement but not working due to recent change


    sergio [9:21 AM] 
    ok


    joe [9:30 AM] 
    added this Plain Text snippet: I changed popLabel to pop, but now it crashes:
    ---------------------------------------------------------------------------
    LookupError                Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_spillover/batch_init.py in <module>()
       30 
       31 # add network stimulation
    ---> 32 sim.net.addStims()
       33 
       34 # setup variables to record for each cell (spikes, V traces, etc)
    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in addStims(self)
      158 
      159             if source['type'] == 'NetStim':
    --> 160               self._addCellStim(params, postCell) # call method to add connections (sort out synMechs first)
      161             else:
      162               postCell.addStim(params) # call cell method to add connection
    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in _addCellStim(self, stimParam, postCell)
      200       params['delay'] = finalParam['delaySynMech']
      201 
    --> 202       postCell.addStim(params=params)
      203 
      204 
    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addStim(self, params)
      979         'seed': params['seed'] if 'seed' in params else sim.cfg.seeds['stim']}
      980 
    --> 981       self.addConn(connParams, netStimParams)
      982 
      983 
    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addConn(self, params, netStimParams)
      690     # Add synaptic mechanisms
      691     if not pointp: # check not a point process
    --> 692       synMechs, synMechSecs, synMechLocs = self._setConnSynMechs(params, secLabels)
      693       if synMechs == -1: return
      694 
    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in _setConnSynMechs(self, params, secLabels)
      1139 
      1140     # add synaptic mechanism to section based on synMechSecs and synMechLocs (if already exists won't be added)
    -> 1141     synMechs = [self.addSynMech(synLabel=params['synMech'], secLabel=synMechSecs[i], loc=synMechLocs[i]) for i in range(synsPerConn)]
      1142 
      1143     return synMechs, synMechSecs, synMechLocs
    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addSynMech(self, synLabel, secLabel, loc)
      591           for synParamName,synParamValue in synMechParams.iteritems(): # add params of the synaptic mechanism
      592             if synParamName not in ['label', 'mod', 'selfNetCon', 'loc']:
    --> 593               setattr(synMech['hSyn'], synParamName, synParamValue)
      594             elif synParamName == 'selfNetcon': # create self netcon required for some synapses (eg. homeostatic)
      595               secLabelNetCon = synParamValue.get('sec', 'soma')
    LookupError: 'Cdur' is not a defined hoc variable name.
    Add Comment Collapse



    salvadord [9:31 AM] 
    crashing - good sign, means adding syns — trying to set Cdur property of syn but maybe not possible?


    joe [9:33 AM] 
    Looks like I didn’t add Cdur to RANGE in NMDA…  I’ll try adding it.


    [9:38] 
    I’ve got activity! :slightly_smiling_face:


    sergio [9:39 AM] 
    :+1:


    joe [9:39 AM] 
    added this Plain Text snippet: Here’s my new parameters.multi with Cdur in RANGE
    DEFAULT vecst
    DEFAULT nstim
    DEFAULT MyExp2SynBB
    : Ben Suter ion channels
    DEFAULT h_BS
    DEFAULT kap_BS
    DEFAULT kdmc_BS
    DEFAULT kdr_BS
    DEFAULT nax_BS
    DEFAULT cadad
    : mig ion channels
    DEFAULT cat_mig
    DEFAULT can_mig
    DEFAULT cal_mig
    : Kole 2006 H channel
    DEFAULT h_kole
    : BK channel with ca and voltage dependence
    DEFAULT kBK
    : based on destexhe
    DEFAULT gabab
    : Channels for 3-comp FScell 
    DEFAULT nafx
    DEFAULT kdrin
    DEFAULT IKsin
    DEFAULT hin
    DEFAULT canin
    DEFAULT kapin
    DEFAULT kctin
    DEFAULT cadyn
    : Channels for 3-comp LTScell 
    DEFAULT kapcb
    DEFAULT catcb
    :Vecstim used for long-range pops
    DEFAULT vecstim
    :* SYNAPSES
    :** AMPA
    NEURON {POINT_PROCESS AMPA}
    PARAMETER {
     Cdur = 0.3  (ms)    : transmitter duration (rising phase)
     Alpha = 0.47 (/ms mM)  : forward (binding) rate
     Beta = 0.18 (/ms)    : backward (unbinding) rate
     Erev = 0 (mV)    : reversal potential
    }
    INCLUDE "netcon.inc"
    :** NMDA
    NEURON{ POINT_PROCESS NMDA
     RANGE B, Cdur, Alpha, Beta 
     GLOBAL mg
    }
    PARAMETER {
     mg    = 1.  (mM)    : external magnesium concentration
     Cdur = 1. (ms)   : transmitter duration (rising phase)
     Alpha = 4. (/ms mM)  : forward (binding) rate
     Beta = 0.0067 (/ms)   : backward (unbinding) rate 1/150
     Erev = 0. (mV)   : reversal potential
    }
    ASSIGNED { B }
    INCLUDE "netcon.inc"
    : EXTRA BREAKPOINT MUST BE BELOW THE INCLUDE
    BREAKPOINT {
     rates(v)
     g = g * B : hence g = gmax * R * B
     i = i * B : hence i = g*(v - Erev)
    }
    PROCEDURE rates(v(mV)) {
     TABLE B
     DEPEND mg
     FROM -100 TO 80 WITH 180
     B = 1 / (1 + exp(0.062 (/mV) * -v) * (mg / 3.57 (mM)))
    }
    :** NMDA -- extrasynaptic
    NEURON{ POINT_PROCESS NMDAesyn
     RANGE B, Cdur, Alpha, Beta 
     GLOBAL mg
    }
    PARAMETER {
     mg    = 1.  (mM)    : external magnesium concentration
     Cdur = 1. (ms)   : transmitter duration (rising phase)
     Alpha = 4. (/ms mM)  : forward (binding) rate
     Beta = 0.0067 (/ms)   : backward (unbinding) rate 1/150
     Erev = 0. (mV)   : reversal potential
    }
    ASSIGNED { B }
    INCLUDE "netcon.inc"
    : EXTRA BREAKPOINT MUST BE BELOW THE INCLUDE
    BREAKPOINT {
     rates(v)
     g = g * B : hence g = gmax * R * B
     i = i * B : hence i = g*(v - Erev)
    }
    PROCEDURE rates(v(mV)) {
     TABLE B
     DEPEND mg
     FROM -100 TO 80 WITH 180
     B = 1 / (1 + exp(0.062 (/mV) * -v) * (mg / 3.57 (mM)))
    }
    :** GABAA
    NEURON { POINT_PROCESS GABAA }
    PARAMETER {
     Cdur = 0.3  (ms)    : transmitter duration (rising phase)
     Alpha = 10  (/ms mM)  : forward (binding) rate
     Beta = 0.16 (/ms)    : backward (unbinding) rate
     Erev = -80  (mV)    : reversal potential
    }
    INCLUDE "netcon.inc"
    Add Comment Click to expand inline 119 lines



    sergio [9:44 AM] 
    perfect, me too


    joe [9:45 AM] 
    Great.


    billl [9:55 AM] 
    so did we decide to make Cdur range?   what is advantage?


    [9:56] 
    i preferred to have sep NMDA for syn and exsyn


    joe [9:56 AM] 
    I thought we had to make it RANGE in order to modify it, and we wanted to modify it to induce plateaus.


    billl [9:56 AM] 
    can modify GLOBALs or RANGEs


    joe [9:57 AM] 
    Oh, yeah, there is a separate NMDA and NMDAesyn.  I made Cdur range in NMDA as well so I could see the effect.


    [9:57] 
    Would it be better to have it as GLOBAL for some reason?


** Finding better glutAmp values 

glut_stim_weight = [0.02, 0.03, 0.04, 0.05, 0.06, 0.07] 

These values work well.  From no spiking to almost depol blockade.

** Working on changing Cdur

*** Chat log

    joe [9:39 AM] 
    added this Plain Text snippet: Here’s my new parameters.multi with Cdur in RANGE
    DEFAULT vecst
    DEFAULT nstim
    DEFAULT MyExp2SynBB
    : Ben Suter ion channels
    DEFAULT h_BS
    DEFAULT kap_BS
    DEFAULT kdmc_BS
    DEFAULT kdr_BS
    DEFAULT nax_BS
    DEFAULT cadad
    : mig ion channels
    DEFAULT cat_mig
    DEFAULT can_mig
    DEFAULT cal_mig
    : Kole 2006 H channel
    DEFAULT h_kole
    : BK channel with ca and voltage dependence
    DEFAULT kBK
    : based on destexhe
    DEFAULT gabab
    : Channels for 3-comp FScell 
    DEFAULT nafx
    DEFAULT kdrin
    DEFAULT IKsin
    DEFAULT hin
    DEFAULT canin
    DEFAULT kapin
    DEFAULT kctin
    DEFAULT cadyn
    : Channels for 3-comp LTScell 
    DEFAULT kapcb
    DEFAULT catcb
    :Vecstim used for long-range pops
    DEFAULT vecstim
    :* SYNAPSES
    :** AMPA
    NEURON {POINT_PROCESS AMPA}
    PARAMETER {
     Cdur = 0.3  (ms)    : transmitter duration (rising phase)
     Alpha = 0.47 (/ms mM)  : forward (binding) rate
     Beta = 0.18 (/ms)    : backward (unbinding) rate
     Erev = 0 (mV)    : reversal potential
    }
    INCLUDE "netcon.inc"
    :** NMDA
    NEURON{ POINT_PROCESS NMDA
     RANGE B, Cdur, Alpha, Beta 
     GLOBAL mg
    }
    PARAMETER {
     mg    = 1.  (mM)    : external magnesium concentration
     Cdur = 1. (ms)   : transmitter duration (rising phase)
     Alpha = 4. (/ms mM)  : forward (binding) rate
     Beta = 0.0067 (/ms)   : backward (unbinding) rate 1/150
     Erev = 0. (mV)   : reversal potential
    }
    ASSIGNED { B }
    INCLUDE "netcon.inc"
    : EXTRA BREAKPOINT MUST BE BELOW THE INCLUDE
    BREAKPOINT {
     rates(v)
     g = g * B : hence g = gmax * R * B
     i = i * B : hence i = g*(v - Erev)
    }
    PROCEDURE rates(v(mV)) {
     TABLE B
     DEPEND mg
     FROM -100 TO 80 WITH 180
     B = 1 / (1 + exp(0.062 (/mV) * -v) * (mg / 3.57 (mM)))
    }
    :** NMDA -- extrasynaptic
    NEURON{ POINT_PROCESS NMDAesyn
     RANGE B, Cdur, Alpha, Beta 
     GLOBAL mg
    }
    PARAMETER {
     mg    = 1.  (mM)    : external magnesium concentration
     Cdur = 1. (ms)   : transmitter duration (rising phase)
     Alpha = 4. (/ms mM)  : forward (binding) rate
     Beta = 0.0067 (/ms)   : backward (unbinding) rate 1/150
     Erev = 0. (mV)   : reversal potential
    }
    ASSIGNED { B }
    INCLUDE "netcon.inc"
    : EXTRA BREAKPOINT MUST BE BELOW THE INCLUDE
    BREAKPOINT {
     rates(v)
     g = g * B : hence g = gmax * R * B
     i = i * B : hence i = g*(v - Erev)
    }
    PROCEDURE rates(v(mV)) {
     TABLE B
     DEPEND mg
     FROM -100 TO 80 WITH 180
     B = 1 / (1 + exp(0.062 (/mV) * -v) * (mg / 3.57 (mM)))
    }
    :** GABAA
    NEURON { POINT_PROCESS GABAA }
    PARAMETER {
     Cdur = 0.3  (ms)    : transmitter duration (rising phase)
     Alpha = 10  (/ms mM)  : forward (binding) rate
     Beta = 0.16 (/ms)    : backward (unbinding) rate
     Erev = -80  (mV)    : reversal potential
    }
    INCLUDE "netcon.inc"
    Add Comment Click to expand inline 119 lines



    sergio [9:44 AM] 
    perfect, me too


    joe [9:45 AM] 
    Great.


    billl [9:55 AM] 
    so did we decide to make Cdur range?   what is advantage?


    [9:56] 
    i preferred to have sep NMDA for syn and exsyn


    joe [9:56 AM] 
    I thought we had to make it RANGE in order to modify it, and we wanted to modify it to induce plateaus.


    billl [9:56 AM] 
    can modify GLOBALs or RANGEs


    joe [9:57 AM] 
    Oh, yeah, there is a separate NMDA and NMDAesyn.  I made Cdur range in NMDA as well so I could see the effect.


    [9:57] 
    Would it be better to have it as GLOBAL for some reason?


    billl [10:00 AM] 
    guess mostly parsimony -- all of the params are set as GLOBAL in netcon.inc as the assumption has been that a defined type of channel will be same -- of course one could talk about phosphorylation states and think about them all being different but don't think we're near to that point yet


    [10:00] 
    if change CDUR would prob change all of them but i still can't see rationale for that


    [10:01] 
    either way we have to figure out how to use GLOBALs -- are you saying that netpyne can't currently handle them?


    joe [10:01 AM] 
    I’m not saying anything about Netpyne…  @salvadord ?


    billl [10:01 AM] 
    if that is limitation then we should get fixed


    [10:02] 
    well let's try with GLOBAL and see if there is a problem


    joe [10:02 AM] 
    I wanted to keep NMDA Cdur and NMDAEsyn Cdur separate for a little while so I can see the different effects.


    [10:03] 
    NMDAEsyn doesn’t have much effect compared with NMDA (only 10% of weight)


    billl [10:03 AM] 
    they will be entirely separate


    [10:03] 
    since they have different suffixes


    [10:03] 
    you have 2 entries in parameters.multi


    [10:03] 
    (right?)


    joe [10:04 AM] 
    Okay, so even if Cdur is GLOBAL, because they are two sep mods, each Cdur will still be unique?


    billl [10:04 AM] 
    y


    joe [10:04 AM] 
    Yeah, two entries: NMDA and NMDAEsyn


    billl [10:04 AM] 
    2 diff mod files with 2 diff names (2 diff SUFFIXes) so each CDUR is labeled with the corresponding SUFFIX


    joe [10:06 AM] 
    Got it.  @salvadord , do you see any reason GLOBALS wouldn’t work in Netpyne?


    billl [10:07 AM] 
    seems like global would go at the level of syn def rather than at the level of pop2pop connect params


    salvadord [10:09 AM] 
    you can add globals via simConfig.hParams[‘Cdur’] = 5, or within each cell rule eg. netParams.cellParams[‘PT_rule’][‘globals’][‘Cdur’] = 5


    joe [10:21 AM] 
    added and commented on this Objective-C snippet: Setting Cdur in netParams
    netParams.synMechParams['NMDA'] = {'mod': 'NMDA', 'Cdur': cfg.CdurNMDAScale * 1.0}
    netParams.synMechParams['NMDAesyn'] = {'mod': 'NMDAesyn', 'Cdur': cfg.CdurNMDAEsynScale * 1.0}
    1 Comment
    This is how I was trying to modify Cdur.  Doesn’t seem to have any effect.



    billl [10:22 AM] 
    once you modify then instantiate the network and then check the value


    [10:22] 
    don't need to run to see if has an effect + not good to do that way anyway since might have changed yet might not have any effect


    [10:23] 
    i do that in a small closed loop usually so not restarting simulator each time -- load from netpyne -- check that the param i think was changed actually got changed


    [10:23] 
    i used reload() in 2.7 for that


    [10:23] 
    or can use execfile()


    joe [10:23 AM] 
    I’ll give that a try.


    billl [10:45 AM] 
    any luck?


    joe [10:45 AM] 
    Having a little breakfast.  Back at it in 10.


    billl [10:47 AM] 
    ok


    joe [11:00 AM] 
    added and commented on this Objective-C snippet: instantiated sim
    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_spillover/ ; ipython -i instantiate.py
    ​
    Creating network of 2 cell populations on 1 hosts...
     Number of cells on node 0: 2 
     Done; cell creation time = 0.10 s.
    Making connections...
     Number of connections on node 0: 0 
     Done; cell connection time = 0.00 s.
    Adding stims...
     Number of stims on node 0: 12 
     Done; cell stims creation time = 0.00 s.
    Recording 6 traces of 3 types on node 0
    ​
    In [1]: netParams.synMechParams
    Out[1]: 
    SynMechParams([('NMDA', {'Cdur': 100.0, 'mod': 'NMDA'}),
            ('NMDAesyn', {'Cdur': 100.0, 'mod': 'NMDAesyn'}),
            ('AMPA', {'mod': 'AMPA'})])
    ​
    1 Comment Collapse
    So I can see that Cdur is changed in `netParams.synMechParams` but I can’t seem to find synMechs in the `sim` object…  Pointer?



    salvadord [11:04 AM] 
    sim.net.cells[0].secs.soma.synMechs  (or whatever section it is placed on)


    joe [11:05 AM] 
    Thanks Salva!


    salvadord [11:06 AM] 
    so found it?


    joe [11:06 AM] 
    added and commented on this Plain Text snippet: sim
    In [5]: sim.net.cells[0].secs.head_50.synMechs
    Out[5]: 
    [{Cdur: 100.0, loc: 0.99999, hSyn: NMDA[0], mod: 'NMDA', label: 'NMDA'},
     {loc: 0.99999, hSyn: AMPA[0], mod: 'AMPA', label: 'AMPA'}]
    In [6]: sim.net.cells[0].secs.neck_50.synMechs
    Out[6]: [{Cdur: 100.0, loc: 1e-05, hSyn: NMDAesyn[0], mod: 'NMDAesyn', label: 'NMDAesyn'}]
    1 Comment Collapse
    Yeah, so Cdur also gets varied in the `sim` object, but I don’t see any difference in the traces…



    salvadord [11:07 AM] 
    does it get varied in the actual NEURON object (ie. ‘hSyn’)


    [11:07] 
    ?


    joe [11:08 AM] 
    Sorry, where do I find hSyn?


    salvadord [11:09 AM] 
    sim.net.cells[0].secs.head_50.synMechs[0][‘hSyn’].Cdur


    joe [11:10 AM] 
    added this Plain Text snippet: Yeah, it gets varied in hSyn also
    In [9]: sim.net.cells[0].secs.head_50.synMechs[0]['hSyn'].Cdur
    Out[9]: 100.0
    In [10]: sim.net.cells[0].secs.neck_50.synMechs[0]['hSyn'].Cdur
    Out[10]: 100.0
    Add Comment



    joe [11:10 AM] 
    uploaded and commented on this image: Cdur_CdurEsyn_cell_0_vtrace_2.png
    1 Comment
    Seeing no effect from altering Cdur



    salvadord [11:11 AM] 
    and can you see a difference if you outside of netpyne?


    joe [11:12 AM] 
    Not quite sure what you mean, Salva.  How would I check outside of Netpyne?


    salvadord [11:14 AM] 
    I know it sounds scary but its actually possible to implement models in python/NEURON without using netpyne :wink:


    [11:15] 
    I mean just to check that the syn Cdur works ok, and exclude anything related to netpyne — which seems already excluded since Cdur being changed at all levels


    joe [11:15 AM] 
    There’s a world outside of Netpyne?! :scream:


    [11:16] 
    Okay, I’ll work on checking outside of netpyne.

*** Checking on Cdur outside of Netpyne

Plan: two dirs, one with Cdur=1 (default) and one with Cdur=100 in the actual
NMDA mod file.  Create a soma, add the NMDA synapse, and see if there are any
differences between the two models.

Python code:

from neuron import h
soma = h.section(name="soma")
soma.insert("hh")

** Remove gif dir from my repo (repo is too large at 76M)

https://www.jitbit.com/alexblog/232-removing-files-from-mercurial-history/

Steps to remove a file from hg

Make sure all your teammates have pushed their local changes to the central repo (if any)
Backup your repository
Create a "map.txt" file:
# this filemap is used to exclude specific files
exclude "subdir/filename1.ext"
exclude "subdir/filename2.ext"
exclude "subdir2"
Run this command:
hg convert --filemap map.txt c:/oldrepo c:/newrepo 
NOTE: You have to use "forward-slash" in paths, even on windows.
Wait and be patient
Now you have a new repo at c:\newrepo but without the files

*** Performing removal

Created map.txt, containing: exclude "gif"

Testing first:
    hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee
    mkdir eee_nogif
    hg convert --filemap map.txt eee eee_nogif

That worked.  Now to do it for real.  Renamed eee eee_gif

    hg convert --filemap map.txt /u/graham/projects/eee_gif /u/graham/projects/eee 
    cd /u/graham/projects/eee
    hg update

Will keep gif dir, but exclude it from the repo.  Adding gif dir to .hgignore

Now to push back to Neurosim.

Deleted eee dir, made new one, then:
hg clone /u/graham/projects/eee ssh://no.neurosim.downstate.edu://u/graham/projects/eee

Checking to make sure it appears on no: success!

Now to copy gif dir back to Neurosim.

Will use scp:
    scp -r /path/to/local/storage user@remote.host:/path/to/copy

My command:
    scp -r /u/graham/projects/eee/gif graham@no.neurosim.downstate.edu://u/graham/projects/eee/gif

** Back to Cdur

If there's a difference to be seen, it should show up in the spine head.  
I'll record and plot voltage at active spine head.

Added this to cfg.py:
    cfg.recordTraces['V_spine'] = {'sec': 'head_'+str(cfg.glutSpine), 'loc': 0.5, 'var': 'v'}

Should be plotted automatically.  Re-running batches and analyzing.

Oops.  Need to compile mod files.  

    cd /u/graham/projects/eee/sim/mod ; mkmod

Looking at spine voltages shows no visible difference between Cdurs.

I'm going to improve plotting so that if I zoom in on one panel, it zooms in
the same amount on all of them.

https://stackoverflow.com/questions/4200586/matplotlib-pyplot-how-to-zoom-subplots-together

Example:

    ax1 = plt.subplot(2,1,1)
    ax1.plot(...)
    ax2 = plt.subplot(2,1,2, sharex=ax1, sharey=ax1)
    ax2.plot(...)

Changed the following in batch_analysis:
    subplotind += 1
    ax = plt.subplot(rows, cols, subplotind)
    axes.append(ax)

To:
    subplotind += 1
    if subplotind == 1:
        ax = plt.subplot(rows, cols, subplotind)
        axes.append(ax)
    else:
        ax = plt.subplot(rows, cols, subplotind, sharex=axes[0], sharey=axes[0])
        axes.append(ax)

Trying it out.  Ugh.  It messes with the axis labels.  If I want to implement 
shared axes, I'll have to use subplots() -- remember the s at the end

Maybe later.  Returning code to original state.

*** Directly comparing voltage traces at different Cdur values

There is no difference:

    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_spillover ; ipython -i
    In [1]: import batch_utils
    In [2]: params, data = batch_utils.load_batch("Cdur")
    In [3]: v0 = data['_0']['simData']['V_spine']['cell_0']
    In [4]: v3 = data['_3']['simData']['V_spine']['cell_0']
    In [5]: v0 == v3
    Out[5]: True


* 2017-08-23 -- Getting DMS syn working

** TODO

Get Cdur modification working for DMS 
Spillover batching -- examine output
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params

** Modifying Cdur

Salvador suggests making Cdur a GLOBAL and then trying to modify it with
cfg.hParams['Cdur']

Actually, now Salva says it should have worked as RANGE.  He suggests ensuring
the NEURON syn Cdur value is being changed.

sim.net.cells[0].secs.head_50.synMechs[0]['hSyn'].Cdur

** Trying Penny's NMDA mod file

Penny is able to modify Cdur, so I will switch to her NMDA mod file and try.

Copied parameters.multi to parameters.multi.orig

Deleted NMDA from parameters.multi (left in NMDAesyn)

Deleted all files in eee/sim/mod except parameters.multi and copy of Penny's 
NMDA mod file 
(https://github.com/super-penguin/NetPyNE_learning/blob/master/mod/NMDA.mod)

Compiled mod files.

No output figures.  Debugging.

Seems like Penny's NMDA didn't compile...  Trying again.

mkmod doesn't seem to compile NMDA.mod

nrnivmodl does

Problems all solved!  See chat log:

*** Chat log

    salvadord [7:12 AM] 
    so Cdur is finally a global or not? if global maybe try modifying via cfg.hParams[‘Cdur’]


    billl [7:43 AM] 
    Cdur_AMPA


    [7:43] 
    belongs to AMPA as a GLOBAL


    salvadord [7:44 AM] 
    so if change via the synapse should change the global too? eg. ampa_syn.Cdur=5


    billl [7:44 AM] 
    same as the taus


    [7:44] 
    think not but not sure -- i'll try


    joe [8:11 AM] 
    Right now the Cdurs are RANGE.  I’ll try making them GLOBAL now, and modifying with cfg.hParams…


    salvadord [8:16 AM] 
    oh Cdurs are RANGE? hmm so should have worked…


    [8:16] 
    did u check that during batch sims, the NEURON syn Cdur value was being changed?


    joe [8:18 AM] 
    You mean with this: `sim.net.cells[0].secs.head_50.synMechs[0]['hSyn'].Cdur`?
     2 replies Last reply today at 8:20 AM View thread


    billl [8:19 AM] 
    according to mh would be h.AMPA.... but can't get that to work


    [8:21] 
    that will work with RANGE but not with GLOBAL


    [8:22] 
    a GLOBAL doesn't belong to instance;  eg if have a class


    joe [8:22 AM] 
    I’ve still got it as RANGE.


    billl [8:23 AM] 
    added this Perl snippet: oh it belongs to both
    class foo:
    ...  x=5
    ... 
    >>> f=foo()
    >>> f.x
    5
    >>> foo.x
    5
    >>> 
    Add Comment Collapse



    billl [8:23 AM] 
    let's not debug it as range since we need to use it as GLOBAL

    joe [8:24 AM] 
    Okay.  I’m a bit confused about RANGE v GLOBAL, would you mind giving a quick explanation of why GLOBAL?

    [8:25] 
    So I’ll change Cdur to GLOBAL and then try to modify with cfg.hParams[‘Cdur’].

    billl [8:25 AM] 
    GLOBAL since belongs to all instances

    [8:25] 
    it's not called Cdur

    [8:25] 
    it's Cdur_AMPA

    [8:25] 
    h.Cdur_AMPA

    [8:25] 
    bbl

    joe [8:27 AM] 
    Hmmm…  I’ve been working with NMDA, so wouldn’t it be Cdur_NMDA?

    salvadord [8:27 AM] 
    y think so

    joe [8:27 AM] 
    Whew. Thx.

    salvadord [8:28 AM] 
    but penny had it as RANGE so far right? so maybe should check first that using as global works ok for penny too — guess no reason it shouldn’t

    [8:30] 
    and once changfe to global maybe try in single netpyne sim before batch, just to check

    [8:31] 
    guess maybe easy to try 2 extreme values in single sim just to see if has effects? (apart from checking NEURON’s h.Cdur_NMDA)

    joe [8:32 AM] 
    Yeah, Penny has it as RANGE.

    [8:34] 
    Penny’s NMDA mod file is different from ours…

    [8:34] 
    https://github.com/super-penguin/NetPyNE_learning/blob/master/mod/NMDA.mod (edited)

    [8:36] 
    I think just as a sanity check I am going to switch to her NMDA and try modifying Cdur.

    salvadord [8:37 AM] 
    I think good for our own sanity

    sergio [8:38 AM] 
    ok Joe

    [8:39] 
    The only parameter that I could modify with the NMDA DMS was Erev

    joe [8:40 AM] 
    Interesting.  Thanks Sergio.  Modifying Cdur works for Penny, so I’m going to try switching to her mod file.

    sergio [8:43 AM] 
    ok

    sergio [8:48 AM] 
    for Penny’s mod file need to change the file name and the point process

    joe [8:50 AM] 
    I removed NMDA from parameters.multi and was just going to use Penny’s mod as is…

    sergio [8:50 AM] 
    ok

    sergio [9:35 AM] 
    Joe, were you able to compile Penny’s mod file?

    joe [9:35 AM] 
    Not with mkmod.  I had to use nrnivmodl

    billl [9:36 AM] 
    what error with mkmod?

    [9:36] 
    let's try to fix mkmod and fix the NMDA mechanism -- what is problem?

    [9:37] 
    how is her file different?  what is the diff?

    joe [9:37 AM] 
    uploaded and commented on this image: Cdur has an effect!
    3 Comments
    Using Penny’s NMDA mod file

    billl [9:37 AM] 
    ok she showed that to us yesterday

    [9:37] 
    good

    joe [9:38 AM] 
    mkmod didn’t crash, it just didn’t compile Penny’s NMDA.mod

    billl [9:38 AM] 
    ok so let's fix that first and then let's fix the other 2 NMDA

    [9:38] 
    did you include penny's as a DEFAULT?

    joe [9:39 AM] 
    No, I just put NMDA.mod into my mod dir

    billl [9:39 AM] 
    DEFAULT NMDA

    [9:39] 
    has to be in the parameters.multi file

    [9:39] 
    that's what determines what will get compiled - so you can add and remove mechanisms easily without deleting files

    joe [9:41 AM] 
    How does parameters.multi know that I want to use a specific mod file?

    penny [9:42 AM] 
    I was in DMV this morning. I will try to use NetPyne and Cdur as global too this afternoon
    1 reply Today at 10:04 AM View thread

    billl [9:43 AM] 
    keyword DEFAULT

    [9:43] 
    look at the file -- you'll see a lot of lines with that

    joe [9:43 AM] 
    Right, but doesn’t that use Neurosim default mod file?  How to point to Penny’s NMDA.mod?

    billl [9:44 AM] 
    you also need to make sure that her NMDA has a diff name in the POINT_PROCESS slot

    [9:44] 
    it will first look in the cwd

    joe [9:44 AM] 
    Okay, thanks.

    billl [9:44 AM] 
    it uses MODL_INCLUDE env variable

    joe [9:45 AM] 
    Here is Penny’s NMDA: https://github.com/super-penguin/NetPyNE_learning/blob/master/mod/NMDA.mod (edited)

    billl [9:46 AM] 
    what's the name?

    joe [9:46 AM] 
    There are quite a few differences…

    [9:46] 
    NMDA.mod

    [9:46] 
    POINT_PROCESS NMDA

    salvadord [9:46 AM] 
    commented on joe’s file Cdur has an effect!
    this fig is using pennys NMDA with your netpyne model and running batch?

    joe [9:47 AM] 
    Yup.  :slightly_smiling_face:


    billl [9:47 AM] 
    looks like my code -- diff is the ica?

    joe [9:47 AM] 
    There are a lot of ASSIGNED

    [9:47] 
    There is a Cmax

    joe [9:48 AM] 
    commented on Cdur has an effect!
    Yeah, looks like the problem was in the Neurosim NMDA mod file.

    billl [9:48 AM] 
    but there is no neurosim NMDA file?


    joe [9:49 AM] 
    Well, not a file I guess, but the def in parameters.multi


    billl [9:49 AM] 
    ok anyway let's just use penny's -- prob not worth hacking this any further


    joe [9:50 AM] 
    Okay, let me try putting DEFAULT NMDA in parameters.multi and seeing if mkmod will then compile it.


    billl [9:50 AM] 
    it's called NMDA


    [9:51] 
    can get rid of the other ones ;  maybe stil want 2 of them?


    [9:51] 
    NMDA and NMDAes


    [9:51] 
    ?


    joe [9:51 AM] 
    Perfect.  I’ll make it have NMDA and NMDAes


    billl [9:52 AM] 
    then you need to make 2 of penny's files


    joe [9:52 AM] 
    Yup.


    billl [9:52 AM] 
    k


    joe [10:16 AM] 
    Okay, everything seems to be working.  I committed and pushed.  @sergio, you’ll need the following files:
    eee/sim/mod/parameters.multi
    eee/sim/mod/NMDA.mod
    eee/sim/mod/NMDAes.mod


    [10:17] 
    I added DEAFAULTs to parameters.multi and now mkmod works.


    sergio [10:18 AM] 
    thanks Joe, I’ll pull your repo and compile the files


** Running batches to explore spillover

Added Cmax to cfg to see its effects.

Running a big bunch of batches:


    # Varying glutamate amplitude and Cdur in synaptic NMDA receptors
    batch = {}
    batch["label"] = "glutAmp_Cdur"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns) 
    params["CdurNMDAScale"] = [0.1, 1, 10, 100]
    #params["CdurNMDAesScale"] = [0.1, 1, 10, 100]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying Cdur in synaptic NMDA receptors
    batch = {}
    batch["label"] = "Cdur"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["CdurNMDAScale"] = [0.1, 1, 10, 100]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying Cmax in synaptic NMDA receptors
    batch = {}
    batch["label"] = "Cmax"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["CmaxNMDAScale"] = [0.1, 1, 10, 100]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying Cdur in synaptic and extrasynaptic NMDA receptors
    batch = {}
    batch["label"] = "Cdur_CdurES"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["CdurNMDAScale"] = [0.1, 1, 10, 100]
    params["CdurNMDAesScale"] = [0.1, 1, 10, 100]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying Cmax in synaptic and extrasynaptic NMDA receptors
    batch = {}
    batch["label"] = "Cmax_CmaxES"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["CmaxNMDAScale"] = [0.1, 1, 10, 100]
    params["CmaxNMDAesScale"] = [0.1, 1, 10, 100]
    batch["params"] = params
    batches[batch["label"]] = batch


    # 1D batches

    # Varying glutamate stim amplitude (1D batch)
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim spine number (0 near soma)
    batch = {}
    batch["label"] = "glutSpine"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpine"] = [0, 50, 100, 150, 200, 250]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate spread (how many spines activated)
    batch = {}
    batch["label"] = "glutSpread"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpread"] = [1, 10, 20, 50, 100]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate spread smaller range (how many spines activated)
    batch = {}
    batch["label"] = "glutSpreadLow"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpread"] = [1, 2, 4, 8, 16]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate spill delay
    batch = {}
    batch["label"] = "spillDelay"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["spillDelay"] = [0., 5., 10., 15., 20.]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate spill fraction
    batch = {}
    batch["label"] = "spillFraction"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["spillFraction"] = [0.0, 0.05, 0.10, 0.15, 0.20]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate spill fraction, making it bigger
    batch = {}
    batch["label"] = "spillFractionBig"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["spillFraction"] = [0.0, 0.25, 0.50, 0.75, 1.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # 2D batches

    # Varying glutamate stim amplitude and glutamate stim spine number (0 near soma)
    batch = {}
    batch["label"] = "glutAmp_glutSpine"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["glutSpine"] = [0, 50, 100, 150, 200, 250]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude and glutamate spread
    batch = {}
    batch["label"] = "glutAmp_glutSpread"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["glutSpread"] = [1, 10, 20, 50, 100]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude and glutamate spread (lower values)
    batch = {}
    batch["label"] = "glutAmp_glutSpreadLow"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["glutSpread"] = [1, 2, 4, 8, 16]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude and glutamate spill delay
    batch = {}
    batch["label"] = "glutAmp_spillDelay"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["spillDelay"] = [0., 5., 10., 15., 20.]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude and glutamate spill fraction
    batch = {}
    batch["label"] = "glutAmp_spillFraction"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["spillFraction"] = [0.0, 0.05, 0.10, 0.15, 0.20]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim spine number and glutamate spread
    batch = {}
    batch["label"] = "glutSpine_glutSpread"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpine"] = [0, 50, 100, 150, 200]
    params["glutSpread"] = [1, 10, 20, 50]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim spine number and spill delay
    batch = {}
    batch["label"] = "glutSpine_spillDelay"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpine"] = [0, 50, 100, 150, 200]
    params["spillDelay"] = [0., 5., 10., 15., 20.]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim spine number and spill fraction
    batch = {}
    batch["label"] = "glutSpine_spillFraction"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpine"] = [0, 50, 100, 150, 200]
    params["spillFraction"] = [0.0, 0.05, 0.10, 0.15, 0.20]
    batch["params"] = params
    batches[batch["label"]] = batch

** Running analyses

Everything working.  


* 2017-08-24 -- Analyzing spillover params

** TODO

Explore spillover analyses
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Spillover analysis

https://drive.google.com/file/d/0Bx7OIVIgY3AVMjBaaW94eWVONWs/view

Cdur: increasing Cdur increases plateau duration
Cmax: seems to have little effect
glutSpine: increasing dist from soma seems to increase plateau duration, decrease spiking freq
glutSpread: spreading out the same input over multiple spines decreases effect
spillDelay: seems to have little effect, but increasing slightly decreases plateau duration
spillFraction: increasing spillover fraction increases plateau duration

I should get my secondary analyses up and running again so I can plot: 
  plateau duration
  number of spikes
  spike frequency
  plateau amplitude 
Against param values.

But first, Sergio needs default param values that produce a good plateau.

I saved my_batches.py as my_batches_01.py
        batch_data as batch_data_01
        batch_figs as batch_figs_01
        analyze.py as analyze_01.py

Now I can run new batches in my_batches.py

** Finding default param values for good plateaus

There are a few params still to explore to find values:
    NMDA alpha and beta
    NMDA/AMPA ratio
    AMPA params?

Modifying cfg and netParams to be able to vary these params

New batches:

    # Varying glutamate stim amplitude and NMDAalphaScale
    batch = {}
    batch["label"] = "glutAmp_NMDAalphaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["NMDAalphaScale"] = [0.01, 0.1, 1.0, 10.0, 100.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude and NMDABetaScale
    batch = {}
    batch["label"] = "glutAmp_NMDABetaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["NMDABetaScale"] = [0.01, 0.1, 1.0, 10.0, 100.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude and ratioAMPANMDA
    batch = {}
    batch["label"] = "glutAmp_ratioAMPANMDA"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["ratioAMPANMDA"] = [0.01, 0.1, 1, 10.0, 100.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying NMDAalphaScale and NMDAbetaScale
    batch = {}
    batch["label"] = "NMDAalphaScale_NMDABetaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["NMDAalphaScale"] = [0.01, 0.1, 1.0, 10.0, 100.0]
    params["NMDABetaScale"] = [0.01, 0.1, 1.0, 10.0, 100.0]
    batch["params"] = params
    batches[batch["label"]] = batch

*** Analysis of alpha, beta, and ratio

https://drive.google.com/file/d/0Bx7OIVIgY3AVUTA1dXBkQ0I5UWc/view?usp=sharing

In summary, 

  Cdur: increasing value increases plateau
  Cmax: little effect if any
  glutSpine (location along Bdend): increasing distance from soma seems to increase plateau duration, decrease spike freq
  glutSpread (how many spines stim is divided amongst): increasing spread decreases plateau
  spillDelay: not much effect, but increasing delay decreases plateau response
  spillFraction: increasing amount of spillover increases plateau response
  NMDA alpha: increasing alpha has little effect, decreasing reduces plateaus
  NMDA beta: decreasing beta can greatly increase plateau response, increasing reduces plateau
  ratioAMPANMDA: increasing value increases plateau response

*** Finding good default param values now.

First, will increase AMPA/NMDA ratio:

    The NMDA-to-AMPA Ratio at Synapses Onto Layer 2/3 Pyramidal Neurons Is Conserved Across Prefrontal and Visual Cortices
    Chaelon I. O. Myme, Ken Sugino, Gina G. Turrigiano, and Sacha B. Nelson
    J Neurophysiol 90: 771–779, 2003.

Our current default is 0.2.  This paper has values from 0.8 to 3.7.  Sergio 
suggests 0.8 is better value.  Will use that as default.

Increasing NMDA Cdur to 5 to increase plateau.

Will also reduce NMDA beta to increase plateau durations.

Running a new batch to determine good NMDA beta value:

    # Varying glutamate stim amplitude and NMDABetaScale
    batch = {}
    batch["label"] = "glutAmp_NMDABetaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glut_stim_weight) * glut_stim_scale / numsyns)
    params["NMDABetaScale"] = [0.2, 0.4, 0.6, 0.8, 1.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Will set NMDA beta to 0.5 to increase plateaus.

Changing AMPA/NMDA ratio to 3.0 to increase plateaus.

Increases plateaus slightly.  



* 2017-08-25 -- Fixing plateau measurement code

** TODO

Plot plateau measures against param values
Plot decreased threshold of activation in Bdend1 during plateaus
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Plateau measures

Made code some time ago to measure plateau duration and amplitude, will 
make it work again to plot these measures against parameter values

Also want to measure number of spikes and spike frequency.

*** Plateau duration

Making new function in batch_analysis: plot_plat_dur()

Fixed baseline measurement and now plots look much better, but still 
overestimating plateau durations -- will check on time values above baseline

Plateau duration plotting now works again, and if you set show=True, it 
makes a figure for each trace showing how plateau duration was calculated

Fixed swapaxes in plot_plat_dur

Usage:
graham-mac% cd /u/graham/projects/eee/sim/batches/batch_spillover/ ; ipython -i
In [1]: import batch_analysis; import batch_utils; import matplotlib.pyplot as plt; import numpy as np; plt.ion()
In [2]: batch_analysis.plot_plat_dur("glutAmp_NMDABetaScale")
In [3]: batch_analysis.plot_plat_dur("glutAmp_NMDABetaScale", swapaxes=True)


*** Plateau amplitude

Making new function in batch_analysis: plot_plat_amp()

Copied improvements from plot_plat_dur()

Calculation for plateau amp results in values that are too high.  Need a better
way to calculate the amplitude...

Right now it calculates amplitude as the mean of the voltage values which are
above the threshold. Really I want the local minima of the trace somehow...

Got it figured out.  Now functional and providing a better measure.

Usage:
graham-mac% cd /u/graham/projects/eee/sim/batches/batch_spillover/ ; ipython -i
In [1]: import batch_analysis; import batch_utils; import matplotlib.pyplot as plt; import numpy as np; plt.ion()
In [2]: batch_analysis.plot_plat_amp("glutAmp_NMDABetaScale")
In [3]: batch_analysis.plot_plat_amp("glutAmp_NMDABetaScale", swapaxes=True)

** Checking the measurements of plateaus

In both plot_plat_dur and plot_plat_amp, if you set the option showwork=True, 
the code makes a plot for each sim in the batch showing how the measurements 
were made.  


* 2017-08-28 -- Fixing plateau measurement code, looking for long plateaus

** TODO

Plot plateau measures against param values 
Plot decreased threshold of activation in Bdend1 during plateaus
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Plot plateau measures against param values

On Friday, I got measurements/plotting of plateau duration and amplitude
working.  Now I'll work on measuring the number of spikes and the spiking
frequency.

Once the measures/plotting are done, I'll run through all batches and plot
the plateau measures against the param values.

*** Measuring/plotting number of spikes

It turns out 'spkt' from Netpyne is the spike times of all cells (wasn't a 
problem when I was running sims with only one cell).  In order to get the 
spikes from an individual cell, I will need to use 'spkid' for cell_# to index 
the spiketimes for cell_# from spkt.

Changing from : 
    numspike = len(d['simData']['spkt'])

To:
    spiketimes = d['simData']['spkt']
    spikeids = d['simData']['spkid']
    spiketimes_curcell = [val for ind,val in enumerate(spiketimes) if spikeids[ind] == cellID]
    numspikes = len(spiketimes_curcell)

Having a weird problem where the number of spikes output is often less than the
number of spikes I see in the plots...  

It seems that the spike detection threshold is set too low.  I asked on Slack 
how to adjust the threshold.

Salva says it can be set with: 
    netParams.defaultThreshold

salvadord [12:11 PM] 
/u/salvadord/Papers/Bian12.pdf — this paper discusses depol block — it actually 
sets threshold at -20mV

I'll set threshold at -20mV and look at how many spikes that would capture/miss

    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_spillover/ ; ipython -i
    In [1]: import batch_analysis; import batch_utils; import matplotlib.pyplot as plt; import numpy as np; plt.ion()
    In [2]: batch_analysis.plot_numspikes("glutAmp_NMDABetaScale", showwork=True)

Yeah, it looks like -20 mV threshold will catch all spikes, while still 
excluding most depol block mini-spikes.

Re-running batches with netParams.defaultThreshold = -20.0

Much better.  Now it catches all good spikes, and misses the worst of the depol 
block mini-spikes.

Before:
file:gif/20170828_115828.png

After:
file:gif/20170828_125113.png

*** Measuring/plotting spike frequency

Changing:
    spiketimes = d['simData']['spkt']

To:
    cellLabel = "cell_" + str(cellID)
    spiketimes = d['simData']['spkt']
    spikeids = d['simData']['spkid']
    spiketimes_curcell = [val for ind,val in enumerate(spiketimes) if spikeids[ind] == cellID]

Changing:
    freq = (len(spiketimes)-1) / (spiketimes[-1]-spiketimes[0])

To:
    freq = (len(spiketimes_curcell)-1) / (spiketimes_curcell[-1]-spiketimes_curcell[0])

Added function: plot_freq()

It works.  Usage:
graham-mac% cd /u/graham/projects/eee/sim/batches/batch_spillover/ ; ipython -i
In [1]: import batch_analysis; import batch_utils; import matplotlib.pyplot as plt; import numpy as np; plt.ion()
In [2]: batch_analysis.plot_freq("glutAmp_NMDABetaScale", showwork=True)

** Running all batches to search for long plateaus


* 2017-08-29 -- Plateau exploration

** TODO

Plot plateau measures against param values 
Plot decreased threshold of activation in Bdend1 during plateaus
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Explore batches for long plateaus

First, I'm going to automate the analysis of batches in batch_spillover/analyze.py

Instead of manually typing in the batch names, I use the following:
    batches = [dir for dir in os.listdir('batch_data') if os.path.isdir(os.path.join('batch_data', dir))]
    batches1D = [batch for batch in batches if "_" not in batch]
    batches2D = [batch for batch in batches if "_" in batch]

This requires that batch names include an underscore if 2D and not if 1D.
I name 2D batches: param1_param2
I name 1D batches: param

** EEE Meeting

Bill: If DMS doesn't produce good plateaus, we can always switch back to Exp2Syn
Bill: should be able to match alpha/beta values with Tau1/Tau2 values to get 
      same results from DMS as from Exp2Syn

Srdjan thinks Salva's long plateaus are really good, wants to know about causes

Bill: can probably reduce depol block by reducing NMDA gmax

** Trying to match values in DMS with Exp2Syn

https://docs.google.com/document/d/1jPeQz5qA2MQr1IvD6ETKTaPex8MdX28Zq3IMVaMaTxs/edit

Hard to decipher.  Asked Bill for help on Slack.

joe [9:26 AM] 
Having a hard time deciphering the mod files.  Bill, when you have time, would you mind helping me figure out how to match the Alpha/Beta in DMS with the Taus in Exp2Syn?

billl [10:23 AM] 
looks good
yeah can match those up and if start with short cdur i think would be ~identical
Cdur=0.1ms
then can just compare the g's -- can put 1 old NMDA and 1 new NMDA in cell and record the g's for both
for these very simple sims i would just do in NEURON and can compare things very qquickly but whatever easier for you


Added "DEFAULT MyExp2SynNMDABB" to parameters.multi and recompiled with mkmod

*** Chat log about matching DMS and E2S

    joe [9:26 AM] 
    Having a hard time deciphering the mod files.  Bill, when you have time, would you mind helping me figure out how to match the Alpha/Beta in DMS with the Taus in Exp2Syn?


    billl [10:23 AM] 
    looks good


    [10:24] 
    yeah can match those up and if start with short cdur i think would be ~identical


    [10:24] 
    Cdur=0.1ms


    [10:24] 
    then can just compare the g's -- can put 1 old NMDA and 1 new NMDA in cell and record the g's for both


    [10:24] 
    for these very simple sims i would just do in NEURON and can compare things very qquickly but whatever easier for you


    joe [10:30 AM] 
    Thanks Bill, I’ll put that together.


    joe [2:41 PM] 
    uploaded this image: e2s vs dms 1
    Add Comment



    joe [2:41 PM] 
    uploaded this image: e2s vs dms 2
    Add Comment



    joe [2:42 PM] 
    uploaded this image: e2s vs dms 3
    Add Comment



    billl [2:42 PM] 
    how about g vs g?


    [2:42] 
    how do they differ?


    salvadord [2:44 PM] 
    whats the cyan line?


    joe [2:44 PM] 
    Cyan line is active spine head (legend got cut off)


    [2:45] 
    We can see in e2s that the plateau is longer than 200ms before depol block.  In dms, plateau never reaches 200ms before block.


    salvadord [2:45 PM] 
    glutAmp = conn weight?


    joe [2:45 PM] 
    Yeah.


    salvadord [2:47 PM] 
    so exp2syn more sensitive to weight… but if scale weight ranges maybe syns not so different?


    joe [2:49 PM] 
    Not too different, it seems. e2s plateaus are a bit longer before depol block.


    salvadord [2:49 PM] 
    eg. exp2syn weights [0.04 - 0.20]  ~= dms weights [0.04 - 1.0] ?


    billl [2:50 PM] 
    did you match the taus?  -- have g values?


    [2:50] 
    can overlay to show ~same


    joe [2:51 PM] 
    I don’t see a g in e2s…  Would sNMDA be the same thing?


    salvadord [2:51 PM] 
    e2s a bit longer - ah right


    joe [2:51 PM] 
    shared this file
    NMDA: Exp2Syn vs DMS
    Document from Google Drive
    Click to open in Google Drive
    Add Comment



    billl [2:51 PM] 
    just want to see graph of the gs to compare


    [2:52] 
    to show that are the same -- should start with them exactly the same


    [2:52] 
    then can use the DMS params to change from there as needed but if already have good results maybe can stick with those


    [2:52] 
    just run 1 section with 2 inputs (NMDA_DMS, NMDAexp2syn) and match them


    [2:53] 
    should take about 5 min!


    [2:53] 
    ideally :)


    joe [2:53 PM] 
    Nothing takes just 5 min!  :slightly_smiling_face:


    [2:53] 
    :wink:


    billl [2:54 PM] 
    yup -- i said "ideally"


    joe [2:54 PM] 
    Would you mind showing me how you would do this, Bill?


    billl [2:54 PM] 
    sec = h.Section(0.5, sec=sec)

    [2:55] 
    nDMS = h.NMDAitsname(0.5, sec=sec)

    joe [2:55 PM] 
    I was working in netpyne — more comfortable in there, and then we see effect in our actual cell models…

    billl [2:55 PM] 
    whoops that 1st one didn't need the 0.5 and did need the name='sec'

    sergio [2:55 PM] 
    I recorded the sNMDA as the g on myExp2SynNMDA

    billl [2:55 PM] 
    can't work only in netpyne - that's a specific tool for a specific purpose

    [2:55] 
    need to learn NEURON too

    [2:56] 
    ne2syn = h.myExp2SynNMDA(...)

    [2:56] 
    vecl = [h.Vector(2e3) for i in range(10)] # a few vecs for recroding

    [2:57] 
    vecl[0].record(ne2syn.g) # assuming g is defined -- may need to edit those files if not defined; sometimes they just do i and skip dong a g -- should be RANGE g if it's there

    [2:57] 
    vec[1].record(.. the other one

    [2:57] 
    ns=h.NetStim()

    [2:57] 
    nc = h.NetCon(ns,ne2syn)

    [2:58] 
    # need to set netstim params, netcon weights, tstop, then h.run()

    [2:59] 
    ok might take me 45 min (rather than 5) and could take you 2 hours but worth doing since you need to be able to quickly check stuff in NEURON

    [2:59] 
    everyone leave?  .... my daughter pointed out that no one is responding

    joe [2:59 PM] 
    Okay, let me work on this.

    billl [3:00 PM] 
    but please ask questions ... that way don't waste 30 min of your 2h wondering why sec=Section() didn't work (a silly example)

    joe [3:00 PM] 
    Will do.

    salvadord [3:00 PM] 
    also some simple NEURON+Py examples in my course /code folder: https://drive.google.com/open?id=0B8v-knmZRjhtR0NMVWlMMHE1OG8  and Roberts online tut: http://neuron.yale.edu/neuron/static/docs/neuronpython/index.html

    billl [3:01 PM] 
    also have the course stuff

    [3:03] 
    i would typically just type these lines into the interpreter and when they are working add them via c&p to the growing nmdatest.py program under hg

    [3:03] 
    actually in my case i type into the nb which automatically sends to interpreter -- can do with emacs, jupyter, sublime too?

    [3:04] 
    anyway point being to be interactive -- don't write a program and then try to run the whole program -- it will have 10 bugs in it and be a hassle to debug

    joe [3:05 PM] 
    Thanks for the advice, I’ll do it that way — though not running automagically from nb…

    joe [3:18 PM] 
    added this Plain Text snippet
    In [1]: from neuron import h
      ...: sec = h.Section(name="sec")
      ...: dms = h.NMDA(0.5, sec=sec)
      ...: e2s = h.MyExp2SynNMDABB(0.5, sec=sec)
      ...: 
    Add Comment Click to expand inline 17 lines

    joe [3:19 PM] 
    No g in e2s

    [3:19] 
    Looking at file, should it be ‘s’ or ‘sNMDA’?

    [3:21] 
    It looks like it should be sNMDA (which Sergio used to record g in exp2syn):  `iTOT = sNMDA * (v - e) * mgblock`

    joe [3:22 PM] 
    added this Plain Text snippet: sNMDA doesn't work either
    In [2]: vecl[0].record(e2s.sNMDA)
      ...: 
    bad stack access: expecting (double *); really (double)
    NEURON: interpreter stack type error
     near line 0
    Add Comment Click to expand inline 17 lines

    sergio [3:25 PM] 
    it is a different error

    billl [3:28 PM] 
    put in a g

    joe [3:37 PM] 
    Where should I put in a g?  The DMS mod file already has g in RANGE…

    billl [3:39 PM] 
    oh ok

    [3:39] 
    g = ?

    joe [3:40 PM] 
    From the DMS mod: `g = (Ron + Roff)*1(umho) * B`

    billl [3:40 PM] 
    so graph that

    joe [3:40 PM] 
    I can’t even record it…

    billl [3:40 PM] 
    looks right

    [3:40] 
    what error?

    joe [3:41 PM] 
    added this Plain Text snippet
    In [1]: from neuron import h
      ...: sec = h.Section(name="sec")
      ...: dms = h.NMDA(0.5, sec=sec)
      ...: e2s = h.MyExp2SynNMDABB(0.5, sec=sec)
      ...: 
    Add Comment Click to expand inline 31 lines

    billl [3:41 PM] 
    1st find it

    [3:41] 
    in interpreter

    [3:41] 
    then _ref_

    joe [3:44 PM] 
    How would I find it in interpreter?

    billl [3:47 PM] 
    name.g

    [3:48] 
    dms.g

    salvadord [3:49 PM] 
    to recrord have to use dms._ref_g right?

    billl [3:49 PM] 
    then need ref

    [3:49] 
    y

    joe [3:50 PM] 
    Okay, no error on that now.

    billl [3:50 PM] 
    can find the ref in interp too

    joe [3:54 PM] 
    added and commented on this Plain Text snippet: New errors are progress...
    In [1]: from neuron import h
      ...: sec = h.Section(name="sec")
      ...: dms = h.NMDA(0.5, sec=sec)
      ...: e2s = h.MyExp2SynNMDABB(0.5, sec=sec)
      ...: 
    1 Comment Click to expand inline 39 lines
    LookupError: ‘tstop’ is not a defined hoc variable name.

    joe [4:08 PM] 
    I needed to also import the gui, and not just h: `from neuron import h, gui`

    billl [4:13 PM] 
    why?

    [4:13] 
    oh

    [4:14] 
    need. h.load_file('stdrun.hoc')

    joe [4:16 PM] 
    added and commented on this Python snippet: nmda_test.py
    from neuron import h
    h.load_file('stdrun.hoc')
    import matplotlib.pyplot as plt
    plt.ion()
    1 Comment Click to expand inline 37 lines
    Functional script

    joe [4:17 PM] 
    uploaded this image: 20170829_161722.png
    Add Comment

    joe [4:18 PM] 
    Okay, got something working.  Now what would you like to see, Bill?

    joe [4:22 PM] 
    uploaded and commented on this image: 20170829_162120.png
    1 Comment
    Better with subplots…  Seems no activity in sNMDA of E2S…

    joe [4:26 PM] 
    Should I be recording something other than sNMDA in E2S?

    billl [4:41 PM] 
    not seeing the 2 overlaid lines are they identical?

    [4:41] 
    need to compare apples to apples of course, hence g to g

    joe [4:57 PM] 
    That’s why I split it into subplots.  No, they’re not identical.  The E2S trace is zeroes all the way down.

    [4:58] 
    There is no ‘g’ in the E2S mod file…  It looks to me like sNMDA is the equivalent of g for E2S.

    [4:58] 
    From E2S: `iNMDA = sNMDA * (v - e) * mgblock * (1-fracca)`

    billl [5:01 PM] 
    not same.  put in a g

    joe [5:02 PM] 
    Are you saying I should add an equation for g to the E2S mod file?

    billl [5:03 PM] 
    y

    joe [5:03 PM] 
    Hmmm…  Okay.  I’ll take a look.  I’d appreciate any hints you’re willing to part with!

    billl [5:05 PM] 
    what file has it?

    joe [5:06 PM] 
    Here are the two mod files in a Google doc: https://docs.google.com/document/d/1jPeQz5qA2MQr1IvD6ETKTaPex8MdX28Zq3IMVaMaTxs/edit

    joe [5:06 PM] 
    shared this file
    NMDA: Exp2Syn vs DMS
    Document from Google Drive
    Click to open in Google Drive
    Add Comment

    joe [5:07 PM] 
    The DMS has a g.  The E2S doesn’t.

    billl [5:08 PM] 
    what is fracca set to?

    [5:08] 
    easier for me to look at the files then to look at a gdoc ; where are the files?

    joe [5:09 PM] 
    One sec…

    [5:10] 
    DMS: /u/graham/projects/eee/sim/mod/NMDA.mod

    billl [5:11 PM] 
    still a DOS file btw

    joe [5:11 PM] 
    E2S is generated by parameters.multi

    billl [5:12 PM] 
    thought got this file from penny?

    [5:12] 
    E2S -- what line?

    [5:13] 
    @sergio ?

    joe [5:14 PM] 
    Yeah, file is from Penny.

    [5:14] 
    E2S is here: /u/graham/projects/eee/sim/mod/MyExp2SynNMDABB.mod

    billl [5:14 PM] 
    you also have something called DEFAULT NMDAes

    [5:15] 
    what's that for?

    [5:15] 
    @penny -- is this same DMS NMDA?

    joe [5:17 PM] 
    That is the extrasynaptic NMDA, for use in spillover.  You had thought it would be good to have sep mods.

    billl [5:19 PM] 
    won't that be same NMDA model as the other one?

    [5:19] 
    ok guess can look at that later

    joe [5:19 PM] 
    With two different mods we can have diff values for e.g. Cdur

    billl [5:20 PM] 
    so which one is missing a 'g', there is a g in NMDA.mod it looks like

    [5:20] 
    yeah need to different mod files but want same parameterizations

    [5:20] 
    is this DMS the same one that penny is using?

    joe [5:20 PM] 
    MyExp2SynNMDABB doesn’t have g.  Seems to have been replaced by sNMDA

    [5:20] 
    Yeah, the DMS should be the same as the one Penny is using.

    billl [5:21 PM] 
    i = g*(v-erev)

    [5:21] 
    iNMDA = sNMDA * (v - e) * mgblock * (1-fracca)

    [5:22] 
    so g = sNMDA * mgblock * (1-fracca)

    [5:22] 
    whoops

    [5:22] 
    g = sNMDA * mgblock

    [5:22] 
    don't want to deal with fracca here since want gtot

    [5:23] 
    same as in NMDA.mod
            B = mgblock(v)
        g = (Ron + Roff)*1(umho) * B

    joe [5:23 PM] 
    Okay, I can see that.  So can I add `g = sNMDA * mgblock` somewhere in the mod file?

    billl [5:23 PM] 
    includes the mgblock


    [5:23] 
    add after calculate sNMDA and mgblcok


    [5:23] 
    and add as a RANGE


    joe [5:23 PM] 
    Cool.  Let me try that.


    [5:26] 
    Quick question: parameters.multi creates E2S, apparently from here: /usr/site/nrniv/local/mod/MyExp2SynNMDABB.mod


    billl [5:26 PM] 
    doesn't create it -- just makes a link to it


    joe [5:26 PM] 
    That’s the file I should add the g to?


    billl [5:26 PM] 
    oh ok so need to edit that one?


    [5:26] 
    yeah


    [5:26] 
    won't change functionality


    joe [5:26 PM] 
    Got it. Thx.


    billl [5:27 PM] 
    pull edit commit push


    penny [5:28 PM] 
    Yes, we are using the same DMS NMDA file


    billl [5:28 PM] 
    ok great


    penny [5:29 PM] 
    https://senselab.med.yale.edu/ModelDB/showmodel.cshtml?model=230811&file=/PapoutsiEtAl2017/mod_files/NMDA.mod#tabs-2


    [5:29] 
    From Papoutsi


    [5:29] 
    And similar to your NMDA mod file too


    billl [5:30 PM] 
    where's the fracca?


    [5:30] 
    oh sorry fracca in other one


    [5:31] 
    this one has fracca hardcoded to 0.7


    joe [5:32 PM] 
    Error on compiling: 
    MyExp2SynNMDABB.c:498:4: error: use of undeclared identifier ‘g’
       g = sNMDA * mgblock ;


    billl [5:32 PM] 
    also has to appear in ASSIGNED { block


    joe [5:32 PM] 
    Just about to ask that.


    [5:33] 
    What should the units be?


    [5:33] 
    (umho)?


    billl [5:36 PM] 
    whatever they are in the other file


    [5:37] 
    that's just for the unit checking


    joe [5:38 PM] 
    Damn.  I added g to MyExp2Syn, but it’s still flatlined in the output.


    billl [5:40 PM] 
    if g is flat and i is flat then perhaps you are not activating  it


    [5:40] 
    check netstim and netcon


    [5:42] 
    aha you were tyring to show me a flat line before -- that was a very good illustration of a flat line and i somehow missed it :)


    joe [5:42 PM] 
    Hahaha!  Thanks.


    joe [5:50 PM] 
    uploaded and commented on this image: 20170829_175012.png
    1 Comment
    That was about 5 minutes, right?!



    sergio [5:52 PM] 
    nice


    billl [5:52 PM] 
    great  5m~5h


    [5:53] 
    can now adjust to match up


    salvadord [5:53 PM] 
    another 5 min max


    joe [5:54 PM] 
    Hahaha!


    [5:54] 
    I’m gonna grab some dinner and then I’ll delve into another 5 minute session.


    [5:56] 
    Thanks everyone for all help.


    sergio [5:56 PM] 
    uploaded this image: sNMDA from e2s with netpyne
    Add Comment



    salvadord [5:57 PM] 
    ah you see, sergio did with netpyne in 2 min! :wink:


    sergio [5:59 PM] 
    I think easier than the NEURON one, but not 2 mins!



* 2017-08-30 -- Making DMS more like E2S

** TODO

Find DMS values such that g_DMS is about the same as g_E2S
Plot plateau measures against param values 
Plot decreased threshold of activation in Bdend1 during plateaus
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Matching DMS with E2S

*** nmda_test.py
    from neuron import h
    h.load_file('stdrun.hoc')
    import matplotlib.pyplot as plt
    plt.ion()
    import numpy as np

    plot = True

    Cdurs = [50.0, 60.0, 70.0, 80.0, 90.0, 100.0]
    Betas = [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0]

    # Minimum RMSE is at Cdur = 50.0 and Beta = 0.001
    # Making new lists centered around these values:

    Cdurs = [30.0, 40.0, 50.0, 60.0, 70.0]
    Betas = [0.0005, 0.00075, 0.001, 0.00125, 0.00150]

    # Minimum RMSE is at Cdur = 40.0 and Beta = 0.0015
    # Making new lists centered around these values:

    #Cdurs = [35.0, 37.5, 40.0, 42.5, 45.0]
    #Betas = [0.001, 0.00125, 0.00150, 0.00175, 0.002]


    Tau2s  = [600]

    for Tau2 in Tau2s:

        rmse_list = []
        Cdur_list = []
        Beta_list = []

        for Cdur in Cdurs:
            for Beta in Betas:

                sec = h.Section(name="sec")
                
                dms = h.NMDA(0.5, sec=sec)
                e2s = h.MyExp2SynNMDABB(0.5, sec=sec)

                dms.Cdur = Cdur
                dms.Beta = Beta

                e2s.tau2NMDA = Tau2

                t_vec = h.Vector()
                t_vec.record(h._ref_t)

                dms_vec = h.Vector()
                dms_vec.record(dms._ref_g)

                e2s_vec = h.Vector()
                e2s_vec.record(e2s._ref_g)
                e2s_ivec = h.Vector()
                e2s_ivec.record(e2s._ref_iNMDA)

                ns = h.NetStim() 
                ns.number = 1
                ns.interval = 200
                ns.start = 200
                ns.noise = 0

                nc = h.NetCon(ns, dms)
                nc.delay = 1.0
                nc.weight[0] = 0.2

                nc2 = h.NetCon(ns, e2s)
                nc2.delay = 1.0
                nc2.weight[0] = 0.2

                h.tstop = 2500
                h.run()

                rmse = np.sqrt(np.sum(np.square(np.abs(np.array(e2s_vec.to_python())-np.array(dms_vec.to_python())))))

                rmse_list.append(rmse)
                Cdur_list.append(Cdur)
                Beta_list.append(Beta)

                if plot:
                    plt.figure()
                    #plt.subplot(211)
                    #plt.plot(t_vec, dms_vec, label="DMS g, Cdur=" + str(Cdur))
                    #plt.plot(t_vec, dms_vec, label="DMS g, Cmax=" + str(Cmax))
                    plt.plot(t_vec, dms_vec, label="DMS g")
                    #plt.legend()
                    #plt.subplot(212)
                    plt.plot(t_vec, e2s_vec, label="E2S g")
                    #plt.plot(t_vec, e2s_ivec, label="E2S iNMDA")
                    plt.legend()
                    plt.xlabel("Beta=" + str(Beta) + "\nCdur=" + str(Cdur))
                    plt.ylabel("Tau2=" + str(Tau2))
                    plt.title("RMSE=" + str(rmse))

        min_rmse = min(rmse_list)
        min_ind  = rmse_list.index(min_rmse)
        min_Cdur = Cdur_list[min_ind]
        min_Beta = Beta_list[min_ind]

        print("Tau2       = " + str(Tau2))
        print("  min RMSE = " + str(min_rmse))
        print("      Beta = " + str(min_Beta))
        print("      Cdur = " + str(min_Cdur))
    
*** Minimum diff between DMS and EMS

file:gif/20170830_091848.png

Cdur = 40
Beta = 0.0015

I think I'll try this with different weights, to ensure these values produce
best results across stim amp range

Also, I'll zoom in on the Cdur and Beta values

Results:

    Weight       = 0.05
      Tau2       = 600
        min RMSE = 0.288917257828
            Beta = 0.0015
            Cdur = 35.0

    Weight       = 0.1
      Tau2       = 600
        min RMSE = 0.519034364178
            Beta = 0.0015
            Cdur = 37.5

    Weight       = 0.15
      Tau2       = 600
        min RMSE = 0.72325040163
            Beta = 0.0015
            Cdur = 37.5

    Weight       = 0.2
      Tau2       = 600
        min RMSE = 0.922333208686
            Beta = 0.0015
            Cdur = 37.5

    Weight       = 0.25
      Tau2       = 600
        min RMSE = 1.13402854661
            Beta = 0.0015
            Cdur = 37.5

    Weight       = 0.3
      Tau2       = 600
        min RMSE = 1.36724745812
            Beta = 0.0015
            Cdur = 37.5

    Weight       = 0.35
      Tau2       = 600
        min RMSE = 1.62683214956
            Beta = 0.0015
            Cdur = 37.5


So I will set DMS
  Beta = 0.0015
  Cdur = 37.5

** Batch sims with new DMS values

graham-mac% eee ; cd batches/batch_nmda_comp ; ./runmybatches
graham-mac% eee ; cd batches/batch_nmda_comp ; ipython -i analyze.py

Now the stim is too high -- getting depol block

Reducing glut stim values.

params["glutAmp"] = [0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 0.11]

Plateaus look good in E2S, but odd in DMS:
file:gif/20170830_111546.png

Zooming in on DMS good range:
file:gif/20170830_111628.png

Interestingly bursty!

Bill suggests looking into fracca.

** Matching fracca in E2S and DMS

E2S: fracca = 0.13
DMS: ica = 7*iNMDA/10, so fracca would equal 0.7

Will modify DMS now to match E2S value.

From E2S:
    fracca = 0.13
    if(fracca>0.0){ica =   sNMDA * ghkg(v,cai,cao,2) * mgblock * fracca}

From DMS:
    iNMDA = g*(v - e)
    ica = 7*iNMDA/10   :(5-10 times more permeable to Ca++ than Na+ or K+, Ascher and Nowak, 1988)
    iNMDA = 3*iNMDA/10

I will try changing DMS to:
    ica = 0.13 * iNMDA
    iNMDA = 0.87 * iNMDA

Changes:
    ica = 0.13 * iNMDA  :ica = 7*iNMDA/10   :(5-10 times more permeable to Ca++ than Na+ or K+, Ascher and Nowak, 1988)
    iNMDA = 0.87 * iNMDA  :iNMDA = 3*iNMDA/10

Recompiled using mkmod.

Now to see output.  No difference.

*** Chat with Bill

    joe [11:44 AM] 
    I changed DMS mod file and recompiled with mkmod, but the DMS output looks the same.

    joe [11:45 AM] 
    E2S calcium handling seems a bit more complicated, actually using GHK to calculate g for calcium…

    billl [11:47 AM] 
    that's fine -- let's do that - -that's better (more accurate)

    joe [11:47 AM] 
    Okay, I’ll copy that into DMS and try again.

    billl [11:47 AM] 
    (GHK is for caclculating i not g)

    [11:48] 
    it has to do with the large gradient of Ca across memb

    [11:48] 
    which makes it impossible to reverse the current

    [11:48] 
    with Na or K you have an erev and when pass the errev the current reverses (hence erev) and goes in opposite direction

    [11:49] 
    but need enough ions to carry that reveresed current and in case of ca there are not enough ions inside so can't

    [11:49] 
    good description of this in hille textbook

    joe [11:49 AM] 
    Interesting.  Thanks for the clarification!

*** Copying E2S calcium handling into DMS

From E2S:
line  8: GLOBAL fracca
line 29: fracca = 0.13 : fraction of current that is ca ions; Srupuston &al 95
line 74: iNMDA = sNMDA * (v - e) * mgblock * (1-fracca)
line 75: if(fracca>0.0){ica =   sNMDA * ghkg(v,cai,cao,2) * mgblock * fracca}

To DMS:
line  74: GLOBAL mg, Cmax, fracca
line  90: fracca = 0.13 : fraction of current that is ca ions; Srupuston &al 95
line 118: iNMDA = g*(v - e)*(1-fracca) : iNMDA = g*(v - e)
line 119: if(fracca>0.0){ica = g * ghkg(v,cai,cao,2) * fracca} :ica = 7*iNMDA/10   :(5-10 times more permeable to Ca++ than Na+ or K+, Ascher and Nowak, 1988)
line 120: :iNMDA = 3*iNMDA/10

Got two errors when compiling:
    NMDA.c:487:45: error: use of undeclared identifier 'cai'
         ica = g * ghkg ( _threadargscomma_ v , cai , cao , 2.0 ) * fracca ;
                                                ^
    NMDA.c:487:51: error: use of undeclared identifier 'cao'
         ica = g * ghkg ( _threadargscomma_ v , cai , cao , 2.0 ) * fracca ;


Looks like I need to add 'cai' and 'cao' to USEION and ASSIGNED

E2S:
line  7: USEION ca READ cai,cao WRITE ica
line 39: cai     (mM)
line 40: cao     (mM)

DMS:
line  72: USEION ca READ cai,cao WRITE ica :USEION ca WRITE ica
line 104: cai     (mM)
line 105: cao     (mM)

Now it compiled without errors.

Time to see the output.

*** Checking output

Error when running netParams:
    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    dlopen failed - 
    dlopen(x86_64/.libs/libnrnmech.so, 2): Symbol not found: _ghkg
      Referenced from: x86_64/.libs/libnrnmech.so
      Expected in: flat namespace
     in x86_64/.libs/libnrnmech.so

Probably need this from E2S line 79 (after BREAKPOINT, before DERIVATIVE):
    INCLUDE "ghk.inc"

Added it to line 126 of DMS.

5 errors with mkmod:

    NMDA.c:319:8: error: use of undeclared identifier 'R'
     _lf = R * ( celsius + 273.15 ) / ( _lz * ( 1e-3 ) * FARADAY ) ;
           ^
    NMDA.c:319:54: error: use of undeclared identifier 'FARADAY'
     _lf = R * ( celsius + 273.15 ) / ( _lz * ( 1e-3 ) * FARADAY ) ;
                                                         ^
    NMDA.c:343:8: error: use of undeclared identifier 'R'
     _lf = R * ( celsius + 273.15 ) / ( _lz * ( 1e-3 ) * FARADAY ) ;
           ^
    NMDA.c:343:54: error: use of undeclared identifier 'FARADAY'
     _lf = R * ( celsius + 273.15 ) / ( _lz * ( 1e-3 ) * FARADAY ) ;
                                                         ^
    NMDA.c:352:29: error: use of undeclared identifier 'FARADAY'
       _lghk = ( .001 ) * _lz * FARADAY * ( _lci * _lexi - _lco ) * _lfxi ;

Probably need to add R and FARADAY to UNITS as in E2S:

    UNITS {
      (nA) = (nanoamp)
      (mV) = (millivolt)
      (uS) = (microsiemens)
      FARADAY = (faraday) (coulomb)
      R = (k-mole) (joule/degC)
    }

Now it compiled successfully.

Time to see output again.  Fingers crossed.

Not much difference.  Ugh.

  
** Will make a three-way comparison of NMDA mod files

MyExp2SynNMDABB.mod --> original E2S NMDA
NMDAorig.mod        --> original DMS NMDA
NMDA.mod            --> Joe's modified DMS NMDA (fracca and ghkg added)

graham-mac% eee ; ipython -i nmda_test_three.py

DMS and E2S are almost identical in all regards.

Will look over batch sims.

Crap. I had set cfg.NMDABetaScale equal to 0.0015 (desired value) instead of 
0.15 (scaling factor which results in desired value of 0.0015)

    cfg.NMDABetaScale = 0.15 # Scales original value of 0.01 to 0.0015

Now let's see how things look.

It works now!  New DMS isn't identical to E2S, but close enough.  Can get 
plateau durations greater than 400 ms long.


* 2017-08-31 -- Matching DMS and E2S

** TODO

Plot plateau measures against param values 
Plot decreased threshold of activation in Bdend1 during plateaus
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** DMS and E2S

Bill doesn't think they are similar enough, thinks there may be a problem 
with the batch sims.  I'm cleaning up batch_comp_nmda to his specs and then 
running one value of weight.

I deleted these from my_batches, including here to save values.

    # Varying glutamate stim amplitude (1D batch)
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = [0.06, 0.068125, 0.07625, 0.084375, 0.0925, 0.100625, 0.10875, 0.116875, 0.125]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude (1D batch)
    batch = {}
    batch["label"] = "glutAmp1"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = [0.04, 0.05, 0.06, 0.07, 0.08, 0.09]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude (1D batch)
    batch = {}
    batch["label"] = "glutAmp2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = [0.10, 0.11, 0.12, 0.13, 0.14, 0.15]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude (1D batch)
    batch = {}
    batch["label"] = "glutAmp3"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = [0.16, 0.17, 0.18, 0.19, 0.20, 0.21]
    batch["params"] = params
    batches[batch["label"]] = batch

*** Chat log

    billl [8:42 AM] 
    @joe -- match?


    [8:42] 
    @sergio -- you are stimulating at 500?  -- let's stimulate at 0 and just run for 1e3 till get the balance right


    sergio [8:44 AM] 
    the stim started at 100 ms, let me change that to 0ms and stop sim at 1000ms


    joe [8:45 AM] 
    Yeah, g, iNMDA, and iCa all match well now, and we’re getting good long plateaus with DMS.


    [8:48] 
    The thing is E2S still seems better.  We can get plateaus up to 600 ms (only up to 400 with DMS), we get spike freq adaptation (like we see in Srdjan’s plateaus), and it responds well to a wider range of input amplitudes.


    billl 
    [8:48 AM] 
    how is it possible that they are not identical?


    [8:48] 
    what is the difference?


    joe [8:48 AM] 
    shared this image: E2S and DMS part 1
    Add Comment



    joe [8:48 AM] 
    shared this image: E2S and DMS part 2
    Add Comment

    billl 
    [8:48 AM] 
    that is not identical -- so not even close

    joe [8:49 AM] 
    Let me show you the g/iNMDA/iCa comparisons.

    [8:49] 
    Give me a min…

    billl 
    [8:49 AM] 
    k

    joe [8:52 AM] 
    uploaded this image: g
    Add Comment

    joe [8:52 AM] 
    uploaded this image: iNMDA
    Add Comment

    joe [8:52 AM] 
    uploaded this image: iCa
    Add Comment

    billl 
    [8:53 AM] 
    can't tell -- overlay them please;  any differences?

    joe [8:53 AM] 
    The top row of each figure is overlaid.

    salvadord [8:53 AM] 
    overlayed in top subplot?

    billl 
    [8:54 AM] 
    what is DMSorig -- we still need that for somehting?

    [8:54] 
    ok so not matching so sitll some problem

    [8:54] 
    can't see due to scale anyway -- need scale that matches the duration of the signal

    joe [8:54 AM] 
    DMSorig was just so I could actually see changes were happening.

    billl 
    [8:55 AM] 
    ok so now just the 2 and overlay

    joe [8:55 AM] 
    I think they are matching well.

    [8:55] 
    Okay, I’ll plot that.  One min.


    joe [9:02 AM] 
    uploaded this image: g
    Add Comment



    joe [9:02 AM] 
    uploaded this image: iNMDA
    Add Comment



    joe [9:02 AM] 
    uploaded this image: iCa
    Add Comment

    billl 
    [9:03 AM] 
    just need overlays -- need to see the time course so just the relevant duration

    [9:04] 
    but anyway they look identical

    [9:04] 
    but in the above it looks like you are still running 2 different models -- let's run same model -- there must be something different in the 2

    [9:04] 
    btw, i don't see how i can possibly look the same - that actually doesn't make sense so you must be graphing wrong

    [9:04] 
    g shold look same

    [9:05] 
    i is dependent on v and v is differing greatly

    joe [9:10 AM] 
    added and commented on this Python snippet: nmda_test_two.py
    from neuron import h
    h.load_file('stdrun.hoc')
    import matplotlib.pyplot as plt
    plt.ion()
    import numpy as np
    ​
    weight = 0.2
    ​
    def nmda_test(weight, Tau2, Cdur, Beta, title):
    ​
      sec = h.Section(name="sec")
    ​
      dmsorig = h.NMDAorig(0.5, sec=sec)
      dms = h.NMDA(0.5, sec=sec)
      e2s = h.MyExp2SynNMDABB(0.5, sec=sec)
    ​
      e2s.tau2NMDA = Tau2
      dmsorig.Cdur = Cdur
      dms.Cdur = Cdur
      dmsorig.Beta = Beta
      dms.Beta = Beta
    ​
      t_vec = h.Vector()
      t_vec.record(h._ref_t)
    ​
      dmsorig_vec = h.Vector()
      dmsorig_vec.record(dmsorig._ref_g)
      dmsorig_ivec = h.Vector()
      dmsorig_ivec.record(dmsorig._ref_iNMDA)
      dmsorig_icavec = h.Vector()
      dmsorig_icavec.record(dmsorig._ref_ica)
    ​
      dms_vec = h.Vector()
      dms_vec.record(dms._ref_g)
      dms_ivec = h.Vector()
      dms_ivec.record(dms._ref_iNMDA)
      dms_icavec = h.Vector()
      dms_icavec.record(dms._ref_ica)
    ​
      e2s_vec = h.Vector()
      e2s_vec.record(e2s._ref_g)
      e2s_ivec = h.Vector()
      e2s_ivec.record(e2s._ref_iNMDA)
      e2s_icavec = h.Vector()
      e2s_icavec.record(e2s._ref_ica)
    ​
      ns = h.NetStim() 
      ns.number = 1
      ns.interval = 200
      ns.start = 200
      ns.noise = 0
    ​
      nc = h.NetCon(ns, dmsorig)
      nc.delay = 1.0
      nc.weight[0] = weight
    ​
      nc2 = h.NetCon(ns, dms)
      nc2.delay = 1.0
      nc2.weight[0] = weight
    ​
      nc3 = h.NetCon(ns, e2s)
      nc3.delay = 1.0
      nc3.weight[0] = weight
    ​
      h.tstop = 2500
      h.run()
    ​
    ​
      plt.figure()
      plt.subplot(311)
      plt.plot(t_vec, dms_vec, 'g-', linewidth=1.5, label="DMS g")
      plt.plot(t_vec, e2s_vec, 'r-', linewidth=1.0, label="E2S g")
      plt.title(title)
      plt.legend()
      plt.subplot(312)
      plt.plot(t_vec, dms_vec, 'g-', label="DMS g")
      plt.legend()
      plt.subplot(313)  
      plt.plot(t_vec, e2s_vec, 'r-', label="E2S g")
      plt.legend()
    ​
      plt.figure()
      plt.subplot(311)
      plt.plot(t_vec, dms_ivec, 'g-', linewidth=1.5, label="DMS iNMDA")
      plt.plot(t_vec, e2s_ivec, 'r-', linewidth=1.0, label="E2S iNMDA")
      plt.title(title)
      plt.legend()
      plt.subplot(312)
      plt.plot(t_vec, dms_ivec, 'g-', label="DMS iNMDA")
      plt.legend()
      plt.subplot(313)
      plt.plot(t_vec, e2s_ivec, 'r-', label="E2S iNMDA")
      plt.legend()
    ​
      plt.figure()
      plt.subplot(311)
      plt.plot(t_vec, dms_icavec, 'g-', linewidth=1.5, label="DMS iCa")
      plt.plot(t_vec, e2s_icavec, 'r-', linewidth=1.0, label="E2S iCa")
      plt.title(title)
      plt.legend()
      plt.subplot(312)
      plt.plot(t_vec, dms_icavec, 'g-', label="DMS iCa")
      plt.legend()
      plt.subplot(313)
      plt.plot(t_vec, e2s_icavec, 'r-', label="E2S iCa")
      plt.legend()
    ​
    # default values
    Tau2 = 150
    Cdur = 1.0
    Beta = 0.01
    title = "Default: Tau2=150, Cdur=1.0, Beta=0.01"
    ​
    nmda_test(weight, Tau2, Cdur, Beta, title)
    ​
    # new values
    Tau2 = 600
    Cdur = 40.0
    Beta = 0.0015
    title = "New: Tau2=600, Cdur=40.0, Beta=0.0015"
    ​
    nmda_test(weight, Tau2, Cdur, Beta, title)
    ​
    1 Comment Click to expand inline 124 lines
    Here’s the code I used to compare g, iNMDA, and iCa in E2S and DMS.  I don’t think I’m graphing it wrong.

    joe [9:11 AM] 
    I changed Cdur and Beta values to match g with E2S.  Then I added the fracca stuff and values from E2S to DMS.

    billl 
    [9:13 AM] 
    you have told me that the sims are different between E2S and DMS but you are showing me NMDA and Ca currents that are the same;  that is not possible

    joe [9:15 AM] 
    The output from DMS is now much more similar to E2S than it was in the past.  There are slight differences between NMDA and Ca currents, which I assume accounts for the difference in the sims.

    billl 
    [9:16 AM] 
    has to be major difference;  are you showing results from your sims? -- i'm guesing not; let's just take 1 (1 weight value) and compare

    [9:18] 
    here again is where i would work interactively but i think you are more comfortable with batch so that's fine - it's just that this 5min prject is stretching out now to 5 days :)   .... ok it never was 5 min anyway but need to go at it in a more systematic way so each step is a step towards debugging rather than just doing tests of 'are we there yet'

    [9:18] 
    let me pull -- what file are you working with no?

    [9:18] 
    now

    sergio [9:19 AM] 
    uploaded this image: long connectivity stim started at 0ms, sim 1000 ms
    Add Comment

    billl 
    [9:20 AM] 
    ok so let's just cycle thru balancing till get alll the pops firing

    sergio [9:20 AM] 
    uploaded this image: long connectivity stim started 0 ms
    Add Comment

    billl 
    [9:20 AM] 
    don't need to show me blank graphs everytime -- i believe that they are blank :)

    [9:21] 
    compare to what salvador gets with input to same pop and try get something similar

    sergio [9:22 AM] 
    sure, I've been trying to do that. For this sim, I only doing stim to PT5 pop. I'm going to check connectivity from column and long connectivity stim

    joe [9:23 AM] 
    To compare and match E2S and DMS g and currents:  /u/graham/projects/eee/sim/nmda_test_three.py

    [9:23] 
    And without the DMSorig:

    [9:23] 
    /u/graham/projects/eee/sim/nmda_test_two.py

    [9:24] 
    For plateau sims, I’m working in: /u/graham/projects/eee/sim/batches/batch_nmda_comp/

    billl 
    [9:25 AM] 
    we're only interested in plateau sims now -- we need to match E2S and DMC in plateu sims

    [9:25] 
    just pick 1 of each of these params sets eg exp_iclamp_amp = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6]

    [9:26] 
    we don't need to compare for all of them -- let's debug 1 of them

    [9:26] 
    why do we need an iclamp btw?

    [9:26] 
    1 weight; 1 nmda decay

    [9:27] 
    take out all the commented-out stuff unless you're turning something on and off - if so then use if True: ... else: ...

    [9:27] 
    (makes it hard to read)

    joe [9:27 AM] 
    The iClamp is inactive.  Only using NetStim.

    billl 
    [9:27 AM] 
    where is the NMDA identity?

    [9:28] 
    ok so can remove that line too -- confusing since when see a bunch of amps figure being used

    joe [9:29 AM] 
    added and commented on this Plain Text snippet: From cfg.py
    cfg.NetStim1 = {'pop': ['dms'], 'loc': 0.99999, 'sec': 'spineheads', 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.glutAmp/cfg.glutSpread, cfg.glutAmp*cfg.ratioAMPANMDA/cfg.glutSpread], 'delay': 1.0}
    cfg.NetStim2 = {'pop': ['e2s'], 'loc': 0.99999, 'sec': 'spineheads', 'synMech': ['NMDAe2s','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.glutAmp/cfg.glutSpread, cfg.glutAmp*cfg.ratioAMPANMDA/cfg.glutSpread], 'delay': 1.0}
    1 Comment
    Pop dms gets NMDA, pop e2s gets NMDAe2s



    joe [9:29 AM] 
    Give me a couple minutes and I’ll clean up the code.


    billl 
    [9:30 AM] 
    k


    joe [9:52 AM] 
    Okay, code is cleaned up and set to run just one weight (0.1).


    [9:52] 
    cd eee/sim/batches/batch_comp_nmda ; ./runmybatches


    [9:52] 
    cd eee/sim/batches/batch_comp_nmda ; ipython -i analyze.py


    [9:53] 
    Figures appear in eee/sim/batches/batch_comp_nmda/batch_figs


    billl 
    [9:53 AM] 
    ok so now show the difference for the g and i for the 2 cases


    joe [9:53 AM] 
    uploaded this image: glutAmp_cell_1_multicell_vtrace_2.png
    Add Comment



    joe [9:54 AM] 
    One sec…


    billl 
    [9:54 AM] 
    g and i -- each pair overlaid

    [9:54] 
    thx

    [9:55] 
    could start at 50ms instead of 200 -- since fixed dt that will save some time;  also only need to run for an exta 100 ms for now so tstop=150

    [9:57] 
    you sure ri same between the two cells?  gl?  -- looks like more copuling in 1 than in the other but also would need to see blow up and superimpose to tell clearly

    joe [10:02 AM] 
    uploaded this image: g
    Add Comment

    joe [10:02 AM] 
    uploaded this image: iNMDA
    Add Comment

    joe [10:02 AM] 
    uploaded this image: iCa
    Add Comment



    billl 
    [10:03 AM] 
    doesn't look too bad


    billl 
    [10:03 AM] 
    how do the voltages compare? in the cmp where the syn is; in the soma
    2 replies Last reply today at 10:22 AM View thread


    joe [10:04 AM] 
    I’ve gone over batch_comp_nmda multiple times now with a fine-tooth comb, and I don’t see how anything can be different other than than E2S versus DMS…


    billl 
    [10:04 AM] 
    also let's compare g,i,v at the time when the DMS one gives out


    joe [11:45 AM] 
    Well, I separated the E2S and DMS onto separate secs and chose a weight that was closer to the middle of E2S’s good plateau range, and now I’m not converging on DMS param values that make it match E2S nicely.


    [11:48] 
    Should I use an optimization algorithm of some sort to perform a parameter search?


    [11:49] 
    I guess I don’t quite understand why — if we’re trying to make DMS exactly like E2S — we don’t just use E2S.


    [11:51] 
    Anyway, I’m off to lunch with my Dad.  I’ll be back in a couple hours.

* 2017-09-12 -- Meeting and E2S/DMS

** TODO

Project meeting
Find DMS values such that g_DMS is about the same as g_E2S
Plot plateau measures against param values 
Plot decreased threshold of activation in Bdend1 during plateaus
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** EEE meeting

Srdjan: long connections should be to apical dendrite, short-range connections
        to basal (opposite of what Sergio showed)

Srdjan: want to see simple effect of plateaus on network activity
          1) without plateaus  
          2) with plateaus     
        using same conditions otherwise
        simple network, no interneurons, only pyramidals

Penny: increasing pas Vm increases plateau duration (she is using DMS now)

Joe: how do we know when plateaus are good?

Srdjan: 300-500 ms plateaus

Srdjan: want to see two things
        1) very simple plateaus, and effect on network
        2) most accurate NMDA, and effect of params on plateau in individual cell


* 2017-09-14 -- NMDA DMS vs E2S

** TODO

Find DMS values such that g_DMS is about the same as g_E2S
Plot plateau measures against param values 
Plot decreased threshold of activation in Bdend1 during plateaus
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Matching DMS with E2S

DMS NMDA original is from here:
    https://senselab.med.yale.edu/ModelDB/showmodel.cshtml?model=230811&file=/PapoutsiEtAl2017/mod_files/NMDA.mod#tabs-2

Starting over from scratch 

Two original NMDA mod files:
1) E2S: /usr/site/nrniv/local/mod/MyExp2SynNMDABB.mod
2) DMS: /u/graham/projects/eee/sim/mod/NMDAorig.mod

New NMDA mod file:
/u/graham/projects/eee/sim/mod/NMDA.mod

Going through the mod files to figure out differences.

*** First looking at mg block

E2S) mgblock = 1.0 / (1.0 + 0.28 * exp(-0.062(/mV) * v) )
DMS) mgblock = 1 / (1 + exp(0.072 (/mV) * -v) * (mg / 3.57 (mM)))  

Comment in DMS file: was 0.062, changed to 0.072 to get a better voltage-dependence of NMDA currents, july 2008, kiki

They look different, but DMS has mg = 1 in PARAMETER, which gives the 0.28 from E2S

I am going to change 0.072 in DMS back to 0.062

Need to ask Penny about what changes she made to DMS, from the file:

    Penny Gao Modified on Aug 2, 2017

    - PROCEDURE RATE  mg
      FROM -100 TO 80 WITH 180

*** Now looking at iNMDA

E2S) iNMDA = sNMDA * (v - e) * mgblock * (1-fracca)
E2S) sNMDA = B2 - A2

DMS) iNMDA = g * (v - e) * (1-fracca)
DMS) g = (Ron + Roff) * 1(umho) * B
DMS) B = mgblock(v)

Plugging in:

E2S) iNMDA = (B2 - A2) * (v - e) * mgblock * (1-fracca)
DMS) iNMDA = (Ron + Roff) * mgblock * (v - e) * (1-fracca)

So they are equivalent except for (B2-A2) in E2S and (Ron+Roff) in DMS

I will now try to figure out this difference.



** Different versions of MyExp2SynNMDABB

I noticed that there are more than one versions of the MyExp2SynNMDABB mod file.
Looking into this...

Searching ModelDB for MyExp2SynNMDABB:

    https://senselab.med.yale.edu/ModelDB/searchFullText.cshtml?ddl_class=19&fd_name=on&fc_name=&fc_a25=&fc_a414=&fc_a27=&fc_a26=&fc_a112=&fc_a113=&fc_a114=&fc_a476=&fc_a471=&fc_a469=&fc_a299=&fc_a28=&fc_a502=&fulltextSearch=MyExp2SynNMDABB&btn_Search=Search

Output of search:

    1 Ketamine disrupts theta modulation of gamma in a computer model of hippocampus (Neymotin et al 2011)
          /hpcdemo/myexp2synnmdabb.mod 
    samn Exp $ NEURON { : THREADSAFE POINT_PROCESS MyExp2SynNMDABB RANGE tau1, tau2, e, i,

    2 Ih tunes oscillations in an In Silico CA3 model (Neymotin et al. 2013)
          /ca3ihdemo/myexp2synnmdabb.mod 
    samn Exp $ NEURON { : THREADSAFE POINT_PROCESS MyExp2SynNMDABB RANGE tau1, tau2, e, i,

    3 Ca+/HCN channel-dependent persistent activity in multiscale model of neocortex (Neymotin et al 2016)
          /cahdemo/myexp2synnmdabb.mod 
    NEURON { POINT_PROCESS MyExp2SynNMDABB RANGE e, i, iNMDA, s,

    4 CA3 Network Model of Epileptic Activity (Sanjay et. al, 2015)
          /sanjayetal2015/myexp2synnmdabb.mod 
    samn Exp $ NEURON { : THREADSAFE POINT_PROCESS MyExp2SynNMDABB RANGE tau1, tau2, e, i,

    5 Multitarget pharmacology for Dystonia in M1 (Neymotin et al 2016)
          /dystdemo/myexp2synnmdabb.mod 
    samn Exp $ NEURON { : THREADSAFE POINT_PROCESS MyExp2SynNMDABB RANGE e, i, iNMDA, s,

Currents in each model (model year):

    1) i   and iNMDA (2011)
    2) i   and iNMDA (2013)
    3) ica and iNMDA (2016)
    4) i   and iNMDA (2015)
    5) ica and iNMDA (2016)

So it looks like sometime between 2015 and 2016, the nonspecific current in this 
mod file was changed to a calcium current.

The current Neurosim version has ica instead of i, which seems fine.


* 2017-09-18 -- NMDA DMS vs E2S

** TODO

Match DMS and E2S
Plot plateau measures against param values 
Plot decreased threshold of activation in Bdend1 during plateaus
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Check if Cmax has any effect

Cmax doesn't have any effect.  Asking for help on Slack.

** Problem solved matching DMS and E2S 

Problem was difference in mgblock

From the DMS: `mgblock = 1 / (1 + exp(0.072 (/mV) * -v) * (mg / 3.57 (mM)))  :was 0.062, changed to 0.072 to get a better voltage-dependence of NMDA currents, july 2008, kiki`

The value is 0.062 in E2S.  I had changed the value in DMS back to 0.062, but apparently I forgot to recompile. :confounded:

** Now to redo old figures

First to find good range for glutAmp (NMDA weight)

Starts depol block above 0.1

Trying:
    params["glutAmp"] = [0.02, 0.04, 0.06, 0.08, 0.1]

Should zoom in between 0.04 and 0.1:
    params["glutAmp"] = [0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1]

To run batch:
    eee; cd batches/batch_nmda_comp ; ./runmybatches

To analyze:
    eee; cd batches/batch_nmda_comp; ipython -i analyze.py

Looks great:
file:gif/20170918_162229.png

** Improving 

NMDA mod file

Changing name 
    hg mv sim/mod/NMDA.mod sim/mod/NMDAeee.mod

Adding comments
Changing Beta to 0.0015

Deleting NMDAes and NMDAorig and removing these lines from parameters.multi

Recompiling and running a batch ... and ... success!  New NMDAeee mod file works
fine.


* 2017-09-19 -- Batching DMS and EEE Meeting

** TODO

Re-run all batches with new DMS NMDA 
Plot plateau measures against param values 
Plot decreased threshold of activation in Bdend1 during plateaus
Work on article draft -- methods and figures
Code more analysis for cells
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Re-run batches and plot figures

Copying batches from batch_spillover to batch_nmda_comp and running.

graham-mac% eee; cd batches/batch_nmda_comp; ./runmybatches
graham-mac% eee ; cd batches/batch_nmda_comp ; ipython -i analyze.py

Output looks good.  Adding a pdf of figs to gif dir:
file:gif/20170919_DMS_batch_figures.pdf

** Cleanup

Added NMDAeee.mod to /usr/site/nrniv/local/mod/ and added the following to 
parameters.multi:

    : DMS NMDA 
    DEFAULT NMDAeee

Need to have Mercurial stop tracking NMDAeee.mod:

    graham-mac% hg forget sim/mod/NMDAeee.mod

** Exploring DMS NMDA 

Want to see effects of changing Alpha, Beta, Cdur, Cmax, ratioAMPANMDA

Creating new dir: batch_nmda_dms (copy of batch_nmda_comp)

Updating all files. 

First run produced no output...  Debugging.

Corrected typo in netParams.py.  Re-running mybatches.

** EEE Meeting

Sergio's network is not firing much

Bill: remove connections and re-run to see problem

Bill: need to start working on EEE poster/paper, should do both simultaneously

Bill: look into what happens to g when there is no mgblock

Bill: Srdjan, please give Joe some data

Srdjan: I can provide somatic recordings during basal dend glutamate stim

Joe: that would be great!  (Should follow up with Srdjan)

Srdjan: Joe should replicate my plateau figure, then turn off voltage-
        dependent Na, Ca, mgblock to see effects

** Exploring params

Decreasing Cdur decreases plateau respoonse, increasing has little effect

Changing Cmax seems to have no effect

Decreasing Alpha decreases plateau response, increasing has little effect

Decreasing Beta can greatly increase plateau duration (without depol block),
  increasing beta decreases plateau response

Changing ratioAMPANMDA seems to have little effect


* 2017-09-20 -- Plateau figures and voltage-dependent currents

** TODO

Replicate Srdjan plateau figure
  Conntrol and without Na, Ca, mgblock
Plot decreased threshold of activation in Bdend1 during plateaus
Work on article draft and poster
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Srdjan plateau figure

file:gif/20161230_PlateauFunction.jpg

So we want a range of glut_stim such that the response goes from no plateau
and no spiking to a plateau lasting upwards of 500 ms.

The following values of glutAmp should do the trick:
  glutAmps = [0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1]

Want a control and to see changes when turning off v-dependent Na, Ca and mgblock

Code to plot is in batches/batch_analysis.py (plot_antic_plateaus)

Code to plot is also in eee/sim/dev.py, but I'm working in batch_analysis
(should probably delete dev version once I'm sure the other works).

Copied batch_nmda_dms dir to batch_plat_overlay

Runnning batch:
  graham-mac% eee; cd batches/batch_plat_overlay; ./runmybatches

Plotting:
  graham-mac% eee; cd batches/batch_plat_overlay; ipython
  In [1]: import batch_analysis
  In [2]: batch_analysis.plot_antic_plateaus('glutAmp')

Getting error because fig dir doesn't exist.  Adding mkdir to function.

Output:
file:gif/20170920_104707.png

Looks good, except should reduce glut stim 

Old:
  glutAmps = [0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1]

New:
  glutAmps = [0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07]

Will increase slightly more:
  glutAmps = [0.045, 0.050, 0.055, 0.060, 0.065, 0.070, 0.075]

Looks good!  Minor difference: interspike troughs in model get lower than 
in Srdjan's figure.

Now to work on experimental cases:
1) No voltage-dependent Na (gbar_nax = 0)
2) No voltage-dependent Ca (gcalbar_cal = 0, gcanbar_can = 0)
3) No Na and no Ca         (gbar_nax = 0, gcalbar_cal = 0, gcanbar_can = 0)
4) No mgblock

Will create params in cfg and set to zero in netParams.

cfg.activeNa = True/False
cfg.activeCa = True/False
cfg.mgblock = True/False

    if hasattr(cfg, 'activeNa') 
        if cfg.activeNa is False:
            sec['gbar_nax'] = 0

    if hasattr(cfg, 'activeCa') 
        if cfg.activeCa is False:
            sec['gcalbar_cal'] = 0
            sec['gcanbar_can'] = 0

Still have to figure out how to turn off mgblock

Ran sims with activeNa = False, and no change.  Looking for problem...

Needed different netParams code:

       # Turn off active currents
        if hasattr(cfg, 'activeNa_off'): 
            if cfg.activeNa_off:
                if 'head' not in secName and 'neck' not in secName:
                    sec['mechs']['nax']['gbar'] = 0.0
        if hasattr(cfg, 'activeCa_off'): 
            if cfg.activeCa_off:
                if 'head' not in secName and 'neck' not in secName:
                    sec['mechs']['can']['gcanbar'] = 0.0
                    sec['mechs']['cal']['gcalbar'] = 0.0
        # End of turning off active currents


Working:
file:gif/20170920_191557.png

Calcium seems to have very little effect, if any.

Will email to Srdjan after I get some feedback.



* 2017-09-21 -- Plateaus and mgblock

** TODO

Replicate Srdjan plateau figure with mgblock
Plot decreased threshold of activation in Bdend1 during plateaus
Work on article draft and poster
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** No mgblock and plateaus

Copying NMDAeee.mod to NMDAnomgb.mod and removing mgblock

POINT_PROCESS NMDA --> POINT_PROCESS NMDAnomgb
g = (Ron + Roff) * 1(umho) * B --> g = (Ron + Roff) * 1(umho)

Added to parameters.multi:
: DMS NMDA without mgblock
DEFAULT NMDAnomgb

Output figure:
file:gif/20170921_060810.png

** No mgblock and no active Na

file:gif/20170921_061804.png

With same y-scale:
file:gif/20170921_061907.png

** Looking into Ca 

Blocking Ca seems to have little effect on the plateau...  I want to make sure
this isn't an error of some sort.

Ca is active in control and turned off in CaBlock, so I guess it's okay.

file:gif/20170921_104236.png

** Email to Srdjan

Bill says to send figs to Srdjan and ask him.

Drafting an email to Srdjan.

Figure to send Srdjan: file:gif/20170921_110350.png

    Dear Srdjan,

    As we discussed in the EEE meeting on Tuesday, I have attached a figure showing the control case, the effects of blocking Na, the effects of blocking Ca, and the effects of turning off the Mg block.

    Blocking Na obviously results in no spiking, and we can clearly see the underlying plateau.

    Blocking Ca has very little effect.

    Turning off the Mg block in the NMDA receptor model results in much greater activity and longer plateaus.

    Are these results as you expected?  

    Could we please get a copy of the data behind your plateau figure?  That way we can compare results directly instead of subjectively.  Bill says we can republish data from your figure as long as we state "reproduced from Figure ... of ...".

    Thanks!

    Joe


* 2017-09-22 -- SfN poster

** TODO

Work on article draft and poster
Plot decreased threshold of activation in Bdend1 during plateaus
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Working on SfN poster

https://docs.google.com/presentation/d/1_ekr6BTwa_whFaa7xhME_xXILjYrweYw2Bnd1usj9g0/edit#slide=id.p

Dendritic plateau generation model in cortical pyramidal neurons: a link to cortical ensembles

Peng Gao1, Joe W Graham2, Sergio L Angulo2, Salvador Dura-Bernal2, William W Lytton2, Srdjan D Antic1 
1Institute for Systems Genomics, University of Connecticut Health Center, Farmington CT, 06030, USA
2Department of Physiology and Pharmacology, SUNY Downstate Medical Center, Brooklyn NY, 11203, USA

Abstract

Synaptic and glutamatergic inputs to the basal dendrites of cortical pyramidal neurons activate NMDA and AMPA receptors which can bring the dendrites into a long-lasting depolarized state which can spread into the soma. The resulting plateau potentials increase the excitability of the neuron by bringing membrane potential closer to threshold and reducing membrane time constant.  

In such an “activated” state, the pyramidal cells can respond to synaptic inputs more quickly and easily, facilitating synchronization of firing. We hypothesize that a multiple embedding of neuronal ensembles would allow for the binding of multimodal inputs into coherent object perception based on binding-by-synchrony theory, while simultaneously allowing information transfer via temporal coding.  The first level of embedding is the activated neurons among their larger populations, and the second level consists of the activated neurons which are firing synchronously.  Synchronized temporal coding within an area may provide the substrate for a broad distributed ensemble across areas that would allow binding-by-synchrony.

We are developing two data-driven models of cortical pyramidal neurons in NetPyNE for the NEURON simulator: 1) a morphologically-simplified model with seven compartments and 2) a morphologically-accurate model reconstructed from a prefrontal cortex Layer 5 pyramidal neuron.  Electrophysiological data is available from dendrites and soma simultaneously with glutamate-uncaging experiments utilizing voltage-sensitive dyes in dendrites and whole-cell patch recording in the soma.  

Model cell properties were fitted to mouse M1 current-clamp results using PRAXIS and Evolutionary Multi-objective Optimization (EMO) algorithms. Dendritic active current properties were tuned to match experimentally observed back-propagating action potentials. An AMPA receptor model generates the fast-response to glutamate stimulation while an NMDA receptor model accounts for the extended plateau activation.  

The AMPA/NMDA receptor properties were explored to determine their effect on dendritic and somatic plateaus. The receptors were modeled both directly on a basal dendrite and on spines. Spine properties, glutamate stimulation properties, and stimulation location were all explored and quantified. These models are being used to develop cortical meso-scale network models to develop and explore EEE theory. 


** Chatting with Bill about working with code interactively 

billl [Sep 22nd at 7:18 AM] 
in #eee-theory
@joe -- can i work with nmda_test_sep.py  ?? -- remote: abort: could not lock working directory of //u/graham/projects/eee: Permission denied


8 replies
joe [3 days ago] 
I’m Googling to figure out how to fix this…  Does anyone know how off the top of their head?


billl [3 days ago] 
hgshare


joe [3 days ago] 
Okay, I just ran hgshare.  Let me know if it didn’t work.


billl [3 days ago] 
worked


billl [3 days ago] 
note that now cwd will not be consistent with repo unless you update


joe [3 days ago] 
I’m not sure what you mean, Bill…


billl [3 days ago] 
if i push to repo you will need to run `hg update` if you want to see stuff i've done


joe [3 days ago] 
Got it. Thanks.

billl [10:28 AM] 
minor point -- was hard to work with your program interactively since all set up for a single batch run


[10:29] 
so e.g for the vectors easier if just put in 1 place -- record = [('tvec','_ref_t'), ('v_e2s','sece2s(0.5)._ref_v'), ('v_dms','secdms(0.5)._ref_v'), ('g_dms', 'dms._ref_g'), ('g_e2s','e2s._ref_g'),            ('i_dms','dms._ref_iNMDA'), ('ica_dms', 'dms._ref_ica'), ('i_e2s', 'e2s._ref_iNMDA'), ('ica_e2s', 'e2s._ref_ica')]


[10:30] 
i realize you're mostly using netpyne now anyway so prob not worth worrying about this much at this point


billl [10:48 AM] 
added this Perl snippet: then record each one
 vecs = {}
 for lb, ref in record:
  vecs[lb]=h.Vector(1e4)
  vecs[lb].record(getattr(h,ref))
Add Comment


joe [10:49 AM] 
That’s pretty slick.  Thanks for the tip!


billl [12:51 PM] 
what i showed you before, although slick, didn't actually work :) ..... i had to separate the objects from the _ref_


billl [12:51 PM] 
added this Perl snippet
def record ():
 global vecs
 reclist = [('tvec', h, 't'), ('v_e2s', sece2s(0.5), 'v'), ('v_dms', secdms(0.5), 'v'), ('g_dms', dms, 'g'), ('g_e2s', e2s, 'g'), 
       ('i_dms', dms, 'iNMDA'), ('ica_dms', dms, 'ica'), ('i_e2s', e2s, 'iNMDA'), ('ica_e2s', e2s, 'ica')]
 vecs = {}
 for lb, obj, ref in reclist:
  vecs[lb]=h.Vector(1e4)
  vecs[lb].record(getattr(obj,'_ref_'+ref))


* 2017-09-25 -- Improving plotting, exploring Srdjan 'data'

** TODO

Go through Srdjan's recording figures
Generate figures for EEE using DMS model
Work on article draft and poster
Plot decreased threshold of activation in Bdend1 during plateaus
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Srdjan's Data

file:gif/20170924_EEE_Basics_2.pdf

Posted on Slack: 

  Dendritic plateau potentials
  Somatic recordings
  Dendritic calcium waveforms
  Dendritic voltage waveforms.
  Srdjan D. Antic Unpublished and Published Data

Slide 3: "In real neurons, somatic waveforms are square and afterhyperpolarization is tiny"

Slides 7 - 8: Srdjan has figures for double glutamate stim (diff basal dends) -- he says this 
is irrelevant to current model, but could be good to simulate and compare...

Slide 10: negative current injected into soma during glut stim; could model this...

Slide 12 - 15: calcium imaging and glutamate stim; could see what Ca does in simulation...

Slide 17: calcium imaging during somatic hyperpolarization; could explore this
 
Slide 21: TTX; similar to simulations I just showed Srdjan

** Improved plateau overlay figure

plot_antic_plateaus only plots cell_0, need to add ability to choose cell to plot.

Completed and tested.  Works.

** Figures for new DMS model

First step: get the back-propagating AP figure running again.

in batch_analysis, this uses get_bapamp_distance and plotrelation2

Need to add ability to choose cell to plot.


* 2017-09-26 -- Figures and project meeting

** TODO

Generate figures for EEE using DMS model
Work on article draft and poster
Plot decreased threshold of activation in Bdend1 during plateaus
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Getting bAP figure running again

Uses get_bapamp_distance and plotrelation2 from batch_analysis, but code is 
in dev.py: plot_antic_fig6

Copying plot_antic_fig6 to batch_analysis and renaming plot_baps

Here is the batch that is necessary for using plot_baps:

    def batch_dendNa_dendK_block_bAP(cfgFile="cfg_bAP.py"):
      from cfg_bAP import cfg
      params = OrderedDict()
      params[('dendNa')] = list(np.array([0.0, 1.0])*cfg.dendNa)
      params[('dendK')] = list(np.array([0.0, 1.0])*cfg.dendK)
      b = createBatch(params, cfgFile=cfgFile)
      runBatch(b, 'dendNa_dendK_block_bAP')

Need to figure out what was in cfg_bAP.py.  Will require mucking with repo, so 
I'll commit first.

Actually, still had a copy: /u/graham/projects/eee/sim/batches/cfg_bAP.py

Creating a new batch dir (batch_bap) as a copy of batch_plat_overlay


** Checking on AMPA/NMDA ratio

Chat:

    penny [10:06 AM] 
    AMPA to NMDA at 0.2 seems too low ~ Shouldn't there be more AMPA than NMDA? I remember I saw it somewhere the ratio is roughly 1:0.24 in neocortex


    sergio
    [10:20 AM] 
    I can change the ratio, but we have to agree with a value with joe’s simulations


    joe [10:28 AM] 
    added and commented on this Objective-C snippet
    salvadord [10:43 AM] 
    btw, in many of our past simulations we have set NMDA weight = 0.1 * AMPA weight — which is quite differnet to what you have — not sure which makes more sense and/or if both are valid
    ​
    salvadord [10:48 AM] 
    "AMPA synapses, with colocalized NMDA weights at 10% of AMPA weights. “ — from Neymotin 2016 (Neuroscience journal, "CALCIUM REGULATION OF HCN CHANNELS …”)
    ​
    joe [10:48 AM] 
    Hmmm, yeah that is quite different… But in order to get similar to figure below, we need approx. AMPA weight = 0.2 * NMDA weight...
    1 Comment Collapse
    I agree that we should change the ratio…  I had discussed this with Salvador some time ago and was going to change, but then never did.



    joe [10:32 AM] 
    I’ll try running sims with AMPANMDAratio = 10 and share results.

Need to run batch varying AMPA/NMDA ratio

Will do in batch_plat_overlay

Adding batch to batch_plat_overlay/mybatches.py:

    # Varying glutamate stim amplitude and ratioAMPANMDA
    batch = {}
    batch["label"] = "glutAmp_ratioAMPANMDA"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glutAmps) / numsyns)
    params["ratioAMPANMDA"] = [0.2, 1.0, 2.0, 10.0]
    batch["params"] = params
    batches[batch["label"]] = batch

eee; cd batches/batch_plat_overlay; ./runmybatches

Hmmm.  Execution stalls without crashing...  Executing netParams and batch_init
show no problems.  Weird.

Trying to run batches from another dir.  Same thing.  Restarting computer.

Now it works.

Comparison figure:
file:gif/20170926_114654.png

Changing AMPANMDAratio to 10.0 works fine.  Asking on Slack what value we want
to use.

Will use 2.0.

** EEE Project Meeting

Simple morph model published without complex morph stuff -- simple model should
basically be ready to publish -- publish soon!

Srdjan: model AHPs are too strong, would be better if they were reduced (square 
        plateaus)

        plateaus should have fast onset and offset (square)

        Figures: glutamate pulses of 5ms, to middle of basal dends
        (red = subthreshold, black = superthreshold)

        Would be amazing if we could match the plateau-in-a-plateau which we can 
        see at the beginning of some of Srdjan's data

        Plateau amplitudes don't summate, but durations do

        Calcium waveform last longer than voltage waveform 

Penny's passive e is at -65mV, and her resting membrane potential is at -67 mV.
I should try these values to see the effects -- Penny sees higher/squarer plateaus

Will set AMPA/NMDA ratio to 2.0 to match Penny's (and closer to value of Wang 2008)

** Working on figures

Need to re-run all figures with new AMPANMDAratio and NMDA mod.


* 2017-09-27 -- bAP and other analysis figures

** TODO

Make bAP plotting operational again
Generate figures for EEE using new AMPA/NMDA ratio and DMS model
Change passive e and resting membrane potential to Penny's values
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
  Start article draft in Overleaf
  Figure 1: schematic / spine distribution
Plot some of Srdjan's scenarios
Plot decreased threshold of activation in Bdend1 during plateaus
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Getting bAP figure running again

Old batch code for bAP:

    def batch_dendNa_dendK_block_bAP(cfgFile="cfg_bAP.py"):
      from cfg_bAP import cfg
      params = OrderedDict()
      params[('dendNa')] = list(np.array([0.0, 1.0])*cfg.dendNa)
      params[('dendK')] = list(np.array([0.0, 1.0])*cfg.dendK)
      b = createBatch(params, cfgFile=cfgFile)
      runBatch(b, 'dendNa_dendK_block_bAP')

Adding the following to batch_bap/my_batches.py:

      # Varying glutamate stim amplitude (1D batch)
      batch = {}
      batch["label"] = "bAP"
      batch["cfgFile"] = "cfg_bAP.py"
      batch["netParamsFile"] = "netParams_bAP.py"
      params = OrderedDict()
      params[('dendNa')] = list(np.array([0.0, 1.0])*cfg.dendNaScale)
      params[('dendK')] = list(np.array([0.0, 1.0])*cfg.dendKScale)
      batch["params"] = params
      batches[batch["label"]] = batch

Need to update config file and netParams file...

Added the following to the config file:
    
    # To scale or turn off dendritic Na and K conductances
    cfg.dendNaScale = 1.0
    cfg.dendKScale  = 1.0

Added the following to the netParams file:
    
    # Scale dendritic Na and K conductances
    if hasattr(cfg, 'dendNaScale'):
        if secName in cellRule['secLists']['alldend']:  
            sec['mechs']['nax']['gbar'] = cfg.dendNaScale * sec['mechs']['nax']['gbar']  
    if hasattr(cfg, 'dendKScale'):
        if secName in cellRule['secLists']['alldend']:  
            sec['mechs']['kdr']['gbar'] = cfg.dendKScale * sec['mechs']['kdr']['gbar'] 
            sec['mechs']['kap']['gbar'] = cfg.dendKScale * sec['mechs']['kap']['gbar']  

Added the following to the netParams file:

    ###############################################################################
    # Current inputs (IClamp)
    ###############################################################################
    if cfg.addIClamp:   
        for iclabel in [k for k in dir(cfg) if k.startswith('IClamp')]:
            ic = getattr(cfg, iclabel, None)  # get dict with params

            # add stim source
            netParams.stimSourceParams[iclabel] = {'type': 'IClamp', 'delay': ic['start'], 'dur': ic['dur'], 'amp': ic['amp']}
            
            # connect stim source to target
            netParams.stimTargetParams[iclabel+'_'+ic['pop']] = \
                {'source': iclabel, 'conds': {'popLabel': ic['pop']}, 'sec': ic['sec'], 'loc': ic['loc']}

Had to force netParams_bAP to use cfg_bAP (code changed in netParams_bAP.py):
    Changed from:

        try:
            from __main__ import cfg  # import SimConfig object with params from parent module
        except:
            from cfg import cfg  # if no simConfig in parent module, import directly from cfg module

    To:
        from cfg_bAP import cfg  
        print("Importing cfg from cfg_bAP")

Still not working:
    
    Traceback (most recent call last):
      File "my_batches.py", line 36, in <module>
        params[('dendNaScale')] = list(np.array([0.0, 1.0])*cfg.dendNaScale)
    AttributeError: 'SimConfig' object has no attribute 'dendNaScale'
    >>> 

Figured it out.  Had to remove cfg.dendNaScale and cfg.dendKScale from my_batches.py:

    # Turning dendritic Na and K on and off for bAPs
    batch = {}
    batch["label"] = "bAP"
    batch["cfgFile"] = "cfg_bAP.py"
    batch["netParamsFile"] = "netParams_bAP.py"
    params = OrderedDict()
    params[('dendNaScale')] = [0.0, 1.0] 
    params[('dendKScale')]  = [0.0, 1.0] 
    batch["params"] = params
    batches[batch["label"]] = batch

Code is now generating figures:

    graham-mac% eee ; cd batches/batch_bap ; ./runmybatches
    graham-mac% eee ; cd batches/batch_bap ; ipython
    In [1]: import matplotlib.pyplot as plt; plt.ion(); import numpy as np; import batch_utils; import batch_analysis
    In [2]: batch_analysis.plot_baps("bap")

Figure:
    file:gif/20170928_140426.png

Problems with figure: Na block and K block should produce different traces.

Will have to figure out problem.  Switching to something else for now.


** Plot all figures again for new ratio and DMS

** Change resting membrane potential and generate new figures

** Plot Srdjan's scenarios

file:gif/20170924_EEE_Basics_2.pdf

Slides 7 - 8: Srdjan has figures for double glutamate stim (diff basal dends) -- he says this 
is irrelevant to current model, but could be good to simulate and compare...

Slide 10: negative current injected into soma during glut stim; could model this...

Slide 12 - 15: calcium imaging and glutamate stim; could see what Ca does in simulation...

Slide 17: calcium imaging during somatic hyperpolarization; could explore this

** Work on article figure 1: schematic and spine dist figure

Show simplified morphology
Show physio spine dist + experimental data of dist

** Start Overleaf project for article

www.overleaf.com


* 2017-09-29 -- Figures

** TODO

Article figure 1: schematic / spine distribution
Make bAP plotting operational again
Generate figures for EEE using new AMPA/NMDA ratio and DMS model
Change passive e and resting membrane potential to Penny's values
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne


** Work on article figure 1: schematic and spine dist figure

Show simplified morphology
Show physio spine dist + experimental data of dist

Spine distribution:
    distance = range(10, 200, 10)
    numspines = [0.982, 4.677, 10.91, 14.72, 18.24, 18.76, 19.05, 17.15, 17.38, 16.17, 15.36, 15.07, 15.24, 13.97, 12.53, 12.64, 11.84, 9.988, 11.43]

From:
    Ballesteros-Yáñez I, Benavides-Piccione R, Elston GN, Yuste R, DeFelipe J. Density and morphology of dendritic spines in mouse neocortex. Neuroscience. 2006;138:403–9.

Working here:
    /u/graham/projects/eee/sim/misc/spine_dist_fig.py

Code now functional: 

    import matplotlib.pyplot as plt
    import numpy as np

    plt.ion()

    distance = range(10, 200, 10)
    numspines = [0.982, 4.677, 10.91, 14.72, 18.24, 18.76, 19.05, 17.15, 17.38, 16.17, 15.36, 15.07, 15.24, 13.97, 12.53, 12.64, 11.84, 9.988, 11.43]

    # Data from: 
    # Ballesteros-Yanez, Benavides-Piccione, Elston, Yuste, DeFelipe. Density and
    # morphology of dendritic spines in mouse neocortex. Neuroscience. 2006; 138:403-9.

    def getspineLocs(numspines, spinedist=[1]):
        numspines += 2
        numsecs = len(spinedist)
        spinespersec = []
        total_weight = sum(spinedist)
        for weight in spinedist:
            weight = float(weight)
            if weight > 0:
                share = weight / total_weight
            else:
                share = 0.0
            distributed = round(share * numspines)
            spinespersec.append(distributed)
            total_weight -= weight
            numspines -= distributed
        spineLocs = []
        for index, spines in enumerate(spinespersec):
            start = index * (1./numsecs)
            stop = (index + 1) * (1./numsecs)
            spineLocs.extend(np.linspace(start, stop, num=spines, endpoint=False).tolist())
        spineLocs = spineLocs[1:-1]
        return spineLocs

    # Physiological distribution
    spinedist = 200 * np.array(getspineLocs(1000, numspines))
    hist, bin_edges = np.histogram(spinedist, bins=20, range=(0,200), density=True)

    # Actual number of spines in model
    spineLocs = 200 * np.array(getspineLocs(255, spinedist=numspines))
    hist2, bin_edges2 = np.histogram(spineLocs, bins=20, range=(0,200))

    centers = (bin_edges2[:-1] + bin_edges2[1:]) / 2

    fig = plt.figure()

    ax1 = fig.add_subplot(111)
    ax1.bar(bin_edges[0:-1], hist*1000, width=10, label="Physiological Distribution")
    ax1.set_xlabel("Distance from Soma (um)")
    ax1.set_ylabel("Spine Distribution (percent)")
    ax1.set_ylim(0, 8)

    ax2 = ax1.twinx()
    ax2.plot(centers, hist2, "-go", label="Modeled Physiological")
    ax2.plot(centers, np.zeros(np.shape(centers)) + 12.0, "-rd", label="Modeled Uniform")
    ax2.set_ylabel("Number of Spines in Model")
    ax2.set_ylim(0, 20)

    lines, labels = ax1.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax2.legend(lines + lines2, labels + labels2, loc=0, fontsize="small")
    ax2.set_title("Spine Distribution and Number of Spines Modeled")

    fig.savefig("spinedists.png", dpi=600)


Figure:
    file:gif/20171002_103333.png

** Working on bAP plotting


* 2017-10-02 -- Figure 1 and bAP figure

** TODO

Make bAP plotting operational again
Generate figures for EEE using new AMPA/NMDA ratio and DMS model
Change passive e and resting membrane potential to Penny's values
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios
Improve analysis code to handle any number of params
Incorporate analysis code into Netpyne

** Finish draft of Figure 1

file:gif/20171002_105812.png

** Working on bAP

Adding ability to plot desired cell(s) 

Works for desired cells.  Output is still not what I expected.

Using print statement in netParams_bap, I see that the conductances are not
actually being set to zero.  Looking into this.

Using more print statements, I see that dendNaScale and dendKScale are not
being varied when I run the batch...  Will ask Salva for help.  Committing/pushing.

Command to run batch:

mkdir eee_temp; cd eee_temp; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee; cd eee/sim/mod; mkmod; cd ../batches/batch_bap; ./runmybatches

Slack chat:

    joe [4:37 PM] 
    added and commented on this Plain Text snippet: Problem varying params in a batch
    One liner to see problem:
    mkdir eee_temp ; cd eee_temp ; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee ; cd eee/sim/mod ; mkmod ; cd ../batches/batch_bap ; ./runmybatches
    I want to vary cfg.dendNaScale and cfg.dendKScale (0 and 1 for each). (See batches/batch_bap/my_batches.py)
    According to the output from Netpyne, these params are being varied:
      dendNaScale = 0.0
      dendKScale = 0.0
      --snip--
      dendNaScale = 0.0
      dendKScale = 1.0
      --snip--
      dendNaScale = 1.0
      dendKScale = 0.0
      --snip--
      dendNaScale = 1.0
      dendKScale = 1.0
    But according to my print statements (in batch_bap/netParams_bAP.py), they aren't being varied, they just sit at whatever is in cfg_bAP.py. I see this for each permutation:
      dendNaScale = 1.000000
      dendKScale = 1.000000
    I can't seem to figure out the problem... I'd appreciate any insight!
    1 Comment Collapse
    @salvadord, I’m having a problem with Netpyne varying batch parameters… When you have a little time, would you mind taking a look?


    salvadord [5:03 PM] 
    ok will try to check

    [5:06] 
    dont see batch_bap folder… did you push?

    joe [5:22 PM] 
    Yeah, I pushed…  It would be `eee/sim/batches/batch_bap`

    salvadord [5:26 PM] 
    hmm funny if pull + hg up -C from existing repo doesn’t show up, but if clone from scratch then it does

    joe [5:27 PM] 
    That’s really weird…

    salvadord [5:43 PM] 
    try changing `params[('dendNaScale')]` --> `params['dendNaScale']`

    [5:44] 
    tuple only required when nested variable

    joe [5:57 PM] 
    Got my hopes up, but that doesn’t seem to have solved the problem. :grimacing:

    salvadord [7:24 PM] 
    aah in netParams_bAP you are hardcoding: `from cfg_bAP import cfg ``

    [7:25] 
    instead use: `from __main__ import cfg `

    joe [7:25 PM] 
    I’ll try that now.

    joe [7:33 PM] 
    That solved it.  Thanks Salva!

    [7:34] 
    So my take-home message is: even if you can specify a different config file in the batch, it’s better just to keep it `cfg.py`.  :flushed:

** Changing resting membrane potential

Will finish this tomorrow.


* 2017-10-03 -- EEE Meeting, bAP fig, e_pas

** TODO

Make bAP plots of latest models
Generate figures for EEE using new AMPA/NMDA ratio and DMS model
Change passive e resting membrane potential to Penny's value
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios
Look into Penny's code (number of channels versus weight)
Change weight handling to Sergio style

** bAP of latest models

Reducing line thickness 
Using different symbols for different data
Zooming in on AP traces

Adding bAP analysis to batch_bap/analyze.py

Running batch and analysis:
    graham-mac% eee ; cd batches/batch_bap ; ./runmybatches
    graham-mac% eee ; cd batches/batch_bap ; ipython -i analyze.py

Zooming in further on traces (from 200-220 to 205-215)
Reducing line width of control traces

Looking good!

Uniform spines: file:gif/20171003_060307.png
Physio spines:  file:gif/20171003_060417.png

Uniform and physiological spine distribution bAPs appear indistinguishable

Compared to experimental data:
file:gif/20171003_061248.png

It looks like we should reduce Na conductance in basal dendrites even more
(the amplitude of spikes doesn't decrease with distance from soma as much 
as it should)

** Explanation of importing cfg from Salva

salvadord [6:22 AM] 
take-home - no, you can use any filename, but cannot hard code it in netParams … the actual cfg file that you are loading is in eg. batch_data/bap/bap_0_0_cfg.json , which is loaded in batch_init.py and then netParams ‘inherits’ it by using `from __main__ import cfg`

joe [6:27 AM] 
I see.  I had changed to hard-coded because when I was debugging (`execfile('netParams_bAP.py')`), the `from __main__` didn’t work.  Thanks for explaining.

** EEE Meeting

Figure 1: change "passive" and "active" basal dendrite to "untargeted" and "targeted"

Srdjan: puff of glutamate near higher density spines should have more effect 
        than puff near lower density spines

We should figure out a way to simulate this!  Salva says Netpyne has the capability
to discretize space this way

Need to update Neurosim repos.  We updated NMDAeee.mod and netcon.inc (for AMPA) 
to add 'gmax', which we can use to scale all synapses simultaneously

Chats after meeting:

    penny [9:37 AM] 
    NMDA receptor single channel conductance (40–50 pS), derived from patch-clamp recordings or fluctuation analysis

    billl [9:38 AM] 
    and how many channels at a synapse

    penny [9:40 AM] 
    For NMDA, some ppl say 2~5, some ppl say just 1. Let me see if I can find a reliable reference

    billl [9:40 AM] 
    but we've been using much larger numbers anyway haven't we?

    joe [9:42 AM] 
    So I am using just one channel, and assuming that increasing weight mimics a higher number of channels.  I believe Penny is using several channels.  How should we be doing this?

    [9:42] 
    And follow-up: are these two ways identical?

    penny [9:42 AM] 
    Guy Major’s 2008 paper used this value: ” peak opened NMDAR conductance ranged from 126 to 21 nS (proximal to tip).”

    billl [9:43 AM] 
    i think you are all based on synapse by synapse? -- not channel y channel?

    [9:44] 
    but things are ~working now so we don't want to change the numbers just figure out what the numbers mean

    [9:44] 
    so eg penny said was using a weight of 0.02?

    [9:44] 
    so that would be 0.02 uS so 20 nS

    joe [9:44 AM] 
    For a nice range of plateau durations, I use the following: `glutAmps = [0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1]`

    billl 
    [9:48 AM] 
    ok so could do multiples upwards from 0.02 -- have weights 2-5

    [9:48] 
    guess doesn't matter -- everyone can use different ones as long as we're agree on eg AMPA/NMDA ratio

    [9:48] 
    bbial

    sergio [9:49 AM] 
    I set a total weight (0.012) and then a proportion between AMPA/NMDA [0.666,0.334]

    joe [4 minutes ago] 
    This way of handling the ratio seems better than mine (setting weight for NMDA and then multiplying that by ratio to get AMPA weight).  I’ll switch to this method so we’re consistent.

    penny [9:58 AM] 
    Setting the AMPAR or NMDAR conductance per synapse makes more sense. I will change mine to be the same as Joe’s.

    penny [10:05 AM] 
    I am currently setting up the weight for each receptor without considering how many receptors on a synapse.      Joe is setting up the weight for each synapse, all the AMPARs in one synapse is controlled by one AMPAR_mod file. Same for NMDARs on one synapse.   Is it right Joe?

    joe [8 minutes ago] 
    That’s right: I’m using one NMDAr and one AMPAr on each spine head.  Doubling the weight would be the same as adding another receptor.  Seems simpler to me, but perhaps Penny’s way is more flexible?

** Updating Neurosim repos

Will compare before and after to ensure no changes

graham-mac% nsimupdate

No changes in sim outputs.  

** Change passive e (resting membrane potential) to Penny's value

Copied batch_nmda_dms to batch_rmp

line 233 of cell model files:
    sec.e_pas   = Vrest # passive      

line 13:
    Vrest       = -88.5366550238 

my_batches.py:

    # Varying e_pas (passive reversal potential)
    batch = {}
    batch["label"] = "epas"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["epas"] = [-100.0, -90.0, -80.0, -70.0, -60.0, -50.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude and e_pas (passive reversal potential)
    batch = {}
    batch["label"] = "epas"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.array(glutAmps) / numsyns)
    params["epas"] = [-100.0, -90.0, -80.0, -70.0, -60.0, -50.0]
    batch["params"] = params
    batches[batch["label"]] = batch

cfg.py:

    cfg.epas = -88.5

netParams.py:

    # apply values to parameters
    for cell_label, cell_params in netParams.cellParams.iteritems():
        for secName,sec in cell_params['secs'].iteritems(): 
            sec['mechs']['pas']['e'] = cfg.epas

Results:
file:gif/20171003_165257.png

joe [4:59 PM] 
uploaded and commented on this image: Varying e_pas (passive reversal potential)
1 Comment
Rows are amplitude of glutamate, columns are e_pas.  Current e_pas default is -88 (basically the second column).  I’m not sure changing e_pas does us any good in this model…  It increases plateau duration (which we don’t really need anymore) and decreases plateau amplitude…

billl [5:56 AM] 
get up to depol blockade which we want to stay away form -- 2nd or 3rd col look good

Bill agrees that our current e_pas is fine (2nd column)

* 2017-10-04 -- gmax and AMPA/NMDA ratio

** TODO

Fix labels on Figure 1
Start working with spine density and glutamate puffs
Generate figures for EEE using new AMPA/NMDA ratio and DMS model
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios
Look into Penny's code (number of channels versus weight)
Change weight handling to Sergio style

** Figure 1

"Active" and "passive" aren't good labels for basal dendrites
Using "target" and "non-target" instead

Checking scaling on dend and soma traces

Yeah, basal dend trace should be ~ 20% lower than soma.  Adjusting figure.

** Changing weight handling to Sergio's method

My current method is to use NMDA weight as the "glutamate amplitude", and 
mulitply this by cfg.AMPANMDAratio to get the AMPA weight.  This means that 
the AMPA weight is additional, above and beyond the "glutAmp".

Sergio uses the total weight as the "glutamate amplitude", and then divides
that into weight to NMDA and to AMPA based on the ratio.  

sergio [Yesterday at 9:49 AM] 
in #eee-theory
I set a total weight (0.012) and then a proportion between AMPA/NMDA [0.666,0.334]

Copying batch_nmda_dms to batch_weight_ratio

*** Modifying cfg

cfg.NMDAw = cfg.glutAmp * (1.0 / (cfg.ratioAMPANMDA + 1.0))
cfg.AMPAw = cfg.glutAmp * (cfg.ratioAMPANMDA / (cfg.ratioAMPANMDA + 1.0)) 

Checking these equations:

    In [19]: def check(glutamp, ratio):
        ...:     nw = glutamp * (1.0/(ratio + 1.0))
        ...:     aw = glutamp * (ratio/(ratio + 1.0))
        ...:     print("NMDAw = %f" % (nw))
        ...:     print("AMPAw = %f" % (aw))
        ...:     print("total = %f" % (nw+aw))
        ...:     

    In [20]: check(5, 2)
    NMDAw = 1.666667
    AMPAw = 3.333333
    total = 5.000000

    In [21]: check(5, .2)
    NMDAw = 4.166667
    AMPAw = 0.833333
    total = 5.000000

Looks good!

But, now we are handling the ratio using gmax in NMDA and AMPA mods.  See below.

** Checking on cellRule question I've been wondering about:

    joe [6:39 AM] 
    added and commented on this Plain Text snippet: my netParams file
    # EEE cell model with uniform spine distribution (7 comps)
    cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'eee7us', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')
    # EEE cell model with physiological spine distribution (7 comps)
    cellRule = netParams.importCellParams(label='eee7ps', conds={'cellType': 'eee7ps', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7ps.py'), cellName='eee7ps')
    1 Comment
    Am I overwriting the cellRule by having `cellRule =  blah` twice in a row?


    salvadord [6:40 AM] 
    no, thats fine… the rule is store in netParams.cellParams[label]

    joe [6:40 AM] 
    Should the second one be something like `cellRule['something'] = nP.importCellParams()`

    salvadord [6:40 AM] 
    u dont really need the `cellRule =` unless you want to change some its params after

    joe [6:41 AM] 
    Thanks!  I thought that it was okay, but I just wanted to double check.

    salvadord [6:41 AM] 
    sure np


** Using gmax to create AMPA/NMDA ratio

*** chat log:

    billl [7:44 AM] 
    so do we have the agreement of what to set for gmax for AMPA and for NMDA to both have the baseline and have the relative strength?

    [7:44] 
    (et's put here as text snippet (as well as in everyon'es nb)

    penny [7:47 AM] 
    We don’t have an agreement yet~ Okay, I will put it in a text snippet

    penny [7:53 AM] 
    added this Plain Text snippet: Test for reasonable values for AMPA/NMDA gmax, weight and ratio
    Test on Oct 4, 2017
    In detailed model: 
    Test set 1: set the NMDA gmax to 0.1uS and set the synaptic weight to 0.14;
    set the AMPA gmax to 0.04375uS and set the synaptic weight to 0.28; 
    Ratio of AMPA weight to NMDA weight = 2
    Test set 2: set the NMDA gmax to 0.1uS and set the synaptic weight to 0.10;
    set the AMPA gmax to 0.0245uS and set the synaptic weight to 0.50;
    Ratio of AMPA weight to NMDA weight = 5
    The current for AMPAR and NMDAR at basal dendrite loc0.6 is: 
    iAMPA ~ 0.03nA 
    iNMDA ~ 0.0067nA
    Test: ongoing, no conclusion yet.
    Add Comment Collapse

    billl [7:55 AM] 
    we're not doing weight now

    [7:56] 
    just gmax (which is arbitrary) and ratio (which is not -- what ratios have the 3 of you been using)

    penny [7:58 AM] 
    We agreed on AMPA/NMDA 2:1 last week. Joe had batch sims with multiple ratios before.

    billl [7:59 AM] 
    ok so why not just make the gmax for AMPA 2 and for NMDA 1

    [8:00] 
    is that agreeable for @U1SUF190S and @sergio ?

    sergio [8:01 AM] 
    yep

    joe [9:19 AM] 
    Works for me.

    penny [9:45 AM] 
    Hi, gmax = 1 or 2 is too high in the detailed model.  When I set the NMDA gmax = 0.1, AMPA gmax = 0.2, the results are more reasonable in the detailed model. Not sure if it would be the same for the simplified model

    joe [9:47 AM] 
    I’ll give it a try and let you know.

    salvadord [9:51 AM] 
    sergio not sure if you are using weightNorm, but if so, note that weights will be scaled by a factor different for each segment — so the weights u specify in netParams will not correspond to those of joe/penny (however if you inspect sim.net afterwards, those weights will correspond)

    sergio [9:52 AM] 
    thanks salva, I’m going to check those values on sim.net

    billl [9:53 AM] 
    i was thinking that we would make gmax 1,2 and then use the weights as 0.1

    [9:53] 
    but can set 0.1 0.2 and then set the weights as >1 in some cases

    penny [9:54 AM] 
    For detailed model, when gmax is 1,2, even when the weight is 0.01, I still get large spike on basal dendrite.

    billl [9:54 AM] 
    then there is something wrong with the mod file

    [9:54] 
    so we have to fix

    [9:55] 
    please check that don't get anything when weight is zero

    [9:55] 
    else we are not multiplying by weight!

    [9:55] 
    is this a problem for nmda or for ampa input?

    penny [9:55 AM] 
    I am guessing the current is determined by conductance, when the conductance is too high, it can generate huge current to cause the large spike?

    billl [9:55 AM] 
    you are guessing?? :)

    [9:55] 
    well if that is the case then we need to fix it

    [9:56] 
    since that was not what gmax was supposed to do

    [9:56] 
    so let's check that

    penny [9:56 AM] 
    Lol, in mod file     iNMDA : current = g*(v - e)

    [9:56] 
    g is determined by gmax

    billl [9:57 AM] 
    shouldn't be

    penny [9:58 AM] 
    uploaded and commented on this image: AMPA_8_NMDA_8_NMDA_Beta_0.03_NMDA_Cdur_1_Syn_Weight_0.191919191919_20171004-121445.png
    1 Comment
    The blue trace at basal location 0.5 is too high

    billl [9:58 AM] 
    ouch; that's with weight = 0?

    [9:58] 
    i don't see any bugs -- anyone else can see bug?

    penny [9:58 AM] 
    no no no, thats weight 0.19

    billl [9:58 AM] 
    oh

    [10:00] 
    so how does 0 look?

    penny [10:00 AM] 
    Let me try

    penny [10:01 AM] 
    uploaded and commented on this image: AMPA_8_NMDA_8_NMDA_Beta_0.03_NMDA_Cdur_1_Syn_Weight_0.0_20171004-121111.png
    1 Comment
    This is weight 0…

    penny [10:01 AM] 
    Did I understand synaptic weight wrong?


    billl [10:02 AM] 
    that looks good -- so weight is working

    penny [10:02 AM] 
    Okay :grin:

    billl [10:02 AM] 
    ok so what was the weight you were using before when you got the results you want?

    penny [10:04 AM] 
    Before I was using the old mod file, which did not have a value for gmax. And I use NMDA weight mostly 0.001-0.005

    billl [10:05 AM] 
    well pick one and make sure you can reproduce it

    penny [10:05 AM] 
    For AMPA I used to use 0.00058, very small :grin:

    [10:05] 
    okay

    billl [10:05 AM] 
    if you are now using gmax=1 for NMDA can use same weight but if using AMPA gmax=2 need to use half the weight for that one

    [10:06] 
    since will be gAMPA = gmax*weight so gAMPA=2*weight

    penny [10:06 AM] 
    Okay


*** So, no longer using Sergio's ratio method, now using gmax

Deleting batch_weight_ratio

Copying batch_nmda_dms to batch_gmax

Modifying cfg.py:

    # Other params
    cfg.ratioAMPANMDA = 2.0
    cfg.NMDAgmax      = 1.0

Changing this:

    cfg.NetStim1 = {'pop': ['eee7us'], 'loc': 0.99999, 'sec': 'spineheads', 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.glutAmp/cfg.glutSpread, cfg.glutAmp*cfg.ratioAMPANMDA/cfg.glutSpread], 'delay': 1.0}

    cfg.NetStim2 = {'pop': ['eee7ps'], 'loc': 0.99999, 'sec': 'spineheads', 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.glutAmp/cfg.glutSpread, cfg.glutAmp*cfg.ratioAMPANMDA/cfg.glutSpread], 'delay': 1.0}

To this:

    cfg.NetStim1 = {'pop': ['eee7us'], 'loc': 0.99999, 'sec': 'spineheads', 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.glutAmp/cfg.glutSpread, cfg.glutAmp/cfg.glutSpread], 'delay': 1.0}

    cfg.NetStim2 = {'pop': ['eee7ps'], 'loc': 0.99999, 'sec': 'spineheads', 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.glutAmp/cfg.glutSpread, cfg.glutAmp/cfg.glutSpread], 'delay': 1.0}

Modifying netParams.py:

Changing this:

    # set up spine stim
    numActiveSpines = cfg.glutSpread
    spine_glut_delay  = np.ones(numActiveSpines)
    shaft_glut_delay  = spine_glut_delay + cfg.spillDelay * np.ones(numActiveSpines)

    indWeightNMDA = cfg.glutAmp / cfg.glutSpread
    activeSpineNums = cfg.glutSpine + np.arange(cfg.glutSpread)
    activeSpineHeads = ["head_" + str(num) for num in activeSpineNums]
    activeSpineNecks = ["neck_" + str(num) for num in activeSpineNums]

    spine_NMDA_weight = [indWeightNMDA for head in activeSpineHeads]
    shaft_glut_weight = [indWeightNMDA * cfg.spillFraction for neck in activeSpineNecks]

To this:

    # set up spine stim
    numActiveSpines = cfg.glutSpread
    spine_glut_delay  = np.ones(numActiveSpines)
    shaft_glut_delay  = spine_glut_delay + cfg.spillDelay * np.ones(numActiveSpines)

    indWeight = cfg.glutAmp / cfg.glutSpread
    activeSpineNums = cfg.glutSpine + np.arange(cfg.glutSpread)
    activeSpineHeads = ["head_" + str(num) for num in activeSpineNums]
    activeSpineNecks = ["neck_" + str(num) for num in activeSpineNums]

    spine_NMDA_weight = [indWeight for head in activeSpineHeads]
    shaft_glut_weight = [indWeight * cfg.spillFraction for neck in activeSpineNecks]

Changing this:

    netParams.synMechParams['NMDA'] = {'mod': 'NMDA', 'Cdur': cfg.CdurNMDAScale * 1.0, 'Cmax': cfg.CmaxNMDAScale * 1.0, 'Alpha': cfg.NMDAAlphaScale * 4.0, 'Beta': cfg.NMDABetaScale * 0.0015}

    netParams.synMechParams['AMPA'] = {'mod': 'AMPA'}

To this:

    netParams.synMechParams['NMDA'] = {'mod': 'NMDA', 'Cdur': cfg.CdurNMDAScale * 1.0, 'Cmax': cfg.CmaxNMDAScale * 1.0, 'Alpha': cfg.NMDAAlphaScale * 4.0, 'Beta': cfg.NMDABetaScale * 0.0015, 'gmax': cfg.NMDAgmax}

    netParams.synMechParams['AMPA'] = {'mod': 'AMPA', 'gmax': cfg.ratioAMPANMDA * cfg.NMDAgmax}

Removing this (lines 120-121):

    if ns['synMech'][i] == 'AMPA': 
        cur_weight = list(np.array(cur_weight) * cfg.ratioAMPANMDA)

*** Problem and solution chat

    joe [11:16 AM] 
    added and commented on this Plain Text snippet: Problem using gmax
    graham-mac% eee ; cd batches/batch_gmax ; ipython -i batch_init.py
    Creating network of 2 cell populations on 1 hosts...
     Number of cells on node 0: 2 
     Done; cell creation time = 0.10 s.
    Making connections...
     Number of connections on node 0: 0 
     Done; cell connection time = 0.00 s.
    Adding stims...
    ---------------------------------------------------------------------------
    LookupError                Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_gmax/batch_init.py in <module>()
       30 
       31 # add network stimulation
    ---> 32 sim.net.addStims()
       33 
       34 # setup variables to record for each cell (spikes, V traces, etc)
    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in addStims(self)
      158 
      159             if source['type'] == 'NetStim':
    --> 160               self._addCellStim(params, postCell) # call method to add connections (sort out synMechs first)
      161             else:
      162               postCell.addStim(params) # call cell method to add connection
    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in _addCellStim(self, stimParam, postCell)
      200       params['delay'] = finalParam['delaySynMech']
      201 
    --> 202       postCell.addStim(params=params)
      203 
      204 
    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addStim(self, params)
      979         'seed': params['seed'] if 'seed' in params else sim.cfg.seeds['stim']}
      980 
    --> 981       self.addConn(connParams, netStimParams)
      982 
      983 
    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addConn(self, params, netStimParams)
      690     # Add synaptic mechanisms
      691     if not pointp: # check not a point process
    --> 692       synMechs, synMechSecs, synMechLocs = self._setConnSynMechs(params, secLabels)
      693       if synMechs == -1: return
      694 
    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in _setConnSynMechs(self, params, secLabels)
      1139 
      1140     # add synaptic mechanism to section based on synMechSecs and synMechLocs (if already exists won't be added)
    -> 1141     synMechs = [self.addSynMech(synLabel=params['synMech'], secLabel=synMechSecs[i], loc=synMechLocs[i]) for i in range(synsPerConn)]
      1142 
      1143     return synMechs, synMechSecs, synMechLocs
    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addSynMech(self, synLabel, secLabel, loc)
      591           for synParamName,synParamValue in synMechParams.iteritems(): # add params of the synaptic mechanism
      592             if synParamName not in ['label', 'mod', 'selfNetCon', 'loc']:
    --> 593               setattr(synMech['hSyn'], synParamName, synParamValue)
      594             elif synParamName == 'selfNetcon': # create self netcon required for some synapses (eg. homeostatic)
      595               secLabelNetCon = synParamValue.get('sec', 'soma')
    LookupError: 'gmax' is not a defined hoc variable name.
    1 Comment Collapse
    I switched to using gmax, and am now debugging.  netParams executes fine, but when I execute batch_init, I get `LookupError: 'gmax' is not a defined hoc variable name.`  I’ll keep digging, but if anybody happens to know the solution off the top of their head, I’m all ears.


    billl [11:17 AM] 
    uhoh

    [11:17] 
    it's not called gmax

    [11:17] 
    go into the interpreter and see what it's called

    [11:17] 
    h.gmax_NMDAeee maybe?

    joe [11:27 AM] 
    uploaded and commented on this image: interpreter
    1 Comment
    Looks like it should be h.gmax_NMDA and h.gmax_AMPA, but it’s still not working…  `LookupError: 'gmax_NMDA' is not a defined hoc variable name.`  `LookupError: 'h.gmax_NMDA' is not a defined hoc variable name.`

    joe [11:27 AM] 
    added and commented on this Plain Text snippet: netParams
    ###############################################################################
    # Synaptic mechanism parameters
    ###############################################################################
    netParams.synMechParams['NMDA'] = {'mod': 'NMDA', 'Cdur': cfg.CdurNMDAScale * 1.0, 'Cmax': cfg.CmaxNMDAScale * 1.0, 'Alpha': cfg.NMDAAlphaScale * 4.0, 'Beta': cfg.NMDABetaScale * 0.0015, 'h.gmax_NMDA': cfg.NMDAgmax}
    netParams.synMechParams['AMPA'] = {'mod': 'AMPA', 'h.gmax_AMPA': cfg.ratioAMPANMDA * cfg.NMDAgmax}
    1 Comment Collapse
    Here’s how I’m trying to set it in netParams…

    joe [11:30 AM] 
    @salvadord, is there a different way to set these gmax since they are GLOBALs?

    billl [11:31 AM] 
    yes will be different

    [11:31] 
    doesn't belong to the individual connection

    [11:31] 
    it's a global like celsius - how do you set celsius?

    joe [11:31 AM] 
    Ahhh, okay!  I’ll try that.

    joe [11:36 AM] 
    added and commented on this Plain Text snippet: from netParams
    h.gmax_NMDA = cfg.NMDAgmax
    h.gmax_AMPA = cfg.ratioAMPANMDA * cfg.NMDAgmax
    1 Comment
    Yup, that solved it.

    billl [11:38 AM] 
    great

    joe [11:38 AM] 
    Thx, Bill.


** Activate synapses based on proximity to glutamate puff

Asking for help in Slack:

    joe [3:25 PM] 
    I’m starting to look into how I would activate synapses based on physical location (so a glutamate puff at higher spine density would have more effect).  @salvadord, you mentioned yesterday that Netpyne could handle this, but I’m having a hard time figuring out how based on the documentation (it seems like it would be in subConnParams, but there’s very little about subConnParams in docs).
    When you have time, would you mind pointing me in the right direction?

    salvadord [3:30 PM] 
    yes, sorry the subConnParams doc is still pending

    [3:32] 
    so u wanna create connections from a certain stim population to a cell and place the syns as a function of path distance from soma ?

    joe [3:37 PM] 
    Sort of…  The synapses are already placed on spines, 255 of which are already placed along the basal dendrite in diff distributions.  I want to pick a location along the dendrite and activate the synapses on any spines within, say, 10 microns of that loc.

    salvadord [3:39 PM] 
    how did you place the synapses?

    joe [3:44 PM] 
    added and commented on this Plain Text snippet: placing synapses
    activeSpineNums = cfg.glutSpine + np.arange(cfg.glutSpread)
    activeSpineHeads = ["head_" + str(num) for num in activeSpineNums]
    activeSpineNecks = ["neck_" + str(num) for num in activeSpineNums]
    if cfg.addNetStim:
      
      for nslabel in [k for k in dir(cfg) if k.startswith('NetStim')]:
        ns = getattr(cfg, nslabel, None)
        if ns['sec'] == 'spineheads':
          ns['sec'] = list(activeSpineHeads)
          cur_weight = list([cfg.glutAmp / cfg.glutSpread for head in activeSpineHeads])
          cur_loc  = 0.99999
          cur_delay = list(spine_glut_delay)
        elif ns['sec'] == 'spinenecks':
          ns['sec'] = list(activeSpineNecks)
          cur_weight = list(shaft_glut_weight)
          cur_loc  = 0.00001
          cur_delay = list(shaft_glut_delay)
    1 Comment Collapse
    Hmmm… I guess I don’t place all the synapses.  I choose the spine and number of spines I want to stim, and create synapses there.

    joe [3:45 PM] 
    What I want to do is instead of choosing the spine(s) to stim by their ID number, I want to choose them based on their proximity to a loc along the dendrite.

    salvadord [3:51 PM] 
    unfortunately the subconnParams currently only allows to work with x,y,z spatial locations, but not relative path distance along the dendrite

    [3:51] 
    I started implementing that (line 439 netpyne/network.py) but didn’t get too far — you are welcome to give it a try of course


    salvadord [3:53 PM] 
    uploaded and commented on this image: Pasted image at 2017 10 04 06 52 PM
    1 Comment
    currently can only specify this type of spatial distributions (1D or 2D)


    salvadord [3:54 PM] 
    (grid-based)

    joe [3:54 PM] 
    No worries, this is kind of a weird use-case.  I’ve got ideas about how to implement it.

    [3:55] 
    I’ll work on that, and once it’s functional, we’ll see about getting it into Netpyne (but I do still find the Netpyne code dense and intimidating! :sweat_smile:)

    salvadord [3:55 PM] 
    nah don’t think that weird, its come up before, that why started implementing

    [3:56] 
    yeah sounds good… no worries… I find it intimidating too :wink:

    joe [3:56 PM] 
    Hahaha! Thx Salva.

    salvadord [4:03 PM] 
    in case useful, you can use netParams.addCellParamsSecList(label, secListName, somaDist=None, somaDistY=None) to create sectionLists based on path distance (somaDist) or y-axis distance (somaDistY) from soma

    [4:05] 
    eg. `netParams.addCellParamsSecList('PYR_rule', 'proximalDends', somaDist=[50,100])` creates a seclist with all sections whose midpoint is between 50 and 100 um from soma

    joe [4:09 PM] 
    Interesting, thanks.  I’ll play around.


* 2017-10-05 -- Glutamate puffing

** TODO

Start working with spine density and glutamate puffs
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Glutamate puffing

Working in /u/graham/projects/eee/sim/batches/batch_gmax/

I want to be able to specify a location (glutLoc) along the basal dendrite 
where a "puff of glutamate" is released.  

That "glutamate" should activate any spines within a small radius (glutSpread)

Eventually maybe reduce the amount of glut and increase the delay with distance 
from the puff epicenter.

So, given a location along the dendrite, I need to find the spines within a 
given distance.

Right now, I determine the active spines using their ID number:

    activeSpineNums = cfg.glutSpine + np.arange(cfg.glutSpread)

Instead, I want to do it based on their 'topol' 'parentX'

Adding print statements to netParams to see parent/child of secs

    # apply values to parameters
    for cell_label, cell_params in netParams.cellParams.iteritems():
        for secName,sec in cell_params['secs'].iteritems(): 
            sec['vinit'] = -75.0413649414  # set vinit for all secs
            if "neck" in secName:
                diam = cellRule['secs'][secName]['geom']['diam']
                leng = cellRule['secs'][secName]['geom']['L']
                if hasattr(cfg, 'Rneck'):
                    cellRule['secs'][secName]['geom']['Ra'] = cfg.Rneck * 100 * 3.1416 * (diam/2) * (diam/2) / leng
            print
            print(secName)
            print("parentX = %f" % (sec['topol']['parentX']))
            print("childX  = %f" % (sec['topol']['childX']))
            print

When I execute netParams.py, the output is a long list like this:

    neck_7
    parentX = 0.031128
    childX  = 0.000000

    head_90
    parentX = 1.000000
    childX  = 0.000000

    ...

Adding the following to cfg.py:

    cfg.glutLoc    = 0.5  
    cfg.glutSpread = 0.005

And the following to netParams:

    for cell_label, cell_params in netParams.cellParams.iteritems():
        for secName,sec in cell_params['secs'].iteritems(): 
            sec['vinit'] = -75.0413649414  # set vinit for all secs
            if "neck" in secName:
                neckLoc = sec['topol']['parentX']
                if neckLoc > cfg.glutLoc-cfg.glutSpread and neckLoc < cfg.glutLoc+cfg.glutSpread:
                    print
                    print(cell_label)
                    print(secName)
                    print("parentX = %f" % (sec['topol']['parentX']))

The output from executing netParams is:

    eee7us
    neck_128
    parentX = 0.501946

    eee7us
    neck_127
    parentX = 0.498054

    eee7ps
    neck_129
    parentX = 0.500000

    eee7ps
    neck_128
    parentX = 0.496711

    eee7ps
    neck_130
    parentX = 0.503289

Perfect!  This shows the effect of different spine densities: in uniform dist,
2 spines would be activated, in physio dist, 3 spines would be.

Before, the total glutAmp was divided by the number of spines activated
from cfg.py:

    'weight': [cfg.glutAmp/cfg.glutSpread, cfg.glutAmp/cfg.glutSpread]

Now glutSpread isn't the number of spines, but the distance it spreads, so I'll 
remove the factoring for now (may want to do in the future):

    'weight': [cfg.glutAmp, cfg.glutAmp]

Now fixing up netParams...




* 2017-10-06 -- Glutamate puffing

** TODO

Finish spine density and glutamate puffs
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Glutamate puffing

Working in batches/batch_gmax/netParams.py

Adding a dictionary to hold active spines (necks and heads) for each cell:

    activeSpines = {}
    for cell_label, cell_params in netParams.cellParams.iteritems():
        activeSpines[cell_label] = {}
        activeSpines[cell_label]['activeSpineNecks'] = []
        activeSpines[cell_label]['activeSpineHeads'] = []
        for secName,sec in cell_params['secs'].iteritems():         
            if "neck" in secName:
                neckLoc = sec['topol']['parentX']
                if neckLoc > cfg.glutLoc-cfg.glutSpread and neckLoc < cfg.glutLoc+cfg.glutSpread:
                    activeSpines[cell_label]['activeSpineNecks'].append(secName)
                    activeSpines[cell_label]['activeSpineHeads'].append("head_" + secName.split('_')[1])

After executing netParams:

    In [2]: from pprint import pprint

    In [3]: pprint(activeSpines)
    {'eee7ps': {'activeSpineHeads': ['head_129', 'head_128', 'head_130'],
                'activeSpineNecks': ['neck_129', 'neck_128', 'neck_130']},
     'eee7us': {'activeSpineHeads': ['head_128', 'head_127'],
                'activeSpineNecks': ['neck_128', 'neck_127']}}

So that works.  Now to use the dict to apply stim to the active spines.

    for nslabel in [k for k in dir(cfg) if k.startswith('NetStim')]:
        ns = getattr(cfg, nslabel, None)

        cur_pop = ns['pop']
        activeSpineHeads = activeSpines[cur_pop]['activeSpineHeads']
        activeSpineNecks = activeSpines[cur_pop]['activeSpineNecks']
        numActiveSpines = len(activeSpineHeads)

        if ns['sec'] == 'spineheads':
            ns['sec']  = activeSpineHeads
            cur_weight = [cfg.glutAmp for head in activeSpineHeads]
            cur_loc    = 0.99999
            cur_delay  = [cfg.glutDelay for head in activeSpineHeads]
        elif ns['sec'] == 'spinenecks':
            ns['sec']  = activeSpineNecks
            cur_weight = [cfg.glutAmp * cfg.spillFraction for neck in activeSpineNecks]
            cur_loc    = 0.00001
            cur_delay  = [cfg.glutDelay + cfg.spillDelay for neck in activeSpineNecks]
        else:
            print("######################################################")
            print("NetStim sec needs to be 'spineheads' or 'spinenecks'")
            print("######################################################")

        # add stim source
        netParams.stimSourceParams[nslabel] = {'type': 'NetStim', 'start': ns['start'], 'interval': ns['interval'], 'noise': ns['noise'], 'number': ns['number']}

        # connect stim source to target
        for i in range(len(ns['synMech'])):
            netParams.stimTargetParams[nslabel+'_'+cur_pop+'_'+ns['synMech'][i]] = \
                {'source': nslabel, 'conds': {'pop': ns['pop']}, 'sec': ns['sec'], 'synsPerConn': numActiveSpines, 'loc': cur_loc, 'synMech': ns['synMech'][i], 'weight': cur_weight, 'delay': cur_delay}

Okay, time to take it our for a spin(e).  ;)

Getting an error:

    graham-mac% eee ; cd batches/batch_gmax ; ipython -i netParams.py
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_gmax/netParams.py in <module>()
        105 
        106         cur_pop = ns['pop']
    --> 107         activeSpineHeads = activeSpines[cur_pop]['activeSpineHeads']
        108         activeSpineNecks = activeSpines[cur_pop]['activeSpineNecks']
        109         numActiveSpines = len(activeSpineHeads)

    TypeError: unhashable type: 'list'

Problem seems to be that ns['pop'] is returning a list, not a string.

Changing this: cur_pop = ns['pop']
to this:       cur_pop = ns['pop'][0]

Now netParams executes without error.  :)

Time to run batches and plot results:
    graham-mac% eee ; cd batches/batch_gmax ; ./runmybatches
    graham-mac% eee ; cd batches/batch_gmax ; ipython -i analyze.py

Executes fine and plots, but getting depol block (makes sense since we are
activating multiple spines without reducing glutamate amplitude)

** Playing with glutAmp

Actually, the problem seems to be that glutAmp is being varied from 8.0 to 20.0
(looking at output figures).  Need to figure out how that happened (normally
glutAmp is 0.04 to 0.1).

The problem was in my_batches:

    numsyns = cfg.glutSpread  (from when glutSpread was the number of spines activated)
    ...  
    params["glutAmp"] = list(np.array(glutAmps) / numsyns)  

Now, glutSpread is the fraction of branch length that gets spines activated.

I removed numsyns and changed batch: params["glutAmp"] = glutAmps

Running again.

glutAmp is now the proper values, but still getting depol blockade, again it
makes sense since we are activating multiple spines without reducing glutamate 
amplitude.

Currently:
    glutAmps = [0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1]

But even at 0.04, there is depol blockade in eee7ps.  Trying a new range:

    glutAmps = [0.0025, 0.0050, 0.0075, 0.0100, 0.0125, 0.0150, 0.0175, 0.0200]

Much too low.  Trying a nice wide range that I can reduce to a good one:

    glutAmps = [0.0125, 0.0150, 0.0175, 0.0200, 0.0225, 0.0250, 0.0275, 0.0300, 0.0325, 0.0350, 0.0375]

Will leave off the lowest and the three highest values.

    glutAmps = [0.0150, 0.0175, 0.0200, 0.0225, 0.0250, 0.0275, 0.0300]

Looks good!

** Running some batches of sims

Batches:

    # Varying glutamate stim amplitude (1D batch)
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = glutAmps
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim location (1D batch)
    batch = {}
    batch["label"] = "glutLoc"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutLoc"] = [0.1, 0.3, 0.5, 0.7, 0.9]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutamate stim amplitude and location (2D batch)
    batch = {}
    batch["label"] = "glutAmp_glutLoc"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = glutAmps
    params["glutLoc"] = [0.1, 0.3, 0.5, 0.7, 0.9]
    batch["params"] = params
    batches[batch["label"]] = batch

Results are a bit inconsistent.  Seems it's because the glut locations are 
hitting between 0 and 4 spines, which is probably too few.

I had arbitrarily set 
    cfg.glutSpread = 0.005 # fraction of branch, not microns

    200 um branch * 0.005 = 1 um

I think 10 um seems more reasonable.  Also, would be easier to set it in microns
instead of fraction of a branch.  

And I'll define glutSpread as the diameter of the "glutamate puff":

    cfg.glutSpread = 10 # microns, diameter of glutamate puff

Changing netParams from:

    if neckLoc > cfg.glutLoc-cfg.glutSpread and neckLoc < cfg.glutLoc+cfg.glutSpread:

To:

    if neckLoc > cfg.glutLoc-(cfg.glutSpread/(2*200.)) and neckLoc < cfg.glutLoc+(cfg.glutSpread/(2*200.)):

The 200 is the hard-coded length of Bdend1, so if branch length is changed, 
this will need to be changed too.  The 2 is to make it a radius from the loc.

** Playing with glutAmp again

#glutAmps = [0.00150, 0.00175, 0.00200, 0.00225, 0.00250, 0.00275, 0.00300]
#glutAmps = [0.007, 0.008, 0.009, 0.010, 0.012, 0.013, 0.014]
#glutAmps = [0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007]
glutAmps = [0.0035, 0.004, 0.0045, 0.005, 0.0055, 0.006]



* 2017-10-09 -- Glutamate puffing delay/decay 

** TODO

Finish spine density and glutamate puffs
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Glutamate puffing

Plateau response peaks in eee7ps at about loc 0.3 (where spine density is
highest), and getting depol block at fairly low glutAmp levels.  

Will add:

    glutDelay (to delay activation time of spine based on distance from 
    glutamate puff center)

    glutDecay (to drop off activation amplitude (weight) hitting spine
    based on distance from glutamate puff center)

** glutDelay

Currently, glutDelay is a constant 1.0 ms. I want to change it to depend on
distance of spine from glut puff:

spine_act_time = glutDelay (ms/um) * distance_from_puff (um)

cfg:
    cfg.glutDelay  = 1.0    # ms/um delay in glutamate activation

Adding calculations to netParams:
    activeSpines[cell_label]['spineDelay']  = []
    distance = 200. * np.abs(cfg.glutLoc-neckLoc)
    activeSpines[cell_label]['spineDelay'].append(distance*cfg.glutDelay))

    spineDelays = activeSpines[cur_pop]['spineDelay']

    if ns['sec'] == 'spineheads':
        ns['sec']  = activeSpineHeads
        cur_delay  = spineDelays #[cfg.glutDelay for head in activeSpineHeads]
    

** glutDecay

cfg:
    cfg.glutDecay  = 10.0   # %/um decrease in glutamate amplitude 

Adding calculations to netParams:
    activeSpines[cell_label]['spineWeight'] = []
    distance = 200. * np.abs(cfg.glutLoc-neckLoc)
    if (cfg.glutDecay * distance) < 100.0:
        spineWeight = cfg.glutAmp * ((100.0 - (cfg.glutDecay * distance))/100.0)
    else:
        spineWeight = 0.0
    activeSpines[cell_label]['spineWeight'].append(spineWeight)

    spineWeights = activeSpines[cur_pop]['spineWeight']

    if ns['sec'] == 'spineheads':
        ns['sec']  = activeSpineHeads
        cur_weight = spineWeights #[cfg.glutAmp for head in activeSpineHeads]
            


** Testing glutDelay and glutDecay

Added at bottom of netParams:

        print
        print("===============================================")
        print("cur_pop   = %s" % (cur_pop))
        print("glutAmp   = %f" % (cfg.glutAmp))
        print("glutLoc   = %f" % (cfg.glutLoc))
        print("numSpines = %f" % (numActiveSpines))
        print("weights   = ")
        print(cur_weight)
        print("delays    = ")
        print(cur_delay)
        print("===============================================")

After much fixing, output looks from executing netParams looks good:

    ===============================================
    cur_pop   = eee7us
    glutAmp   = 0.002000
    glutLoc   = 0.500000
    numSpines = 12.000000

    head_129
      weight = 0.001767
      delay  = 1.167315
    head_128
      weight = 0.001922
      delay  = 0.389105
    head_127
      weight = 0.001922
      delay  = 0.389105
    head_126
      weight = 0.001767
      delay  = 1.167315
    head_125
      weight = 0.001611
      delay  = 1.945525
    head_124
      weight = 0.001455
      delay  = 2.723735
    head_123
      weight = 0.001300
      delay  = 3.501946
    head_122
      weight = 0.001144
      delay  = 4.280156
    head_130
      weight = 0.001611
      delay  = 1.945525
    head_131
      weight = 0.001455
      delay  = 2.723735
    head_132
      weight = 0.001300
      delay  = 3.501946
    head_133
      weight = 0.001144
      delay  = 4.280156
    ===============================================

    ===============================================
    cur_pop   = eee7ps
    glutAmp   = 0.002000
    glutLoc   = 0.500000
    numSpines = 15.000000

    head_129
      weight = 0.002000
      delay  = 0.000000
    head_128
      weight = 0.001868
      delay  = 0.657895
    head_127
      weight = 0.001737
      delay  = 1.315789
    head_126
      weight = 0.001605
      delay  = 1.973684
    head_125
      weight = 0.001474
      delay  = 2.631579
    head_124
      weight = 0.001342
      delay  = 3.289474
    head_123
      weight = 0.001211
      delay  = 3.947368
    head_122
      weight = 0.001079
      delay  = 4.605263
    head_134
      weight = 0.001342
      delay  = 3.289474
    head_135
      weight = 0.001211
      delay  = 3.947368
    head_136
      weight = 0.001079
      delay  = 4.605263
    head_130
      weight = 0.001868
      delay  = 0.657895
    head_131
      weight = 0.001737
      delay  = 1.315789
    head_132
      weight = 0.001605
      delay  = 1.973684
    head_133
      weight = 0.001474
      delay  = 2.631579
    ===============================================

** Running batches and plotting analysis

graham-mac% eee ; cd batches/batch_gmax ; ./runmybatches
graham-mac% eee ; cd batches/batch_gmax ; ipython -i analyze.py

Looks good, but need higher glutAmps now.



* 2017-10-10 -- Generating figures

** TODO

Finish spine density and glutamate puffs
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios


** Improved print statements in netParams 

sorted spineheads, printing weight as percentage of glutAmp

        print
        print("===============================================")
        print("cur_pop   = %s" % (cur_pop))
        print("glutAmp   = %f" % (cfg.glutAmp))
        print("glutLoc   = %f" % (cfg.glutLoc))
        print("numSpines = %f" % (numActiveSpines))
        print
        zipped = zip(activeSpineHeads, cur_weight, cur_delay)
        zipped.sort(key = lambda x: x[0])
        for spine, weight, delay in zipped:
            print(spine)
            print("  weight (%%) = %f" % (100*weight/cfg.glutAmp))
            print("  delay (ms) = %f" % (delay))
        print("===============================================")


** Finding good glutamate amplitude range

Moving glutLoc to 0.3 (max effect in eee7ps)

glutAmps = [0.007, 0.008, 0.009, 0.010, 0.012, 0.013, 0.014]

  eee7us good through all, eee7ps good through 0.007

glutAmps = [0.004, 0.0045, 0.0050, 0.0055, 0.0060, 0.0065, 0.0070]

** Exploring parameter space with batch sims

# Varying glutamate stim amplitude (1D batch)
batch = {}
batch["label"] = "glutAmp"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["glutAmp"] = glutAmps
batch["params"] = params
batches[batch["label"]] = batch

# Varying glutamate stim location (1D batch)
batch = {}
batch["label"] = "glutLoc"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["glutLoc"] = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
batch["params"] = params
batches[batch["label"]] = batch

# Varying ratioAMPANMDA (1D batch)
batch = {}
batch["label"] = "ratioAMPANMDA"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["ratioAMPANMDA"] = [0.02, 0.2, 1.0, 2.0, 3.0, 4.0, 10.0]
batch["params"] = params
batches[batch["label"]] = batch

# Varying glutSpread -- default 10.0 microns, diameter of glutamate puff (1D batch)
batch = {}
batch["label"] = "glutSpread"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["glutSpread"] = [1.0, 2.5, 5.0, 10.0, 20.0]
batch["params"] = params
batches[batch["label"]] = batch

# Varying glutDelay -- default 1.0 ms/um delay in glutamate activation (1D batch)
batch = {}
batch["label"] = "glutDelay"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["glutDelay"] = [0.0, 1.0, 2.5, 5.0, 10.0]
batch["params"] = params
batches[batch["label"]] = batch

# Varying glutDecay -- default 10.0 %/um decrease in glutamate amplitude (1D batch)
batch = {}
batch["label"] = "glutDecay"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["glutDecay"] = [0.0, 5.0, 10.0, 15.0, 20.0]
batch["params"] = params
batches[batch["label"]] = batch

# Varying glutamate stim amplitude and location (2D batch)
batch = {}
batch["label"] = "glutAmp_glutLoc"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["glutAmp"] = glutAmps
params["glutLoc"] = [0.1, 0.3, 0.5, 0.7, 0.9]
batch["params"] = params
batches[batch["label"]] = batch


** Would like to record from spine nearest glutamate puff

Will look into later.  

** EEE Meeting

Joe added glutamate dynamics:
    spread (um diameter of glutamate puff)
    decay  (percent/um decay in glutamate amplitude (NMDA/AMPA weight))
    delay  (ms/um delay in activating spines away from glutamate epicenter)

Bill: work on getting plateaus to look better like before glutamate dynamics
      plot plateau overlay for new model


* 2017-10-12 -- Loss of plateaus

** TODO

Generate figures for EEE using new settings
Find glutamate dynamics settings that improve plateaus
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Exploring the glutamate dynamics

First looking into Sergio's problem with lack of plateaus


** Looking into plateaus without Na (mimic TTX)

Adding to cfg:

    # Sodium and potassium conductance scaling
    cfg.dendNaScale = 1.0 # Scales dendritic Na conductance
    cfg.dendKScale  = 1.0 # Scales dendritic K conductance
    cfg.allNaScale  = 0.0 # Scales all Na conductances (overrides dendNaScale if not commented)
    cfg.allKScale   = 0.0 # Scales all K conductances  (overrides dendKScale if not commented)

Adding to netParams:

    for secName,sec in cell_params['secs'].iteritems(): 
        sec['vinit'] = -75.0413649414  # set vinit for all secs
        
        if hasattr(cfg, 'allNaScale') or hasattr(cfg, 'dendNaScale'):
            if 'nax' in sec['mechs']:
                orig_nax = sec['mechs']['nax']['gbar']
                print
                print(secName)
                print("orig nax gbar")
                print(orig_nax)
                if hasattr(cfg, 'dendNaScale'):
                    print('dendNaScale = %s' % (str(cfg.dendNaScale)))
                    sec['mechs']['nax']['gbar'] = cfg.dendNaScale * orig_nax       
                if hasattr(cfg, 'allNaScale'):
                    print('allNaScale = %s' % (str(cfg.allNaScale)))
                    sec['mechs']['nax']['gbar'] = cfg.allNaScale * orig_nax
                print(sec['mechs']['nax']['gbar'])
        
        if hasattr(cfg, 'allKScale') or hasattr(cfg, 'dendKScale'):
            if 'kdr' in sec['mechs']:
                orig_kdr = sec['mechs']['kdr']['gbar']
                print
                print(secName)
                print("orig kdr gbar")
                print(orig_kdr)
                if hasattr(cfg, 'dendKScale'):
                    print('dendKScale = %s' % (str(cfg.dendKScale)))
                    sec['mechs']['kdr']['gbar'] = cfg.dendKScale * orig_kdr
                if hasattr(cfg, 'allKScale'):
                    print('allKScale = %s' % (str(cfg.allKScale)))
                    sec['mechs']['kdr']['gbar'] = cfg.allKScale * orig_kdr
                print(sec['mechs']['kdr']['gbar'])
            
            if 'kap' in sec['mechs']:
                orig_kap = sec['mechs']['kap']['gbar']
                print
                print(secName)
                print("orig kap gbar")
                print(orig_kap)
                if hasattr(cfg, 'dendKScale'):
                    print('dendKScale = %s' % (str(cfg.dendKScale)))
                    sec['mechs']['kap']['gbar'] = cfg.dendKScale * orig_kap
                if hasattr(cfg, 'allKScale'):
                    print('allKScale = %s' % (str(cfg.allKScale)))
                    sec['mechs']['kap']['gbar'] = cfg.allKScale * orig_kap
                print(sec['mechs']['kap']['gbar'])

Tested and it works.

Added to my_batches:

    # Turning Na conductance on and off (TTX) (1D batch)
    batch = {}
    batch["label"] = "allNaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["allNaScale"] = [0.0, 1.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Aaaand running:

    graham-mac% eee ; cd batches/batch_gmax ; ./runmybatches

And yeah, the plateaus aren't as good.  The question is why.

Looking through the gif folder, I see that we used to have quite nice 
plateaus:

    20170921_110350.png

This was before we changed the way to do AMPA/NMDA ratio by adding gmax to the 
mod files...

Also before I started modeling glutamate dynamics.  

Tomorrow first thing I will look into whether the plateau loss is due to:
1) the addition of gmax to NMDA and AMPA mod files
2) the addition of glutamate dynamics


** Trying to match Penny's code and Netpyne

*** Chat with Penny and Sergio

    penny [7:14 AM] 
    https://peng_gao_penny@bitbucket.org/peng_gao_penny/eee_detailed_model.git

    [7:14] 
    would this work?

    sergio [7:14 AM] 
    mmm nop

    penny [7:14 AM] 
    oops, still no...give me a minute

    [7:16] 
    bitbucket is private repo, I am not sure how to set it up correctly yet. I send an email to you for sharing

    sergio [7:16 AM] 
    thanks Penny, I got the invitation

    penny [7:18 AM] 
    Cool, let me know if u can't see it. I haven

    [7:18] 
    I haven't added description yet. The file with all the parameters is Experiment_10_04.py

    [7:18] 
    I used 8 (AMPA + NMDA - same weights) synapses, distributed evenly from basal location 0.4-0.7. Then I added another 8 NMDAR to represent extrasyanptic NMDAR, also distributed evenly from 0.4-0.7.

    [7:19] 
    AMPA gmax = 0.2; NMDA gmax = 0.1, or AMPA gmax = 0.1; NMDA gmax = 0.05

    [7:20] 
    . I didn't get good results with the AMPA gmax =2, NMDA gmax = 1 (even adjusting the synaptic weight to be super small - I need to figure out why, not sure yet:joy:)

    sergio [7:22 AM] 
    perfect

    [7:22] 
    let me navigate through the file

    penny [7:22 AM] 
    Also I am increasing the Cdur of NMDA linearly with Glu stimulation strength, it didn't change the result much, but it sounds reasonable for the hypothesis. LOL

    [7:22] 
    Cool

    [7:25] 
    Oops! Sergio, give me one more minute... this is not the latest file. Sorry sorry

    [7:26] 
    Let me add the latest one...:cold_sweat:

    sergio [7:26 AM] 
    np

    penny [7:28 AM] 
    Sorry sorry, "Experiment_10_09.py" is the new one

    [7:29] 
    I just uploaded. I really need to organize the repo better:sweat_smile:

    sergio [7:32 AM] 
    I jut pulled the last changes, thanks penny

    penny [7:37 AM] 
    np

    sergio [10:14 AM] 
    Penny, just a question, your model uses CA229.hoc, but I couldn’t that file in your repo. Do you have that file?

    penny [10:21 AM] 
    Yes~ Let me upload them. I didn't upload mod files either. I will do both now.

    sergio [10:25 AM] 
    thanks penny

    penny [10:25 AM] 
    I uploaded them all.        In terminal: python compile.py        to run mod file

    [10:26] 
    Then modify the main part of  Experiment_10_09.py to generate the stimulation. They will saved in a folder with today's date

    [10:26] 
    Let me know if there is any problem.

    sergio [10:36 AM] 
    ok penny

    sergio [12:59 PM] 
    I ran your model just using NEURON/python and it works great

    [12:59] 
    but I’m having issues with netpyne

    [1:00] 
    I compiled the cell with your mod files

    [1:00] 
    but I cannot make the cell to have nice spikes

    joe [1:16 PM] 
    uploaded this image: 2017-10-12 06.48.24.jpg
    Add Comment

    joe [1:16 PM] 
    uploaded this image: 2017-10-12 09.12.26.jpg
    Add Comment

    penny [1:17 PM] 
    I used to have some problem compiling this model in NetPyne before. It was solved by switching to the developer version of NetPyne ( suggested by Salva). After that, I decide to run and test everything with NEURON first, then compile with NetPyne in the end

    [1:17] 
    Wow!

    joe [1:17 PM] 
    uploaded this image: 2017-10-12 12.12.47.jpg
    Add Comment

    joe [1:17 PM] 
    Sorry about the delay.  Back at work now with a filled-in sunken living room!

    penny [1:17 PM] 
    That is sooooo cool!
    [1:18] 
    Love your window! HUGE~~~ a lot of sun light!

    joe [1:18 PM] 
    It’s a great house.  It’s just that it hasn’t been improved since it was built in ’79!

    [1:18] 
    (Same year I was built…)

    [1:19] 
    I’m going to make sure that I get plateaus in my model right now…

    sergio [1:19 PM] 
    ohhh

    penny [1:19 PM] 
    lol~

    sergio [1:20 PM] 
    nice job Joe

    sergio [1:21 PM] 
    added this Plain Text snippet: no mechs
    >>> sim.net.cells[0].secs.soma_2 
    {hSec: <netpyne.cell.CompartCell object at 0x7fc915866150>.soma_2, geom: {diam: 9.75, cm: 1.0, nseg: 1, L: 2.5900001525878906, Ra: 35.4, pt3d: [(-54.060001373291016, -1.659999966621399, -5.960000038146973, 11.510000228881836), (-54.060001373291016, -4.25, -5.960000038146973, 7.989999771118164)]}, topol: {childX: 0.0, parentSec: 'soma_1', parentX: 1.0}}
    Add Comment

    sergio [1:21 PM] 
    it seems that netpyne is not inserting any mech

    penny [1:25 PM] 
    added and commented on this Plain Text snippet
    cellRule = netParams.importCellParams(label='PFC_full',conds={'cellType': 'PFC', 'cellModel': 'PFC_full'},
     fileName='CA229_PFC.py', cellName='MakeCA229')                              
    1 Comment
    Did u use MakeCA229 for CellRule?

    penny [1:27 PM] 
    The CA229 class in the file is not initialized with mech. Use "MakeCA229" class instead

    sergio [1:27 PM] 
    ok

    [1:27] 
    I haven’t done that

    joe [1:27 PM] 
    Hey Penny, I can’t access your Bitbucket.  Would you mind sharing with me?

    joe [1:31 PM] 
    Thanks, got access now.

    penny [1:31 PM] 
    Experiment_10_09.py is the latest file

    [1:31] 
    Cool



* 2017-10-13 -- Plateaus, Penny's code into Netpyne

** TODO

Figure out loss of plateau
Generate figures for EEE using new settings
Find glutamate dynamics settings that improve plateaus
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Figuring out plateau loss

I am archiving the batch_data and batch_figs dirs in batch_plat_overlay dir.
(I add an underscore to the end of the dirname --> no overwriting)

The only difference between this setup and the good plateaus on 09/21 should 
be the addition of gmax to NMDA and AMPA mod files.

Running control sim:
    graham-mac% eee ; cd batches/batch_plat_overlay ; ./runmybatches

Changing sim to NaBlock:
In my_batches:
    batch["label"] = "NaBlock"
In cfg:
    cfg.activeNa_off = True

Running NaBlock sim:
    graham-mac% eee ; cd batches/batch_plat_overlay ; ./runmybatches

Adding code to batch_plat_overlay/analyze.py:
    batch_analysis.plot_antic_plateaus("Control")
    batch_analysis.plot_antic_plateaus("NaBlock")

Plotting:
    graham-mac% eee ; cd batches/batch_plat_overlay ; ipython -i analyze.py

Plateaus look good.  My plateau loss must be due to the glutamate dynamics
I added.

file:gif/20171013_065152.png

I'll check into Sergio's code to see if I can figure out why he's not 
getting plateaus.

** Checking out Sergio's plateaus

Chat from yesterday:
    sergio [7:04 AM] 
    my repo is at /u/sergioangulo/projects/eee

    [7:05] 
    files for sim are located at /u/sergioangulo/projects/eee/sim/singlecell/

mkdir serg_eee; cd serg_eee
hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee
cd eee/sim/mod
mkmod
cd ..
./runbatch

Serg's code doesn't seem to have produced output...

Debugging:
    graham-mac% cd serg_eee/eee/sim/singlecell/
    graham-mac% ipython -i netParams.py

Gives an error:
    LookupError: 'erev_ih' is not a defined hoc variable name.

Ahh, it's because there is no symlink to the x86_64 dir in the singlecell dir...

It looks like Serg runs 'compile' in his 'sim' dir to create symlinks.

    graham-mac% cd serg_eee/eee/sim/
    graham-mac% ./compile

Now it appears.  

    graham-mac% cd serg_eee/eee/sim/singlecell/
    graham-mac% ./runbatch

Still no output data (but the output dir appeared!).  Debugging.


** Chatting about plateaus

My plateaus are good (from before glutamate)

*** Chat in #eee-theory

    joe [7:07 AM] 
    uploaded and commented on this image: 20171013_065152.png
    1 Comment
    My plateaus still look good (before I added glutamate dynamics).  I’m looking into Sergio’s code to see if I can find the problem.

    billl [7:09 AM] 
    which ones are good?

    [7:09] 
    just show a good plateau --do what serg did and block na spikes

    [7:10] 
    btw do you save data or only figs? -- good to save data so can gen new figs except in some cases may be too big

    joe [7:16 AM] 
    I don’t really ‘save’ data, but I don’t delete it locally.  If I want to re-run something, I ‘archive’ the `batch_data` dir by adding an underscore: `batch_data_`…  Making fig now.

    billl [7:17 AM] 
    don't save but don't delete -- that's a paradox

    joe [7:19 AM] 
    One of the mysteries of the universe.  :wink:  How would you save data?  Not in repo, right?

    joe [7:20 AM] 
    uploaded and commented on this image: 20171013_071820.png
    1 Comment
    Left: control
    Right: Na block

    new messages
    billl [7:21 AM] 
    just 1 plat please

    [7:22] 
    a good one

    joe [7:32 AM] 
    uploaded this image: 20171013_073206.png
    Add Comment

    billl [7:40 AM] 
    hmmm ... those look similar to what serg was showing? -- not flat; gradual decay

    [7:40] 
    @penny -- can you show them a nice one

    [7:41] 
    or joe can you show the expt one -- guess can't isolate it since we have no data

    joe [7:49 AM] 
    uploaded and commented on this image: 20170921_110350.png
    1 Comment
    It’s the same plateau we’ve had for some time now.  Looks better in this figure because y-axis is the same.  There is a gradual decline, but also clearly a plateau…

    billl [7:50 AM] 
    well let's compare with penny's -- i was thinking hers looks better?  -- anyway to show me experimental one?

    penny [7:52 AM] 
    uploaded and commented on this image: Soma.png
    1 Comment
    Joe's figure is nice, the difference we have is the last spike.

    penny [7:53 AM] 
    uploaded this image: Exp.png
    Add Comment

    joe [7:53 AM] 
    Can you do the same figure with Na blocked?

    penny [7:54 AM] 
    I don't have that long plateau in experiments, but Joe's sim does.

    [7:54] 
    Okay~

    joe [7:54 AM] 
    uploaded and commented on this image: Most relevant data from Srdjan
    1 Comment
    There is a slight decline during the plateau, like in our sims…

    billl [8:00 AM] 
    yeah not bad -- is that typical? -- of course he draws it much more square :)

    [8:00] 
    also was remembering (or misremembering) him showing us some very square ones where we had disucssion of how the turn-off side could get so squared off

    [8:01] 
    is there a decline in the plat in those cases with the squared off as well? -- guess he didn't post those slides here?  he just showed us via hangout i think?

    [8:02] 
    ok well let's move forward with what we've got here and try to work out our "standard plat" so we can compare when we make changes to make sure not being changed out of plattishness

    joe [8:02 AM] 
    uploaded and commented on this file
    20170924_EEE_Basics_2.pdf
    2MB
    PDF
     Click to view
    2 Comments
    Here’s all the figures Srdjan sent us.  It was via email, I think.

    billl [8:04 AM] 
    oh great

    penny [8:04 AM] 
    uploaded and commented on this image: TTX_Soma.png
    1 Comment
    This is the sodium block. No plateau here.

    billl [8:05 AM] 
    yeah that looks like a NMDA spike;  can you find that square one or was i imaginng that?

    [8:06] 
    guess maybe B on slide 8?

    [8:06] 
    or the ones on 3 and 4

    [8:06] 
    ?

    [8:06] 
    anyway square seems unusual so the one you have joe looks very good

    salvadord [8:06 AM] 
    commented on joe’s file 20170924_EEE_Basics_2.pdf
    oh these slides are good, lots of info here — if only we had the actual data…

    billl [8:07 AM] 
    yeah some data!

    [8:07] 
    i'll call him again mon or tues

    salvadord [8:07 AM] 
    guess can actually extract most of it from figs in slides with that online program

    penny [8:07 AM] 
    uploaded and commented on this image: Screen Shot 2017-09-26 at 11.38.44 AM.png
    1 Comment
    Square one?

    billl [8:09 AM] 
    yeah that's pretty square -- i'm guessing that these square ones are due to heading up slowly towards another spike but not reaching thresh before the plat ends

    joe [8:10 AM] 
    That’s what it looks like to me too.

    billl [8:10 AM] 
    the inc before drop is not as steep as the other predepols but could be since reaching a lower spiking rate

    [8:11] 
    also never see squares when have Na block? ; yeah ok so would be cool to get that squaring sometime (and could find out if our explanation is correct) but not a critical feature


** Looking into Sergio's code

Digging around in Sergio's code...

*** Chat

    joe [7:33 AM] 
    I think I found your problem, Sergio.

    sergio [7:33 AM] 
    hey Joe

    joe [7:33 AM] 
    Good morning!

    [7:34] 
    You’re still handling the AMPA/NMDA ratio by putting in different weights, but Bill added gmax to the mod files to handle the ratio.

    sergio [7:36 AM] 
    yep, I haven’t done the change. So basically, I need to set the weight  to 1, and then modify the gmax?

    joe [7:39 AM] 
    added and commented on this Plain Text snippet
    From my cfg.py:
    cfg.NMDAgmax    = 1.0
    cfg.ratioAMPANMDA = 2.0
    From my netParams.py:
    h.gmax_NMDA = cfg.NMDAgmax
    h.gmax_AMPA = cfg.ratioAMPANMDA * cfg.NMDAgmax
    And then, yeah, you put the same weight into AMPA and NMDA.
    1 Comment Collapse
    Try this and see if your plateaus are better.

    sergio [7:40 AM] 
    ok thanks Joe

    joe [7:40 AM] 
    Don’t thank me yet!  I’m not completely sure this is the problem… :sweat_smile:

    sergio [7:40 AM] 
    :+1::grimacing:

    sergio [9:34 AM] 
    I am trying to use the detailed model with netpyne, but something is not working

    sergio [9:34 AM] 
    uploaded this image: compile with mod files from penny's model
    1 Comment

    sergio [9:35 AM] 
    This is an iclamp

    sergio [9:35 AM] 
    I tried to see if I can work with mod files from central repo

    [9:36] 
    but the cell fires all the time

    sergio [9:36 AM] 
    uploaded this image: compiled with central repo
    Add Comment

    penny [9:37 AM] 
    Yes yes, I had that problem before... Salva couldn't figure out why either. It was solved by the switching to the developer version of NetPyne in the end. Mysterious...

    [9:38] 
    I can't figure out why:joy:

    sergio [9:39 AM] 
    ohh noo, it seems modeling has a lot of mysteries! :grin:

    [9:40] 
    but I’m using zn

    [9:40] 
    let me check if it’s updated

    penny [9:40 AM] 
    okay!

    sergio [12:06 PM] 
    I re-checked netpyne, but it is supposed to be working fine

    [12:07] 
    still have the weird response

    penny [12:24 PM] 
    Maybe the way I set up the model is not correct for NetPyne. Very strange

    sergio [12:29 PM] 
    I think it is something on netpyne that doesn’t recognize some mod files

    penny [12:39 PM] 
    Hmm, make sense. Sorry, I can't help much with that. Maybe Bill could solve it

    sergio [12:40 PM] 
    let’s see

    [12:40] 
    do you have the invitation for bill


* 2017-10-17 -- EEE Meeting and Data from Srdjan

** TODO

Penny's code into Netpyne
Figure out good glutamate dynamics
Generate figures for EEE using new settings
Find glutamate dynamics settings that improve plateaus
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** EEE meeting

Got data from Srdjan!  Saving to eee/data/srdjan_20171017/

Srdjan Data-01: 
B_73_004.xlsx

  11 columns, 5001 rows
  Notes from file:
    Gradual Increase in Glutamatergic Input
    There are 10 traces in this file - see spreadsheet. Only 4 traces are plotted in this graph., for clarity. 

Srdjan Data-02: 
B_461_001 sw 8.xlsx
  
  2 columns, 20000 rows
  Notes from file:
    There are 4 sequential events in this experimental paradigm. Current injection was used to trigger somatic AP firing, followed by 3 pulses of glutamate to trigger 3 successive plateau potentials. 

Srdjan Data-03: 
B_461_002 sw 01.xlsx
  
  3 columns, 20000 rows
  Notes from file:
    There are 4 sequential events in this experimental paradigm. Current injection was used to trigger somatic AP firing, followed by 3 pulses of glutamate to trigger 3 successive plateau potentials. Time axis is in seconds. Y-axis is in voltage where 0.2 = 20 mV 


** Penny's code into Netpyne

Salvador fixed Netpyne bug; should be working now.

Updating Netpyne (and other Neurosim repos):
    graham-mac% which nsimupdate
    nsimupdate:    aliased to python /usr/site/nrniv/local/python/nsimrepos.py update
    graham-mac% nsimupdate



*** Chat with Penny and Sergio

    sergio [7:47 AM] 
    hey Penny, I’ve been working on the netpyne model for the detailed cell. I think it was a problem with mod files

    [7:49] 
    but still the netpyne is not as your sims

    sergio [7:50 AM] 
    uploaded this image: tr_trace_V_somaaces_detailedcell_mod6.png
    Add Comment

    sergio [7:50 AM] 
    this is an iclamp wit mod files from the central repo

    penny [7:54 AM] 
    Thanks for checking it. I am also quite confused with the problem. We have to merge the detailed model into netpyne in the end :disappointed: Not sure how to do that

    sergio [9:03 AM] 
    penny, can you share your bitbucket repo with salva?

    penny [10:16 AM] 
    Yes yes, sorry, I was in a seminar, i will do that right now.

    sergio [10:16 AM] 
    don’t worry

    [10:17] 
    salva found the files on your dir on neurosim

    penny [10:17 AM] 
    cool! Great

    sergio [10:27 AM] 
    I make some iclamps with your model penny

    sergio [10:28 AM] 
    uploaded this image: Figure_1.png
    Add Comment

    penny [10:29 AM] 
    that looks pretty good

    [10:29] 
    you got a plateau!

    sergio [10:30 AM] 
    those are just currents clamps to compare with netpyne :grimacing:

    [10:30] 
    but let's see if we can fix this with netpyne

    [10:30] 
    I'm asking salva for help

    penny [10:31 AM] 
    Cool! It is useful. Srdjan has the current induced plateau in soma too

    [10:31] 
    so what did u guys change?

    sergio [10:32 AM] 
    nothing strange, just include a current-clamp

    sergio [10:32 AM] 
    added this Plain Text snippet: current clamp
    def iclamp():
      Cell = CA229()
      Cell.init_once()
      stim = h.IClamp(Cell.soma[2](0.5))
      stim.delay = 200
      stim.dur = 800
      stim.amp = 0.4
      t_vec = h.Vector()
      t_vec.record(h._ref_t)
      v_vec_soma = h.Vector()
      v_vec_soma.record(Cell.soma[2](0.5)._ref_v)
      h.celsius = 32
      h.v_init = -67.3
      h.init()
      h.tstop = 1200
      h.run()
      plt.figure(figsize = (16, 6), dpi = 100)
      plt.plot(t_vec, v_vec_soma, label = 'soma(0.5)', color = 'black')
      plt.ylim([-80, 60])
      plt.xlim([0, 1200])
      #plt.legend(loc = 'best')
      plt.ylabel('mV')
      plt.xlabel('Time (ms)')
      plt.title ('Iclamp'+' '+str(stim.amp)+' nA')
      plt.show()
    Add Comment Collapse

    sergio [10:33 AM] 
    just to compare to the ones with netpyne

    sergio [10:33 AM] 
    uploaded this image: iclamp 0.2 with netpyne
    Add Comment

    penny [10:34 AM] 
    I see. So Figure one is not with netpyne.

    sergio [10:34 AM] 
    yep

    [10:35] 
    that’s how is suppose to be working with netpyne

    penny [10:35 AM] 
    I had the exactly same response from netpyne before. Very strange

    sergio [10:36 AM] 
    very strange

    [10:37] 
    let’s see if salva can find something

    penny [10:37 AM] 
    okay

    joe [1:46 PM] 
    Sorry I missed the meeting.  How was it?

    sergio [1:47 PM] 
    it was ok

    [1:47] 
    bill ws expecting to see the cell working on netpyne

    [1:47] 
    but penny had good sims to show

    joe [1:48 PM] 
    Well, it sounds like Salva just fixed the import problem.

    [1:50] 
    So, in the words of Bill, what do you have now and where do we go from here?

    [1:51] 
    I’m going to update my Netpyne and see if that solves the problem with Penny’s model.

    [1:51] 
    Anything else I can be doing?

    sergio [1:51 PM] 
    sure

    [1:52] 
    let me check the sims with penny’s model

    [1:53] 
    I was about to suggest to penny, if she can use the mod files from the central repository

    joe [1:55 PM] 
    That’s a good idea, it’ll be easier if we are all using the same code.

*** eee-theory channel chat

    sergio [8:29 AM] 
    here is the model for the detailed cell: /u/sergioangulo/projects/eee/sim/detailedCell/

    srdjan2000 [8:29 AM] 
    uploaded and commented on this file
    srdjan data-01
    567kB
    Excel Spreadsheet
     Click to download
    1 Comment
    glutamate microiontophoresis on basal dendrite

    sergio [8:30 AM] 
    repo is: /u/sergioangulo/projects/eee

    billl 
    [8:30 AM] 
    thx srdjan

    srdjan2000 [8:30 AM] 
    uploaded and commented on this file
    srdjan data-02
    567kB
    Excel Spreadsheet
     Click to download
    1 Comment
    glutamate microiontophoresis on basal dendrite, preceeded by direct current injection into cell body

    srdjan2000 [8:31 AM] 
    uploaded and commented on this file
    srdjan data-03
    917kB
    Excel Spreadsheet
     Click to download
    1 Comment

    glutamate microiontophoresis on basal dendrite, preceeded by direct current injection into cell body. Two traces use two different intensities of glut stimulation: subthreshold and suprathreshold.

    salvadord [1:41 PM] 
    fixed issue importing cell — it was due to an obscure bug resulting from using `isinstance()` instead of `type()` (isinstance takes into account inherited classes, so was applied to wrong objects and messed up imported structures)

    [1:41] 
    updated netpyne in neurosim too

    billl [1:41 PM] 
    ah ok

    salvadord [1:42 PM] 
    tested and now import replicates orig cell

    sergio [1:42 PM] 
    thanks salva!

    billl 
    [1:42 PM] 
    was just talking to joe too so let's take this sim and bring it back down to the small cell sim

    salvadord [1:42 PM] 
    np, soryy for the headache :slightly_smiling_face:

    billl 
    [1:44 PM] 
    may have to play it by ear for meeting tomorrrow -- the schedules for this meeting are not at all precise -- but let's see if @sergio and @joe can get soemting and we'll take a look at it preferably on hangouts or else just here on slack

    joe [1:45 PM] 
    Sounds good.  I’ll be online all day tomorrow, so anytime.

    billl 
    [1:45 PM] 
    k thx

    sergio [1:45 PM] 
    me too

    billl 
    [1:46 PM] 
    why don't you take a look at what sergio has now and see where we go from here

    [1:46] 
    6:45 here so i'm off to dinner shortly

** Data from Srdjan

Want code to pull this data into Python.

Data:
eee/data/srdjan_20171017/B_73_004.xlsx
eee/data/srdjan_20171017/B_461_001 sw 8.xlsx
eee/data/srdjan_20171017/B_461_002 sw 01.xlsx

Pandas handles it nicely:

import pandas as pd
filenames = ['B_73_004.xlsx', 'B_461_001 sw 8.xlsx', 'B_461_002 sw 01.xlsx']

data01 = pd.read_excel(filenames[0])
data02 = pd.read_excel(filenames[1])
data03 = pd.read_excel(filenames[2])

data01_t = data01[data01.columns[0]].values.tolist()
data02_t = data02[data02.columns[0]].values.tolist()
data03_t = data03[data03.columns[0]].values.tolist()

data01_v = []

for index,col in enumerate(data01.columns):
    if index != 0:
        data01_v.append(data01[data01.columns[index]].values.tolist())



** Working with Penny's code

Cloning Sergio's repo.

mkdir serg_temp; cd serg_temp; 
hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee; 

cd eee/sim/; ./compile;

Cloning Penny's repo.

mkdir temp_penny; cd temp_penny;
git clone https://joewgraham@bitbucket.org/peng_gao_penny/eee_detailed_model.git



* 2017-10-18 -- Srdjan's data, Penny's code

** TODO

Get Srdjan data into Python
Get Penny's code into Netpyne
Figure out good glutamate dynamics
Generate figures for EEE using new settings
Find glutamate dynamics settings that improve plateaus
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Get Srdjan data into Python

Making a function to import Srdjan data from Excel.

This is functional:

    def import_excel(filename):
        """Imports data from Excel.  Returns a Pandas data frame as well as an 
        array for time and an array for each trace.  Assumes first column is time 
        and remaining columns are traces." 
        """

        import pandas as pd
        import numpy as np
        
        data = pd.read_excel(filename)

        time = data[data.columns[0]].values.tolist()
        time = np.vstack(time) # Converts from 1d list to 2d column array

        traces = np.array([])
        for colind in np.arange(1, len(data.columns), 1):
            print("Column index: %g" % (colind))
            if not traces.any():
                traces = np.vstack(data[data.columns[colind]].values.tolist())
            else:
                traces = np.hstack((traces, np.vstack(data[data.columns[colind]].values.tolist())))

            print("Shape of traces: %s" % str(np.shape(traces)))

        return data, time, traces

** Adding batch_utils and batch_analysis to Python path

I'm tired of having to cd into eee/sim/batches to import batch_utils and 
batch_analysis.  I am going to move these files to eee/sim and then add 
the following to my .tcshrc file:

    ### Added by Joe Graham 2017/10/18
    setenv PYTHONPATH /u/graham/projects/eee/sim:$PYTHONPATH

Importing seems to work.  Now I need to delete defunct symlinks to batch_utils 
and batch_analysis from individual batch dirs.

Done.  Committing now.

** Plotting Srdjan data

Code:
    graham-mac% eee; ipython
    In [1]: import numpy as np; import matplotlib.pyplot as plt; import batch_analysis; import batch_utils
    In [2]: data1, time1, traces1 = batch_utils.import_excel("../data/srdjan_20171017/B_73_004.xlsx")
    In [3]: data2, time2, traces2 = batch_utils.import_excel("../data/srdjan_20171017/B_461_001 sw 8.xlsx")
    In [4]: data3, time3, traces3 = batch_utils.import_excel("../data/srdjan_20171017/B_461_002 sw 01.xlsx")
    In [5]: plt.figure()
    In [6]: plt.plot(time1, traces1)
    In [7]: plt.figure()
    In [8]: plt.plot(time2, traces2)
    In [9]: plt.figure()
    In [10]: plt.plot(time3, traces3)
    In [11]: plt.show()

Output:
    file:gif/20171018_085637.png

** Bill wants to see good plateaus with latest code

Adding glutamate dynamics made the plateaus worse.  Want to set dynamics
parameters to values which produce good plateaus, then explore parameter space.

Copying batch_gmax to batch_glutdyn (for glutamate dynamics)

** Working with Penny's repo

Penny's repo is here:
    https://bitbucket.org/peng_gao_penny/eee_detailed_model

I will clone it into my own repo:
    graham-mac% cd /u/graham/projects/eee/sim/
    graham-mac% mkdir penny
    graham-mac% cd penny
    graham-mac% git clone https://bitbucket.org/peng_gao_penny/eee_detailed_model

Now committing, so changes are tracked.

Had to add mod files to repo and commit again.

Will rename her NMDA mod file and symlink to NMDAeee:

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/mod/          
    graham-mac% hg mv NMDA.mod NMDA.mod_orig
    graham-mac% ln -s /usr/site/nrniv/local/mod/NMDAeee.mod
    graham-mac% hg add /u/graham/projects/eee/sim/penny/eee_detailed_model/mod/NMDAeee.mod

Changed .hgignore to ignore .git stuff and ignore sim/mod (while tracking 
Penny's mod files).

** Getting Penny's latest repo

Copied eee_detailed_model dir to desktop for comparison purposes.  

    graham-mac% cd /u/graham/projects/eee/sim/penny/
    graham-mac% git clone https://bitbucket.org/peng_gao_penny/eee_detailed_model
    graham-mac% hg status
    M .hgignore
    M notebook.org
    M sim/penny/eee_detailed_model/Experiment_10_09.py
    A sim/penny/eee_detailed_model/mod/NMDAeee.mod
    R sim/penny/eee_detailed_model/mod/NMDA.mod
    ! sim/penny/eee_detailed_model/mod/NMDA.mod_orig
    ? sim/penny/eee_detailed_model/README.md
    ? sim/penny/eee_detailed_model/mod/ghk.inc

So I can get rid of the old NMDA mod file and add the README and ghk:

    graham-mac% hg rm sim/penny/eee_detailed_model/mod/NMDA.mod_orig
    graham-mac% hg add
    adding sim/penny/eee_detailed_model/README.md
    adding sim/penny/eee_detailed_model/mod/ghk.inc

Committing.

Penny now has the same NMDAeee.mod as Sergio and me, but the rest of her 
mod files are still different, including AMPA.

I am going to compile her mod files and run her Experiment_10_09.py

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/
    graham-mac% python compile.py
    graham-mac% ipython -i Experiment_10_09.py

That generates output here:
    /u/graham/projects/eee/sim/penny/eee_detailed_model/Data_10_18

I'm going to rename that dir so I can compare the original output with the 
output after I switch to Neurosim mod files.

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/
    graham-mac% mv Data_10_18/ Data_10_18_orig/

Adding "Data_" to .hgignore so I don't see Penny's output data in hg status

I am copying parameters.multi from my repo to Penny's mod dir.

Removing from parameters.multi:

    : DMS NMDA without mgblock
    DEFAULT NMDAnomgb

Copying Penny's mod dir to my desktop as a temporary backup.

Deleting from Penny's mod dir:
    ampa.mod
    ghk.inc
    NMDAeee.mod
    x86_64/

Modifying compile.py in Penny's dir:
    Line 66: compile() --> compile(compiler="mkmod")

And recompiling:

    graham-mac% pwd
    /u/graham/projects/eee/sim/penny/eee_detailed_model
    graham-mac% ipython -i compile.py

And re-running Penny's sim:

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/
    graham-mac% ipython -i Experiment_10_09.py 

Throws an error:

    /u/graham/projects/eee/sim/penny/eee_detailed_model/Experiment_10_09.py in Glu_Stim(Pool1_num, Pool2_num, Beta, Cdur, Syn_w1, Syn_w2)
         32 
         33     Cell = CA229()
    ---> 34     Cell.init_once()
         35     #distKASD(Cell.basal[34], somaKA)
         36     #TTX()

    /u/graham/projects/eee/sim/penny/eee_detailed_model/CA229_PFC.pyc in init_once(self)
        104         for sec in h.allsec():
        105             sec.Ra = global_Ra
    --> 106             sec.insert('vmax') # Measure the maximum potential
        107 
        108         #########################################

    ValueError: argument not a density mechanism name.

Adding a line to parameters.multi:

    DEFAULT vmax

And recompiling and rerunning.  ValueError again, for "na"

Adding a line to parameters.multi:
    DEFAULT na

** Switching Penny's repo to Neurosim style mods

All the files I'm leaving in her mod dir:
    ca.mod
    Cad.mod
    CaT.mod
    gabaa.mod
    gabab.mod
    glutamate.mod
    IL.mod
    kadist.mod
    kaprox.mod
    kv.mod
    na.mod
    parameters.multi
    PlateauConductance.mod
    vecstim.mod
    vmax.mod

What I added to top of her parameters.multi:
    DEFAULT ca
    DEFAULT Cad
    DEFAULT CaT
    DEFAULT gabaa
    DEFAULT gabab
    DEFAULT glutamate
    DEFAULT IL
    DEFAULT kadist
    DEFAULT kaprox
    DEFAULT kv
    DEFAULT na
    DEFAULT PlateauConductance
    DEFAULT vecstim
    DEFAULT vmax

Getting an error:

    /u/graham/projects/eee/sim/penny/eee_detailed_model/Experiment_10_09.py in Glu_Stim(Pool1_num, Pool2_num, Beta, Cdur, Syn_w1, Syn_w2)
         32 
         33     Cell = CA229()
    ---> 34     Cell.init_once()
         35     #distKASD(Cell.basal[34], somaKA)
         36     #TTX()

    /u/graham/projects/eee/sim/penny/eee_detailed_model/CA229_PFC.pyc in init_once(self)
        104         for sec in h.allsec():
        105             sec.Ra = global_Ra
    --> 106             sec.insert('vmax') # Measure the maximum potential
        107 
        108         #########################################

    ValueError: argument not a density mechanism name.


I don't understand, because vmax is in the mod dir and listed in parameters.multi...

I will comment out line 106 in CA229_PFC.py:

    #sec.insert('vmax') # Measure the maximum potential

Now getting the ValueError for "na" again.  Ugh.  This is not working.



* 2017-10-19 -- Penny's code into Netpyne

** TODO

Get Penny's code into Netpyne
Compare sims to Srdjan's data
Find glutamate dynamics settings that improve plateaus
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Penny's code

Penny uses a bunch of mod files that aren't in Neurosim repo.

Trying to use parameters.multi to replace them all didn't work.  I am going to 
leave them all the same except for AMPA (EEE glutamate uses NMDA and AMPA).

We'll have to discuss what to do with the rest of the mod files.

So my plan is to use Penny's original mod files and compile them with nrnivmodl,
then compile NMDAeee and AMPA using mkmod and parameters.multi

So, there are a lot of changes I made to Penny's repo.  I think I'll clone 
a fresh copy and start over.

Deleted Penny's dir: eee_detailed_model, committed repo, now to re-clone.

    graham-mac% cd /u/graham/projects/eee/sim/penny/
    graham-mac% git clone https://bitbucket.org/peng_gao_penny/eee_detailed_model

And recommitting.

Deleting Penny's AMPA mod file: ampa.mod

Code to run Penny's experiment out of the box:
    mkdir temp_penny; cd temp_penny; git clone https://bitbucket.org/peng_gao_penny/eee_detailed_model; cd eee_detailed_model; python compile.py; ipython -i Experiment_10_09.py

That works and generates figures.

Now to see about using parameters.multi to compile Penny's mod files.

Putting the following parameters.multi in Penny's mod dir:

    DEFAULT ca
    DEFAULT Cad
    DEFAULT CaT
    DEFAULT gabaa
    DEFAULT gabab
    DEFAULT glutamate
    DEFAULT IL
    DEFAULT kadist
    DEFAULT kaprox
    DEFAULT kv
    DEFAULT na
    DEFAULT PlateauConductance
    DEFAULT vecstim
    DEFAULT vmax

    : DMS NMDA 
    DEFAULT NMDAeee

    :* SYNAPSES

    :** AMPA
    NEURON {POINT_PROCESS AMPA}
    PARAMETER {
      Cdur  = 0.3   (ms)        : transmitter duration (rising phase)
      Alpha = 0.47  (/ms mM)    : forward (binding) rate
      Beta  = 0.18  (/ms)       : backward (unbinding) rate
      Erev  = 0 (mV)            : reversal potential
    }
    INCLUDE "netcon.inc"

Now will compile with mkmod and try running sim.

    cd /u/graham/projects/eee/sim/penny/eee_detailed_model/mod/; mkmod; cd ..; ipython -i Experiment_10_09.py

Error:

    /u/graham/projects/eee/sim/penny/eee_detailed_model/Experiment_10_09.py in Glu_Stim(Pool1_num, Pool2_num, Beta, Cdur, Syn_w1, Syn_w2)
         68         # Adding AMPA
         69         SynAMPA.append(h.AMPA(Cell.basal[34](loc1[i])))
    ---> 70         SynAMPA[-1].gmax = 0.1
         71         #SynAMPA1[-1].Beta = 0.28
         72         nc_AMPA.append(h.NetCon(ns, SynAMPA[i]))

    LookupError: 'gmax' is not a defined hoc variable name.

That should be because NMDA_gmax is a GLOBAL now...

Modifying:

    #SynAMPA[-1].gmax = 0.1
    h.gmax_AMPA = 0.1

Now it runs.  I don't know why it kept crashing yesterday...

I am going to delete ghk.inc, commit and push, and try to run out of the box.

*** Out of the box

Commands:
    mkdir temp; cd temp; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee; cd eee/sim/penny/eee_detailed_model/mod; mkmod; cd ..; ipython -i Experiment_10_09.py

Success!

** Looking into Penny's param values

NMDA_gmax and AMPA_gmax: should be able to use 1.0 and 2.0 and then adjust 
effect with weight...  But Penny says she gets better results with: 

    penny [7:17 AM] -- 2017/10/12 
    For gmax, AMPA gmax = 0.2; NMDA gmax = 0.1, or AMPA gmax = 0.1; NMDA gmax = 0.05, give me better results now

I am going to work on getting Penny's model into Netpyne, so I can more easily
run batches varying parameters.

Copying the following from batches/batch_gmax to penny/eee_detailed_model/netpyne/batch_params/:

    __init__.py
    batch_init.py
    cfg.py
    my_batches.py
    netParams.py
    runmybatches

*** Working with cfg.py

Penny has h.celsius = 32, I have cfg.hParams = {'celsius': 34, 
Leaving at 34 for now

*** Working with netParams.py

Changing cellpath to lead to eee_detailed_model (where cell files are)
    # Find path to cells directory
    curpath = os.getcwd()
    while os.path.split(curpath)[1] != "eee_detailed_model":
        curpath = os.path.split(curpath)[0]
    cellpath = curpath

When executing netParams, I get the following error:

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/ ; ipython -i netParams.py
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul  2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.

    IPython 5.1.0 -- An enhanced Interactive Python.
    ?         -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help      -> Python's own help system.
    object?   -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    NEURON: Couldn't find: CA229.hoc
     near line 0
     ^
    ---------------------------------------------------------------------------
    AttributeError                            Traceback (most recent call last)
    /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/netParams.py in <module>()
         44 
         45 # Detailed EEE cell model
    ---> 46 cellRule = netParams.importCellParams(label='PT5_detailed', conds={'cellType': 'PT5B', 'cellModel': 'PFC_full'}, fileName=os.path.join(cellpath, 'CA229_PFC.py'), cellName='MakeCA229')
         47 
         48 # define section lists

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
        483             label = int(self._labelid)
        484             self._labelid += 1
    --> 485         secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
        486         cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
        487 

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
        177         modulePointer = tempModule
        178         if isinstance(cellArgs, dict):
    --> 179             cell = getattr(modulePointer, cellName)(**cellArgs) # create cell using template, passing dict with args
        180         else:
        181             cell = getattr(modulePointer, cellName)(*cellArgs)  # create cell using template, passing list with args

    /u/graham/projects/eee/sim/penny/eee_detailed_model/CA229_PFC.pyc in MakeCA229()
        455 ############################################
        456 def MakeCA229 ():
    --> 457     cell = CA229()
        458     cell.init_once()
        459     return cell

    /u/graham/projects/eee/sim/penny/eee_detailed_model/CA229_PFC.pyc in __init__(self)
         79         h.load_file('CA229.hoc')
         80 
    ---> 81         self.soma = h.soma
         82 #        # name   L
         83 #        #soma[0] 0.0100002288818

    AttributeError: 'hoc.HocObject' object has no attribute 'soma'

Asked for help in Slack.

*** Slack chat

    sergio [11:36 AM] 
    I had a similar problem, I changed the location of CA229.hoc to the dir where I was working with netpyne

    joe [11:36 AM] 
    Thanks, Sergio, I’ll try that.

    salvadord [11:37 AM] 
    think there’s already working netpyne versions of pennys cell — check with sergio+penny

    joe [11:37 AM] 
    A working Netpyne version of Penny’s cell would be very useful! Sergio?  Penny?

    salvadord [11:38 AM] 
    note cell wrapper is CA229_PFC.py, but then that calls CA229.hoc, so they should both be in same dir

    joe [11:39 AM] 
    Both of those files are in the same dir…

    sergio [11:40 AM] 
    /u/sergioangulo/projects/eee/sim/detailedCell/

    [11:40] 
    I have both in the same dir with netparams and cfg

    joe [11:42 AM] 
    Great, thanks Sergio! I’ll check it out now.

*** Using Sergio's Netpyne version 

Commands:

    graham-mac% mkdir temp_serg
    graham-mac% cd temp_serg
    graham-mac% hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee
    graham-mac% cd eee/sim/detailedCell/
    graham-mac% python compile.py
    graham-mac% ipython -i netParams.py

No crash.  Looks good.

Renaming my netParams and cfg by adding _joe to the end
Copying Sergio's netParams.py and cfg.py into my dir

Adding symlinks to the cell files and mod files

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/
    graham-mac% ln -s ../../CA229_PFC.py 
    graham-mac% ln -s ../../CA229.hoc
    graham-mac% ln -s ../../x86_64

Now executing netParams doesn't crash.  :)

But executing batch_init.py does crash:
    [TerminalIPythonApp] WARNING | File not found: u'batch_init.py'

Problem is the link went bad.  Creating symlinks to batch_init.py (and also 
runmybatches, an executable whose link also went bad.)

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params
    graham-mac% ln -s ../../../../batches/batch_init.py
    graham-mac% ln -s ../../../../batches/runmybatches

Now running batch_init works and produces the following figure:
    file:gif/20171019_124210.png

** Matching Penny's experiment in Netpyne

One thing to point out: Penny isn't using spines

I want to match the sims Penny coded here: 
eee/sim/penny/eee_detailed_model/Experiment_10_09.py

We need the following params:

    Pool1_num     = 8
    Pool2_num     = 8
    Beta          = 0.067
    Cdur          = 1
    Syn_w1        = 0.01
    Syn_w2        = 0.01

She creates AMPA and NMDA synapses here:

    loc1 = list(np.linspace(0.5, 0.7, Pool1_num))

With weight Syn_w1 for both receptors.

She makes "extransynaptic" NMDA here:

    loc2 = list(np.linspace(0.4, 0.7, Pool2_num))

With weight Syn_w2


** Input resistance and gleak

*** Chat:

    sergio [1:20 PM] 
    added this Plain Text snippet: Rin calculations
    Detailed cell (mechs incl.) soma Rin: 120.63710559 MOhm
    Detailed cell (mechs incl.) basal dend Rin: 272.133970739 MOhm
    Detailed cell (no mechs incl.) soma Rin: 6304.09780762 MOhm
    Detailed cell (no mechs incl.) basal dend Rin: 6365.21056899 MOhm
    Reduced cell soma Rin: 60.8783211578 MOhm
    Reduced cell basal dend Rin: 83.0481119702 MOhm
    Add Comment Collapse

    billl [2:59 PM] 
    reduced cell with mechs or no mechs?

    sergio [2:59 PM] 
    with mechs

    billl [3:00 PM] 
    and what are values without mechs?

    billl 
    [3:00 PM] 
    ok so seems like we're a little too leaky -- was expecting the opposite;  what do ypou think @joe?

    joe [29 minutes ago] 
    I’m really not sure… :thinking_face:

    billl 
    [12 minutes ago] 
    well you set the gleak to these values -- if you want to get similar results to what penny is getting you may need to switch to her Rin values;  @sergio -- you want to fix that for joe?

    billl 
    [12 minutes ago] 
    or do you already have good results with penny's channels and synapses joe?

    sergio [10 minutes ago] 
    I can work with Joe to check the Rin values

    joe [7 minutes ago] 
    Thanks Sergio.  Still working on it, Bill.

    billl [5 minutes ago] 
    you can change the gleak sergio to try to match up the Rins -- the Rin is eg 2x too low then you would decrease the leak (increase the resistance) by 2x (that's just an example)

    billl 
    [5 minutes ago] 
    will be some interplay between the gleak in soma and bas dend which wil be different than it is in the big cell

    sergio [3:58 PM] 
    added this Plain Text snippet: Rin including reduced cell no mechs
    Detailed cell (mechs incl.) soma Rin: 120.63710559 MOhm
    Detailed cell (mechs incl.) basal dend Rin: 272.133970739 MOhm
    Detailed cell (no mechs incl.) soma Rin: 6304.09780762 MOhm
    Detailed cell (no mechs incl.) basal dend Rin: 6365.21056899 MOhm
    Reduced cell (mechs incl.) soma Rin: 60.8783211578 MOhm
    Reduced cell (mechs incl.) basal dend Rin: 83.0481119702 MOhm
    Reduced cell (no mechs incl.) soma Rin: 6577.14450565 MOhm
    Reduced cell (no mechs incl.) basal dend Rin: 6577.14450565 MOhm


* 2017-10-20 -- Penny's code into Netpyne

** TODO

Get Penny's code into Netpyne
Compare sims to Srdjan's data
Find glutamate dynamics settings that improve plateaus
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Penny's model into Netpyne

Using Sergio's netParams.py and cfg.py work for running Penny's model

Making improvements to my netParams and cfg so that they will work.

Had to change soma 'sec' to soma_2 (no sec named soma):
    cfg.recordTraces = {'V_soma': {'sec': 'soma_2', 'loc': 0.5, 'var': 'v'}}

Had to change cells to record to 'all':
    cfg.recordCells = ['all']

In netParams, had to modify cellRule:
    # Detailed EEE cell model
    cellRule = netParams.importCellParams(label='PT5_detailed', conds={'cellType': 'PT5B', 'cellModel': 'PFC_full'}, fileName=os.path.join(cellpath, 'CA229_PFC.py'), cellName='MakeCA229')    

Modified popParams:
    #netParams.popParams['eee7us']= {'cellModel':'HH_reduced', 'cellType':'eee7us', 'numCells':1}
    #netParams.popParams['eee7ps']= {'cellModel':'HH_reduced', 'cellType':'eee7ps', 'numCells':1}
    netParams.popParams['PT5']  = {'cellModel': 'PFC_full', 'cellType': 'PT5B', 'numCells': 1} 

Renaming files:
netParams.py      --> netParams_sergio.py
cfg.py            --> cfg_sergio.py
netParams_joe.py  --> netParams.py
cfg_joe.py        --> cfg.py

Executing netParams.py and batch_init.py are both functional.  :)

*** Ignoring Penny's mod files in Hg

When using hg status:
    graham-mac% hg status
    M .hgignore
    M notebook.org
    ? sim/penny/eee_detailed_model/mod/AMPA.mod
    ? sim/penny/eee_detailed_model/mod/misc.h
    ...

Adding the following line to eee/.hgignore:
    sim/penny/eee_detailed_model/mod/

Now:
    graham-mac% hg status
    M .hgignore
    M notebook.org
    ...

Here are the mod files from Penny that I track
(because they aren't standard Neurosim mods):

    graham-mac% hg files
    ...
    sim/penny/eee_detailed_model/mod/CaT.mod
    sim/penny/eee_detailed_model/mod/Cad.mod
    sim/penny/eee_detailed_model/mod/IL.mod
    sim/penny/eee_detailed_model/mod/NMDAeee.mod
    sim/penny/eee_detailed_model/mod/PlateauConductance.mod
    sim/penny/eee_detailed_model/mod/ca.mod
    sim/penny/eee_detailed_model/mod/gabaa.mod
    sim/penny/eee_detailed_model/mod/gabab.mod
    sim/penny/eee_detailed_model/mod/glutamate.mod
    sim/penny/eee_detailed_model/mod/kadist.mod
    sim/penny/eee_detailed_model/mod/kaprox.mod
    sim/penny/eee_detailed_model/mod/kv.mod
    sim/penny/eee_detailed_model/mod/na.mod
    sim/penny/eee_detailed_model/mod/parameters.multi
    sim/penny/eee_detailed_model/mod/vecstim.mod
    sim/penny/eee_detailed_model/mod/vmax.mod
    ...

So now that I can use my own cfg and netParams files to get Penny's model
into Netpyne, it's time to actually implement Penny's sims in Netpyne.

** Penny's sims into Netpyne

Adding Penny's other recordings:
    v_vec_dend1.record(Cell.basal[34](0.8)._ref_v)
    v_vec_dend2.record(Cell.basal[34](0.5)._ref_v)
    v_vec_dend3.record(Cell.basal[34](0.3)._ref_v)

To my cfg file:
    cfg.recordTraces['V_Bdend_0.8'] = {'sec': 'basal_34', 'loc': 0.8, 'var': 'v'}
    cfg.recordTraces['V_Bdend_0.5'] = {'sec': 'basal_34', 'loc': 0.5, 'var': 'v'}
    cfg.recordTraces['V_Bdend_0.3'] = {'sec': 'basal_34', 'loc': 0.3, 'var': 'v'}

Changing some variable names for consistency (changing in cfg and netParams)
    cfg.CdurNMDAScale --> cfg.NMDACdurScale 
    cfg.CmaxNMDAScale --> cfg.NMDACmaxScale

Params I need in cfg (with Penny's values as defaults):

    cfg.syn_num        = 8 
    cfg.syn_weight     = 0.01
    cfg.syn_startloc   = 0.5
    cfg.syn_endloc     = 0.7
    cfg.syn_delay      = 10.0

    cfg.exsyn_num      = 8
    cfg.exsyn_weight   = 0.01
    cfg.exsyn_startloc = 0.4
    cfg.exsyn_endloc   = 0.7
    cfg.exsyn_delay    = 10.0

Now to set up the NetStims.  
NetStim1 for syn (synaptic glutamate -- NMDA and AMPA)
NetStim2 for exsyn (extrasynaptic glutamate -- NMDA only)

    ###############################################################################
    # NetStim inputs 
    ###############################################################################
    cfg.addNetStim = 1

    # Synaptic glutamate (NMDA and AMPA)
    cfg.NetStim1 = {'pop': ['PT5'], 'loc': cfg.syn_locs, 'sec': 'basal_34', 'synMech': ['NMDA','AMPA'], 'start': 100, 'interval': 10, 'noise': 0.0, 'number': 1, 'weight': [cfg.syn_weight, cfg.syn_weight], 'delay': cfg.syn_delay}

    # Extrasynaptic glutamate (NMDA)
    cfg.NetStim2 = {'pop': ['PT5'], 'loc': cfg.exsyn_locs, 'sec': 'basal_34', 'synMech': ['NMDA'], 'start': 100, 'interval': 10, 'noise': 0.0, 'number': 1, 'weight': [cfg.exsyn_weight], 'delay': cfg.exsyn_delay}


Now to set up functionality in netParams.

    ###############################################################################
    # NetStim inputs
    ###############################################################################
    if cfg.addNetStim:
        
        for nslabel in [k for k in dir(cfg) if k.startswith('NetStim')]:
            ns = getattr(cfg, nslabel, None)

            # add stim source
            netParams.stimSourceParams[nslabel] = {'type': 'NetStim', 'start': ns['start'], 'interval': ns['interval'], 'noise': ns['noise'], 'number': ns['number']}

            # connect stim source to target
            for i in range(len(ns['synMech'])):
                netParams.stimTargetParams[nslabel+'_'+ns['pop']+'_'+ns['synMech'][i]] = \
                    {'source': nslabel, 'conds': {'pop': ns['pop']}, 'sec': ns['sec'], 'synsPerConn': ns['synsPerConn'], 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': ns['weight'], 'delay': ns['delay']}


Had to go back and add synsPerConn to cfg file NetStim inputs:

    # Synaptic glutamate (NMDA and AMPA)
    cfg.NetStim1 = {'pop': ['PT5'], 'synsPerConn': cfg.syn_num, 'loc': cfg.syn_locs, 'sec': 'basal_34', 'synMech': ['NMDA','AMPA'], 'start': 100, 'interval': 10, 'noise': 0.0, 'number': 1, 'weight': [cfg.syn_weight, cfg.syn_weight], 'delay': cfg.syn_delay}

    # Extrasynaptic glutamate (NMDA)
    cfg.NetStim2 = {'pop': ['PT5'], 'synsPerConn': cfg.exsyn_num, 'loc': cfg.exsyn_locs, 'sec': 'basal_34', 'synMech': ['NMDA'], 'start': 100, 'interval': 10, 'noise': 0.0, 'number': 1, 'weight': [cfg.exsyn_weight], 'delay': cfg.exsyn_delay}

Now to try it out!

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/
    graham-mac% ipython -i netParams.py

Fixing a few small bugs, and now it works.

Trying batch_init:

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/
    graham-mac% ipython -i batch_init.py 

Which throws an error:

    Creating network of 1 cell populations on 1 hosts...
      Number of cells on node 0: 1 
      Done; cell creation time = 0.05 s.
    Making connections...
      Number of connections on node 0: 0 
      Done; cell connection time = 0.00 s.
    Adding stims...
    ---------------------------------------------------------------------------
    IndexError                                Traceback (most recent call last)
    /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/batch_init.py in <module>()
         30 
         31 # add network stimulation
    ---> 32 sim.net.addStims()
         33 
         34 # setup variables to record for each cell (spikes, V traces, etc)

    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in addStims(self)
        158 
        159                         if source['type'] == 'NetStim':
    --> 160                             self._addCellStim(params, postCell)  # call method to add connections (sort out synMechs first)
        161                         else:
        162                             postCell.addStim(params)  # call cell method to add connection

    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in _addCellStim(self, stimParam, postCell)
        200             params['delay'] = finalParam['delaySynMech']
        201 
    --> 202             postCell.addStim(params=params)
        203 
        204 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addStim(self, params)
        979                 'seed': params['seed'] if 'seed' in params else sim.cfg.seeds['stim']}
        980 
    --> 981             self.addConn(connParams, netStimParams)
        982 
        983 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addConn(self, params, netStimParams)
        725             if sim.cfg.createPyStruct:
        726                 connParams = {k:v for k,v in params.iteritems() if k not in ['synsPerConn']}
    --> 727                 connParams['weight'] = weights[i]
        728                 connParams['delay'] = delays[i]
        729                 if not pointp:

    IndexError: list index out of range

This seems to be a mismatch between synsPerConn and a weights list...

I'm going to try removing single items from list:

    # Extrasynaptic glutamate (NMDA)
    cfg.NetStim2 = {'pop': 'PT5', 'synsPerConn': cfg.exsyn_num, 'loc': cfg.exsyn_locs, 'sec': 'basal_34', 'synMech': ['NMDA'], 'start': 100, 'interval': 10, 'noise': 0.0, 'number': 1, 'weight': [cfg.exsyn_weight], 'delay': cfg.exsyn_delay}

Becomes:

    # Extrasynaptic glutamate (NMDA)
    cfg.NetStim2 = {'pop': 'PT5', 'synsPerConn': cfg.exsyn_num, 'loc': cfg.exsyn_locs, 'sec': 'basal_34', 'synMech': 'NMDA', 'start': 100, 'interval': 10, 'noise': 0.0, 'number': 1, 'weight': cfg.exsyn_weight, 'delay': cfg.exsyn_delay}

Trying batch_init again.

Nope.  Putting brackets back in (single items back in list)

Changing line 148 in netParams: 'weight': ns['weight'] --> 'weight': ns['weight'][i]

Now it seems to be working!  Whew.  Produces an output figure.  Getting immediate
depolarization block in the traces, so need to work on param values.  But I'm 
gonna go ahead and commit now as long as it's working.


** Replicating results of Penny's experiment

Need to check on param values, because output right now is immediate depol block
at activation of NetStim.

Penny's 
gmax_NMDA = 0.05
gmax_AMPA = 0.1 (but I handle that by setting the ratioAMPANMDA = 2.0)
Beta = 0.03
weight = np.linspace(0.01, 0.5, 10)  which is 
    
    array([ 0.01      ,  0.06444444,  0.11888889,  0.17333333,  0.22777778,
            0.28222222,  0.33666667,  0.39111111,  0.44555556,  0.5       ])

For some reason, she sets Cdur = 100*weight.  I'll have to ask her about that.

Putting these values into cfg.py.

    cfg.NMDAgmax       = 0.05 #1.0
    cfg.NMDABetaScale  = 20.0 #1.0 # Scales original value of 0.0015 (by 20 = 0.03)

Editing my_batches.py:

    syn_weight = list(np.linspace(0.01, 0.5, 10))

    # Varying glutamate stim amplitude (syn_weight)
    batch = {}
    batch["label"] = "syn_weight"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["syn_weight"] = syn_weight
    batch["params"] = params
    batches[batch["label"]] = batch

For now, in cfg.py, I'm going to set 
    cfg.exsyn_weight   = cfg.syn_weight

because Penny does when running her experiment.

Now to run:

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/ ; ./runmybatches

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/ ; ipython -i analyze.py

** Problem with analyze.py

I've been plotting batches as 1D (one param changing) 
or 2D (two params changing) automatically based on whether or not there is an 
underscore in the batch name (underscore = 2D, e.g. "param1_param2").  Would be 
better if I could determine from the data...

Running my_batches to explore doing this.


* 2017-10-23 -- Matched Penny's experiment in Netpyne

** TODO

Replicate Penny's results in Netpyne
Compare sims to Srdjan's data
Find glutamate dynamics settings that improve plateaus
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Problem with analyze.py

I've been plotting batches as 1D (one param changing) 
or 2D (two params changing) automatically based on whether or not there is an 
underscore in the batch name (underscore = 2D, e.g. "param1_param2").  Would be 
better if I could determine from the data...

The number of underscores in the batch files produced by Netpyne correlates with 
the number of params (ignoring any underscores in the batch name)

Added this to analyze.py:

    batches = [dir for dir in os.listdir('batch_data') if os.path.isdir(os.path.join('batch_data', dir))]

    batches1D = []
    batches2D = []

    for batch in batches:
        batch_file_numunderscores = os.listdir(os.path.join('batch_data', batch))[0].split(batch)[-1].count("_")
        if batch_file_numunderscores == 1:
            batches1D.append(batch)
        elif batch_file_numunderscores == 2:
            batches2D.append(batch)
        else:
            print("Batch '%s' is not 1D or 2D.  See analyze.py." % (batch))

In batch_file_numunderscores, 
    os.listdir(os.path.join('batch_data', batch))[0] 
        gets the first file in the batch dir
    .split(batch)[-1]
        splits the file name at the batch name and returns the (Netpyne-provided) file ending
    .count("_") 
        counts the number of underscores in the Netpyne file ending string


** Switching ih mod files

We will switch to Migliori's ih mod file, because it offers more flexibility:
/usr/site/nrniv/local/mod/h_migliore.mod

*** Chat
    penny [8:40 AM] 
    @salvadord Hey Salva, for the ih channel, are we using the mod file from migliore? h_migliore.mod?

    salvadord [8:41 AM] 
    I am for M1, but not sure if you need for yours — I discussed with joe a while ago

    penny [8:44 AM] 
    Let me check what is Joe using

    billl [8:45 AM] 
    he's using the old one we had

    [8:46] 
    maybe we should all update to the new one so can test some of those TASK effects later (was just discussing with salva wihat TASK is -- still not so clear to me  but anyway idea is that has a voltage independnt component of varying size)

    [8:47] 
    @joe - think he went running but can check with him when he comes back;  @sergio - maybe give a try with that channel and see if makes any difference; prob won't since by default that TASK part is tunred off anyway

    [8:47] 
    off to drive to clinic; bbl

    sergio [8:48 AM] 
    ok

    penny [8:48 AM] 
    okay~ thanks

    sergio [9:59 AM] 
    uploaded this image: h_kole mode file, iclamp amp 0.4
    Add Comment

    sergio [10:00 AM] 
    uploaded this image: h_migliore mod file, iclamp amp 0.4
    Add Comment

    sergio [10:01 AM] 
    I'm going to do an fi curve to compare both mechs


    salvadord [10:01 AM] 
    h_migliore depends a lot on the params you use

    [10:02] 
    you can tweak to move fI curve around

    sergio [10:02 AM] 
    I used the same ones as for the h_kole

    billl [10:02 AM] 
    not sure fi curve so useful (for anyone but surely not for us)

    salvadord [10:02 AM] 
    I’ve ran many sims to find a compromise between fI curves and the ih effects on spiking we wanted to reproduce

    billl [10:02 AM] 
    in any case the diff in the migliore model is completely turned off

    [10:02] 
    not an issue not -- something we could insert now to use later

    [10:03] 
    mostly want to use it for consistency across our models so when later we want to reconcile findings across models will be less difficult

    [10:03] 
    same reason i wanted all 3 of us EEE models to use same mechs

    salvadord [10:04 AM] 
    sounds good

    sergio [10:04 AM] 
    ok

    joe [10:20 AM] 
    Okay, so @sergio, @penny, and @joe should all switch to the h_migliori mod file for ih?

    sergio [10:29 AM] 
    only depends if h_milgliore has some advantages over the h_kole

    billl [10:34 AM] 
    yes has advantage -- uses associated TASK

    billl 
    [10:35 AM] 
    added this Perl snippet: notes on migliore ih
    * /u/salvadord/Papers/Migl12.pdf Know Your Current Ih: Interaction with a Shunting Current Explains the Puzzling Effects of Its Pharmacological or Pathological Modulations
    Migliore & Migliore
    ** Ih paradox: erev -30 mv so should always be excitatory but in many expts appear to show inhibitory effect, ie inc EPSP after Ih block with ZD7288
    ** overall message: Ih seems to enhance weak stim but inhib strong stims 
    depol closes HCN so reduces ih so this would give the 'inhib' effect
    HCN produces a more depolarized RMP so already higher up so this would tend to give an augmenting 'excit' effect
    migliore model adds a K dependent leak that partly balances this depolarization
    measuring a Vpeak of EPSP (1st effect of blocking Ih is that RMP shifts to more neg)
    ** old hypothesis for inhib/excit crossover: related to interactions with Im K chan (Km) but CA1 pyrs have Km in axosoma area
      whereas Ih is dendritic -- only works in 1C model but not for MC model
    ** eqns (h_migliore.mod) writes two different currents i, lk
    i = gbar*l*(v-ehd) : note that same gbar being used for both parts of the current
    lk = clk*gbar*(v-elk) 
    *** ehd not set but should be default of ehd = -30 -- fixed in h_migliore.mod
    *** default clk=0 in mod file so no leak effect -- Table 1 gives 3.7% so 0.037; Fig 6 uses 0.5 for control and 0.8 for lamotrigine
    ** Ih is upregulated by lamotrogine via a +10mV shift of Ih activation -- hence degree of deactivation will be decreased at any V st m(V) in ~(0.2,0.8)
    3 mV depol; clk changed for lamotrigine sim
    ** dynamic indirect interaction of Ih with K chans seen in MSO and rod photoreceptors [26,27]; interact with coloc NaKpump in trigeminal neurons
    ** extra leak is distributed with Ih + somehow coupled to Ih but is NOT affected by ZD7288; (but perhaps it is also blocked by XE991 -- the KM blocker)
    this could be a TASK-like shunting conductance [[?what is TASK channel]]
    Add Comment Collapse

    joe [10:42 AM] 
    Okay, so let’s all switch to `/usr/site/nrniv/local/mod/h_migliore.mod`

    [10:42] 
    This mod uses `SUFFIX hd`, so be sure to change that in your code.

    billl [10:44 AM] 
    also maybe differences in other params so perhaps can just generate the netpyne line for this for everyone to use

    salvadord [10:48 AM] 
    netpyne imports from the cell file (eg. PTcell.hoc) so just need to use right channel (‘hd’) there

    [10:48] 
    if want to modify params can do directly in cell file, or in netpyne after import

*** Adding and compiling new mod file

Adding the following to parameters.multi (line 24):
    DEFAULT h_migliore

Compiling new mod file:
    
    graham-mac% cd /u/graham/projects/eee/sim/mod/
    graham-mac% mkmod

Copying /usr/site/nrniv/local/mod/h_migliore.mod to Penny's mod dir: 
    /u/graham/projects/eee/sim/penny/eee_detailed_model/mod

Adding it to Mercurial:
    graham-mac% hg add /u/graham/projects/eee/sim/penny/eee_detailed_model/mod/h_migliore.mod

Whoops, actually don't need to add the file, because I'm now using parameters.multi
for Penny's mod files.  Removing the file and removing it from Mercurial.

Adding the following to Penny's parameters.multi:
    DEFAULT h_migliore

Deleting Penny's x86_64 dir, and recompiling with mkmod.

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/mod/
    graham-mac% rm -r x86_64
    graham-mac% mkmod

Seems to have worked fine.

*** Changing references to old ih mod

/u/graham/projects/eee/sim/cells/eee6.py
/u/graham/projects/eee/sim/cells/eee7.py
/u/graham/projects/eee/sim/cells/eee7us.py
/u/graham/projects/eee/sim/cells/eee7ps.py

sec.insert('ih') # h-current --> sec.insert('hd') # Migliore h-current

** Replicating Penny's experiments

Commenting out the line (178) where Penny saves json files:
#savejson(data, title, ext = "json", verbose = False)

First, running Penny's experiment to see her output.

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model; ipython -i Experiment_10_09.py 

Now to run the Netpyne version:

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/ ; ./runmybatches

Couple problems:
1) need to set initial membrane potential
2) not seeing a change in response with change in weight in Netpyne

Setting initial membrane potential

Penny has hers set as (Experiment_10_09, line 130):
    h.v_init = -67.3

Netparams line 60:
    sec['vinit'] = -75.0413649414  # set vinit for all secs
    -->
    sec['vinit'] = -67.3  # set vinit for all secs

Re-running batch.

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/ ; ./runmybatches

Okay, that solved the difference at the beginning of the traces.  But, it still 
doesn't look as if changing syn_weight has any effect...  I'm going to try 
doubling the syn_weight and seeing if that makes a difference.  Adding the 
following to my_batches.py:

    # Varying glutamate stim amplitude (double syn_weight)
    batch = {}
    batch["label"] = "synWeight2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["syn_weight"] = list(2.0 * np.array(synWeight))
    batch["params"] = params
    batches[batch["label"]] = batch

Seems to have no effect; output is the same as before.

Changing cfg.syn_weight = 0.05 #0.01 and reanalyzing.

Now there is spiking (depol block actually), but still no difference between 
different weights.  Looking into this.

Will commit and ask for help.

*** Chat
    joe [2:24 PM] 
    added this Plain Text snippet: Problem varying a batch parameter
    I'm having trouble getting Netpyne to vary syn_weight in a batch.
    I've got Penny's experiment coded into Netpyne here:
    /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params
    When I change syn_weight in cfg.py, then it does change in the output.
    From cfg.py:
      cfg.syn_weight   = 0.05 #0.01 these two values produce different outputs
    But, when I run a batch varying syn_weight, the outputs are all the same as the one cfg.syn_weight value. The Netpyne print statements say that is is varying the weight properly.
    From my_batches.py:
      synWeight = list(np.linspace(0.01, 0.5, 10))
      # Varying glutamate stim amplitude (syn_weight)
      batch = {}
      batch["label"] = "synWeight"
      batch["cfgFile"] = "cfg.py"
      batch["netParamsFile"] = "netParams.py"
      params = OrderedDict()
      params["syn_weight"] = synWeight
      batch["params"] = params
      batches[batch["label"]] = batch
    From netParams.py:
      for nslabel in [k for k in dir(cfg) if k.startswith('NetStim')]:
        ns = getattr(cfg, nslabel, None)
        # add stim source
        netParams.stimSourceParams[nslabel] = {'type': 'NetStim', 'start': ns['start'], 'interval': ns['interval'], 'noise': ns['noise'], 'number': ns['number']}
        # connect stim source to target
        for i in range(len(ns['synMech'])):
          netParams.stimTargetParams[nslabel+'_'+ns['pop']+'_'+ns['synMech'][i]] = \
            {'source': nslabel, 'conds': {'pop': ns['pop']}, 'sec': ns['sec'], 'synsPerConn': ns['synsPerConn'], 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': ns['weight'][i], 'delay': ns['delay']}
    I imagine I'm missing something simple, but I've been staring at it and banging my head against the wall for a bit too long. I'd appreciate any help!
    Add Comment Collapse

    salvadord [2:30 PM] 
    dont’ see where `cfg.syn_weight` is used in netParams?

    [2:32] 
    not sure if related, but seem to recall similar issue in past related to cfg.py not being *executed* in every batch iteration (just fixed params loaded from json)

    salvadord [2:40 PM] 
    maybe try in batch something like `params[('NetStim1', 'weight')] = [0.1,0.2,0.3]` instead of using intermediary variable `syn_weight`

    joe [2:45 PM] 
    Thanks Salva, I’ll try that when I get back from lunch.


*** Actually

I put the following prints into netParams:

    if cfg.addNetStim:
        
        for nslabel in [k for k in dir(cfg) if k.startswith('NetStim')]:
            ns = getattr(cfg, nslabel, None)

            print
            print("##############################################################")
            print(nslabel)
            print

            # add stim source
            netParams.stimSourceParams[nslabel] = {'type': 'NetStim', 'start': ns['start'], 'interval': ns['interval'], 'noise': ns['noise'], 'number': ns['number']}

            # connect stim source to target
            for i in range(len(ns['synMech'])):
                netParams.stimTargetParams[nslabel+'_'+ns['pop']+'_'+ns['synMech'][i]] = \
                    {'source': nslabel, 'conds': {'pop': ns['pop']}, 'sec': ns['sec'], 'synsPerConn': ns['synsPerConn'], 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': ns['weight'][i], 'delay': ns['delay']}
                

                print(ns['synMech'][i])
                print("weights = %s" % str(ns['weight']))
                print("weight  = %s" % str(ns['weight'][i]))
                print("cfg.syn_weight   = %s" % (cfg.syn_weight))
                print("cfg.exsyn_weight = %s" % (cfg.exsyn_weight))

And saw output:

    ##############################################################
    NetStim1

    NMDA
    weights = [0.05, 0.05]
    weight  = 0.05
    cfg.syn_weight   = 0.02
    cfg.exsyn_weight = 0.05
    AMPA
    weights = [0.05, 0.05]
    weight  = 0.05
    cfg.syn_weight   = 0.02
    cfg.exsyn_weight = 0.05

    ##############################################################
    NetStim2

    NMDA
    weights = [0.05]
    weight  = 0.05
    cfg.syn_weight   = 0.02
    cfg.exsyn_weight = 0.05

    ##############################################################
    NetStim1

    NMDA
    weights = [0.05, 0.05]
    weight  = 0.05
    cfg.syn_weight   = 0.128888888889
    cfg.exsyn_weight = 0.05
    AMPA
    weights = [0.05, 0.05]
    weight  = 0.05
    cfg.syn_weight   = 0.128888888889
    cfg.exsyn_weight = 0.05

    ##############################################################
    NetStim2

    NMDA
    weights = [0.05]
    weight  = 0.05
    cfg.syn_weight   = 0.128888888889
    cfg.exsyn_weight = 0.05

    ##############################################################
    NetStim1

    NMDA
    weights = [0.05, 0.05]
    weight  = 0.05
    cfg.syn_weight   = 0.237777777778
    cfg.exsyn_weight = 0.05
    AMPA
    weights = [0.05, 0.05]
    weight  = 0.05
    cfg.syn_weight   = 0.237777777778
    cfg.exsyn_weight = 0.05

    ##############################################################
    NetStim2

    NMDA
    weights = [0.05]
    weight  = 0.05
    cfg.syn_weight   = 0.237777777778
    cfg.exsyn_weight = 0.05

And it turns out the problem is that cfg.paramValue gets changed with each 
simulation (you can see that cfg.syn_weight changes each time), but ns['weight'], 
(which is set to cfg.syn_weight in cfg.py) is not changed each time.

So, assume that netParams must explicitly call any variable being varied.

** Modifying netParams to vary weight as desired

Changing netParams from:

        # connect stim source to target
        for i in range(len(ns['synMech'])):
            netParams.stimTargetParams[nslabel+'_'+ns['pop']+'_'+ns['synMech'][i]] = \
                {'source': nslabel, 'conds': {'pop': ns['pop']}, 'sec': ns['sec'], 'synsPerConn': ns['synsPerConn'], 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': ns['weight'][i], 'delay': ns['delay']}

To:
        # connect stim source to target
        for i in range(len(ns['synMech'])):
            netParams.stimTargetParams[nslabel+'_'+ns['pop']+'_'+ns['synMech'][i]] = \
                {'source': nslabel, 'conds': {'pop': ns['pop']}, 'sec': ns['sec'], 'synsPerConn': ns['synsPerConn'], 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': cfg.syn_weight, 'delay': ns['delay']}



This is a hack, because it forces exsyn_weight to be whatever syn_weight is, 
without notifying anyone.  I'll have to fix that soon.  But for now, I need to 
get some results.  Plus, in Penny's current experiment, she sets exsyn_weight 
equal to syn_weight anyway.

TODO: fix netstim weights (see above)

** Matching Penny's Experiment

I'm going to pick three of Penny's weights and try to match those.

The weights will be:
0.01
0.22778
0.44556

The traces are here:
file:gif/20171023_204637.png

Changing my_batches:

    synWeight = list(np.linspace(0.01, 0.5, 10))
    synWeight = [0.01, 0.22778, 0.44556]

And running and analyzing:

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/ ; ./runmybatches 
    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/ ; ipython -i analyze.py

Comparing my output and Penny's:
file:gif/20171023_205228.png

The response looks good for the first weight, but not for the final two...

Will have to explore differences between my and Penny's model, because the 
output should be identical...

I see that Penny sets: h.celsius = 32

We have: h.celsius   = 34.0 # for in vitro opt

She also puts in Cdur as: 100*w, where w is syn_weight

She sets: 
    SynNMDA[-1].Cdur = Cdur
    ExNMDA[-1].Cdur = Cdur

I am going to set Penny's temp to our 34, set her Cdur to our 1.0, save it as 
Experiment_10_23.py and re-run her experiment.

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/; ipython -i Experiment_10_23.py

Woohoo!  It's a match now!  She's getting depol block just like my Netpyne model.

file:gif/20171023_211305.png

Just out of curiosity, I'm going to change her temp back to 32 and see whether 
the temp or the Cdur had the greater effect on changing the traces.

Wow, the temperature made a big difference, much bigger than I expected.

file:gif/20171023_211930.png

Top trace is 32, bottom trace is 34.  

We'll have to agree on a temp for moving forward.

** Chat helping Sergio with my code

    joe [1:46 PM] 
    Hey Sergio, open a new terminal, start iPython and try to `import batch_utils`, please, and let me know what the output is.

    sergio [1:46 PM] 
    sure

    [1:46] 
    also

    [1:47] 
    do you mean a new file with only `import batch_utils`?

    joe [1:48 PM] 
    No file.  Just in Python.

    joe [1:48 PM] 
    added this Plain Text snippet
    Last login: Mon Oct 23 13:45:03 on ttys001
    graham-mac% ipython
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul 2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.
    IPython 5.1.0 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    In [1]: import batch_utils
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    In [2]: batch_utils.getspineLocs?
    Signature: batch_utils.getspineLocs(numspines, spinedist=[1])
    Docstring: <no docstring>
    File:   /u/graham/projects/eee/sim/batch_utils.py
    Type:   function
    In [3]: 
    Add Comment Collapse

    sergio [1:49 PM] 
    added this Plain Text snippet
    zn% python
    Python 2.7.12 (default, Nov 19 2016, 06:48:10)
    [GCC 5.4.0 20160609] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> import batch_utils
    Warning: no DISPLAY environment variable.
    --No graphics will be displayed.
    NEURON -- VERSION 7.5 master (0388d94) 2017-08-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    first instance of j
    first instance of itmp
    first instance of using_cvode_
    first instance of movie_frame_dur_
    first instance of realtime
    first instance of running_
    first instance of rtstart
    first instance of stdrun_quiet
    first instance of screen_update_invl
    first instance of tstop
    first instance of steps_per_ms
    first instance of nstep_steprun
    first instance of runStopAt
    first instance of runStopIn
    first instance of global_ra
    first instance of mapped_nrnmainmenu_
    first instance of v_init
    first instance of n_graph_lists
    first instance of i
    first instance of eventslow
    first instance of eventcount
    first instance of cnt
    >>>
    Add Comment Collapse

    joe [1:49 PM] 
    That `first instance` stuff is pretty weird, but you are successfully importing batch_utils.

    sergio [1:50 PM] 
    it seems to work this way

    joe [1:51 PM] 
    Yeah, but you need to change you cell file back.

    sergio [1:51 PM] 
    for the new ih?

    joe [1:51 PM] 
    In eee7ps, instead of `import batch_utils` should have `from batch_utils import getspineLocs`

    [1:52] 
    Try that now and let me know if it works.

    sergio [1:52 PM] 
    ok

    sergio [1:54 PM] 
    added this Plain Text snippet: error message
    zn% ipy
    Python 2.7.12 (default, Nov 19 2016, 06:48:10)
    Type "copyright", "credits" or "license" for more information.
    IPython 5.4.1 -- An enhanced Interactive Python.
    Add Comment Click to expand inline 78 lines

    joe [1:59 PM] 
    Weird.

    [1:59] 
    Well, you seem to be importing batch_utils just fine, so let’s try this.

    [1:59] 
    Change back to `import batch_utils`

    [2:00] 
    And then change this line `spineLocs = getspineLocs(spineNum, spinedist=spineDist)`

    [2:00] 
    To: `spineLocs = batch_utils.getspineLocs(spineNum, spinedist=spineDist)`

    [2:00] 
    Try that and let me know if it works or not.

    sergio [2:01 PM] 
    so I’m going to do those changes at the eee7ps.py

    joe [2:01 PM] 
    Correct.

    sergio [2:01 PM] 
    ok

    sergio [2:04 PM] 
    added this Plain Text snippet
    In [1]: execfile('netParams.py')
    Warning: no DISPLAY environment variable.
    --No graphics will be displayed.
    NEURON -- VERSION 7.5 master (0388d94) 2017-08-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    Add Comment Click to expand inline 68 lines

    sergio [2:04 PM] 
    this is strange

    sergio [2:16 PM] 
    added this Plain Text snippet
    /u/sergioangulo/projects/sergeee/eee/sim/cells/eee7ps.py in <module>()
       9 from math import exp,log
       10 import numpy as np
    ---> 11 from batch_utils import getspineLocs
       12 #import batch_utils
    Add Comment Click to expand inline 9 lines

    sergio [2:16 PM] 
    I included an empty __init__.py

    [2:16] 
    but the error is still there

    joe [2:17 PM] 
    Damn.

    [2:20] 
    In [1]: import batch_utils
    In [2]: print(batch_utils.__file__)
    /u/graham/projects/eee/sim/batch_utils.pyc

    [2:20] 
    Print the __file__ for me, would you please?

    sergio [2:21 PM] 
    ok

    sergio [2:22 PM] 
    added this Plain Text snippet
    In [2]: print(batch_utils.__file__)
    batch_utils.pyc
    Add Comment

    joe [2:25 PM] 
    What dir are you in?

    [2:25] 
    `pwd`

    sergio [2:26 PM] 
    added this Plain Text snippet
    in [3]: pwd
    Out[3]: u'/u/sergioangulo/projects/sergeee/eee/sim/detailedCell'
    Add Comment

    joe [2:27 PM] 
    Okay, let me see something else:

    [2:27] 
    Start a new terminal.

    sergio [2:27 PM] 
    ok

    joe [2:27 PM] 
    import batch_utils

    [2:27] 
    and print it.

    [2:27] 
    Print __file__

    [2:28] 
    I want the full path to where your batch_utils is.

    sergio [2:29 PM] 
    added this Plain Text snippet
    In [1]: import batch_utils
    NEURON -- VERSION 7.5 master (0388d94) 2017-08-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    Add Comment Click to expand inline 8 lines

    sergio [2:29 PM] 
    it seems to print it fine

    [2:29] 
    I’m in the home dir

    joe [2:30 PM] 
    Show me output from `ls /u/sergioangulo/projects/eee/sim/

    sergio [2:31 PM] 
    added this Plain Text snippet
    no% ls /u/sergioangulo/projects/eee/sim/
    aa.py     batch_utils.py  compile*    layersim/  singlecell/
    aa.pyc     batch_utils.pyc conn/   mod/   x86_64@
    batch_analysis.py cells/    detailedCell/ multilayer/
    batch.py~   cfg.pyc   __init__.py  setup*
    Add Commen

    joe [2:31 PM] 
    Weird.

    [2:31] 
    Okay, new terminal, enter the following and copy me output:

    [2:31] 
    ipython

    [2:32] 
    import batch_utils

    [2:32] 
    from batch_utils import getspineLocs

    sergio [2:33 PM] 
    added this Plain Text snippet
    Python 2.7.12 (default, Nov 19 2016, 06:48:10)
    Type "copyright", "credits" or "license" for more information.
    IPython 5.4.1 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    Add Comment Click to expand inline 16 lines

    sergio [2:33 PM] 
    no error

    joe [2:33 PM] 
    WTF?!

    [2:33] 
    Okay, so I recommend in eee7ps:

    [2:33] 
    import batch_utils

    [2:34] 
    from batch_utils import getspineLocs

    [2:34] 
    Try that and let me know if it works or not.

    sergio [2:34 PM] 
    perfect joe

    joe [2:34 PM] 
    Hahaha, I don’t think we solved the problem, but hopefully found something that works…

    sergio [2:39 PM] 
    added this Plain Text snippet
    Python 2.7.12 (default, Nov 19 2016, 06:48:10)
    Type "copyright", "credits" or "license" for more information.
    IPython 5.4.1 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    Add Comment Click to expand inline 53 lines

    joe [2:40 PM] 
    This is bizarre.

    sergio [2:40 PM] 
    should I remove the .pyc files

    joe [2:41 PM] 
    Yeah, try that and let me know.

    [2:41] 
    I need to get some food.  I’ll be back in awhile.

    sergio [2:41 PM] 
    ok joe

    joe [2:42 PM] 
    In the meantime, if clearing the pyc file doesn’t work, try removing `from batch_utils import getspineLocs` and changing `spineLocs = getspineLocs(spineNum, spinedist=spineDist)` to `spineLocs = batch_utils.getspineLocs(spineNum, spinedist=spineDist)`

    sergio [2:43 PM] 
    ok joe

    sergio [3:17 PM] 
    it seems strange. import getspineLocs where in my home dir, eee/sim, eee/sim/multilayer, but not in eee/sim/singlecell, eee/sim/detailedCell

    sergio [4:46 PM] 
    it’s working now Joe!

    joe [7:49 PM] 
    Everywhere?  That’s great.

    ----- Tuesday, October 24th -----
    sergio [6:28 AM] 
    yep, it was conflicting with an old batch_utils on those dirs

    joe [6:30 AM] 
    Whew.  Well, it’s a relief you got it working!

    sergio [6:31 AM] 
    the plateau from the cell looks great!

    joe [6:33 AM] 
    That’s an even bigger relief!  :slightly_smiling_face:


* 2017-10-24 -- EEE Project Meeting and related work

** TODO

Explore Penny's detailed model in Netpyne
Compare sims to Srdjan's data
Find glutamate dynamics settings that improve plateaus
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Exploring Penny's model: good stim weights

Modifying cfg.py to match Penny's temp /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/cfg.py

    cfg.hParams = {'celsius': 32, 'v_init': -80}  # Used to be 34 C, changed to match Penny

And trying a smaller, cleaner set of weights
/u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/my_batches.py

    synWeight = [0.1, 0.2, 0.3, 0.4, 0.5]

Run and analyze:

    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/ ; ./runmybatches
    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/netpyne/batch_params/ ; ipython -i analyze.py

I think we want to go a bit smaller and a bit bigger on the weight:

    synWeight = [0.05, 0.20, 0.35, 0.50, 0.65, 0.8, 0.95]

Trying many synweights:
    synWeight = list(np.linspace(0.01, 0.5, 10))
    synWeight = [0.1, 0.2, 0.3, 0.4, 0.5]
    synWeight = [0.01, 0.21, 0.41, 0.61, 0.81, 1.01]
    synWeight = [0.025, 0.175, 0.325, 0.475, 0.625]
    synWeight = [0.025, 0.175, 0.325, 0.475, 0.625, 0.775, 0.925, 1.075, 1.225, 1.375]
    synWeight = [0.01, 0.26, 0.51, 0.76, 1.01, 1.26, 1.51, 1.76, 2.01]
    synWeight = list(2*np.array([0.01, 0.26, 0.51, 0.76, 1.01, 1.26, 1.51, 1.76, 2.01]))
    synWeight = np.linspace(0.2, 2.02, 6) #array([ 0.2  ,  0.564,  0.928,  1.292,  1.656,  2.02 ])

Settling on this one for now:

    synWeight = list(np.linspace(0.02, 2.02, 6)) #[0.02, 0.42, 0.82, 1.22, 1.62, 2.02]

file:gif/20171024_070803.png

** Exploring Penny's model: Cdur

Adding two batches to my_batches.py:

    # Varying Cdur
    batch = {}
    batch["label"] = "Cdur"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["NMDACdurScale"] = [0.01, 0.1, 1, 10, 100]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying syn_weight and Cdur
    batch = {}
    batch["label"] = "synWeight_Cdur"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["syn_weight"] = synWeight
    params["NMDACdurScale"] = [0.01, 0.1, 1, 10, 100]
    batch["params"] = params
    batches[batch["label"]] = batch

Good trace showing effects of Cdur:
file:gif/20171024_072626.png

** Exploring Penny's model: gmax

Currently Penny has gmaxes:
    h.gmax_AMPA = 0.1
    h.gmax_NMDA = 0.05

But we had initially discussed using gmax_NMDA = 1.0 and gmax_AMPA = 2.0

I think this will work if we simultaneously decrease the weights.

First to just try varying the gmaxes.

    # Varying NMDAgmax
    batch = {}
    batch["label"] = "NMDAgmax"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["NMDAgmax"] = [0.05, 0.10, 0.25, 0.5, 1.0]
    batch["params"] = params
    batches[batch["label"]] = batch

We can decrease gmax as long as we increase weight.  See EEE update pdf:
file:gif/20171024_1000_EEE_update.pdf

** EEE Project Meeting

Need to update mod files repo (Bill fixed problem in ih)

Ih is not in Srdjan's original model, and he doesn't think we need to include 
it now.  Everyone agrees we leave it out.  Asking in Slack now whether we 
should also remove ih from simplified model.  Bill says we should remove ih.

The change in behavior with 2 Celsius change in temperature is odd, and 
shouldn't be like that.  Bill says we should check on Q10 values in the 
mod files.  Srdjan and Hines both agree there is a problem in our model 
with Q10 in some mod file.

Update: the problem was in kadist.mod, and has been fixed.  Penny posted mod 
file and Joe and Sergio should download and replace.

Srdjan has a cautionary tale of a postdoc who discovered that a mod file from a 
respected model had temperature affecting Na conductance, a big problem

Michael Hines: Rajnish Ranjan from BBP patched K currents at three temps and
found that Q10 does not well describe temp changes.  Bill agrees Q10 is a poor 
model.

Penny modeled Cdur as increasing with increasing synaptic weight (100*w) 
to mimic how experimentally a larger glutamate puff would last longer in the 
synapse.  She has no reasoning behind value chosen.

Srdjan recommends looking into effects of Cdur by putting channel into a 
single-compartment model and systematically adjusting Cdur and recording
response, then simply plot EPSP versus Cdur to see its effect.

Srdjan wants to know about the "ripples" (very small oscillations) in 
Figure 3 of my pdf update: 
file:gif/20171024_1000_EEE_update.pdf

These are never seen experimentally.  Penny will look into it as this is her
detailed model.

*** Chats during and after meeting

    joe [7:39 AM] 
    Hey Bill, are you available right now for a quick Hangout to test my connection?

    billl [7:42 AM] 
    sure

    joe [7:44 AM] 
    Did you get an invite to the Hangout?

    [7:44] 
    https://hangouts.google.com/call/1U7pLtCI9DOpoys7wlcQAAEE

    billl [7:45 AM] 
    maybe ; don't read emails much

    joe [7:46 AM] 
    Bill can you hear me?

    [7:46] 
    I can hear you, Bill.

    sergio [7:46 AM] 
    I can hear both

    joe [7:50 AM] 
    Update for meeting: https://docs.google.com/document/d/1gv2xLO50qR9vDrX3UPMyMePpl4sjzN9iRky6jYtID3U/edit

    joe [7:50 AM] 
    shared this file
    EEE Project Meeting -- 2017-10-24 -- Joe
    Document from Google Drive
    Click to open in Google Drive
    Add Comment

    billl [7:57 AM] 
    using that same hangout above?

    sergio [7:58 AM] 
    this one:

    [7:58] 
    https://hangouts.google.com/call/xpWFtMFPxUZKVPRrfCP1AAEE

    billl [8:07 AM] 
    so what did we decide about the ih ?  too hard to handle?
    1 reply Today at 8:28 AM View thread

    sergio [8:07 AM] 
    so Joe, the idea is to move sims to 32 celsius?


    billl [8:07 AM] 
    oh penny did you get srdjan input on ih?

    [8:08] 
    why 32 and not 36?   (hope hasn't been 6.3??)

    joe [8:10 AM] 
    uploaded and commented on this image: Temp diff, top=32 (Penny), bottom=34 (Joe and Serg)
    1 Comment
    I was having a hard time matching Penny’s experiment until I realized that she is set at 32 and we are set at 34.  It makes a bigger difference than I would have thought!

    billl [8:10 AM] 
    wow, what q10s do we have in those mod files?

    joe [8:10 AM] 
    What temperature should we all be at?  36?

    billl [8:11 AM] 
    36 is most relevant to the body but 32 or 34 is fine -- esp since all very vague anyway -- ie a lot of experiments done at 22 and we don't know the q10s + q10 is not even an accurate model of temp depednece

    joe [8:12 AM] 
    Do you prefer 32 or 34?

    billl [8:12 AM] 
    i love 32 -- it is a power of 2

    joe [8:12 AM] 
    Haha! Perfect.  Good to have logical reasons for our decisions.  :wink:

    billl [8:13 AM] 
    and prob better than using 64

    [8:13] 
    but more importantly you're saying that that's what we have working so that's great - we could even redefine 32 to be 36 or 37 by simply altering all these very vague Q10s

    joe [8:14 AM] 
    Sergio, you and I need to change our temps to 32 (in the cell model files).  Penny, you got lucky.  :wink:

    sergio [8:15 AM] 
    ok

    billl [8:15 AM] 
    luck? it's her deep mathematical insight

    sergio [8:28 AM] 
    Penny has some questions about the ih

    penny [8:38 AM] 
    Hey, Srdjan is here

    [8:38] 
    want to have meeting now?

    billl [8:38 AM] 
    sure

    penny [8:38 AM] 
    I have no idea why it is 32. The Ih doesn't work for me yet... I get plateau by just Ih. lol

    [8:39] 
    @sergio @joe are you guys still available?

    billl [8:39 AM] 
    so ih helps with plateau?  or your just talking about that oscillation?

    penny [8:40 AM] 
    uploaded and commented on this image: Ih_AMPA_8_NMDA_8_NMDA_Beta_0.05_NMDA_Cdur_1_Syn_Weight_0_20171023-173921.png
    1 Comment
    This is no input, just adding Ih

    penny [8:40 AM] 
    I must set up something wrong

    billl [8:42 AM] 
    not necessarily -- ih will cause a transient depolarization -- this could help us for getting plat maybe but will need to balance it so doesn't go off by itself

    [8:43] 
    are we doing hangout? -- pointer?

    penny [8:43 AM] 
    uploaded this image: Ih_AMPA_8_NMDA_8_NMDA_Beta_0.05_NMDA_Cdur_1_Syn_Weight_0_20171023-160555.png
    Add Comment

    penny [8:43 AM] 
    By turning the pass membrane potential, this is the best I can get.

    billl [8:43 AM] 
    what's the difference between the two of them?

    penny [8:43 AM] 
    still have the little up at the beginning. I am looking into the mod file.

    [8:44] 
    The passive membrane potential are set at different level for those two

    sergio [8:44 AM] 
    https://hangouts.google.com/call/PP3whj6TF0WEKCWekp8dAAEE

    billl [8:44 AM] 
    problem with the pass one is that need to properly set up the ih INITIAL block -- let's take a look at that

    penny [8:44 AM] 
    I see. I will tell Srdjan to log in

    salvadord [8:46 AM] 
    what value are u using ih params (ehd, gbar (soma, tuft, slope), elk, clk, glk, vhalfl, vhalft) ?

    [8:46] 
    I’m at doctor waiting room but will join in to listen

    penny [9:35 AM] 
    added and commented on this Plain Text snippet
      def Add_Ih(self):
        for sec in self.soma:
          sec.insert('hd')
          sec.gbar_hd = gbar_h*(1+100/(1+exp(half/slope)))
          vhalfl_hd = -82
      
        for sec in self.basal_list:
          sec.insert('hd')
          sec.gbar_hd = gbar_h*(1+100/(1+exp(half/slope)))
      
          h.distance(0,0.5,sec = self.soma[0])
          for seg in sec.allseg():
            dist = h.distance(seg.x, sec=sec)
            if (dist > 100):
              vhalfl_hd = -90
            else:
              vhalfl_hd = -82
      
        for sec in self.apical:
          sec.insert('hd')
          h.distance(0,0.5,sec = self.soma[0])
          for seg in sec.allseg():
            dist = h.distance(seg.x, sec=sec)
            sec(seg.x).gbar_hd = gbar_h *(1+100/(1+exp((half - dist)/slope)))
            if (dist > 100):
              vhalfl_hd = -90
            else:
              vhalfl_hd = -82
    1 Comment Collapse
    I was using the same value as your PTcell.hoc. Not sure why it doesn't work property.

    billl [9:47 AM] 
    anyway let's pull ih out for now as srdjan suggested and figure out why we have this weird temp dependence -- first penny you should check if you see same problem when you change temp in your model -- to make sure there's not some other bug somewhere

    penny [9:48 AM] 
    Okay. I will change the temperature

    penny [9:59 AM] 
    uploaded and commented on this file
    Tuesday- October 24- 2017.pdf
    392kB
    PDF
     Click to view
    1 Comment
    The trace would go off if temperature is higher than 32. Not sure if there is a upper value set at 32 in one of the mod file.

    penny [9:59 AM] 
    I will look into it

    billl [10:10 AM] 
    these 3 have a q10 of 5 which is pretty high --
    IL.mod:37:    q10=5
    kadist.mod:33:    q10=5 
    kaprox.mod:28:    q10=5

    [10:10] 
    but not crazy high -- IL maybe could make a difference

    [10:11] 
    40% more current with 2 degree shift

    [10:11] 
    sorry not more current -- 40% faster

    [10:12] 
    don't see any where g is dependent on q10 which is what sa was worried about

    penny [11:02 AM] 
    Thanks! Should I lower the q10 in IL?

    penny [11:10 AM] 
    Hmm, IL is only in axon.

    billl [11:13 AM] 
    did you see the change wiht the 2 deg diff?

    penny [11:18 AM] 
    yes, pretty big difference.

    billl [11:18 AM] 
    show the 2 traces?

    penny [11:19 AM] 
    ? Sorry, I haven't modified any q10 yet. I mean big difference in the trace I showed earlier

    [11:19] 
    i will change q10

    billl [11:19 AM] 
    no, i mean show the traces at 32deg vs 34deg

    [11:19] 
    don't bother chaning q10s

    penny [11:20 AM] 
    okay

    billl [11:20 AM] 
    i would suggest looking at sims with eg IL removed entirely using gbar or gmax=0

    [11:20] 
    then see if they are the same

    [11:21] 
    then put that one back and take out another one

    [11:21] 
    for some of these you won't get a very sensible reasonable sim but the question now is just whether 32 differs from 34

    penny [11:21 AM] 
    uploaded this image: Screen Shot 2017-10-24 at 2.21.16 PM.png
    Add Comment

    billl [11:22 AM] 
    yup that's different

    penny [11:22 AM] 
    okay~ I will remove IL and see what is the difference

    penny [11:27 AM] 
    uploaded and commented on this image: Screen Shot 2017-10-24 at 2.21.16 PM.png
    1 Comment
    Removing IL has no effect on the basal input evoked effect we are looking at.

    penny [11:27 AM] 
    I will check kadist and kaprox too

    [11:28] 
    OOPS, wrong image

    penny [11:28 AM] 
    uploaded and commented on this image: Screen Shot 2017-10-24 at 2.26.20 PM.png
    1 Comment
    This is the one with/without IL

    billl [11:35 AM] 
    you were right before about chaning q10 -- next one to try is ina but don't set gbar to 0;  set q10 for naf to 1

    penny [11:42 AM] 
    okay

    penny [11:43 AM] 
    uploaded and commented on this image: Screen Shot 2017-10-24 at 2.41.47 PM.png
    1 Comment
    BTW, here is removing kadist and kaprox in soma and basal dendrites. Will try ina next

    billl [11:44 AM] 
    yeah for all of them like you said before just set q10=1 rather than removing -- then will get traces similar to what you started with

    penny [11:45 AM] 
    okay

    penny [11:51 AM] 
    uploaded and commented on this image: Screen Shot 2017-10-24 at 2.50.47 PM.png
    1 Comment
    Great! The problem seems to be the q10 for kadist and kaprox.

    penny [11:52 AM] 
    The orignal q10 for na is 2.3. I guess I will just tune q10 in kadist and kaprox

    billl [11:52 AM] 
    what was their q10?

    penny [11:52 AM] 
    In the first row, q10 = 1 for all of them

    [11:52] 
    in the second row, q10 = 1 for kadist and kaprox

    billl [11:52 AM] 
    tune -- can just set to 1 -- but before doing that let's see which of those 2 is the problem or if both are

    penny [11:53 AM] 
    Totally make sense. Okay

    penny [12:00 PM] 
    uploaded and commented on this image: Screen Shot 2017-10-24 at 2.59.31 PM.png
    1 Comment
    Cool! The problem is kadist

    billl [12:01 PM] 
    they both had an orig q10 of 5?

    penny [12:02 PM] 
    Yup~

    [12:02] 
    both were 5. change q10 of kadist makes the difference

    billl [12:03 PM] 
    i'm thinking kadist is too powerful since (i assume) is distal so looking at high impedance - ka has inactivation?

    [12:03] 
    gka = gkabar*n*l  : yes n activ; l inacti

    [12:04] 
    so change q10 for this to 1.0; this is where i would like to have a central repo for these mod files so would immediately be seen by everyone but anyway only 4 of us at present (including me) so can change in all these places

    penny [12:06 PM] 
    Great! Thanks!

    billl [12:10 PM] 
    @joe @sergio -- change files in your repos please -- @penny -- post fixed file here so they can just copy and no risk of edit typos

    penny [12:10 PM] 
    Yep. No problem

    sergio [12:11 PM] 
    ok

    penny [12:14 PM] 
    added and commented on this Plain Text snippet: kadist.mod
    TITLE K-A channel from Klee Ficker and Heinemann
    : modified to account for Dax A Current ----------
    : M.Migliore Jun 1997
    : modified the q10 value on Oct 24, 2017
    : the original value q10 = 5 can cause big problem when temperature is 34.
    : q10 is lowered to 1 to reduce temperature sensitivity.
    UNITS {
      (mA) = (milliamp)
      (mV) = (millivolt)
      (mS) = (millisiemens)
    }
    INDEPENDENT {t FROM 0 TO 1 WITH 1 (ms)}
    PARAMETER {
        dt (ms)
      v (mV)
        ek = -90 (mV)       : must be explicitely def. in hoc
      celsius = 24  (degC)
      gkabar=.008 (mho/cm2)
        vhalfn=-1  (mV)
        vhalfl=-56  (mV)
        a0l=0.05   (/ms)
        a0n=.1  (/ms)
        zetan=-1.8  (1)
        zetal=3  (1)
        gmn=0.39  (1)
        gml=1  (1)
      lmin=2 (ms)
      nmin=0.1 (ms)
      pw=-1  (1)
      tq=-40 (mV)
      qq=5 (mV)
      q10= 1 : 5  the orginal q10 value is 5, changed it to 1 on Oct 24, 2017
      qtl=1
        nscale=1
        lscale=1
    }
    NEURON {
      SUFFIX kad
      USEION k READ ek WRITE ik
        RANGE gkabar,gka,ik
        RANGE ninf,linf,taul,taun
        GLOBAL lmin,nscale,lscale
    }
    STATE {
      n
        l
    }
    ASSIGNED {
      ik (mA/cm2)
        ninf
        linf
        taul  (ms)
        taun  (ms)
        gka  (mho/cm2)
        qt
    }
    INITIAL {
        rates(v)
        n=ninf
        l=linf
        gka = gkabar*n*l
      ik = gka*(v-ek)
    }
    BREAKPOINT {
      SOLVE states METHOD cnexp
      gka = gkabar*n*l
      ik = gka*(v-ek)
    }
    DERIVATIVE states {
        rates(v)
        n' = (ninf-n)/taun
        l' = (linf-l)/taul
    }
    FUNCTION alpn(v(mV)) {
    LOCAL zeta
     zeta=zetan+pw/(1+exp((v-tq)/qq))
     alpn = exp(1.e-3*zeta*(v-vhalfn)*9.648e4 (degC/mV)/(8.315*(273.16+celsius)))
    }
    FUNCTION betn(v(mV)) {
    LOCAL zeta
     zeta=zetan+pw/(1+exp((v-tq)/qq))
     betn = exp(1.e-3*zeta*gmn*(v-vhalfn)*9.648e4 (degC/mV)/(8.315*(273.16+celsius)))
    }
    FUNCTION alpl(v(mV)) {
     alpl = exp(1.e-3*zetal*(v-vhalfl)*9.648e4 (degC/mV)/(8.315*(273.16+celsius)))
    }
    FUNCTION betl(v(mV)) {
     betl = exp(1.e-3*zetal*gml*(v-vhalfl)*9.648e4 (degC/mV)/(8.315*(273.16+celsius)))
    }
    LOCAL facn,facl
    :if state_borgka is called from hoc, garbage or segmentation violation will
    :result because range variables won't have correct pointer. This is because
    : only BREAKPOINT sets up the correct pointers to range variables.
    :PROCEDURE states() {   : exact when v held constant; integrates over dt step
    :    rates(v)
    :    n = n + facn*(ninf - n)
    :    l = l + facl*(linf - l)
    :    VERBATIM
    :    return 0;
    :    ENDVERBATIM
    :}
    PROCEDURE rates(v (mV)) { :callable from hoc
        LOCAL a,qt
        qt=q10^((celsius-24)/10 (degC))
        a = alpn(v)
        ninf = 1/(1 + a)
        taun = betn(v)/(qt*a0n*(1+a))
        taun = taun/nscale
      if (taun<nmin) {taun=nmin}
        facn = (1 - exp(-dt/taun))
        a = alpl(v)
        linf = 1/(1+ a)
      taul = 0.26(ms/mV)*(v+50)/qtl
        taul = taul/lscale
      if (taul<lmin/qtl) {taul=lmin/qtl}
        facl = (1 - exp(-dt/taul))
    }
    1 Comment Collapse
    I will update it on the bitbucket and neurosim repo too

    billl [12:21 PM] 
    btw what is difference between kadist and kaprox?

    [12:22] 
    (other than location)

    penny [12:22 PM] 
    I have a note for the detail of this. Let me find it

    billl [12:22 PM] 
    bbi10m

    penny [12:24 PM] 
    uploaded and commented on this file
    Monday- August 7- 2017 - Potassium channels.pdf
    809kB
    PDF
     Click to view
    1 Comment
    Here is the A-type potassium channel distribution in Srdjan

    penny [12:25 PM] 
    In Srdjan's model.

    [12:28] 
    i don't see difference except location and the distribution pattern

    billl [12:45 PM] 
    added this Perl snippet: bunch of parameter differences
    <     vhalfn=11  (mV)
    ---
    >     vhalfn=-1  (mV)
    18,19c23,24
    <     a0n=0.05  (/ms)
    <     zetan=-1.5  (1)
    ---
    >     a0n=.1  (/ms)
    >     zetan=-1.8  (1)
    21c26
    <     gmn=0.55  (1)
    ---
    >     gmn=0.39  (1)
    Add Comment Collapse

    penny [12:54 PM] 
    Nice~ Did you use some code to compare the difference?

    billl [12:55 PM] 
    diff

    [12:55] 
    diff - compare files line by line

    penny [1:05 PM] 
    Cool

    sergio [1:30 PM] 
    srdjan commented in the meeting his preference to use smaller gmax values, similar to the ones in the detailed model. Are we going to use this values for the reduce model?

    billl [1:31 PM] 
    if we set the Rin to be similar should be able to use similar values

    sergio [1:32 PM] 
    ok

    billl [1:33 PM] 
    how much > are the values that joe set?

    [1:33] 
    were you able to get the Rin to be ~same?

    sergio [1:35 PM] 
    just for the soma

    billl [1:35 PM] 
    ok good; but why not the dend?

    [1:35] 
    @joe -- what's the issue with gbar values?

    sergio [1:39 PM] 
    in the detailed cell, we have the gmax for AMPA= 0.05 and for NMDA = 0.1

    [1:40] 
    in the reduced cell, the gmax for NMDA is set 1.0

    [1:41] 
    I haven’t measured the Rin in the dend eee7ps, let me check that

    billl [1:41 PM] 
    k

    joe [1:56 PM] 
    Yeah, like Sergio said.  We can set the gmax values wherever we want (we had discussed AMPA/NMDA of 2/1, Srdjan prefers 0.1/0.05).  We just increase the weight as we decrease the gmax.  
    We just needed to all agree on values, and I believe we have chosen gmax_NMDA=0.05 and gmax_AMPA=0.1

    billl [1:58 PM] 
    oh so we're ok on all the voltage senseitive channels?  -- sergio seemed to be saying all of the gmax values

    sergio [2:01 PM] 
    sorry, I was asking only for the AMPA/NMDA gmax values

    billl [2:02 PM] 
    oh ok ; np

    joe [2:03 PM] 
    Do we want to remove ih from the simplified model?

    billl [2:05 PM] 
    y

    joe [2:05 PM] 
    :+1:

** Stuff to do per the meeting

1) change the temp in all cell models to 32 celsius
  1b) set temp as a cfg.param and run a batch varying it 
2) replace kadist.mod with the version Penny posted in Slack
  2b) check temp dependence of Penny's model after switch
3) update Neurosim mod repos
4) remove ih from simplified cell model
5) recompile mod files!


*** Completing 3:
    
    graham-mac% which nsimupdate
    nsimupdate:    aliased to python /usr/site/nrniv/local/python/nsimrepos.py update
    graham-mac% nsimupdate

*** Completing 2:

    graham-mac% rm /u/graham/projects/eee/sim/penny/eee_detailed_model/mod/kadist.mod
    graham-mac% mv /Users/graham/Downloads/kadist.mod /u/graham/projects/eee/sim/penny/eee_detailed_model/mod/kadist.mod

Need to finish 1b before I can get to 2b...

*** Completing 1:

Changing 
    h.celsius     = 32.0 #34.0 # for in vitro opt
In cell models:
    /u/graham/projects/eee/sim/cells/SPI6.py
    /u/graham/projects/eee/sim/cells/eee6.py
    /u/graham/projects/eee/sim/cells/eee7.py 
    /u/graham/projects/eee/sim/cells/eee7ps.py
    /u/graham/projects/eee/sim/cells/eee7us.py
Committing.

*** Completing 1b:

Added to cfg.py
    cfg.temp = 666
    cfg.hParams = {'celsius': cfg.temp, 'v_init': -80} 

Added to netParams:
    print
    print("=======================================================")
    print(h.celsius)
    h.celsius = cfg.temp
    print(h.celsius)
    print("=======================================================")
    print
    print

executing netParams prints out:
    =======================================================
    6.3
    666.0
    =======================================================

6.3 is worrisome, but surely can't be the temp actually run at...
It's good that setting it to cg.temp works.

Adding a temp varying batch to my_batches:

    # Varying temp
    batch = {}
    batch["label"] = "temp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["temp"] = [0, 6.3, 32, 34, 37]
    batch["params"] = params
    batches[batch["label"]] = batch

Running my_batches.

Strange results...

Adding this to netParams:
    cfg.hParams['celsius'] = cfg.temp

And removing:
    h.celsius = cfg.temp

Delivers the expected results:
file:gif/20171024_180329.png

Clearly the temp was never 6.3 as temporarily feared.

However, it looks like Penny's model is still temp-dependent...

Damn.  I need to recompile her mod files because we changed kadist.mod!

Recompiling now.  

    graham-mac% rm -r /u/graham/projects/eee/sim/penny/eee_detailed_model/mod/x86_64/
    graham-mac% cd /u/graham/projects/eee/sim/penny/eee_detailed_model/mod/
    graham-mac% mkmod

Might as well recompile my mods right now as well.  

    Deleting all files except parameters.multi from:
        /u/graham/projects/eee/sim/mod/

    graham-mac% cd /u/graham/projects/eee/sim/mod/; mkmod

Back to completing item 1b) set temp as a cfg.param and run a batch varying it 

*** 2b) check temp dependence of Penny's model after switch

So now, temp shouldn't affect results as much.  Re-running batch to see.

Hmmm...  Still seeing a strong difference between 32 and 34...  (32 still is a 
good plateau, 34 is depol blocked)

Changing the batch params to zoom in on diff:

    # Varying temp
    batch = {}
    batch["label"] = "temp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["temp"] = [30, 31, 32, 33, 34, 35, 36]
    batch["params"] = params
    batches[batch["label"]] = batch


Yeah, temp sensitivity seems to still be a problem.  I'm showing Penny the 
figure and asking her what she thinks:

file:gif/20171024_182427.png

*** 4) remove ih from simplified cell model

Actually, would be cool to parameterize it and batch the difference
(params['gbar_ih'] = [0, 1])


* 2017-10-25 -- Spines and celsius

** TODO

Remove ih from simplified cell model (plot difference)
Explore Penny's detailed model in Netpyne
Compare sims to Srdjan's data
Find glutamate dynamics settings that improve plateaus
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Helping Sergio with spines, Penny with temp

Sergio is working on stimming same spines as Penny in her detailed model.

Penny is looking into the effect of temp on sims

*** Chat in #eee-theory

    sergio [10:01 AM] 
    Joe, in the eee7ps cell model,  can you modify the location of the spine along the basal dend?

    billl [10:01 AM] 
    1 spine?  thought many spines?

    sergio [10:01 AM] 
    many spines

    joe [10:02 AM] 
    255 spines.

    billl [10:02 AM] 
    ah; ok good

    joe [10:02 AM] 
    What do you want to do by moving spines

    billl [10:03 AM] 
    if 255 prob pretty much filled up i would think?

    joe [10:03 AM] 
    Pretty filled up.  Basal dendrite is only 200 um long, so average interspine distance is less than a micron.

    sergio [10:04 AM] 
    just thinking about the stim in the detailed cell model, these were located in a region of the basal dend (0.4 to 0.7)

    joe [10:06 AM] 
    It’s easy to set the model such that spines between 0.4 and 0.7 are activated, without actually moving any spines.

    [10:07] 
    cfg.glutLoc    = 0.3    # fraction of branch, not microns
    cfg.glutSpread = 10.0   # microns, diameter of glutamate puff

    sergio [10:08 AM] 
    thanks joe

    joe [10:09 AM] 
    So to activate spines between 0.4 and 0.7, you can set cfg.glutLoc = 0.55, and cfg.glutSpread = 60 (0.3*200um)

    sergio [10:10 AM] 
    perfect!

    salvadord [10:10 AM] 
    nice

    sergio [10:10 AM] 
    I will try that

    joe [10:11 AM] 
    :slightly_smiling_face:

    [10:12] 
    Be careful of:
    cfg.glutDelay  = 1.0    # ms/um delay in glutamate activation
    cfg.glutDecay  = 10.0   # %/um decrease in glutamate amplitude

    [10:12] 
    If you want the same time/amp of stim at all spines you should set these values to zero.

    sergio [10:13 AM] 
    ok

    sergio [2:47 PM] 
    uploaded this image: glut loc 0.55, spread 60
    1 Comment

    sergio [2:47 PM] 
    Joe, another question, how do the params for glut spread work?

    [2:48] 
    I mean the extrasynatic

    joe [3:02 PM] 
    There are two parameters that control the spillover glutamate:

    [3:02] 
    # spillover params
    cfg.spillDelay    = 10.0 # (ms) time to reach dendritic shaft
    cfg.spillFraction = 0.0  # (%)  percent of glutamate weight that reaches shaft

    [3:03] 
    The spillFraction is the percent of glutamate (syn weight) that reaches the dendritic shaft (set at zero, there is no spillover).

    [3:04] 
    The spillDelay is an additional delay (on top of delay to reach spine) to reach the dendritic shaft.

    joe [3:05 PM] 
    commented on sergio’s file glut loc 0.55, spread 60
    This is interesting in that Srdjan was looking for a “plateau within a plateau” at the beginnings of a plateau that he sometimes sees experimentally…

    sergio [3:09 PM] 
    nice! so for our model, we normally keep the spillFraction at 0 or close to 0?

    joe [3:13 PM] 
    Good question.  I haven’t had much time to explore spillover yet, and I’m not totally sure what a reasonable value would be.

    [3:14] 
    It’d be good to get suggested values from Srdjan and Penny.

    sergio [3:18 PM] 
    ok

    penny [4:24 PM] 
    I don't have much insight either. I am using same amount of NMDA on dendritic shaft and on spines for now. Let me ask him tomorrow

*** Chat with Penny and Sergio

    joe [6:24 PM] 
    uploaded and commented on this image: temp sensitivity
    1 Comment
    Hey Penny, are you sure changing kadist.mod fixed the temp sensitivity?  I just replaced the mod file and recompiled, and I’m still seeing this:

    penny [7:02 PM] 
    Interesting. It works for me, but only up to 34. If higher than 34, it can still get that.

    [7:03] 
    Let me check one more time

    penny [7:09 PM] 
    Interesting, 34 degree works good for me. 35 would go off. How many NMDA, AMPA and Beta, Cdur are you using? I will check the same value you have.

    penny [7:17 PM] 
    Hmmm, when I increase the synaptic weight to 0.5, it does happen again at 34 degree.

*** Chat with Sergio

    sergio [11:42 AM] 
    added this Plain Text snippet
    # glutLoc should be a spine number (0 to 255)
    # glutSpread should be the number of spines to spread to 
    # (starts at glutLoc spine and increases; shouldn't come to > spine 255)
    cfg.glutSpine   = 50
    cfg.glutSpread  = 1 
    Add Comment

    sergio [11:42 AM] 
    Hi Joe

    [11:43] 
    I’m still confused about this params

    [11:43] 
    cfg.glutSpine is the total number of spines?

    [11:43] 
    or just the spine that we are going to stimulate

    joe [11:47 AM] 
    Ahh, you’re using an older version of the file.  In this version, spines are numbered from 0 (nearest soma) to 254 (farthest from soma).  cfg.glutSpine is the nearest spine you want to activate, and cfg.glutSpread is how many spine to spread to (away from soma).

    sergio [11:47 AM] 
    oh i see

    joe [11:48 AM] 
    So to activate spines 100-110, you would set glutSpine=100 and glutSpread=10

    [11:48] 
    This was before I switched to the ability to pick spines based on location instead of spine number.

    sergio [11:49 AM] 
    I got it

    [11:51] 
    and where do you the code with the ability to pick spines by location?

    [11:51] 
    sounds cool all this posibilities

    joe [11:55 AM] 
    To pick by location, you can use the code in batch_glutdyn (/u/graham/projects/eee/sim/batches/batch_glutdyn/).  Settings are in cfg.py and the implementation is in netParams.py.

    sergio [11:55 AM] 
    thanks Joe!

    joe [11:55 AM] 
    np

    sergio [11:55 AM] 
    I will take a look

    sergio [1:18 PM] 
    the code is really nice

    joe [1:18 PM] 
    Thanks!

    sergio [3:18 PM] 
    Thanks Joe for helping me on this

    joe [3:19 PM] 
    No problem. Glad to help.

** Exploring detailed model


* 2017-10-26 -- ih, Rm, and membrane tau

** TODO

Remove ih from simplified cell model (plot difference)
Increase Rm to Sergio's values
Explore Penny's detailed model in Netpyne
Compare sims to Srdjan's data
Find glutamate dynamics settings that improve plateaus
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Remove ih from simplified model

Actually, instead of removing completely, I'll set it up to scale ih gbar:
can set to zero to remove ih or 1.0 to have set at original value.

Adding to cfg:
    cfg.ihScale     = 0.0 # Scales ih conductance

Adding to netParams:
    for secName,sec in cell_params['secs'].iteritems(): 
        ...
        if hasattr(cfg, 'ihScale'):
            if 'ih' in sec['mechs']:
                print("===========")
                print("===========")
                print(secName)                
                print("changing ih scale")
                print(sec['mechs']['ih'])
                print(sec['mechs']['ih']['gbar'])
                sec['mechs']['ih']['gbar'] = cfg.ihScale * sec['mechs']['ih']['gbar']
                print(sec['mechs']['ih']['gbar'])
                print("===========")
                print("===========")
                print

Error when executing netParams:
    NameError: gbar_ih, the mechanism does not exist at <eee7us.eee7us instance at 0x1074aaea8>.soma(0.5)

Yeah, because we switched to new ih mod file, with suffix hd instead of ih...

*** Changing references back to old ih mod

/u/graham/projects/eee/sim/cells/eee6.py
/u/graham/projects/eee/sim/cells/eee7.py
/u/graham/projects/eee/sim/cells/eee7us.py
/u/graham/projects/eee/sim/cells/eee7ps.py

sec.insert('hd') # Migliore h-current --> sec.insert('ih') # h-current

*** Executing netParams

Works as expected.  :)

*** Comparing with and without ih

Commenting out existing batches in my_batches.py and adding:

    # Varying ih on/off
    batch = {}
    batch["label"] = "ih"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["ihScale"] = [0.0, 1.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying ih on/off and glutAmps
    batch = {}
    batch["label"] = "ih_glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["ihScale"] = [0.0, 1.0]
    params["glutAmp"] = glutAmps
    batch["params"] = params
    batches[batch["label"]] = batch

Running batch:

    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_glutdyn/ ; ./runmybatches
    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_glutdyn/ ; ipython -i analyze.py

*** Removing ih reduces plateaus

file:gif/20171026_170120.png


** Match Rin with Sergio's work and explore effects

Sergio set all Rm to 10x

Adding to cfg:
    # other params
    cfg.RmScale = 10.0

Need to set g_pas = 1.0/(secRM * RmScale) for secs which aren't spines

    sec['mechs']['pas']['g'] = (1.0/RmScale) * sec['mechs']['pas']['g']

Adding to netParams:

        if hasattr(cfg, 'RmScale'):
            if "neck" not in secName and "head" not in secName:
                print
                print("Rm")
                print(secName)
                print(sec['mechs']['pas']['g'])
                sec['mechs']['pas']['g'] = (1.0/cfg.RmScale) * sec['mechs']['pas']['g']
                print(sec['mechs']['pas']['g'])

And executing.

Output is as expected.  Removing print statements.

Adding to my_batches.py:

    # Varying RmScale
    batch = {}
    batch["label"] = "RmScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["RmScale"] = [1.0, 5.0, 10.0, 50.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying RmScale and glutAmps
    batch = {}
    batch["label"] = "RmScale_glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["RmScale"] = [1.0, 5.0, 10.0, 50.0]
    params["glutAmp"] = glutAmps
    batch["params"] = params
    batches[batch["label"]] = batch

*** Increasing RmScale increases the plateaus

file:gif/20171026_173617.png

** Srdjan concerned that membrane time constant doesn't deccrease during plateaus
    billl [12:39 PM] 
    added this Perl snippet: urgent query from srdjan -- tau_memb during plateau
    
    We here reconsider current theories of neural ensembles in the context of recent discoveries about neuronal dendritic physiology. Our central hypothesis is that synaptically-evoked dendritic plateau potentials (a plateau), mediated by NMDA receptors, lead to an activated, prepared, state of a neuron that favors spike generation. The plateau both depolarizes the cell towards spike threshold, and provides faster response to inputs through a shortened membrane time constant. The key physiological observation is that the dendritic plateau potential produces sustained somatic depolarizations. Our hypothesis relates this cellular change to changes in ensemble dynamics and in network information flow. The plateau provides the Prepared state with a time window of 200-500 ms. During this time a neuron can tune into ongoing network activity and synchronize spiking with other neurons to provide a coordinated Active state which would permit "binding" of signals through coordination of neural activity across a population. The transient Active ensemble is embedded in the longer-lasting Prepared ensemble of neurons. We hypothesize that "embedded ensemble encoding" may be an important organizing principle in networks of neurons.
    
    I am no longer certain that dendritic plateau potential shortens membrane time constant thus serving synaptic inputs impinging on neighboring dendrites. Bill, could you determine in a model if this idea about TAU is true or false? If false, we need to delete membrane time constant from discussions.
    Add Comment Collapse

    sergio [12:48 PM] 
    so for membrane time constant, we need to modify Rm and Cm, right?

    billl [12:49 PM] 
    no

    joe [12:49 PM] 
    Time constant = Cm * Rin

    billl [12:49 PM] 
    he's asking for tau_memb during plateau compared to tau_memb at rest

    [12:49] 
    test Rin and taumemb both with brief neg current inj

    [12:50] 
    time constant != Cm*Rm during plateau

    [12:50] 
    (you mean Rm i think)

    joe [12:51 PM] 
    Whoops.

    billl [12:51 PM] 
    np -- main point is that we need to test even at rest not Cm*Rm since have other channels there that have vdepend so changes apparent Rin and taumemb

    [12:52] 
    eg esp ih thought we took that out for now

    joe [12:52 PM] 
    We took out ih.

    [12:55] 
    time constant != Cm*Rm during plateau

    [12:56] 
    But how do we measure effect of current injection during plateau?

    billl [12:57 PM] 
    multiple brief neg current inj

    [12:57] 
    at RMP and then during plateau

    [12:57] 
    we measure; we don't calculate -- can calc too out of curiosity and compare

    [12:58] 
    note that taum != Rm*Cm in presence of dends -- have higher order corrections -- taum doesn't even exist really since not a single exponential

    [12:58] 
    but we still measure it

    joe [12:59 PM] 
    I’m heading out to lunch, but I’ll give it a go when I get back.

    billl [1:04 PM] 
    thx

    sergio [1:04 PM] 
    what we are going to measure is not a real taum, but an aprox to it?

    billl [1:05 PM] 
    there is no real taum - it's a fiction

    [1:06] 
    it implies a single exponential

    sergio [1:06 PM] 
    ok

    [1:06] 
    let me start working on it

    billl [1:06 PM] 
    great

    sergio [3:34 PM] 
    added this Plain Text snippet: Rin and taum at RMP and plateau
    Reduced cell eee7ps
    soma Rin at RMP: 117.0 MOhm
    basal dend Rin at RMP: 136.0 MOhm
    soma Rin during plateau: 69.0 MOhm
    basal dend Rin during plateau: 76.0 MOhm
    soma memb time constant at RMP: 209.2 us
    basal dend memb time constant at RMP: 258.1 us
    soma memb time constant during plateau: 123.4 us
    basal dend memb time constant during plateau: 144.2 us
    Add Comment Collapse

    joe [3:39 PM] 
    Microseconds?

    billl [3:39 PM] 
    seems too fast

    [3:40] 
    show some traces?

    sergio [3:41 PM] 
    I multiplied  pF (e-12) by MOhm (e6)

    billl [3:41 PM] 
    why?

    [3:42] 
    we were goig to do measurements

    [3:42] 
    no calculations

    sergio [3:43 PM] 
    uploaded this image: stim at 200ms, iclamp at 225 ms, amp -0.4
    Add Comment

    billl [3:46 PM] 
    i don't see any tests

    [3:47] 
    joe -- did you give it a try?

    sergio [3:47 PM] 
    in a experimental way, you can measure tau membrane by volt clamping the cell, with positive or neg step, and measuring the decay of the current

    [3:47] 
    is that how do you want to do it?

    joe [3:48 PM] 
    Not yet.  I’ll start working with Sergio on it now.

    billl [3:48 PM] 
    ok

    [3:48] 
    experimentally you would use current clamp

    [3:48] 
    you prob want to block spiking (block naf)

    joe [3:49 PM] 
    I was just wondering about that!  Seems like it would be tough to measure without blocking spiking.

    billl [3:49 PM] 
    if our plateau has very few spikes can find a spot between spikes

    [3:49] 
    but easier without them

    joe [3:51 PM] 
    @billl, earlier you said “multiple brief neg current inj”

    [3:51] 
    Why multiple, to try at different times in plateau?

    [3:51] 
    And brief, but long enough to get to ~37% of initial value?

    billl [3:52 PM] 
    yes since would be different at begin middle end perhaps -- or before or after a spike -- ideally should be long enough to get a plateau so can figure out how much is the 37%;  alternatively can fit piece of an exponential but that's much more hassle

    [3:52] 
    bbl

    joe [3:53 PM] 
    Great, thanks!

    sergio [3:53 PM] 
    ok

** Measure membrane time constant during rest and plateau

cfg:
    cfg.IClamp1Amp = -0.05

    ###############################################################################
    # Current inputs 
    ###############################################################################
    cfg.addIClamp = True

    cfg.IClamp1 = {'pop': ['eee7us', 'eee7ps'], 'sec': 'soma', 'loc': 0.5, 'start': 200, 'dur': 1000, 'amp': cfg.IClamp1Amp}

netParams:

    ###############################################################################
    # Current inputs (IClamp)
    ###############################################################################

    if cfg.addIClamp:   
        for iclabel in [k for k in dir(cfg) if k.startswith('IClamp')]:
            ic = getattr(cfg, iclabel, None)  # get dict with params

            # add stim source
            netParams.stimSourceParams[iclabel] = {'type': 'IClamp', 'del': ic['start'], 'dur': ic['dur'], 'amp': ic['amp']}
            
            for curpop in ic['pop']:
                netParams.stimTargetParams[iclabel+'_'+curpop] = \
                    {'source': iclabel, 'conds': {'popLabel': ic['pop']}, 'sec': ic['sec'], 'loc': ic['loc']}

my_batches:
    # Varying IClamp1 amplitude
    batch = {}
    batch["label"] = "RmScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["IClamp1Amp"] = [-0.5, -0.05, -0.005, -0.0005]
    batch["params"] = params
    batches[batch["label"]] = batch

*** Running batch

Had to change "cfg.IClamp1Amp" to "cfg.ampIClamp1" everywhere because netParams 
loads as IClamps any cfg params that begin with "IClamp"

Output:

file:gif/20171026_191630.png

Resting membrane potential is too high initially.  Need to look into Sergio's
values.



* 2017-10-27 -- Problems with plateaus

** TODO

Explore Penny's detailed model in Netpyne
Compare sims to Srdjan's data
Find glutamate dynamics settings that improve plateaus
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Temp issue

When I run batch_glutdyn, I get the following warnings:
    Warning: global variable celsius=34, but cellParams rule eee7us requires celsius=32.0
    Warning: global variable celsius=34, but cellParams rule eee7ps requires celsius=32.0

The temp is set to 32 in the cells (used to be 34): h.celsius   = 32.0

Where does the 34 come from?  Ahh, in cfg.py: cfg.hParams = {'celsius': 34, 'v_init': -80} 

I'll change that to cfg.hParams = {'celsius': 32, 'v_init': -80} 

Now to runmybatches in batch_glutdyn...

Great, the warning is gone now.


** Measure membrane time constant at rest and during plateau

Figure out problem with initial and resting membrane potential:
starts at around -75, drops exponentially to -85 in 200 ms

Cloning Sergio's repo to see his RMP and param values

    rm -r temp_serg; mkdir temp_serg; cd temp_serg; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee; cd eee/sim/mod; mkmod; cd ..

*** Running a diff between my cell and Sergio's

    --- /Users/graham/Desktop/cells/eee7ps.py Thu Oct 26 16:43:19 2017
    +++ /Users/graham/Desktop/cells/eee7ps_serg.py Fri Oct 27 07:32:35 2017
    @@ -12,7 +12,7 @@
     
     Vrest       = -88.5366550238 
     h.v_init    = -75.0413649414 
    -h.celsius   = 32.0
    +h.celsius   = 34.0 # for in vitro opt
     
     # spine properties 
     spineNum  = 255   # number of spines to add
    @@ -26,6 +26,7 @@
     spineCap  = 1.0
     spineDist = [0.982, 4.677, 10.91, 14.72, 18.24, 18.76, 19.05, 17.15, 17.38, 16.17, 15.36, 15.07, 15.24, 13.97, 12.53, 12.64, 11.84, 9.988, 11.43]
     spineLocs = getspineLocs(spineNum, spinedist=spineDist)
    +
     #spineLocs = getspineLocs(spineNum, spinedist=[1])
     
     # geom properties
    @@ -45,17 +46,20 @@
     apicCap = 1.03418636866 
     bdendCap = 1.89771901209 
     rall = 114.510490019 
    -axonRM = 3945.2107187 
    -somaRM = 18501.7540916 
    -apicRM = 10751.193413 
    -bdendRM = 13123.00174 
    +RM_factor = 10.0
    +axonRM = 3945.2107187 * RM_factor
    +somaRM = 18501.7540916 * RM_factor
    +apicRM = 10751.193413 * RM_factor
    +bdendRM = 13123.00174 * RM_factor
     
     # Na, K reversal potentials calculated from BenS internal/external solutions via Nernst eq.
     p_ek = -104.0 # these reversal potentials for in vitro conditions
     p_ena = 42.0 
     # h-current
    -h.erev_ih = -37.0 # global
    -gbar_h = 0.000140956438043 
    +#h.ehd_hd = -37.0
    +#gbar_hd = 0.000140956438043 
    +#h.erev_ih = -37.0 # global
    +#gbar_h = 0.000140956438043 
     h_gbar_tuft = 0.00565 # mho/cm^2 (based on Harnett 2015 J Neurosci)
     
     # d-current
    @@ -186,28 +190,28 @@
     
       def set_somag (self):
         sec = self.soma
    -    sec.gbar_ih = gbar_h # Ih
    +    #sec.gbar_ih = gbar_hd # Ih
         self.set_calprops(sec)
         sec.gbar_kdmc  = gbar_kdmc 
         sec.gbar_nax = gbar_nax * nax_gbar_somam
     
       def set_bdendg (self): 
         for sec in self.basal:
    -      sec.gbar_ih = gbar_h # Ih
    +      #sec.gbar_ih = gbar_hd # Ih
           self.set_calprops(sec)
           sec.gbar_nax = gbar_nax * nax_gbar_dendm
     
       def set_apicg (self):
         h.distance(0,0.5,sec=self.soma) # middle of soma is origin for distance
    -    self.nexusdist = nexusdist = 300.0
    -    self.h_gbar_tuftm = h_gbar_tuftm = h_gbar_tuft / gbar_h
    -    self.h_lambda = h_lambda = nexusdist / log(h_gbar_tuftm)
    +    #self.nexusdist = nexusdist = 300.0
    +    #self.h_gbar_tuftm = h_gbar_tuftm = h_gbar_tuft / gbar_hd
    +    #self.h_lambda = h_lambda = nexusdist / log(h_gbar_tuftm)
         for sec in self.apic:
           self.set_calprops(sec)
    -      for seg in sec:
    -        d = h.distance(seg.x,sec=sec)
    -        if d <= nexusdist: seg.gbar_ih = gbar_h * exp(d/h_lambda)
    -        else: seg.gbar_ih = h_gbar_tuft
    +      #for seg in sec:
    +      #  d = h.distance(seg.x,sec=sec)
    +      #  if d <= nexusdist: seg.gbar_ih = gbar_hd * exp(d/h_lambda)
    +      #  else: seg.gbar_ih = h_gbar_tuft
           sec.gbar_nax = gbar_nax * nax_gbar_dendm
         self.apic[1].gcalbar_cal = cal_gcalbar * calginc # middle apical dend gets more iL
     
    @@ -252,7 +256,7 @@
           sec.insert('kdr') # K delayed rectifier current
           sec.insert('kap') # K-A current
         for sec in [self.Adend3, self.Adend2, self.Adend1, self.Bdend1, self.Bdend2, self.soma]:
    -      sec.insert('ih') # h-current     
    +      sec.insert('ih') # h-current      
           sec.insert('ca_ion') # calcium channels
           sec.insert('cal') # cal_mig.mod
           sec.insert('can') # can_mig.mod

*** Results of diff

Sergio's temp is still at 34, but we all agreed to move to 32
Sergio commented out all ih stuff 
(I zero out ih using cfg and netParams)
Sergio added RM_factor to scale RM in axon, soma, and dends, RM_factor=10 
(I scale RM with cfg and netParams)

*** Other diffs

Serg has cfg.NMDAgmax = 0.05 
Mine is still at 1.0
Changing mine to 0.05

Serg has cfg.hParams = {'celsius': 34} 
I have cfg.hParams = {'celsius': 32, 'v_init': -80}
Changing mine to cfg.hParams = {'celsius': 32}

*** Chatting about RMP with Sergio and Penny

    joe [11:46 AM] 
    Hey Penny, what is the resting membrane potential in the detailed cell?  The simple cell is sitting at about -86 mV right now, and it seems low…

    joe [11:47 AM] 
    uploaded and commented on this image: current pulse to measure membrane time constant
    1 Comment
    Does my RMP seem low?

    penny [11:49 AM] 
    I set it to -67.3mV. But I think it is a little bit two high.

    joe [11:50 AM] 
    Okay.  Sergio’s is at -80.1 right now.

    penny [11:50 AM] 
    Ppl who do real recording said around -75mV would be more often

    [11:51] 
    Haha, I guess range between -70 to -80mV should all be okay

    joe [11:51 AM] 
    Sergio, do you know why yours is different from mine?  Yours is from eee7ps cell?  Our cells should be the same…

    sergio [11:52 AM] 
    agree, they should be the same. I just updated to sim to run cells like yours

    [11:53] 
    which Rm value are you using?

    joe [11:54 AM] 
    cfg.RmScale    = 10.0

    [11:55] 
    So, 10x the default values in the cell.

    sergio [11:57 AM] 
    also mine

    sergio [11:57 AM] 
    added this Plain Text snippet: params from soma
    >>> sim.net.cells[0].secs.soma
    {ions: {na: {i: 10.0, e: 42.0, o: 140.0}, ca: {i: 5e-05, e: 132.4579341637009, o: 2.0}, k: {i: 54.4, e: -104.0, o: 2.5}}, mechs: {kBK: {tau: 1.0, caPmax: 1.0, caPmin: 0.0, caVhh: 0.002, caVhmin: -2.1899738592999967, gpeak: 5.09733585163e-05, caPh: 0.002, caPk: 1.0, k: 17.0, caVhmax: 155.67}, pas: {e: -88.5366550238, g: 5.404892936362239e-05}, kdmc: {gbar: 0.000447365630734}, ih: {aslope: 11.9, ascale: 0.00643, bscale: 0.193, gbar: 0.000140956438043, ashift: 154.9, bslope: 33.1}, kap: {tq: -52.0967985869, gbar: 0.0898600246397, sh: 0.0, vhalfl: -59.7867409796, vhalfn: 32.7885075379}, can: {gcanbar: 4.60717910591e-06}, kdr: {gbar: 0.0131103978049, sh: 0.0, vhalfn: 11.6427471384}, cal: {gcalbar: 4.41583533572e-06}, nax: {gbar: 0.0345117294903, sh: 0.0}, cadad: {taur: 99.1146852282, depth: 0.119408607923, kd: 0.0, cainf: 0.00024, kt: 0.0}}, hSec: <netpyne.cell.CompartCell object at 0x7f176d5a1810>.soma, geom: {nseg: 1, diam: 28.2149102762, L: 48.4123467666, cm: 1.78829677463, Ra: 114.510490019}, topol: {}, vinit: -75.0413649414}
    Add Comment Collapse

    sergio [11:59 AM] 
    wait

    [11:59] 
    now I have -87

    [12:00] 
    similar to yours

    [12:01] 
    I have updated the params

    sergio [12:01 PM] 
    added this Plain Text snippet
    >>> sim.net.cells[0].secs.soma
    {ions: {na: {i: 10.0, e: 42.0, o: 140.0}, ca: {i: 5e-05, e: 132.4579341637009, o: 2.0}, k: {i: 54.4, e: -104.0, o: 2.5}}, mechs: {kBK: {tau: 1.0, caPmax: 1.0, caPmin: 0.0, caVhh: 0.002, caVhmin: -2.1899738592999967, gpeak: 5.09733585163e-05, caPh: 0.002, caPk: 1.0, k: 17.0, caVhmax: 155.67}, pas: {e: -88.5366550238, g: 5.404892936362239e-06}, kdmc: {gbar: 0.000447365630734}, ih: {aslope: 11.9, ascale: 0.00643, bscale: 0.193, gbar: 0.0, ashift: 154.9, bslope: 33.1}, kap: {tq: -52.0967985869, gbar: 0.0898600246397, sh: 0.0, vhalfl: -59.7867409796, vhalfn: 32.7885075379}, can: {gcanbar: 4.60717910591e-06}, kdr: {gbar: 0.0131103978049, sh: 0.0, vhalfn: 11.6427471384}, cal: {gcalbar: 4.41583533572e-06}, nax: {gbar: 0.0345117294903, sh: 0.0}, cadad: {taur: 99.1146852282, depth: 0.119408607923, kd: 0.0, cainf: 0.00024, kt: 0.0}}, hSec: <netpyne.cell.CompartCell object at 0x7f4a24576810>.soma, geom: {nseg: 1, diam: 28.2149102762, L: 48.4123467666, cm: 1.78829677463, Ra: 114.510490019}, topol: {}, vinit: -75.0413649414}
    Add Comment Collapse

    joe [12:03 PM] 
    pas: {e: -88.5366550238, g: 5.404892936362239e-06}

    joe [12:03 PM] 
    added this Plain Text snippet
    In [1]: sim.net.cells[0].secs.soma
    Out[1]: {ions: {na: {i: 10.0, e: 42.0, o: 140.0}, ca: {i: 5e-05, e: 132.4579341637009, o: 2.0}, k: {i: 54.4, e: -104.0, o: 2.5}}, mechs: {kBK: {tau: 1.0, caPmax: 1.0, caPmin: 0.0, caVhh: 0.002, caVhmin: -2.1899738592999967, gpeak: 5.09733585163e-05, caPh: 0.002, caPk: 1.0, k: 17.0, caVhmax: 155.67}, pas: {e: -88.5366550238, g: 5.404892936362239e-06}, kdmc: {gbar: 0.000447365630734}, ih: {aslope: 11.9, ascale: 0.00643, bscale: 0.193, gbar: 0.0, ashift: 154.9, bslope: 33.1}, kap: {tq: -52.0967985869, gbar: 0.0898600246397, sh: 0.0, vhalfl: -59.7867409796, vhalfn: 32.7885075379}, can: {gcanbar: 4.60717910591e-06}, kdr: {gbar: 0.0131103978049, sh: 0.0, vhalfn: 11.6427471384}, cal: {gcalbar: 4.41583533572e-06}, nax: {gbar: 0.0345117294903, sh: 0.0}, cadad: {taur: 99.1146852282, depth: 0.119408607923, kd: 0.0, cainf: 0.00024, kt: 0.0}}, hSec: <netpyne.cell.CompartCell object at 0x10c7c4e90>.soma, geom: {nseg: 1, diam: 28.2149102762, L: 48.4123467666, cm: 1.78829677463, Ra: 114.510490019}, topol: {}, vinit: -75.0413649414}
    Add Comment Collapse

    joe [12:04 PM] 
    pas: {e: -88.5366550238, g: 5.404892936362239e-06}

    [12:04] 
    So that’s the same.

    [12:05] 
    Oh, I just saw you said you have -87 also.

    [12:06] 
    Penny, so your e_pas == -67.3 mV?

    joe [12:09 PM] 
    uploaded and commented on this image: RMP was higher when we had ih
    1 Comment
    It was removing the ih that made the RMP hyperpolarize more…

    penny [12:09 PM] 
    yes~ I am using -67.3

    joe [12:09 PM] 
    Okay, and you never had ih, so your RMP actually sits right near there.

    [12:10] 
    It looks like having ih causes RMP to depolarize.

    penny [12:10 PM] 
    Removing ih is a big deal

    [12:11] 
    :cold_sweat: changed a lot of things

    joe [12:11 PM] 
    I guess we’ll have to check on everything now that ih is gone!

    [12:11] 
    But for now, Sergio and I should probably set e_pas closer to yours, Penny.

    [12:12] 
    Or we could meet in the middle, you were saying value should prob be higher?

    penny [12:12 PM] 
    my e_pas is -65

    [12:12] 
    but I remembered u tested it before, this value didn't work


    [12:13] 
    Maybe try -75mV?

    joe [12:13 PM] 
    Yeah, let’s both try -75.  If it looks okay for both of us, we’ll settle on that value.

    penny [12:14 PM] 
    Cool! I will move it to -75

    joe [12:19 PM] 
    Sergio, did you remember to set the temp of your sims to 32?  We had it at 34, but we switched to Penny’s value.

    new messages
    sergio [12:19 PM] 
    ok let me switch to 32

    [12:21] 
    how do you move the RMP to -75mV?

    joe [12:22 PM] 
    Near the top of the cell file (eee7ps.py):

    [12:22] 
    Vrest       = -88.5366550238

    [12:22] 
    The cell code later sets e_pas = Vrest

    [12:23] 
    So we’ll have: 
    Vrest = -75.0

    sergio [12:23 PM] 
    ok

    sergio [12:28 PM] 
    now I have -81

    joe [12:33 PM] 
    Anything else change much?

    new messages
    sergio [12:34 PM] 
    nop

    [12:34] 
    let me check some stim

*** Changing e_pas to -75 

Along with Penny and Sergio.  Will run a sim before and after change to 
ensure nothing too crazy happens.

Setting my_batches to run a glutAmp batch 
and cfg.addNetStim = True 
and cfg.addIClamp = False

Running batch:
    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_glutdyn/ ; ./runmybatches
    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_glutdyn/ ; ipython -i analyze.py

Huh.  Well, the trace drops to the lower RMP and the glut stim isn't enough to 
cause any spiking.  I'm going to change the e_pas.

I do that by changing Vrest near the top of the cell model files:

    M sim/cells/eee6.py
    M sim/cells/eee7.py
    M sim/cells/eee7ps.py
    M sim/cells/eee7us.py

Before:
    Vrest       = -88.5366550238 
    h.v_init    = -75.0413649414 

After
    Vrest       = -75.0 
    h.v_init    = -75.0 

Now the resting membrane potential sits at -81.

The glutAmp values aren't enough to cause spiking/plateau.  

Running batch again with glutAmp doubled.  Still no spiking.  

Running batch again with 4x glutAmp


** Plateaus aren't looking that great

But it doesn't seem to be changing Rm that did it:
file:gif/20171027_145741.png

Reducing Rm back to their original values does seem to produce better plateaus.

I'm still not seeing the height of plateau like we used to, though.  

I'm going to parameterize e_pas aka Vrest and run a batch varying it.

*** Add to netParams

       if hasattr(cfg, 'e_pas'):
            if 'pas' in sec['mechs']:
                print(secName)
                sec['mechs']['pas']['e'] = cfg.e_pas

** Set up batch dir to compare simp and det models
** Explore temp sensitivity of simp and det models


* 2017-10-30 -- Probing problematic plateaus

** TODO

Create doc to show problems with plateau 
  (summarize Friday + weekend work)
Set up batch dir to compare simp and det models
Explore temp sensitivity of simp and det models
Explore Penny's detailed model in Netpyne
Compare sims to Srdjan's data
Find glutamate dynamics settings that improve plateaus
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Plateau problems

On Friday we noticed that the plateaus weren't looking very good (after making 
a good many changes to the models).  I'll put together a summary.

Effects to consider: Rm, ih, e_pas
Also to vary: Na conductance (block to show plateaus)

Set RmScale at    1.0 and 10.0
Set ihScale at    0.0 and 1.0
Set allNaScale at 0.0 and 1.0

Vary e_pas from -90.0, -80.0, -70.0, -60.0

*** First set of batches (1 & 2 are current param values, Na on/off)

allNaScale = 1.0
ihScale    = 0.0
RmScale    = 10.0

batch_figs_1_Na=1_ih=0_Rm=10

*** Second set of batches

allNaScale = 0.0
ihScale    = 0.0
RmScale    = 10.0

batch_figs_2_Na=0_ih=0_Rm=10

*** Third set of batches (3 & 4 turn on ih, Na on/off)
 
allNaScale = 1.0
ihScale    = 1.0
RmScale    = 10.0

batch_figs_3_Na=1_ih=1_Rm=10

*** Fourth set of batches 

allNaScale = 0.0
ihScale    = 1.0
RmScale    = 10.0

batch_figs_4_Na=0_ih=1_Rm=10

*** Fifth set of batches (5 & 6 restore Rm to orig, Na on/off)

allNaScale = 1.0
ihScale    = 0.0
RmScale    = 1.0

batch_figs_5_Na=1_ih=0_Rm=1

*** Sixth set of batches 

allNaScale = 0.0
ihScale    = 0.0
RmScale    = 1.0

batch_figs_6_Na=0_ih=0_Rm=1

*** Seventh set of batches (7 & 8 turn on ih, restore Rm to orig, Na on/off)

allNaScale = 1.0
ihScale    = 1.0
RmScale    = 1.0

batch_figs_7_Na=1_ih=1_Rm=1

*** Eighth set of batches 

allNaScale = 0.0
ihScale    = 1.0
RmScale    = 1.0

batch_figs_8_Na=0_ih=1_Rm=1

** Batches run (from my_batches.py)

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(1.0 * np.array(glutAmps))
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp higher
    batch = {}
    batch["label"] = "glutAmp2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(1.0 * np.array(glutAmps2))
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp_epas
    batch = {}
    batch["label"] = "epas_glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(1.0 * np.array(glutAmps))
    params["e_pas"] = [-90.0, -80.0, -70.0, -60.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp2_epas
    batch = {}
    batch["label"] = "epas_glutAmp2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(1.0 * np.array(glutAmps2))
    params["e_pas"] = [-90.0, -80.0, -70.0, -60.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp_RmScale 
    batch = {}
    batch["label"] = "RmScale_glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(1.0 * np.array(glutAmps))
    params["RmScale"] = [1.0, 5.0, 10.0, 20.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp2_RmScale 
    batch = {}
    batch["label"] = "RmScale_glutAmp2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(1.0 * np.array(glutAmps2))
    params["RmScale"] = [1.0, 5.0, 10.0, 20.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp_glutSpread
    batch = {}
    batch["label"] = "glutSpread_glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(1.0 * np.array(glutAmps))
    params["glutSpread"] = [1.0, 5.0, 10.0, 25.0, 50.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp2_glutSpread
    batch = {}
    batch["label"] = "glutSpread_glutAmp2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(1.0 * np.array(glutAmps2))
    params["glutSpread"] = [1.0, 5.0, 10.0, 25.0, 50.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp_glutLoc
    batch = {}
    batch["label"] = "glutLoc_glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(1.0 * np.array(glutAmps))
    params["glutLoc"] = [0.2, 0.4, 0.6, 0.8]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp2_glutLoc
    batch = {}
    batch["label"] = "glutLoc_glutAmp2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(1.0 * np.array(glutAmps2))
    params["glutLoc"] = [0.2, 0.4, 0.6, 0.8]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp_glutDecay
    batch = {}
    batch["label"] = "glutDecay_glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(1.0 * np.array(glutAmps))
    params["glutDecay"] = [0.0, 1.0, 5.0, 10.0, 20.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp2_glutDecay
    batch = {}
    batch["label"] = "glutDecay_glutAmp2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(1.0 * np.array(glutAmps2))
    params["glutDecay"] = [0.0, 1.0, 5.0, 10.0, 20.0]
    batch["params"] = params
    batches[batch["label"]] = batch

** Analyzing data

Recent changes to the simplified cell model have worsened plateaus:

Increasing Rm (10x to match Rin of detailed model)
Changing e_pas (-88 to -75 to match RMP of detailed model)
Removal of ih current (detailed model doesn’t have)

Fig 1a: Varying Rm scale.  RmScale of 1.0 was original, we recently changed to 10.0 to try to match Rin of detailed model.  Plateaus look better at lower Rms.

Fig 1b: Varying Rm scale (TTX).  RmScale of 1.0 was original, we recently changed to 10.0 to try to match Rin of detailed model. Na conductances blocked to reveal plateau more clearly.  These look more like ramps than plateaus.

Fig 2a: varying e_pas.  We moved from near -90 to -75.  Plateaus look better with more hyperpolarized RMP.

Fig 2b: varying e_pas (TTX).  We moved from near -90 to -75.  Plateaus look better with more hyperpolarized RMP.

Fig 3a: Restoring original Rm, varying e_pas.  Plateaus look better with original Rm, look better with lower RMP.

Fig 3b: Restoring original Rm, varying e_pas (TTX).  Plateaus look better with original Rm, look better with lower RMP.

Fig 4: Original Rm, added ih back in, varying e_pas (TTX).  Reimplementing ih has little effect on plateaus (compare with Fig 3b) 

Conclusions

Increasing Rm had a negative effect on plateaus
Decreasing e_pas (RMP) had a negative effect on plateaus
Removing ih had minimal effect on plateaus

I suggest we go back to our original values of Rm and e_pas.



* 2017-10-31 -- EEE meeting 

** TODO

Project Meeting
Set up batch dir to compare simp and det models
Explore temp sensitivity of simp and det models
Explore Penny's detailed model in Netpyne
Compare sims to Srdjan's data
Find glutamate dynamics settings that improve plateaus
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Project meeting

Put together Google Doc update here:
https://docs.google.com/document/d/1MpWMqDoJlq6GlxLGWdKATkdrX7rGBt3Yh21IOKvYGWw/edit

Also printed it to a pdf:
file:gif/20171031_0720_EEE_Project_Meeting.pdf

*** Chats about update/meeting

    billl [7:11 AM] 
    RMP of -90 joe?  seems very low

    joe [7:12 AM] 
    The cell was originally set to have RMP of -88

    billl [7:13 AM] 
    where did that number come from?

    joe [7:14 AM] 
    I assume from fitting the cell model…  @salvadord?

    billl [7:14 AM] 
    does srdjan find such low RMPs? -- were we using such low RMP in our SPI paper?

    [7:15] 
    /usr/site/htdocs/pdfs/jnphys_117_148.pdf

    salvadord [7:16 AM] 
    RMP of PT with ih ~80mV ; without  ih ~-90mV

    billl [7:16 AM] 
    looks like was -80

    [7:17] 
    -90 too close to Ek ; -80 ok

    joe [7:18 AM] 
    Yeah, removing ih dropped RMP by a bit, closer to e_pas.  So I’ll find a setting of e_pas that brings RMP to around -80.

    billl [7:18 AM] 
    "Before the current injection the models had stablesomatic resting membrane potentials near -80 mV."


** Checking on RMP vs e_pas

cfg.addNetStim = False

# Varying epas
batch = {}
batch["label"] = "epas"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["e_pas"] = [-90.0, -85.0, -80.0, -75.0, -70.0, -65.0]
batch["params"] = params
batches[batch["label"]] = batch

graham-mac% cd /u/graham/projects/eee/sim/batches/batch_glutdyn/ ; ./runmybatches
graham-mac% cd /u/graham/projects/eee/sim/batches/batch_glutdyn; ipython -i analyze.py


** Set up batch dir to compare simp and det models



* 2017-11-1 --  Fixing setup, poster work

** TODO

Work on SfN posters!
Set up batch dir to compare simp and det models
Explore temp sensitivity of simp and det models
Explore Penny's detailed model in Netpyne
Compare sims to Srdjan's data
Find glutamate dynamics settings that improve plateaus
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** Bill having problems running my code

*** Chat

    billl [10:34 AM] 
    @joe -- trying running /u/graham/projects/eee/sim/batches/batch_glutdyn but got error that no attribute 'glutLoc' -- --> 102             if neckLoc > cfg.glutLoc-(cfg.glutSpread/(2*200.)) and neckLoc < cfg.glutLoc+(cfg.glutSpread/(2*200.)):

    joe [10:45 AM] 
    That’s odd.  How are you running?

    [10:45] 
    I do:

    [10:45] 
    cd /u/graham/projects/eee/sim/batches/batch_glutdyn; ./runmybatches

    [10:46] 
    And then in a new terminal:

    [10:46] 
    cd /u/graham/projects/eee/sim/batches/batch_glutdyn; ipython -i analyze.py

*** Trying to run on Neurosim machine: no

graham-mac% sshno
Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 3.13.0-43-generic x86_64)

no% cd /u/graham/projects/eee/sim/batches/batch_glutdyn/; ./runmybatches
numprocs=4
NEURON -- VERSION 7.5 master (0388d94) 2017-08-09
Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
See http://neuron.yale.edu/neuron/credits

Traceback (most recent call last):
  File "my_batches.py", line 8, in <module>
    import batch_utils
ImportError: No module named batch_utils
>>> Traceback (most recent call last):
  File "my_batches.py", line 8, in <module>
    import batch_utils
ImportError: No module named batch_utils
>>> 
Traceback (most recent call last):
  File "my_batches.py", line 8, in <module>
    import batch_utils
ImportError: No module named batch_utils
>>> 
Traceback (most recent call last):
  File "my_batches.py", line 8, in <module>
    import batch_utils
ImportError: No module named batch_utils

*** Need to fix import problem

On my local machine I added /u/graham/projects/eee/sim to PYTHONPATH

I am going to try to fix this without need for modifying PYTHONPATH

Adding to my_batches:

    try: 
      import batch_utils
    except:
      curpath = os.getcwd()
      while os.path.split(curpath)[1] != "sim":
        curpath = os.path.split(curpath)[0]
      sys.path.append(curpath)
      import batch_utils

Will commit and push now to try on no.

And trying on no:

    graham-mac% sshno
    no% cd /u/graham/projects/eee/sim/batches/batch_glutdyn/ ; ./runmybatches

It completes, but there is no output data.  

Will execute netParams.py to debug

*** Error on executing netParams

    no% ipython -i netParams.py
    /usr/site/python/IPython/paths.py:54: UserWarning: Moving ~/.config/ipython to ~/.ipython
      warn('Moving {0} to {1}'.format(cu(xdg_ipdir), cu(ipdir)))
    Python 2.7.12 (default, Nov 19 2016, 06:48:10) 
    Type "copyright", "credits" or "license" for more information.

    IPython 5.4.1 -- An enhanced Interactive Python.
    ?         -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help      -> Python's own help system.
    object?   -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 master (0388d94) 2017-08-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    ---------------------------------------------------------------------------
    ImportError                               Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_glutdyn/netParams.py in <module>()
         38 
         39 # EEE cell model with uniform spine distribution (7 comps)
    ---> 40 cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'eee7us', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')
         41 
         42 # EEE cell model with physiological spine distribution (7 comps)

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
        483             label = int(self._labelid)
        484             self._labelid += 1
    --> 485         secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
        486         cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
        487 

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
        176             removeFilePath = False
        177         moduleName = fileNameOnly.split('.py')[0]  # remove .py to obtain module name
    --> 178         tempModule = importlib.import_module(moduleName)
        179         modulePointer = tempModule
        180         if isinstance(cellArgs, dict):

    /usr/lib/python2.7/importlib/__init__.pyc in import_module(name, package)
         35             level += 1
         36         name = _resolve_name(name[level:], package, level)
    ---> 37     __import__(name)
         38     return sys.modules[name]

    /u/graham/projects/eee/sim/cells/eee7us.py in <module>()
          9 from math import exp,log
         10 import numpy as np
    ---> 11 from batch_utils import getspineLocs
         12 
         13 Vrest       = -75.0

    ImportError: No module named batch_utils

*** Modifying netParams to import batch_utils

Adding:
    try:
        import batch_utils
    except:
        sys.path.append(curpath)
        import batch_utils

Commit, push, execute.

New error:

    no% cd /u/graham/projects/eee/sim/batches/batch_glutdyn/ ; ipython -i netParams.py
    Python 2.7.12 (default, Nov 19 2016, 06:48:10) 
    Type "copyright", "credits" or "license" for more information.

    IPython 5.4.1 -- An enhanced Interactive Python.
    ?         -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help      -> Python's own help system.
    object?   -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 master (0388d94) 2017-08-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    ---------------------------------------------------------------------------
    LookupError                               Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_glutdyn/netParams.py in <module>()
         45 
         46 # EEE cell model with uniform spine distribution (7 comps)
    ---> 47 cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'eee7us', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')
         48 
         49 # EEE cell model with physiological spine distribution (7 comps)

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
        483             label = int(self._labelid)
        484             self._labelid += 1
    --> 485         secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
        486         cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
        487 

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
        176             removeFilePath = False
        177         moduleName = fileNameOnly.split('.py')[0]  # remove .py to obtain module name
    --> 178         tempModule = importlib.import_module(moduleName)
        179         modulePointer = tempModule
        180         if isinstance(cellArgs, dict):

    /usr/lib/python2.7/importlib/__init__.pyc in import_module(name, package)
         35             level += 1
         36         name = _resolve_name(name[level:], package, level)
    ---> 37     __import__(name)
         38     return sys.modules[name]

    /u/graham/projects/eee/sim/cells/eee7us.py in <module>()
         55 p_ena = 42.0
         56 # h-current
    ---> 57 h.erev_ih = -37.0 # global
         58 gbar_h = 0.000140956438043
         59 h_gbar_tuft = 0.00565 # mho/cm^2 (based on Harnett 2015 J Neurosci)

    LookupError: 'erev_ih' is not a defined hoc variable name.

*** Modifying cell files 

Commenting out the line 'h.erev_ih = -37.0 # global' in all cell files.

    eee6, eee7, eee7us, eee7ps

This should be fine because we have already decided to remove ih from model.

Commit, push, execute.

New error:

    no% cd /u/graham/projects/eee/sim/batches/batch_glutdyn/ ; ipython -i netParams.py
    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_glutdyn/netParams.py in <module>()
         45 
         46 # EEE cell model with uniform spine distribution (7 comps)
    ---> 47 cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'eee7us', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')
         48 
         49 # EEE cell model with physiological spine distribution (7 comps)

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
        483             label = int(self._labelid)
        484             self._labelid += 1
    --> 485         secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
        486         cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
        487 

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
        179         modulePointer = tempModule
        180         if isinstance(cellArgs, dict):
    --> 181             cell = getattr(modulePointer, cellName)(**cellArgs) # create cell using template, passing dict with args
        182         else:
        183             cell = getattr(modulePointer, cellName)(*cellArgs)  # create cell using template, passing list with args

    /u/graham/projects/eee/sim/cells/eee7us.py in __init__(self, x, y, z, ID)
        100     self.add_comp('soma')
        101     self.set_morphology()
    --> 102     self.insert_conductances()
        103     self.set_props()
        104     self.add_spines()

    /u/graham/projects/eee/sim/cells/eee7us.py in insert_conductances(self)
        249       sec.insert('na_ion')
        250       sec.insert('pas') # passive
    --> 251       sec.insert('nax') # Na current
        252       sec.insert('kdr') # K delayed rectifier current
        253       sec.insert('kap') # K-A current

    ValueError: argument not a density mechanism name.

The problem seems to be that batch_glutdyn doesn't have a symlink to x86_64.

** Improving setup.py

First, I am going to move it from eee/sim/setup.py to eee/setup.py, as it only
really needs to be run upon downloading project and when need to recompile.

I am going to improve my setup.py script to:
  1) remove old mod files
  2) recompile mods
  3) add symlink to x86_64 to sim dirs
  4) add batch_data and batch_figs dirs to sim dirs

Okay, major changes to setup.py and now it seems to be working.

Will now edit README.txt to explain setup.

Will also remove symlinks from Mercurial:

    hg rm -f sim/batches/batch_bap/x86_64
    hg rm -f sim/batches/batch_fi/x86_64
    hg rm -f sim/batches/batch_nospines_255syns/x86_64
    hg rm -f sim/batches/batch_nospines_5syns/x86_64
    hg rm -f sim/batches/batch_nospines_onesyn/x86_64
    hg rm -f sim/batches/batch_nospines_varsyns/x86_64
    hg rm -f sim/batches/batch_spillover/x86_64
    hg rm -f sim/batches/batch_spineLoc/x86_64
    hg rm -f sim/batches/batch_tospines/x86_64
    hg rm -f sim/batches/x86_64
    hg rm -f sim/x86_64


** Exiting Python after ./runmybatches

When I run 'runmybatches', after it is done, it sits at >>>

On my local machine, if I try to 'exit()', nothing happens.  I have to close 
the terminal window and open another.

However, on 'no', when I type 'exit()' I get the following output:

    >>> exit()
    [warn] Epoll ADD(4) on fd 43 failed.  Old events were 0; read change was 0 (none); write change was 1 (add): Bad file descriptor
    --------------------------------------------------------------------------
    mpiexec has exited due to process rank 0 with PID 0 on
    node no exiting improperly. There are three reasons this could occur:

    1. this process did not call "init" before exiting, but others in
    the job did. This can cause a job to hang indefinitely while it waits
    for all processes to call "init". By rule, if one process calls "init",
    then ALL processes must call "init" prior to termination.

    2. this process called "init", but exited without calling "finalize".
    By rule, all processes that call "init" MUST call "finalize" prior to
    exiting or it will be considered an "abnormal termination"

    3. this process called "MPI_Abort" or "orte_abort" and the mca parameter
    orte_create_session_dirs is set to false. In this case, the run-time cannot
    detect that the abort call was an abnormal termination. Hence, the only
    error message you will receive is this one.

    This may have caused other processes in the application to be
    terminated by signals sent by mpiexec (as reported here).

    You can avoid this message by specifying -quiet on the mpiexec command line.
    --------------------------------------------------------------------------

Looking into how to properly exit after runmybatches.

** Working on SfN posters


* 2017-11-2 --  SfN posters
* 2017-11-3 --  SfN posters 
* 2017-11-6 --  SfN posters


* 2017-11-7 --  Project meeting and SfN posters

** TODO

Work on SfN posters!
Set up batch dir to compare simp and det models
Explore temp sensitivity of simp and det models
Explore Penny's detailed model in Netpyne
Compare sims to Srdjan's data
Find glutamate dynamics settings that improve plateaus
Generate figures for EEE using new settings
Try to reduce AHP to be more similar to Srdjan data
Work on article draft and poster
Start article draft in Overleaf
Plot some of Srdjan's scenarios

** EEE Cell model poster

https://docs.google.com/presentation/d/1_ekr6BTwa_whFaa7xhME_xXILjYrweYw2Bnd1usj9g0/edit#slide=id.g293c8b978d_0_0

** Email from Srdjan about poster

Trace figures are too small, Srdjan wants to delete two rows and two columns 
from each

Srdjan wants red and black used for soma/dend traces

Setting:
cfg.e_pas       = -85.0 # resting membrane potential

Finding good glutAmps (want seven values to mimic Srdjan plateau overlay fig)

  glutAmps = [0.02, 0.04, 0.06, 0.08, 0.10, 0.12]

  Start at 0.04 (no spiking), end before 0.12 (depol block)

  glutAmps = [0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10]

  Looks okay, but not great.

Trying to decrease glutSpread and increase weight
    cfg.glutSpread = 10.0
    cfg.glutSpread = 5.0
    glutAmp = 2x

Looks okay.  Let's try plotting a plateau overlay.

file:gif/20171107_084255.png

Not really seeing the nice plateau anymore...

    joe [8:44 AM] 
    uploaded and commented on this image: Latest plateau overlay fig
    1 Comment
    No drop in max spike voltage, but don’t really see the plateau like we used to…

    joe [8:45 AM] 
    Sergio, you were getting good plateaus with eee7ps, right?  What were your param setttings again?

    sergio [8:50 AM] 
    added this Plain Text snippet
    # DMS NMDA params
    cfg.NMDAAlphaScale = 1.0 # Scales original value of 4.0
    cfg.NMDABetaScale = 1.0 # Scales original value of 0.0015
    cfg.CdurNMDAScale = 1.0 # Scales original value of 1.0
    cfg.CmaxNMDAScale = 1.0 # Scales original value of 1.0
    cfg.NMDAgmax    = 0.05
    #cfg.ratioAMPANMDA = 2.0
    # glutamate stim parameters
    cfg.glutAmp  = 9.0 #  # weight supplied to NMDAr and AMPAr
    cfg.glutLoc  = 0.28  # fraction of branch, not microns (0.28 head number 55)
    cfg.glutSpread = 0.7  # microns, diameter of glutamate puff (0.7 only one head)
    cfg.glutDelay = 0.0  # ms/um delay in glutamate activation
    cfg.glutDecay = 0.0  # %/um decrease in glutamate amplitude 
     
    # spillover params
    cfg.spillDelay  = 10.0 # (ms) time to reach dendritic shaft
    cfg.spillFraction = 0.0 # (%) percent of glutamate weight that reaches shaft
    Add Comment Collapse

    sergio [8:50 AM] 
    I’m using this one now

    [8:50] 
    but because of the noise

    [8:50] 
    the glutAmp is really high

    joe [8:52 AM] 
    Thanks! What are your settings for e_pas?  For Rm_scale?  Do you have ih turned off?

Trying Sergio's settings.



* 2017-11-8 -- SfN poster 

I really need to fill in my e-notebook here, but that'll wait.

Scaling kdr by a factor of .2 makes for good plateaus.
gbar_kdr = 0.0131103978049 * 0.2

file:gif/20171108_212355.png


* 2017-11-9 -- SfN poster 

** Need to redo bAP figure.

Copying cfg.py to cfg_bAP.py

Adding to cfg:
    for loc in np.arange(0, 1.1, 0.1):
      locstr = str(loc).replace(".","")
      cfg.recordTraces['V_Bdend1_' + locstr] = {'sec': 'Bdend1', 'loc': loc, 'var': 'v'}

    cfg.addNetStim = False #True

    #cfg.IClamp1 = {'pop': ['eee7us', 'eee7ps'], 'sec': 'soma', 'loc': 0.5, 'start': 200, 'dur': 100, 'amp': cfg.ampIClamp1}
    cfg.IClamp1 = {'pop': ['eee7us', 'eee7ps'], 'sec': 'soma', 'loc': 0.5, 'start': 200, 'dur': 10, 'amp': 0.8}

    # Sodium and potassium conductance scaling
    cfg.dendNaScale = 1.0 # Scales dendritic Na conductance
    cfg.dendKScale  = 1.0 # Scales dendritic K  conductance
    #cfg.allNaScale  = 1.0 # Scales all Na conductances (overrides dendNaScale if not commented)
    #cfg.allKScale   = 1.0 # Scales all K  conductances (overrides dendKScale  if not commented)

Adding to my_batches.py:

    # Turning dendritic Na and K on and off for bAPs
    batch = {}
    batch["label"] = "bAP"
    batch["cfgFile"] = "cfg_bAP.py"
    batch["netParamsFile"] = "netParams_bAP.py"
    params = OrderedDict()
    params[('dendNaScale')] = [0.0, 1.0] 
    params[('dendKScale')]  = [0.0, 1.0] 
    batch["params"] = params
    batches[batch["label"]] = batch

Fixing netParams (dendNa and dendK should only affect dendrites), changing from:

        if hasattr(cfg, 'allNaScale') or hasattr(cfg, 'dendNaScale'):
            if 'nax' in sec['mechs']:
                orig_nax = sec['mechs']['nax']['gbar']
                if hasattr(cfg, 'dendNaScale'):
                    sec['mechs']['nax']['gbar'] = cfg.dendNaScale * orig_nax       
                if hasattr(cfg, 'allNaScale'):
                    sec['mechs']['nax']['gbar'] = cfg.allNaScale * orig_nax

To:

        if hasattr(cfg, 'allNaScale') or hasattr(cfg, 'dendNaScale'):
            if 'nax' in sec['mechs']:
                orig_nax = sec['mechs']['nax']['gbar']
                if hasattr(cfg, 'dendNaScale') and "dend": in secName:
                    sec['mechs']['nax']['gbar'] = cfg.dendNaScale * orig_nax       
                if hasattr(cfg, 'allNaScale'):
                    sec['mechs']['nax']['gbar'] = cfg.allNaScale * orig_nax

Doing the same to the dendKScale.

Change to netParams:

        # add stim source
        #netParams.stimSourceParams[iclabel] = {'type': 'IClamp', 'del': ic['start'], 'dur': ic['dur'], 'amp': cfg.ampIClamp1}
        netParams.stimSourceParams[iclabel] = {'type': 'IClamp', 'del': ic['start'], 'dur': ic['dur'], 'amp': ic['amp']}

Too many spikes.  Need to find iClamp amp that results in one spike.

0.8 too high
0.4 too high
0.1 too low
0.2 too low
0.3 too low
0.35 too high
0.325 too high
0.3125 too low and too high.  What?!

file:gif/20171109_074246.png

With Na and no K: depol block, other settings: no spike.

Dammit.  The duration must be the problem.  Changing from 10 ms to 0.1 ms.

That doesn't seem to help either.  Going to run a big batch to determine values 
of amp and dur.

# Varying iClamp params
batch = {}
batch["label"] = "stimAmp_stimDur"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["ampIClamp1"] = [3.0, 3.5, 4.0, 4.5, 5.0]
params["durIClamp1"] = [0.1, 0.5, 1.0]
batch["params"] = params
batches[batch["label"]] = batch

Ahh, somehow dendNa (g) is no longer scaled by 0.1 (it's 0.0345 should be 0.00345)

Scaling dendNa by 0.1 and finding iClamp param values for one spike.

Will use dur 5 ms, amp 1.0

file:gif/20171109_101553.png

Looks okay, but I want to try to find an amplitude to induce a spike at 1 ms dur

dur 1 ms, amp 3.0

Good!
file:gif/20171109_103353.png

Now to plot traces with only four lines:

    # for loc in np.arange(0, 1.1, 0.1):
    #     locstr = str(loc).replace(".","")
    #     cfg.recordTraces['V_Bdend1_' + locstr] = {'sec': 'Bdend1', 'loc': loc, 'var': 'v'}

    for loc in [0.0, 0.33, 0.66, 1.0]:
        locstr = str(loc).replace(".","")
        cfg.recordTraces['V_Bdend1_' + locstr] = {'sec': 'Bdend1', 'loc': loc, 'var': 'v'}

file:gif/20171109_104100.png

** Working on batch figs

Committing first.

*** Neck resistance

Not getting any spiking...  Hmmm, I changed gbar_nax to 0.1x in all secs, but 
really should just do it in dends:

    gbar_nax = 0.0345117294903 # 0.00345117294903
    nax_gbar_axonm = 5.0
    nax_gbar_somam = 1.0
    nax_gbar_dendm = 0.1 #1.0

Got spiking back.

Varying Rneck:
file:gif/20171109_133911.png


*** Dendrite axial resistance



* 2017-12-1 -- Article into Overleaf

** TODO

Start article draft in Overleaf
Work on article

** Starting article draft in Overleaf

*** Chat about Overleaf:

    joe [1:12 PM] 
    I think I’m going to start working on the article in Overleaf (https://www.overleaf.com/).

    [1:12] 
    @salvadord, Bill says I should ask you about setting it up with out resource files.

    [1:12] 
    with *our* resource files

    billl 
    [1:15 PM] 
    should we buy it now?

    salvadord [1:27 PM] 
    setup - sure, follow this paper repo — just need the latex + bib folders and the latexmkrc and main.tex files

    [1:28] 
    buy - sure, I got my own, but good if get group license

    [1:28] 
    they ahve offers for >5 groups

    [1:28] 
    sorry forgot link: https://www.overleaf.com/9030363rxcxfdtvnsky#/32402582/

    [1:30] 
    here’s info on how to use git with overleaf: https://www.overleaf.com/blog/195-new-collaborate-online-and-offline-with-overleaf-and-git-beta#.Whx18BNSzXE (edited)

    joe [1:31 PM] 
    Thanks!

    salvadord [1:31 PM] 
    https://www.overleaf.com/help/230-how-do-i-push-a-new-project-to-overleaf-via-git#.Whx2ERNSzXE
    overleaf.com
    How do I push a new project to Overleaf via git? - Help and FAQs - Overleaf
    Note: if you do not have a local repo on your machine yet, and wish to clone an Overleaf project down to your local machine as a new repo, please see this bl...
     
    [1:31] 
    np

*** Setting up article

Salvador's Overleaf project (to use as a template):
https://www.overleaf.com/9030363rxcxfdtvnsky#/32402582/

Salva said just need: the latex + bib folders and the latexmkrc and main.tex files

But Overleaf allows me to clone a project, so I cloned his and renamed it "EEE Article 1"

Changing the author list and affiliations.

Removing Salva's text.  

I need to start a cheatsheet of common Latex commands...

    LATEX Commands
    ====================================================
    \section{Section Title}  -- Creates numbered, titled section
    \subsection{}
    \note{
    \titlepage
    \maketitle
    \linenumbers
    \input{intro}
    \fref{fig_pops}
    \cite{Neym17,Sute13}
    $\mu m$
    \rightarrow


    For a Figure
    ====================================================
    \begin{figure}[!h]  %% bht
    \centering
    \includegraphics[width=\textwidth]{figs/pops.pdf}
    \caption{{\bf Figure title.}
    Figure text}
    \label{fig_pops}
    \end{figure}

Reading about LATEX and what all the different files/filetypes do.

    latexmkrc 
    .tex
    .sty
    .cls
    .bst
    .bib

Deleting existing figures.  That also removed the "figs" dir in Overleaf.


* 2017-12-4 -- Article

** TODO

Work on fig outline in gdoc
Work on article

** Figure outline

*** Chats about

    billl [11:34 AM] 
    so how's it coming guys??

    [11:38] 
    ok sergio has a hamburger next to his name;  how about you @joe ?

    joe [11:38 AM] 
    I’m here.

    billl [11:38 AM] 
    progress?

    [11:39] 
    eg fig3?

    [11:39] 
    what's to be done with that?  what is that? :)

    joe [11:39 AM] 
    You talking about the Gdoc for figures?

    billl [11:39 AM] 
    y

    [11:40] 
    so do some of these have plats? -- little hard to see since small

    [11:41] 
    guess the ones with the higher glu right?

    [11:41] 
    why are we varying RMP?  what trying to show?  -- what's the story ?

    joe [11:42 AM] 
    That Fig 3 still needs to be replaced (it used Exp2syn instead of DMS).

    billl [11:42 AM] 
    this is with spines evently spread?

    [11:42] 
    ok so we will replace but as we replace might as well figure out how to layout and what to show

    [11:42] 
    so don't have to redo it 2x

    [11:42] 
    or if easy for you to replace immediately with DMS one that's fine

    joe [11:42 AM] 
    Yeah, do you have some time now?  Can we outline what figures we want to see?

    billl [11:42 AM] 
    (also worth figuring out if it's really part of our story)

    [11:43] 
    yeah let's outline it now

    joe [11:43 AM] 
    Exactly.

    [11:43] 
    Perfect.

    billl [11:43 AM] 
    so is there an RMP story here?

    [11:43] 
    (this figure was showing diff RMPs i thik)

    joe [11:44 AM] 
    Not really, although removing ih affected RMP.  The y-axis of the multiplot on Fig 3 is actually diff cells.

    [11:44] 
    SPI6, eee6, eee7, etc.

    billl [11:44 AM] 
    oh

    joe [11:44 AM] 
    But now I don’t think we really need to include all those in the article.

    billl [11:44 AM] 
    nope

    [11:45] 
    ok so here we will show our basic model cell which is now ?? spi7eee ??

    [11:45] 
    and show the potential in the dend and potential in the soma and potential in the other basal dend??

    [11:45] 
    at diff levels of glut

    joe [11:45 AM] 
    So we have two spiny cells: eee7us (uniform spines) and eee7ps (physio spines)

    billl [11:45 AM] 
    and this is with spines or -- .. yeah so this is with eee7us

    [11:45] 
    basic sim basic model basic result

    [11:46] 
    do we want to show a sim without spines?  -- with just NMDA on shaft?

    [11:46] 
    (even more basic?)

    joe [11:47 AM] 
    I think that would be cool.  Three models: 1) spineless 2) uniform spines 3) physio spines

    billl [11:47 AM] 
    ok so the basic result will be the spineless one

    [11:48] 
    then for the uniform spines and for the physio spines will need a couple different neck resistors?

    joe [11:48 AM] 
    Yeah, neck resistance was always something we had planned on

    billl [11:49 AM] 
    ok but lets start with the spineless one

    [11:49] 
    so we can figure out how the layout works

    [11:49] 
    do you have the data?

    [11:49] 
    or need to rerun?

    joe [11:49 AM] 
    Lemme check…

    [11:50] 
    Will need to rerun.

    billl [11:51 AM] 
    ok so want to do that now?

    [11:51] 
    or say more about sequence?

    joe [11:52 AM] 
    Once we have all the figures roughly decided on, it’s pretty easy to generate.  Would be more useful for me right now if we could roughly decide on figs.

    [11:52] 
    Fig 1: Schematic

    billl [11:52 AM] 
    so we have the 2 intro figs

    joe [11:52 AM] 
    Fig 2: bAPs

    billl [11:52 AM] 
    then these 3 figs -- nospine, us, ps

    [11:53] 
    then maybe one of ca block and one on na block and one on ampa block?

    [11:53] 
    one on diff levels of Mg?

    [11:53] 
    could be all 4 of those as panels?

    [11:53] 
    will have to see how complicated those figs are

    [11:53] 
    what else?

    joe [11:53 AM] 
    Okay, so three figs for three cell models.  What are we varying and what are we plotting?

    billl [11:54 AM] 
    we are varying density of glu for nospine and us

    joe [11:54 AM] 
    Varying: glutamate amplitude? Glutamate location (along Dend)?

    billl [11:54 AM] 
    oh for us coud have a usB for diff degrees of spillover

    [11:54] 
    glu loc -- right 3 locs?  more?

    [11:55] 
    3 locs + whole dend ?

    [11:55] 
    1/3 2/3 3/3 whole ?

    [11:55] 
    this is why want to see a 1st fig since can see what seems pertinent and whether lays out as panels or needs multifig

    [11:55] 
    maybe place to start is with us

    [11:55] 
    since that has the other issues which nospine doesn't have

    [11:55] 
    ?

    [11:56] 
    specifically spillover

    joe [11:56 AM] 
    Okay, let me work on a few ideas for eee7us.  I’ll report back with some prelim results soon.

    billl [11:57 AM] 
    ok -- you mean few graphical ideas?  -- we pretty much have to see how it lays out rather than just describe verbally (at least for me we have to do since i don't have good visual imagination)

    joe [11:58 AM] 
    Yeah, I’ll run batches and try a few diff ways of plotting.

    billl [11:58 AM] 
    great

    billl [1:05 PM] 
    anything yet? -- i'll prob go to bed soon -- here 9pm

    joe [1:33 PM] 
    Ran into a couple snags, and then got pulled away for a bit.  I’m back on it now.

*** Figure outline 

Fig 1: schematic
Fig 2: backpropagating APs

Next figs will be for diff models: 
  NS (no spines)
  US (uniform spines)
  PS (physiological spines)

Although now that I think about it, even NS has to have locations for the NMDA/AMPA 
receptors, which could be either uniformly or physiologically distributed...

Maybe I should explore changes between uniform NS and US, then changes between 
US and PS...

Working in batch_sfn2017 as it has the latest stuff.
Adding a bunch of batches to batch_sfn2017/my_batches.py. 
Running a big batch of sims to explore possibilities for Figs 3+.  


* 2017-12-5 -- Article and EEE Meetings

** TODO

Work on fig outline in gdoc
Work on Figs 3+ (start with eee7us)
Work on article

** EEE article thoughts

The cell model we started with was Sam's, tuned to match f-I behavior.
We then changed some param values to match our behavior better.
Should we tune (algorithmically) the cell model to match something?

I should probably check fI relationship now after all changes...


** Figures

Gah, my big batch didn't run.  (I'm working in batch_sfn2017)

Error when executing netParams.py:

    ---------------------------------------------------------------------------
    LookupError                               Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_sfn2017/netParams.py in <module>()
         45 
         46 # EEE cell model with uniform spine distribution (7 comps)
    ---> 47 cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'eee7us', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')
         48 
         49 # EEE cell model with physiological spine distribution (7 comps)

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
        489             label = int(self._labelid)
        490             self._labelid += 1
    --> 491         secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
        492         cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
        493 

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
        174             removeFilePath = False
        175         moduleName = fileNameOnly.split('.py')[0]  # remove .py to obtain module name
    --> 176         tempModule = importlib.import_module(moduleName)
        177         modulePointer = tempModule
        178         if isinstance(cellArgs, dict):

    /Users/graham/anaconda/lib/python2.7/importlib/__init__.pyc in import_module(name, package)
         35             level += 1
         36         name = _resolve_name(name[level:], package, level)
    ---> 37     __import__(name)
         38     return sys.modules[name]

    /u/graham/projects/eee/sim/cells/eee7us.py in <module>()
         12 
         13 Vrest       = -75.0
    ---> 14 h.v_init    = -75.0
         15 h.celsius   = 32.0
         16 

    LookupError: 'v_init' is not a defined hoc variable name.


Searching Slack it seems like the problem may be this:
  
    December 1:

    sergio [2:35 PM] 
    added this Plain Text snippet: hoc error
    /usr/lib/python2.7/importlib/__init__.pyc in import_module(name, package)
       35       level += 1
       36     name = _resolve_name(name[level:], package, level)
    ---> 37   __import__(name)
       38   return sys.modules[name]
    /u/sergioangulo/projects/sergeee/eee/sim/cells/eee7ps.py in <module>()
       12
       13 Vrest    = -88.5366550238
    ---> 14 h.v_init  = -75.0413649414
       15 h.celsius  = 32.0
       16
    LookupError: 'v_init' is not a defined hoc variable name.
    Add Comment Collapse

    sergio [2:36 PM] 
    I’m having this error message when I run `netParams.py`

    salvadord [2:37 PM] 
    this prob due to recent removal of call to h.load(‘stdrun.hoc’) from netpyne — try adding that line to the cell model being imported

    sergio [2:38 PM] 
    ok

    [2:42] 
    working now, I added `h.load_file('stdrun.hoc')` to eee7ps.py

Adding this:
    h.load_file('stdrun.hoc')

To all cell files.

That seems to have solved the problem.  Committing now.

Running batches:
    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_sfn2017/ ; ./runmybatches

Analyzing batches:
    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_sfn2017/ ; ipython -i analyze.py

Seems to have worked fine.


** Chatting with Bill

    joe [7:08 AM
    Figure 3 possibilities: https://docs.google.com/document/d/10fsvcRD5NgaXOHtR5j6PofwNRPIuBAV-mIP9NO7YJEM/edit?usp=sharing (still adding figures)

    joe [7:08 AM] 
    shared this file
    EEE Article Figure Possibilities -- 2017-12-05
    Document from Google Drive
    Click to open in Google Drive
    Add Comment

    [7:10] 
    @joe - so that's fig 1 or 3? - let's stop using numbers and start using the names anyway since may rearrange them later so want labels

    billl [7:10 AM] 
    so this is \fref{shaft} ?

    [7:11] 
    make all the labels bigger please -- can't read them

    joe [7:11 AM] 
    These are potential figures after the Fig 1 and Fig 2 we decided on (schematic and bAPs).  I’ll get rid of confusing numbers and use names.

    [7:11] 
    Yeah, so for Fig 3 and above.

    billl [7:12 AM] 
    so \fref{shaft} \fref{us} \fref{ps}

    [7:12] 
    all look about the same?

    [7:13] 
    why are we changing dendRa?  why are we changing gnabar??

    [7:13] 
    what are you tyring to show?

    [7:13] 
    @joe

    joe [7:14 AM] 
    No shaft yet, Fig A’s are /fref{us} and Fig B’s are /fref{ps}

    billl [7:14 AM] 
    ok so thought we were going to start with fig3?

    [7:15] 
    slash in latex is \ not /

    [7:15] 
    (btw)

    [7:16] 
    so have you run the sims for the various cases we discussed? -- the we can start to put together some figs

    [7:16] 
    so far these figs look pretty similar to what i've seen before + don't understand yet what you're trying to show

    [7:16] 
    eg why looking at different dendRa??

    joe [7:17 AM] 
    Just trying to add a bunch of figures looking at different aspects so that we can discuss what is interesting and should be included in article.

    billl [7:17 AM] 
    we are trying to model physiology -- afaik we don't have any manipulations that modify dendRa?

    joe [7:17 AM] 
    We changed Ra in order to get the bAPs to match with Srdjan.

    billl [7:18 AM] 
    if we want to propose some experiment that would do this then that would be a sep issue and could be a fig towards end

    [7:18] 
    sure so that was fig2 i thought -- we have settled on an Ra so we're not exploring Ra any further???

    [7:19] 
    we talked yesterday about starting with fig{shaft} (fig3) but you prefer start with fig{us} ? -- so let's work on that -- i think that that will be 2 or 3 figs right there actually

    joe [7:20 AM] 
    Fig 2 is actually the bAPs right now (showing the match after playing with Ra and Rm).  But Ra and Rm also affect the plateau (duration and spiking behavior).  We can leave out.  I’m just trying to throw a bunc of figs in so we can discuss.

    billl [7:20 AM] 
    we're working out the narrative as we make these figs so this is not exploration time anymore although if we get confused (which we usually do) then will go back to explore of course

    [7:20] 
    ok so the data looks good

    joe [7:20 AM] 
    I think having our narrative nailed down would really help me with this… :sweat_smile:

    billl [7:20 AM] 
    ok so ... is there something that you are showing me here that you would like to discuss?

    [7:21] 
    yeah narrative starts with the figs ironically

    joe [7:21 AM] 
    Haha!

    [7:21] 
    Snake eating its own tail…

    billl [7:21 AM] 
    so \fref{us} -- starts where - let's start a new document and put that fig somewhere and see if we can agree with what it looks like

    [7:22] 
    narrative started with the hypos which drove the experiments but then the experiments we hope had some added value so now the experimental data/figs drive the narrative which then comes back to a revisit of the hypos so yes something of cyclic process

    [7:23] 
    so which is the 'correct' Ra ?

    joe [7:24 AM] 
    New doc: https://docs.google.com/document/d/1_q4xCkfIjfBW7z9l99GlOYDuaHCuDulADcMkdQ1vEIs/edit?usp=sharing

    joe [7:24 AM] 
    shared this file
    EEE Figures
    Document from Google Drive
    Click to open in Google Drive
    Add Comment

    billl [7:24 AM] 
    (as you set from matching srdjan bps)

    [7:25] 
    think we'll need longer names -- in 3-6 mos we won't remember what us means

    [7:25] 
    anyway

    [7:25] 
    ok so put the basic fig there with different amounts of glu -- only 1 Ra

    joe [7:25 AM] 
    Correct dendRa is middle column (dendRaScale = 1.0) value is rall = 114.5

    billl [7:25 AM] 
    ok so that's what we need for this fig

    [7:26] 
    we're aiming for a fig that will appear in a journal so you can also start worrying about fonts -- specifically any label that's needed should be readable

    joe [7:26 AM] 
    One moment, have to generate fig.

    [7:26] 
    Okay.

    billl [7:26 AM] 
    i'm usually tempted to get rid of all the axes and just put in scale bars in the way that's usually done with physiol

    [7:27] 
    can generate with a couple tiny plot() .label() commands

    [7:27] 
    and then reuse those for each fig

    [7:27] 
    bbial -- coffee break here

    salvadord [7:33 AM] 
    sorry, probably will be late for meeting, ophtalmologist at 10

    billl [7:35 AM] 
    k

    joe [7:44 AM] 
    Will work on fonts, etc. after meeting.

    billl [7:46 AM] 
    k

    [7:47] 
    guess no way to actually edit the fig in gdocs? -- could do in slides perhaps but more of a hassle than worth
    so thicker lines (slightly) bigger legend; get rid of axes; put in 1 scale bar at lower R
    this fig will just be us or want to use this fig to compare us with ps? -- i think just us better in terms of narraitve;  so can get rid of R col and start another fig with that

    billl [7:47 AM] 
    still an hour before meeting joe -- might be nice to have something pretty to show to srdjan?

    [7:48] 
    or if busy now then can do after

    joe [7:48 AM] 
    Yeah, would be great.

    [7:49] 
    Should I fix plot now (comments from gdoc)?  Or would be better to show him a bunch of non-final plots we can discuss?

    billl [7:49 AM] 
    suggest fix now

    joe [7:49 AM] 
    Great, I’ll get on that.

    billl [7:50 AM] 
    oh or ... do you have data for eg locs 0.25 0.5 0.75 ;  diff Rneck;  diff spillover ?

    [7:50] 
    that's what those extra figs will be

    [7:51] 
    if alreayd have the data could throw up all 3 of those in addition to the baseline 1 for unifspine case

    joe [7:51 AM] 
    Let me see, I’ve got locs and Rneck.  No spillover handy right now.

    billl [7:52 AM] 
    ok could put those together - for those can we just choose to work with the middle row maybe?

    [7:53] 
    no need to show all 3 rows of glu application unless you think that there will be some radical differences based on that but from what we've seen befor ei think not

    joe [7:53 AM] 
    uploaded this image: glutLocs
    Add Comment

    joe [7:53 AM] 
    Locs: 0.2, 0.4, 0.6, 0.8

    [7:53] 
    Variety of glutAmps

    [7:54] 
    You’d prefer no variety of Amps?

    billl [7:54 AM] 
    are you seeing anyting interesting?

    [7:54] 
    we show the variety of amps in prior fig

    [7:54] 
    what more do you see here?

    joe [7:55 AM] 
    I always think its interesting to see two params varied at once.

    billl [7:55 AM] 
    my other question is whether we need to show spine/dend/soma in this?

    [7:55] 
    interesting for us perhaps but does nto help the reader

    [7:55] 
    the reader wants/needs to be led

    joe [7:55 AM] 
    For glutLocs, moving outwards from soma reduces plateau amplitude

    billl [7:55 AM] 
    you can put all the extra stuff in supplement or with th emodeldb if desired

    joe [7:56 AM] 
    Increasing glutAmp always increases plateaus, but I find it interesting to see.

    billl [7:56 AM] 
    ok so why do you find it interesting? :)

    joe [7:56 AM] 
    But yeah, I know what I’m looking at… Readers may find fig too complex / not simple enough…

    billl [7:56 AM] 
    if you can explain your internal narrative to me ...

    [7:57] 
    you know what your looking at but you are not i thik surprised by any of this??? -- no surprise means that the narrative does not advance

    [7:57] 
    it's a distraction

    [7:57] 
    anyway -- there is a message here as you said ..."moving outwards from soma reduces plateau amplitude"

    [7:57] 
    that's what we need to show here and explain

    [7:57] 
    but why??

    [7:58] 
    also i think would be good to show the other bdend? -- i'm not clear that we need to show the spine

    joe [7:58 AM] 
    Well, the best data we have from Srdjan is plateau response to a range of glutAmps.  So by always showing varying glutAmp vs another param, we can see change in whole range of responses…

    billl [7:58 AM] 
    maybe we also would benefit from a space plot

    [7:59] 
    aha good point - do we have any srdjan data that we can use?  if so that will be a sep set of figs

    [7:59] 
    he sent us a bunch of stuff

    [7:59] 
    so no need to show varying gluamp here but if you can compare to some expt that would be great

    joe [7:59 AM] 
    Yeah, let’s check that first.  Give me a sec to find it.

    billl [7:59 AM] 
    ok

    joe [8:19 AM] 
    uploaded and commented on this image: So this is the only actual data we got from Srdjan:
    1 Comment
    (from an Excel spreadsheet)

    billl [8:20 AM] 
    so that one on L -- match that?

    [8:20] 
    let's show this at meeting and make sure we have srdjan's blessing to use it

    joe [8:21 AM] 
    Though he also gave us some figs without actual data (some of which would be interesting to match)

    [8:21] 
    20170924_EEE_Basics_2.pdf

    joe [8:22 AM] 
    uploaded this file
    20170924_EEE_Basics_2.pdf
    2 MB
    PDF
     Click to view
    Add Comment

    billl [8:23 AM] 
    we had enough trouble getting this much excel out of him ... let's work with what he gave us

    [8:24] 
    move forward

    [8:24] 
    it would always be better to have more/better data and often frustrating since you know that it's there but just hard getting at it

    joe [8:25 AM] 
    Sounds good.  Yeah, I’ll work on plotting our plateaus against Srdjan’s data.

    billl [8:26 AM] 
    ok so that will be our new fig{nospine} ? hmm or should that be physiol spine since ps will presumably be our best model

** Improving analysis

Currently, there is an analyze.py in each batch dir which runs/plots basic analyses.
It's basically the same code in every version. 
I keep coming up with improvements that don't make it into other versions.
So, I am going to copy it from batch_sfn2017 up one dir to eee/sim/batches.
Then I'll symlink to it from individual batch dirs.

Creating a function in eee_utils:

    def make_symlinks(filepath, linkpath):
        """Creates symlinks to filepath(s) in linkpath(s), both can be string or list."""

        if type(filepath) is str:
            filepath = [filepath]
        if type(linkpath) is str:
            linkpath = [linkpath]

        for indfile in filepath:
            filename = os.path.split(indfile)[1]
            for indlink in linkpath:
                os.symlink(indfile, os.path.join(indlink, filename))

Now running:

    graham-mac% eee ; ipython
    In [1]: from eee_utils import make_symlinks
    In [2]: import os
    In [3]: analyze_file = '/u/graham/projects/eee/sim/batches/analyze.py'
    In [4]: batches_dir = '/u/graham/projects/eee/sim/batches'
    In [5]: batch_dirs = [os.path.join(batches_dir, dir) for dir in os.listdir(batches_dir) if os.path.isdir(os.path.join(batches_dir, dir))]
    In [6]: batch_dirs
    Out[6]: 
    ['/u/graham/projects/eee/sim/batches/batch_bap',
     '/u/graham/projects/eee/sim/batches/batch_fi',
     '/u/graham/projects/eee/sim/batches/batch_glutdyn',
     '/u/graham/projects/eee/sim/batches/batch_gmax',
     '/u/graham/projects/eee/sim/batches/batch_nmda_comp',
     '/u/graham/projects/eee/sim/batches/batch_nmda_dms',
     '/u/graham/projects/eee/sim/batches/batch_nospines_255syns',
     '/u/graham/projects/eee/sim/batches/batch_nospines_5syns',
     '/u/graham/projects/eee/sim/batches/batch_nospines_onesyn',
     '/u/graham/projects/eee/sim/batches/batch_nospines_varsyns',
     '/u/graham/projects/eee/sim/batches/batch_plat_overlay',
     '/u/graham/projects/eee/sim/batches/batch_rmp',
     '/u/graham/projects/eee/sim/batches/batch_sfn2017',
     '/u/graham/projects/eee/sim/batches/batch_spillover',
     '/u/graham/projects/eee/sim/batches/batch_spineLoc',
     '/u/graham/projects/eee/sim/batches/batch_tospines']
    In [7]: make_symlinks(analyze_file, batch_dirs)

Testing it...  And it works!

** Adding plateau plot to standard analysis

analyze.py:

    for batch in batches1D:
        batch_analysis.plot_vtraces_multicell(batch, celllabel="pop")
        # added code below to plot plateaus if appropriate
        if "glutAmp" in batch:
            batch_analysis.plot_antic_plateaus(batch)

Now if there is a 1D batch with "glutAmp" in the name (my standard name for 
varying the glutamate amplitude), analyze.py will plot the plateau overlay 

** Matching Srdjan's data

Original code to do:
    
    In [1]: import numpy as np; import matplotlib.pyplot as plt; import batch_analysis; import batch_utils
    In [2]: data1, time1, traces1 = batch_utils.import_excel("../data/srdjan_20171017/B_73_004.xlsx")

I want to use my plot_antic_plateaus function to plot Srdjan's data.  

This will require some changes...  I need to have an option in the function to
use data instead of loading data from a batch...


* 2017-12-6 -- Plotting plateaus with Pandas

** TODO

Improve plateau overlay plotting for outside data
Work on figures
Work on article

** Plateau overlay plotting

Want to be able to plot time/trace data as a plateau overlay figure (right now
plateau overlay only plots from a Netpyne batch).

*** Batch data

To load a batch's data:

    params, data = batch_utils.load_batch(batch)

Let's see what these structures look like.

In [2]: import numpy as np; import matplotlib.pyplot as plt; import batch_analysis; import batch_utils; import os
In [3]: params, data = batch_utils.load_batch('glutAmp')

In [4]: params
Out[4]: [{u'label': u'glutAmp', u'values': [0.6, 0.8, 1.0]}]

*** Srdjan data

To load Srdjan's data:
    
    import numpy as np; import matplotlib.pyplot as plt; import batch_analysis; import batch_utils
    data1, time1, traces1 = batch_utils.import_excel("../data/srdjan_20171017/B_73_004.xlsx")

*** Rethinking

It is pretty complicated to add the ability to plot non-Netpyne data to the 
current plot_antic_plateaus, and not much return on investment, really.


** New plateau function for non-Netpyne data -- Pandas

I'm going to add a new function: plot_overlay_data to handle this.

The Excel import returns a Pandas data structure.  Since Netpyne is already using
Pandas for analysis/plotting, I'll use that to do the plot.

data = pd.read_excel(filename)

https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_excel.html

Pandas read_excel returns a "DataFrame".  Looking into how to work with DataFrames.

First let's see what our data looks like:

    graham-mac% eee; ipython
    In [1]: import numpy as np; import matplotlib.pyplot as plt; import batch_analysis; import batch_utils; import os
    In [2]: data, time, traces = batch_utils.import_excel("../data/srdjan_20171017/B_73_004.xlsx")
       ...: 
    In [3]: data
    Out[3]: 
          Time (s)  Trace #1 (V)  Trace #2 (V)  Trace #3 (V)  Trace #4 (V)  \
    0       0.0000     -0.886841     -0.891113     -0.886841     -0.888672   
    1       0.0002     -0.888062     -0.891724     -0.885620     -0.888672   
    2       0.0004     -0.884705     -0.892029     -0.887146     -0.888367   
    3       0.0006     -0.884094     -0.890198     -0.887146     -0.888977   
    <-- snip -->
              Trace #5 (V)  Trace #6 (V)  Trace #7 (V)  Trace #8 (V)  Trace #9 (V)  \
    0        -0.890503     -0.890503     -0.891724     -0.895996     -0.889893   
    1        -0.891724     -0.891724     -0.891113     -0.896606     -0.890503   
    2        -0.890198     -0.891418     -0.889587     -0.898743     -0.890198   
    3        -0.890198     -0.889587     -0.888977     -0.896912     -0.890808   
    <-- snip -->

    [5000 rows x 11 columns]

    In [5]: data.dtypes
    Out[5]: 
    Time (s)         float64
    Trace #1 (V)     float64
    Trace #2 (V)     float64
    Trace #3 (V)     float64
    Trace #4 (V)     float64
    Trace #5 (V)     float64
    Trace #6 (V)     float64
    Trace #7 (V)     float64
    Trace #8 (V)     float64
    Trace #9 (V)     float64
    Trace #10 (V)    float64
    dtype: object

    In [9]: data.index
    Out[9]: RangeIndex(start=0, stop=5000, step=1)

    In [12]: data.columns
    Out[12]: 
    Index([u'Time (s)', u'Trace #1 (V)', u'Trace #2 (V)', u'Trace #3 (V)',
       u'Trace #4 (V)', u'Trace #5 (V)', u'Trace #6 (V)', u'Trace #7 (V)',
       u'Trace #8 (V)', u'Trace #9 (V)', u'Trace #10 (V)'],
      dtype='object')

Looking through Ten Minutes to Pandas:
    https://pandas.pydata.org/pandas-docs/stable/10min.html

Pretty cool.  Now can get a nice boxplot with:
    data.boxplot()

A nice data summary with:
    data.describe()

A great plot of the data:
    data.plot()

Output:
    file:gif/20171206_153358.png

To see each trace in its own subplot:
    data.plot(subplots=True)

Histogram: data.hist()
Boxplot  : data.boxplot()

Pandas plotting descriptions:
https://pandas.pydata.org/pandas-docs/stable/visualization.html


In the plots, it's clear that the Time column is being treated like any other
data column.  I'm looking into how to convert a DataFrame column into an index
for the other columns.

So pandas.read_excel has the option index_col=None.  Changing my import code 
should solve the problem: 
    data = pd.read_excel(filename, index_col=0)

Srdjan's other Excel data files also have the first column as the time index,
so this should be fine.

Modifying batch_utils|import_excel to use index_col=0 as default:
    def import_excel(filename, index_col=0):

And changing the Pandas import:
    data = pd.read_excel(filename, index_col=index_col)

Trying it out.  Yup, that fixed the problem. Time is now the index instead of just
another data column.

Committing. 
changeset:   472:4b41097ec246

The data from Srdjan is in decivolts and seconds (should be mV and ms).  I am going
to add the conversion to the import function.

    
    data = pd.read_excel(filename, index_col=index_col)

    data.index *= 1000 # convert s to ms
    data.iloc[:,:] *= 100 # convert to mV


*** Making selections in Pandas

From:
https://pandas.pydata.org/pandas-docs/stable/10min.html#selection-by-position

    Select via the position of the passed integers

    In [32]: df.iloc[3]
    Out[32]: 
    A    0.721555
    B   -0.706771
    C   -1.039575
    D    0.271860
    Name: 2013-01-04 00:00:00, dtype: float64
    By integer slices, acting similar to numpy/python

    In [33]: df.iloc[3:5,0:2]
    Out[33]: 
                       A         B
    2013-01-04  0.721555 -0.706771
    2013-01-05 -0.424972  0.567020
    By lists of integer position locations, similar to the numpy/python style

    In [34]: df.iloc[[1,2,4],[0,2]]
    Out[34]: 
                       A         C
    2013-01-02  1.212112  0.119209
    2013-01-03 -0.861849 -0.494929
    2013-01-05 -0.424972  0.276232
    For slicing rows explicitly

    In [35]: df.iloc[1:3,:]
    Out[35]: 
                       A         B         C         D
    2013-01-02  1.212112 -0.173215  0.119209 -1.044236
    2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
    For slicing columns explicitly

    In [36]: df.iloc[:,1:3]
    Out[36]: 
                       B         C
    2013-01-01 -0.282863 -1.509059
    2013-01-02 -0.173215  0.119209
    2013-01-03 -2.104569 -0.494929
    2013-01-04 -0.706771 -1.039575
    2013-01-05  0.567020  0.276232
    2013-01-06  0.113648 -1.478427
    For getting a value explicitly

    In [37]: df.iloc[1,1]
    Out[37]: -0.17321464905330858
    For getting fast access to a scalar (equiv to the prior method)

    In [38]: df.iat[1,1]
    Out[38]: -0.17321464905330858


** New plateau function for non-Netpyne data -- coding

Starting in batch_analysis:

    def plot_overlay_data(data, syntime=100, section="soma", voffset=20, hoffset=400, savefig=True, vertfig=False, outputdir="batch_figs"):

Commands:
    graham-mac% eee ; ipython
    In [1]: import numpy as np; import matplotlib.pyplot as plt; import batch_analysis; import batch_utils; import os; plt.ion()
    In [2]: data, time, traces = batch_utils.import_excel("../data/srdjan_20171017/B_73_004.xlsx")
    In [3]: batch_analysis.plot_overlay_data(data)
    Out[3]: <matplotlib.figure.Figure at 0x1045ce090>

Srdjan's data (B_73_004.xlsx) plotted:
    file:gif/20171206_184724.png

Ten traces:
 1) flat
 2) bump
 3) hump
 4) plateau, spikes: 3, dur: 200 
 5) plateau, spikes: 3
 6) plateau, spikes: 4
 7) plateau, spikes: 5
 8) plateau, spikes: 6
 9) plateau, spikes: 7
10) plateau, spikes: 8, dur: 325

Plateau height is about 25 mV.

I am going to plot every other trace:
    data = data.iloc[:, [1, 3, 5, 7, 9]]

Commands:
    graham-mac% eee ; ipython
    In [1]: import numpy as np; import matplotlib.pyplot as plt; import batch_analysis; import batch_utils; import os; plt.ion()
    In [2]: data, time, traces = batch_utils.import_excel("../data/srdjan_20171017/B_73_004.xlsx")
    In [3]: data = data.iloc[:, [1, 3, 5, 7, 9]]
    In [4]: batch_analysis.plot_overlay_data(data)
    Out[4]: <matplotlib.figure.Figure at 0x11b66b790>

Output:
    file:gif/20171206_190251.png

Looks better, but lines are too thick.  Will reduce linewidth.


** Now to plot our plateaus and compare to this data

Need to find a range of glutAmps that most closely mimics Srdjan's data.

Trying np.linspace(0.6, 0.9, 5)

Adding a batch to batch_sfn2017/my_batches:

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp5"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.6, 0.9, 5))
    batch["params"] = params
    batches[batch["label"]] = batch

And running/analyzing

    graham-mac% eee ; cd batches/batch_sfn2017 ; ./runmybatches
    graham-mac% eee ; cd batches/batch_sfn2017 ; ipython -i analyze.py

Looks pretty good! Want to change syntime and sim duration to better match 
Srdjan's data.  But, I should probably do this in a new batch_dir, so as to 
leave batch_sfn2017 as it was for the poster.


* 2017-12-7 -- Matching Srdjan's data

** TODO

Make new batch for current work
Work on figures
Work on article

** New batch_dir for plateau data/model comparisons

Copying batch_sfn2017 to batch_20171207

Committing.

Changing sytime and duration.  Srdjan's data has the synaptic stim time (syntime)
at 100 and the recording duration is 1000ms.  Changing batch to these values will 
result in easier comparison.

In cfg.py:
    
    cfg.duration = 1000 #1200

    #cfg.NetStim1 = {'pop': ['eee7us'], 'loc': 0.99999, 'sec': 'spineheads', 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.glutAmp, cfg.glutAmp], 'delay': cfg.glutDelay}

    #cfg.NetStim2 = {'pop': ['eee7ps'], 'loc': 0.99999, 'sec': 'spineheads', 'synMech': ['NMDA','AMPA'], 'start': 200, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.glutAmp, cfg.glutAmp], 'delay': cfg.glutDelay}

    cfg.NetStim1 = {'pop': ['eee7us'], 'loc': 0.99999, 'sec': 'spineheads', 'synMech': ['NMDA','AMPA'], 'start': 100, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.glutAmp, cfg.glutAmp], 'delay': cfg.glutDelay}

    cfg.NetStim2 = {'pop': ['eee7ps'], 'loc': 0.99999, 'sec': 'spineheads', 'synMech': ['NMDA','AMPA'], 'start': 100, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': [cfg.glutAmp, cfg.glutAmp], 'delay': cfg.glutDelay}

Running glutAmp batch and analyzing:

    graham-mac% eee ; cd batches/batch_20171207 ; ./runmybatches
    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i analyze.py

Problem with the figure... Cutting off the left side...

In batch_analysis.plot_antic_plateaus I needed to change syntime from 200 to 100.

Trying again.

Looks pretty good!  
file:gif/20171207_074332.png

Would be better with slightly smaller glutAmp values (smaller subthreshold bump,
less duration).  Trying a few different sets of glutAmp values.

Right now it's 5 values between 0.6 and 0.9.

Trying 0.5 and 0.8. A bit low.
Trying 0.55 and 0.85. 
Trying 0.45 and 0.85.
Trying 0.45 and 0.9.
Trying 0.5 and 0.9.

That looks pretty good. 

I am going to plot all of Srdjan's traces in two figures and compare with those.

First changing the output_dir to eee/output and adding name option to ensure
unique filenames (no overwriting).

Code:
    eee ; ipython
    import numpy as np; import matplotlib.pyplot as plt; import batch_analysis; import batch_utils; import os; plt.ion()
    data, time, traces = batch_utils.import_excel("../data/srdjan_20171017/B_73_004.xlsx")
    data_even = data.iloc[:, [0, 2, 4, 6, 8]]
    data_odd = data.iloc[:, [1, 3, 5, 7, 9]]
    batch_analysis.plot_overlay_data(data, name="Antic_plats_all")
    batch_analysis.plot_overlay_data(data_even, name="Antic_plats_even")
    batch_analysis.plot_overlay_data(data_odd, name="Antic_plats_odd")
  
Trying between 0.5 and 0.9 with 10 traces (like Antic_plats_all)

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp_all"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.5, 0.9, 10))
    batch["params"] = params
    batches[batch["label"]] = batch

Running and analyzing.

Trying between 0.55 and 0.9.

file:gif/20171207_100423.png

Looks pretty good.  Posting to Slack and then off for a hike.

So I tried to match the number of spikes for this figure, and that looks 
pretty good, but the duration of plateus is too long.

Now working on keeping spikes about the same but decreasing plateau duration.


** Decreasing plateau duration

Changing NMDA beta (unbinding rate for NMDA) is probably cleanest way to reduce
plateau duration.

Creating a batch.

Looking at the SfN poster Figure 6
    https://docs.google.com/presentation/d/1_ekr6BTwa_whFaa7xhME_xXILjYrweYw2Bnd1usj9g0/edit#slide=id.g293c8b978d_0_0

Scaling NMDABeta by 4.0 drops the plateau duration by more than half, which is too
much.  Will try params["NMDABetaScale"] = [1.0, 1.5, 2.0, 2.5, 3.0]

Batch:

    # Varying glutAmp and NMDABetaScale
    batch = {}
    batch["label"] = "glutAmp_NMDABetaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.55, 0.9, 10).round(2))
    params["NMDABetaScale"] = [1.0, 1.5, 2.0, 2.5, 3.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Running and analyzing.

Output:
file:gif/20171207_125642.png

It looks like NMDABetaScale between 1.75 and 2.25 give a pretty good match with 
plateau duration (with stim at 100ms, all traces back to baseline at around 400ms)

I'll set NMDABetaScale = 2.0 for now.

But now need to find good glutAmp range again.  Running batches to explore.

Would be cool to find a range from zero, like in Srdjan's data...

I think the plateaus still last a bit too long after spiking...  
I'm going to try the same thing but at NMDABetaScale = 3.0
(moving figs to batch_figs_beta2)

file:gif/20171207_150207.png
Top: experiment
Middle: NMDABetaScale = 2
Bottom: NMDABetaScale = 3

It's hard to compare, hard to see difference, etc.  Ugh.

Also, it looks like I need a way to have more spikes for the same amount of plateau.  

Looking at our SfN poster, we can probably accomplish that by 
1) decreasing dendritic axial resistance
2) increasing dendritic membrane resistance
3) increasing NMDA unbinding rate
4) decreasing spine neck resistance

I've already been increasing NMDA unbinding rate, next cleanest parameter change 
is probably neck resistance.

Also, would like to slow down plateau onset...  Slowing down AMPA and/or NMDA
onset should have that effect.  


** Rethinking

There are a lot of behaviors to try to match, and also a lot of parameters to vary.

We need a more systematic way to do it.  

We have data now!  We should work with it, use it to determine parameter values.

I will measure the following from Srdjan's data (and ours):

    - min glutAmp: "rheobase" glut weight at spike threshold
    - max glutAmp: glut weight at depolarization blockade threshold
    - time to first spike
    - plateau width
    - plateau height
    - number of spikes
    - mean spiking frequency
    - first interspike interval

As well as from each model parameter value.

Then plot error versus parameter value.  Minimum error = value chosen.


* 2017-12-11 -- Plateau measurements

** TODO

Work on plateau measurements/plots
Work on figures
Work on article

** Work on plateau measurements/plots

For Srdjan's data and ours:
    - time to first spike
    - plateau width
    - plateau height
    - number of spikes
    - mean spiking frequency
    - first interspike interval

Can't measure in Srdjan's, but should in ours:
    - min glutAmp: "rheobase" glut weight at spike threshold
    - max glutAmp: glut weight at depolarization blockade threshold

** Planning

Currently, all plotting code (except batch_utils.plot_overlay_data) uses 
lists/arrays of data, as processed by custom code.

Ultimately, it will be better to have data in Pandas format (standard data format,
Netpyne is using it, easier to manipulate, easier to share, etc.)

So I want to change all analysis functions (batch_analysis.meas_MEASURE) to 
return plot data in Pandas format.

Then I will need to update plotting functions to handle Pandas data.  This will
then allow plotting of Netpyne batch data as well as imported data.

I want to include a "show_work" option on all plots so that there is a graphical 
output showing the measurements (nice check on analysis code; see 
batch_analysis.meas_platdur for an example).

** Learning

Reading up on Pandas
Looking at Netpyne code
Checking my code


* 2017-12-12 -- EEE Meeting and plateau measurements

** TODO

Work on plateau measurements/plots
Work on figures
Work on article

** Work on plateau measurements/plots

*** plateau width
*** plateau height
*** number of spikes
*** mean spiking frequency
*** time to first spike
*** first interspike interval
*** min glutAmp
*** max glutAmp


** EEE Meeting

How to improve subthreshold response to glutamate?  Our model activates very 
quickly, while the data shows a slower response.

    Bill: reduce NMDA alpha (binding rate)

    Srdjan: 
        
        AMPA and NMDA have different activation patterns w/r/t time

        Glutamate is released 10 um from dendrite (and separated from dendrite by
        neuropil) -- takes time for glut to diffuse

Srdjan: Look into membrane capacitance -- match charging curve (look at data
from Srdjan where first input is 150-200 pA current)

Srdjan: Look into addition of spines. How do they affect capacitance and resistance?
(i.e. measure C and R before and after addition of spines)

Hines: do we see and can we model plateaus without spiking?

    Joe: several variables we can adjust to get plats w/o spiking (e.g. dendritic
    axial and membrane resistance)

    Srdjan: puffing glutamate further from soma --> plateaus w/o spiking

Srdjan: data shows non-linearities not in the model in jump from sub to supra-
threshold

    Srdjan: voltage-gated Ca channels may help, or tweaking NMDA

    Look into Segev (year?) and Guy Major (2014) NMDA models

    Look at their and our NMDA conductance slopes

Bill in Slack:

    billl [9:18 AM] 
    role of Ca channels in activation;  idan segev model -- what was slope of NMDA they used

    [9:22] 
    guy major 2014 paper -- nmda dep


** Playing around with Pandas

https://pandas.pydata.org/

Tutorials:
http://pandas.pydata.org/pandas-docs/version/0.15/tutorials.html
https://www.tutorialspoint.com/python_pandas/



* 2017-12-14 -- Plateau measurements

** TODO

Work on plateau measurements/plots
Work on figures
Work on article

** Work on plateau measurements/plots

So all my previous analyses relied on a lot of Netpyne data, but I want to be
able to run the same analyses on Srdjan's data, other data, etc., as well as data
from NEURON sims through Netpyne.

Just like with the trace overlay plotting, I think its easiest to have two
separate functions for Netpyne vs Experimental Data.  But they should both use 
the same underlying analysis code.

I think the first thing to do is implement some functions that take in trace
data (membrane potential and time) and perform the analyses.  These can then 
be used to analyze both imported experimental data and NEURON data from Netpyne.

Also, currently, most of my analysis code requires two parameters to be varied
in the Netpyne batch.  I need to update this so any number of parameters can be 
analyzed.

I'll start with meas_platamp (will use half of plateau amplitude as location for
plateau duration measurement).

** Measuring plateau amplitude

I'm going to run a batch varying two params, so I can play around with existing
meas_platamp.

Working in batch_0171207:

    # Varying glutAmp and NMDABeta
    batch = {}
    batch["label"] = "glutAmp_NMDABeta"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.0, 1.0, 10).round(2))
    params["NMDABetaScale"] = [2.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Running and analyzing:

    graham-mac% eee; cd batches/batch_20171207/; ./runmybatches
    graham-mac% eee; cd batches/batch_20171207/; ipython -i analyze.py

*** From a trace

meas_trace_plat_amp()

** Improve analysis to handle any number of parameters
*** plateau width
*** number of spikes
*** mean spiking frequency
*** time to first spike
*** first interspike interval
*** min glutAmp
*** max glutAmp



* 2017-12-18 -- Measuring plateaus

** TODO

Work on plateau measurements/plots
Work on figures
Work on article

** Measuring plateau amplitude

meas_trace_plat_amp()

Looking at existing plateau amplitude measurement

from batch_analysis:
meas_platamp(params, data, cellID=0, thresh=10, stable=50, baselinedur=100, showwork=False)

    graham-mac% eee; cd batches/batch_20171207
    graham-mac% ipython
    In [1]: import numpy as np; import matplotlib.pyplot as plt; import batch_analysis; import batch_utils; import os; plt.ion()
    In [2]: params, data = batch_utils.load_batch('glutAmp_NMDABeta')
    In [3]: batch_analysis.meas_platamp(params, data, showwork=True)

Created dev.py in batches/batch_20171207:

    """
    Development code for the EEE project.
    """

    import numpy as np; import matplotlib.pyplot as plt; import batch_analysis; import batch_utils; import os; plt.ion()

    params, data = batch_utils.load_batch('glutAmp_NMDABeta')

    output = batch_analysis.meas_platamp(params, data, showwork=True)

Now I can run this instead of typing in commands each time:

    eee; cd batches/batch_20171207; ipython -i dev.py

Fixing an error:

    ---------------------------------------------------------------------------
    IndexError                                Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_20171207/dev.py in <module>()
          7 params, data = batch_utils.load_batch('glutAmp_NMDABeta')
          8 
    ----> 9 batch_analysis.meas_platamp(params, data, showwork=True)

    /u/graham/projects/eee/sim/batch_analysis.py in meas_platamp(params, data, cellID, thresh, stable, baselinedur, showwork)
        148         print("len(tabove) = " + str(len(tabove)))
        149         print("===========================================")
    --> 150         vplat = vsoma[list(time).index(tabove[0]):list(time).index(tabove[-1])]
        151         print("===========================================")
        152         print("len(vsoma) = " + str(len(vsoma)))

    IndexError: list index out of range


Problem seems to be that code crashes if the trace never rises above the threshold.
Adding an if statement to skip analysis if threshold isn't reached.

Getting some NaNs in the output:

In [1]: output
Out[1]: 
{'label': 'Plateau Amplitude (mV)',
 'values': [[0,
   0,
   0,
   0,
   nan,
   nan,
   nan,
   26.230824110022255,
   26.408365482901047,
   26.55269887577407]]}

Okay, so the NaNs occur when there is a plateau (the trace crosses the threshold) 
but no spiking.  

Happens because I use the local min after spiking to calculate platamp...

Need to be able to do this with and without spiking.  I think I'll run a new 
batch with and without TTX (allNaScale = [0.0, 1.0]).

This is a good test of this analysis code, because the plateau amplitudes 
should be about the same with and without spiking this way...

    # Varying glutAmp and allNaScale (TTX)
    batch = {}
    batch["label"] = "glutAmp_allNaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.0, 1.0, 10).round(2))
    params["allNaScale"] = [0.0, 1.0]
    batch["params"] = params
    batches[batch["label"]] = batch 

Running and analyzing.

    graham-mac% eee ; cd batches/batch_20171207 ; ./runmybatches
    graham-mac% eee ; cd batches/batch_20171207 ; ipython analyze.py
    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py

Changing output to platmean to get rid of NaNs:

    #platamps[p2index][p1index] = platamp
    platamps[p2index][p1index] = platmean

I can use the platamp (local minima between spikes) when there are spikes, but
probably better if can do without...

Let's compare current plateau amplitude measurements with and w/o TTX

Increasing maximum glutAmp in batch to 2.0 to see more spikes.

Running and analyzing.
    graham-mac% eee ; cd batches/batch_20171207 ; ./runmybatches
    graham-mac% eee ; cd batches/batch_20171207 ; ipython analyze.py
    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py


Plateau comparisons w and w/o TTX:
file:gif/20171218_071325.png

Plateaus measure higher in spiking plateaus.  This is because I'm calculating
plateau amplitude as the mean of the voltage above threshold.  Spiking obv 
drags this upwards.

I want similar measurements for plateaus with and w/o spiking.  If I remove all 
voltages above interspike mimina and then take mean, that should help close
the gap.  Trying this now.  

Instead of using the mean of voltages above threshold, I am going to use the max.
For traces with spiking, I'll use the max of the interspike minima.

Actually, it looks like with spiking, the plateaus are actually higher.
file:gif/20171218_081115.png

This makes sense: Na depolarizes, so sodium currents during spiking should
result in a higher plateau.

Looks good:
file:gif/20171218_085738.png

Now to extract the code to do this on a single trace, and apply it to Srdjan's 
data.

Committing first.  
changeset:   474:1e8ee6fceb49

After a lot of bug killing, measuring plateau amplitude is now generalized in
batch_analysis:
    meas_trace_plat_amp(trace, time=None, recstep=0.1, syntime=100.0, thresh=5.0, stable=50.0)

Removing print statements and committing.
changeset:   475:2587466e120f

Figure showing analysis:
file:gif/20171218_115827.png

** Measuring plat amp in Srdjan's data

First to execute dev.py, which now loads Srdjan's data:
    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py

It would be most consistent to use plotscalar2 to plot the analysis, just like
what happens with the batch data.  

plotscalar2(meas, params, title=None, measlabel=None, par1label=None, par2label=None, swapaxes=False)

"meas" is the output from a meas_routine (like meas_platamp)
"params" is the dictionary containing param names and values from Netpyne.

Now to see what these look like:

    In [1]: output
    Out[1]: 
    {'label': 'Plateau Amplitude (mV)',
     'params': [{u'label': u'glutAmp',
       u'values': [0.0, 0.22, 0.44, 0.67, 0.89, 1.11, 1.33, 1.56, 1.78, 2.0]},
      {u'label': u'allNaScale', u'values': [0.0, 1.0]}],
     'values': [[0,
       5.2160665688857506,
       12.80547987881755,
       22.940630826160394,
       25.045852728643432,
       25.979897877444508,
       26.533817855774963,
       26.920860949735228,
       27.18758680422583,
       27.391056749205305],
      [0,
       5.2171492655379126,
       12.832997140716429,
       25.511147854801486,
       26.615726208663006,
       27.575315502977631,
       28.287881570658101,
       28.800270967118365,
       29.236334690762469,
       29.55887865164884]]}

    In [2]: params
    Out[2]: 
    [{u'label': u'glutAmp',
      u'values': [0.0, 0.22, 0.44, 0.67, 0.89, 1.11, 1.33, 1.56, 1.78, 2.0]},
     {u'label': u'allNaScale', u'values': [0.0, 1.0]}]

So I want to manipulate Srdjan's data to look like this.

Starting with params.  Working in dev.py

data_params = [param1dict, param2dict]

    data = batch_utils.import_excel("/u/graham/projects/eee/data/srdjan_20171017/B_73_004.xlsx")
    param1 = {}
    param1['label'] = 'glutAmp'
    param1['values'] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    param2 = {}
    param2['label'] = 'None'
    param2['values'] = [0]
    data_params = [param1, param2]

Oof.  The data is a bit noisy, and so the argrelmin function doesn't work for 
finding the bottoms of interspike intervals...

I think it would be easier to find the peaks of the action potentials and then 
find the minima between the peaks...

** Find the times of spikes in a trace

def meas_trace_spike_times(trace, time=None, recstep=recstep, spikethresh=spikethresh):

Tried this:

    def meas_trace_spike_times(trace, time=None, recstep=recstep, spikethresh=spikethresh):

        spike_window_ind = [ind for ind,val in enumerate(trace) if val > spikethresh]
        
        #if len(spike_window_ind) > 0:
        volt_window = trace[spike_window_ind]
        time_window = time[spike_window_ind]

        peak_ind = argrelmax(volt_window)
        peak_times = time_window[peak_ind]

        print("time_window")
        print(time_window)
        print
        print("peak_times")
        print(peak_times)
        print

        return

But it misses at least one spike (in the last trace).  The spike is missed 
because argrelmax needs a lower point on either side of the peak, and the first 
spike's point right before is below the spike threshold and thus not included
in `spike_window_ind`...

Need to figure out a more robust solution...

This is not the most elegant or efficient solution, but it works:

    def meas_trace_spike_times(trace, time=None, recstep=recstep, spikethresh=spikethresh):

        if time is None:
            timesteps = len(trace)
            time = recstep * np.arange(0, timesteps, 1)

        spike_times = []
        for index, sample in enumerate(trace):
            if index > 0 and index < (len(trace)-1):
                if sample > spikethresh:
                    if sample > trace[index-1] and sample > trace[index+1]:
                        spike_times.append(time[index])
                        
        return spike_times

Okay, now that I have the spike times for a given trace, I can find the minima
between the spikes and use that as a measure of plateau amplitude.

** Comparing Srdjan data with model

To generate plots:
    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py

It works!
    file:gif/20171218_205249.png

Committing now.
changeset:   476:e7b8c36acd67


* 2017-12-19 -- Measuring plateaus

** TODO

Work on plateau measurements/plots
Work on figures
Work on article

** Measuring plateau duration

Now that I can measure plateau amplitude, it's time to measure plateau 
duration.  I am going to measure the half-width -- duration of plateau at
half the maximum amplitude.

Working in batch_analysis:
    def meas_trace_plat_dur(trace, time=None, recstep=recstep, syntime=100.0, thresh=5.0, stable=50.0, showwork=False, spikethresh=spikethresh):

It works!
file:gif/20171219_073118.png

Need to plot on same scale:
file:gif/20171219_073802.png

Committing now.
changeset:   477:1140cf719f39

** Re-run batch to match Srdjan's plat dur data

If I go to a max glutAmp of around 1.1, duration should match Srdjan's better.

Modifying batch_20171207/my_batches.py:

    params["glutAmp"] = list(np.linspace(0.0, 2.0, 10).round(2)) -->
    params["glutAmp"] = list(np.linspace(0.0, 1.1, 10).round(2))

Running and analyzing.

Getting this error when executing dev.py:

    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_20171207/dev.py in <module>()
         45 
         46 params, data = batch_utils.load_batch('glutAmp_allNaScale')
    ---> 47 amp_output = batch_analysis.meas_platamp(params, data, showwork=False)
         48 batch_analysis.plotscalar2(amp_output, amp_output['params'], swapaxes=True)
         49 dur_output = batch_analysis.meas_platdur(params, data, showwork=False)

    /u/graham/projects/eee/sim/batch_analysis.pyc in meas_platamp(params, data, cellID, thresh, stable, syntime, recstep, showwork)
        151             time = recstep * np.arange(0, timesteps, 1)
        152 
    --> 153         platamp, platvolt = meas_trace_plat_amp(vsoma, time=None, recstep=recstep, syntime=syntime, thresh=thresh, stable=stable)
        154 
        155         p1index = p1valsdic[d['paramValues'][0]]

    /u/graham/projects/eee/sim/batch_analysis.pyc in meas_trace_plat_amp(trace, time, recstep, syntime, thresh, stable, showwork, spikethresh)
         85                 interspike_min = np.min(trace[spike_indices[ind]:spike_indices[ind+1]])
         86                 interspike_mins.append(interspike_min)
    ---> 87         platvolt = np.max(interspike_mins)
         88         platamp = np.max(interspike_mins) - baseline
         89 

    /usr/local/lib/python2.7/site-packages/numpy/core/fromnumeric.pyc in amax(a, axis, out, keepdims)
       2291         except AttributeError:
       2292             return _methods._amax(a, axis=axis,
    -> 2293                                 out=out, **kwargs)
       2294         return amax(axis=axis, out=out, **kwargs)
       2295     else:

    /usr/local/lib/python2.7/site-packages/numpy/core/_methods.pyc in _amax(a, axis, out, keepdims)
         24 # small reductions
         25 def _amax(a, axis=None, out=None, keepdims=False):
    ---> 26     return umr_maximum(a, axis, None, out, keepdims)
         27 
         28 def _amin(a, axis=None, out=None, keepdims=False):

    ValueError: zero-size array to reduction operation maximum which has no identity

I think it may be because when there is a single spike on a plateau, there is no
interspike minimum...

Changing batch_analysis:
    if len(spike_indices) == 0: --> if len(spike_indices) < 2:

Yeah, now it doesn't crash, but there is a problem in measurements when there is 
only one spike:

file:gif/20171219_080803.png

Bill in Slack:
    billl [8:12 AM] 
    can also make what you currently have as 0.12 as your starting point on xaxis -- there is no such thing as a condition where there is 0 glutamate of course
    and maybe stretch a bit further to the R to show that you indead get ceiling

params["glutAmp"] = list(np.linspace(0.0, 1.1, 10).round(2))
-->
params["glutAmp"] = list(np.linspace(0.1, 1.2, 10).round(2))

Ran and analyzed:
file:gif/20171219_082202.png

Looking better.

** Ensure showwork is functional 

It's always good to be able to see actual traces with abstracted analyses.

Works for platamp:
file:gif/20171219_083716.png


** Fix measurements for single spike cases

Bill says to ignore

** Improve analysis to handle any number of parameters

Bill suggests this is not currently necessary


* 2017-12-20 -- Measuring plateaus

** Plateau measurements

*** number of spikes
*** mean spiking frequency
*** time to first spike
*** first interspike interval

*** min glutAmp?
*** max glutAmp?


* 2017-12-21 -- Measuring plateaus

** Plateau measurements

Working on measuring plateaus



* 2018-01-02 -- Happy New Year!

** TODO

Finish plateau measurements
Analyze NMDA 
Work on article

** Finish plateau measurements -- amp and dur

I have measurements for plateau duration and plateau amplitude completed, 
including a "showwork" option that plots the measurement on the trace for
quality control.

Running the plateau measurements:

  from: /u/graham/projects/eee/sim/batches/batch_20171207/dev.py
    
    params, data = batch_utils.load_batch('glutAmp_allNaScale')
    amp_output = batch_analysis.meas_platamp(params, data, showwork=True)
    batch_analysis.plotscalar2(amp_output, amp_output['params'], swapaxes=True)
    plt.ylim([0, 30])
    dur_output = batch_analysis.meas_platdur(params, data, showwork=True)
    batch_analysis.plotscalar2(dur_output, dur_output['params'], swapaxes=True)


Hmmm... Actually, the showwork option for the plateau duration measurement is
crashing:

    In [5]: dur_output = batch_analysis.meas_platdur(params, data, showwork=True)
    ---------------------------------------------------------------------------
    NameError                                 Traceback (most recent call last)
    <ipython-input-5-070f16193118> in <module>()
    ----> 1 dur_output = batch_analysis.meas_platdur(params, data, showwork=True)

    /u/graham/projects/eee/sim/batch_analysis.pyc in meas_platdur(params, data, cellID, thresh, stable, syntime, showwork)
        225             plt.plot([time[0], time[-1]], [baseline, baseline], 'g')
        226             plt.plot([time[0], time[-1]], [baseline+thresh, baseline+thresh], 'r')
    --> 227             plt.plot(above, (baseline+thresh)*np.ones(len(above)), 'rx')
        228             plt.ylabel("Membrane Potential (mv)")
        229             plt.xlabel("Time (ms)")

    NameError: global name 'above' is not defined

Okay, so the showwork option is old code that needs a complete rewrite.

In order to plot the plateau duration on the trace, I am going to need not just
the measured duration, but also the start and end time of the plateau.

I am changing meas_trace_plat_dur() to return duration and a tuple of times:

    return platdur
      -->
    return platdur, (mintime, maxtime)

Updating other code to handle this change...

    platdur = meas_trace_plat_dur(vsoma, time=None, recstep=recstep, syntime=syntime, thresh=thresh, stable=stable)
      -->
    platdur, plattime = meas_trace_plat_dur(vsoma, time=None, recstep=recstep, syntime=syntime, thresh=thresh, stable=stable)

Making sure everything works...  Fixing minor bugs...

Getting a weird crash:

    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py

    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_20171207/dev.py in <module>()
         39 data_platdurs['label'] = 'Plateau Duration (ms)'
         40 data_platdurs['values'] = [platdurs]
    ---> 41 batch_analysis.plotscalar2(data_platdurs, data_params, title=None, measlabel=None, par1label=None, par2label=None, swapaxes=True)
         42 
         43 params, data = batch_utils.load_batch('glutAmp_allNaScale')

    /u/graham/projects/eee/sim/batch_analysis.py in plotscalar2(meas, params, title, measlabel, par1label, par2label, swapaxes)
        519         par1vals, par2vals = par2vals, par1vals
        520         par1label, par2label = par2label, par1label
    --> 521         measvals = np.swapaxes(measvals, 0, 1)
        522 
        523     if measlabel is None:

    /usr/local/lib/python2.7/site-packages/numpy/core/fromnumeric.pyc in swapaxes(a, axis1, axis2)
        500         swapaxes = a.swapaxes
        501     except AttributeError:
    --> 502         return _wrapit(a, 'swapaxes', axis1, axis2)
        503     return swapaxes(axis1, axis2)
        504 

    /usr/local/lib/python2.7/site-packages/numpy/core/fromnumeric.pyc in _wrapit(obj, method, *args, **kwds)
         45     except AttributeError:
         46         wrap = None
    ---> 47     result = getattr(asarray(obj), method)(*args, **kwds)
         48     if wrap:
         49         if not isinstance(result, mu.ndarray):

    /usr/local/lib/python2.7/site-packages/numpy/core/numeric.pyc in asarray(a, dtype, order)
        480 
        481     """
    --> 482     return array(a, dtype, copy=False, order=order)
        483 
        484 def asanyarray(a, dtype=None, order=None):

    ValueError: setting an array element with a sequence.

Looking into...

Adding print statements (starting at line 518)

    if swapaxes:
        print("measvals = ")
        print(measvals)
        print("par1label = " + str(par1label))
        print("par2label = " + str(par2label))
        par1vals, par2vals = par2vals, par1vals
        par1label, par2label = par2label, par1label
        measvals = np.swapaxes(measvals, 0, 1)

Output:

    measvals = 
    [[0.0, 6.0929326000000117, 11.602906800000014, 27.733240400000014, 27.409832200000004, 27.3283384, 26.702778600000009, 27.500846599999996, 27.405365200000013, 28.331673600000002]]
    par1label = None
    par2label = None
    measvals = 
    [[(0, (0, 0)), (104.00000000000001, (125.8, 229.80000000000001)), (117.40000000000001, (128.20000000000002, 245.60000000000002)), (92.199999999999989, (150.0, 242.19999999999999)), (140.59999999999997, (142.80000000000001, 283.39999999999998)), (135.19999999999999, (140.0, 275.19999999999999)), (169.59999999999997, (137.0, 306.59999999999997)), (199.0, (135.80000000000001, 334.80000000000001)), (208.60000000000002, (137.19999999999999, 345.80000000000001)), (223.40000000000003, (133.80000000000001, 357.20000000000005))]]
    par1label = None
    par2label = None

So the first is from meas_plat_amp (which works, measvals is a normal list).
The second is from meas_plat_dur, and measvals is some sort of weird nested tuple.

Problem was in dev.py, I didn't update the following line:

    platdur = batch_analysis.meas_trace_plat_dur(cur_data, time=time, recstep=0.2, stable=0.0, showwork=True)
      -->
    platdur, plattimes = batch_analysis.meas_trace_plat_dur(cur_data, time=time, recstep=0.2, stable=0.0, showwork=True)

That stopped the crashing.  Now removing print statments and back to fixing 
showwork.

Everything works now:
file:gif/20180102_081110.png

You can see that it still doesn't work for a single spike, but I can fix that 
later.

Committing now:
changeset:   478:5c4e4d8bfaf3


** Introduced a problem

Something weird happened:
file:gif/20180102_100741.png

Now plat amp is too high when there is spiking and plat dur is a weird shape...

Looking into this...  Problem was a change I made in meas_trace_spike_times, 
I changed it back.


** EEE Meeting

Hines: low pass filter can be used to measure plateaus

Bill: Erica is measuring spikes, I should share my code with her

Salvador has used Pandas for more than 2D, can share resources

Bill: start writing article now


** Finish plateau measurements

Now I want to measure a few more things:

1) number of spikes
2) mean spike frequency
3) time to first spike
4) first interspike interval

So if I extract the time each spike occurs, I can then measure all of these 
things.

Working in batch_analysis.meas_trace_spike_times

Current measurement:
file:gif/20180102_085257.png
file:gif/20180102_090006.png

*** 1) number of spikes

meas_trace_num_spikes is now functional for experimental data.
Still need to make it work for Netpyne batch data.

Execute dev.py to see it in action:
    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py

Code from batch_analysis:

    def meas_trace_num_spikes(trace, time=None, recstep=recstep, spikethresh=spikethresh, showwork=False):
        
        spike_times, spike_inds = meas_trace_spike_times(trace, time=time, recstep=recstep, spikethresh=spikethresh, showwork=False)

        num_spikes = len(spike_times)

        return num_spikes

*** 2) mean spike frequency

meas_trace_spike_freq is now functional for experimental data.
Still need to make it work for Netpyne batch data.

Code from batch_analysis:

    def meas_trace_spike_freq(trace, time=None, recstep=recstep, spikethresh=spikethresh, showwork=False):
        
        spike_times, spike_inds = meas_trace_spike_times(trace, time=time, recstep=recstep, spikethresh=spikethresh, showwork=False)

        if len(spike_times) > 1:
            spike_freq = 1000 * (len(spike_times)-1) / (spike_times[-1] - spike_times[0]) 
        else:
            spike_freq = 0

        return spike_freq

*** 3) time to first spike

meas_trace_time_to_spike is now functional for experimental data.
Still need to make it work for Netpyne batch data.

Code from batch_analysis:

    def meas_trace_time_to_spike(trace, time=None, recstep=recstep, syntime=100.0, showwork=False, spikethresh=spikethresh):

        spike_times, spike_inds = meas_trace_spike_times(trace, time=time, recstep=recstep, spikethresh=spikethresh, showwork=False)

        if len(spike_times) > 0:
            time_spike = spike_times[0] - syntime
        else:
            time_spike = 0

        return time_spike

*** 4) first interspike interval

meas_trace_first_interspike is now functional for experimental data.
Still need to make it work for Netpyne batch data.

Code from batch_analysis:

    def meas_trace_first_interspike(trace, time=None, recstep=recstep, syntime=100.0, showwork=False, spikethresh=spikethresh):

        spike_times, spike_inds = meas_trace_spike_times(trace, time=time, recstep=recstep, spikethresh=spikethresh, showwork=False)

        if len(spike_times) > 1:
            interspike = spike_times[1] - spike_times[0]
        else:
            interspike = 0

        return interspike


** Experimental data plateau measures

file:gif/20180102_173657.png

Committing now:
changeset:   479:d06cf1b49ed2


** Implementing plateau measures for Netpyne batch data


* 2018-01-03 -- Measuring Netpyne batch plateaus

** TODO

Finish plateau measurements
Analyze NMDA 
Work on article

** Fixes to batch_analysis

*** thresh to platthresh

Changing all plateau threshold variables from "thresh" to "platthresh", and 
including one value at the top of the file as a default.  This is to help 
distinguish between the spike threshold and the plateau threshold

    platthresh = 5.0     # threshold for a plateau

*** platamp to plat_amp

Changing all refs to platamp to plat_amp for consistency

*** Adding default "stable" and "syntime" variables to the top of batch_analysis.py:

stable       = 50     # ms required for trace to stabilize
syntime      = 100    # time in ms when glutamate is released (synapse time)

Changing all function defs, e.g.:

    stable=50, syntime=100
      -->
    stable=stable, syntime=syntime


** Plateau measurements on Netpyne batches

Need to ensure all the following measurements work on Netpyne batches:

1) plateau amplitude
2) plateau duration
3) number of spikes
4) mean spike frequency
5) time to first spike
6) first interspike interval

*** 1) plateau amplitude

batch_analysis.meas_platamp

I want to update this to use meas_trace_plat_amp.  Also, will rename it as:
meas_batch_plat_amp

I will then fix plot_plat_amp and rename it plot_batch_plat_amp

I want plot_batch_plat_amp to have the same options as meas_batch_plat_amp:

    def meas_batch_plat_amp(params, data, cellID=0, platthresh=platthresh, stable=stable, syntime=syntime, recstep=0.1, showwork=False):

    def plot_batch_plat_amp(batchname, cellIDs=None, platthresh=platthresh, par1label=None, par2label=None, title=None, savefig=True, swapaxes=True, showwork=False, outputdir="batch_figs"):

      -->

    def plot_batch_plat_amp(batchname, cellIDs=None, platthresh=platthresh, stable=stable, syntime=syntime, recstep=recstep, par1label=None, par2label=None, title=None, savefig=True, swapaxes=True, showwork=False, outputdir="batch_figs"):

Looks good, except for an error when it tries to save:

    ---------------------------------------------------------------------------
    OSError                                   Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_20171207/dev.py in <module>()
         94     plt.ylim([0, 30])
         95 
    ---> 96     batch_analysis.plot_batch_plat_amp('glutAmp_allNaScale')
         97 
         98     # dur_output = batch_analysis.meas_platdur(params, data, showwork=False)

    /u/graham/projects/eee/sim/batch_analysis.py in plot_batch_plat_amp(batchname, cellIDs, platthresh, stable, syntime, recstep, par1label, par2label, title, savefig, swapaxes, showwork, outputdir)
       1022             batch_dir = os.path.join(outputdir, batchname + "_" + cellLabel)
       1023             if not os.path.isdir(batch_dir):
    -> 1024                 os.mkdir(batch_dir)
       1025 
       1026             fig.savefig(os.path.join(batch_dir, batchname + "_" + cellLabel + "_plat_amp.png"))

    OSError: [Errno 2] No such file or directory: 'batch_figs/glutAmp_allNaScale_cell_0'

Looks like I should use os.makedirs (https://docs.python.org/2/library/os.html#os.makedirs)
because that will create intermediate dirs (batch_figs dir wasn't created yet in this case)

Trying that now...  Good.  But what if batch_figs dir already exists?  
Trying now...  Also works.  Good.

So now, in dev.py (or anywhere else), I can replace:

    params, data = batch_utils.load_batch('glutAmp_allNaScale')

    amp_output = batch_analysis.meas_batch_plat_amp(params, data, showwork=False)
    batch_analysis.plotscalar2(amp_output, amp_output['params'], swapaxes=True)
    plt.ylim([0, 30])

With:

    batch_analysis.plot_batch_plat_amp('glutAmp_allNaScale')


*** 2) plateau duration

batch_analysis.meas_platdur

I want to update this to use meas_trace_plat_dur.  Also, will rename it as:
meas_batch_plat_dur

I will then fix plot_plat_dur and rename it plot_batch_plat_dur

Will finish tomorrow.


* 2018-01-04 -- Measuring Netpyne batch plateaus

** TODO

Finish plateau measurements
Analyze NMDA 
Work on article

** Fixes to batch_analysis

Changing plot_batch_plat_MEASUREMENT to just plot_plat_MEASUREMENT to reduce name length
plot_batch_plat_amp --> plot_plat_amp
plot_batch_plat_dur --> plot_plat_dur


** Plateau measurements on Netpyne batches

Need to ensure all the following measurements work on Netpyne batches:

2) plateau duration
3) number of spikes
4) mean spike frequency
5) time to first spike
6) first interspike interval


*** 2) plateau duration

batch_analysis.meas_batch_plat_dur

Fixing plot_plat_dur...

Now functional.

Now can replace: 
    
    dur_output = batch_analysis.meas_batch_plat_dur(params, data, showwork=False)
    batch_analysis.plotscalar2(dur_output, dur_output['params'], swapaxes=True)

With:

    batch_analysis.plot_plat_dur('glutAmp_allNaScale')


*** 3) number of spikes

batch_analysis.meas_numspikes

I want to update this to use meas_trace_num_spikes.  Also, will rename it as:
meas_batch_num_spikes

I will then fix plot_numspikes and rename it plot_num_spikes

Need to fix input options:

    def plot_num_spikes(batchname, cellIDs=None, par1label=None, par2label=None, title=None, savefig=True, swapaxes=True, showwork=False, outputdir="batch_figs"):

    -->

    def plot_num_spikes(batchname, cellIDs=None, stable=stable, syntime=syntime, recstep=recstep, par1label=None, par2label=None, title=None, savefig=True, swapaxes=True, showwork=False, outputdir="batch_figs"):

Functional.  Now I can replace:

    numspike_output = batch_analysis.meas_batch_num_spikes(params, data, showwork=False)
    batch_analysis.plotscalar2(numspike_output, params, swapaxes=True)

With:

    batch_analysis.plot_num_spikes('glutAmp_allNaScale')


*** 4) mean spike frequency

batch_analysis.meas_freq

I want to update this to use meas_trace_freq.  Also, will rename it as:
meas_batch_freq

I will then fix plot_freq

Need to fix input options:

    def plot_freq(batchname, cellIDs=None, par1label=None, par2label=None, title=None, savefig=True, swapaxes=True, showwork=False, outputdir="batch_figs"):

    -->

    def plot_freq(batchname, cellIDs=None, stable=stable, syntime=syntime, recstep=recstep, par1label=None, par2label=None, title=None, savefig=True, swapaxes=True, showwork=False, outputdir="batch_figs"):

Okay, it's functional.  Now can replace:

    freq_output = batch_analysis.meas_batch_freq(params, data, showwork=False)
    batch_analysis.plotscalar2(freq_output, params, swapaxes=True)

With:

    batch_analysis.plot_freq('glutAmp_allNaScale')


*** 5) time to first spike

This is more complicated, because I don't already have existing measurement and 
plots for this measure...  

Looking into how to do it...


* 2018-01-05 -- Measuring Netpyne batch plateaus

** TODO

Finish plateau measurements
Analyze NMDA 
Work on article


** Plateau measurements on Netpyne batches

Need to ensure all the following measurements work on Netpyne batches:

5) time to first spike
6) first interspike interval

*** 5) time to first spike

Copying meas_batch_plat_dur() and renaming the copy meas_batch_time_to_spike()
(to match meas_trace_time_to_spike)

Modifying to measure time to spike...

And it works:

    tts_output = batch_analysis.meas_batch_time_to_spike(params, data, showwork=True)
    batch_analysis.plotscalar2(tts_output, params, swapaxes=True)

Now to create plot_time_to_spike() as a copy of plot_freq()

Modifying...

It works!  So now can replace:
    
    tts_output = batch_analysis.meas_batch_time_to_spike(params, data, showwork=True)
    batch_analysis.plotscalar2(tts_output, params, swapaxes=True)

With:

    batch_analysis.plot_time_to_spike('glutAmp_allNaScale')

*** 6) first interspike interval

Will get to this on Monday.


* 2018-01-08 -- Fixing plateau measurements and plotting

** TODO

Finish plateau measurements
Analyze NMDA 
Work on article


** Plateau measurements on Netpyne batches

Need to ensure all the following measurements work on Netpyne batches:

6) first interspike interval

*** 6) first interspike interval

Copying meas_batch_time_to_spike() to meas_batch_first_interspike()

Modifying...

Aaand, now it works:

    inter_output = batch_analysis.meas_batch_first_interspike(params, data, showwork=False)
    batch_analysis.plotscalar2(inter_output, params, swapaxes=True)

Now to create plot_first_interspike() as a copy of plot_time_to_spike()...

That works, so now can replace:

    inter_output = batch_analysis.meas_batch_first_interspike(params, data, showwork=False)
    batch_analysis.plotscalar2(inter_output, params, swapaxes=True)

With:

    batch_analysis.plot_first_interspike('glutAmp_allNaScale')

Whew.  Done with the plateau measurements on simulation data.

** New TODOs for plateau measurements

1) Ensure "showwork" option works for all measures
2) Create "compdata" option to plot exp and model data
3) Make a "batch" class, so each individual batch can be an object
   - allows data to be loaded just once
   - each analysis/plot can be a method 
   - this can/should be added to Netpyne
4) Make analysis and plotting work with any number of params
   - at first can just do 1d and 2d

Will do number 4 first, then number 2, so I have figs for tomorrow's meeting.


** Make analysis and plotting work for 1D and 2D params

Need to do this for plotscalar2 and plotrelation2, but will start with 
plotscalar2 for plateau measurement plots.

Copying plotscalar2() to plotscalar() to save the original until new is working

Modifying to make it work for one or two parameters...

Parameter / axis values are opposite what they should be.  Fixing...

It works for 2D params.  Testing for 1D.  Changing dev.py:

    # expdata_params = [param1, param2]
    expdata_params = [param1]

And running it:

    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py

Error. Problem with legend with 1D...

Everything seems to be working.

I am going to run a 1D batch to ensure it works...

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.0, 1.2, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

Running:
    graham-mac% eee ; cd batches/batch_20171207 ; ./runmybatches

In dev.py:
    #batchname = 'glutAmp_allNaScale'
    batchname = 'glutAmp'

And running dev:
    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py

Getting an error:

    ---------------------------------------------------------------------------
    IndexError                                Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_20171207/dev.py in <module>()
         93     params, data = batch_utils.load_batch(batchname)
         94 
    ---> 95     amp_output = batch_analysis.meas_batch_plat_amp(params, data, showwork=False)
         96     batch_analysis.plotscalar(amp_output, amp_output['params'], swapaxes=True)
         97     plt.ylim([0, 30])

    /u/graham/projects/eee/sim/batch_analysis.pyc in meas_batch_plat_amp(params, data, cellID, platthresh, stable, syntime, recstep, showwork)
        187 
        188     p1vals = params[0]['values']
    --> 189     p2vals = params[1]['values']
        190     p1valsdic = {val: i for i,val in enumerate(p1vals)}
        191     p2valsdic = {val: i for i,val in enumerate(p2vals)}

    IndexError: list index out of range


Yeah, I need to fix all the batch measurement functions to allow for 1D params.

But that'll have to wait for tomorrow.


* 2018-01-09 -- Fixing measurements and plotting, EEE Meeting

** TODO

Finish plateau measurements
Analyze NMDA 
Work on article


** Fix batch measurement functions to allow for 1D params

*** Modifying meas_batch_plat_dur()

Changing:

    p1vals = params[0]['values']
    p2vals = params[1]['values']
    p1valsdic = {val: i for i,val in enumerate(p1vals)}
    p2valsdic = {val: i for i,val in enumerate(p2vals)}

    platdurs = [[0 for p1 in range(len(p1vals))] for p2 in range(len(p2vals))]

To:

    p1vals = params[0]['values']
    p1valsdic = {val: i for i,val in enumerate(p1vals)}
    platdurs = [0 for p1 in range(len(p1vals))]

    if len(params) == 2:
        p2vals = params[1]['values']
        p2valsdic = {val: i for i,val in enumerate(p2vals)}
        platdurs = [[0 for p1 in range(len(p1vals))] for p2 in range(len(p2vals))]

Changing:

        p1index = p1valsdic[d['paramValues'][0]]
        p2index = p2valsdic[d['paramValues'][1]]
        platdurs[p2index][p1index] = platdur

To:

        p1index = p1valsdic[d['paramValues'][0]]
        if len(params) == 1:
            platdurs[p1index] = platdur
        elif len(params) == 2:
            p2index = p2valsdic[d['paramValues'][1]]
            platdurs[p2index][p1index] = platdur

Now running to try it out.

Getting an error in plotscalar: 
    ValueError: x and y must have same first dimension

Problem seems to be I am plotting measvals[0], which is a list of values in a 
2D batch, but the first value of a list with 1D batch...

Trying this:
        #handles = ax.plot(range(len(xticks)), measvals[0], marker='o', markersize=10)
        handles = ax.plot(range(len(xticks)), measvals, marker='o', markersize=10)

*** Fixing experimental data 

Hmmm... Now it crashes when plotting the experimental data...

Changing this:


    expdata_platamps = {}
    expdata_platamps['label'] = 'Plateau Amplitude (mV)'
    expdata_platamps['values'] = [platamps]

To this:

    expdata_platamps = {}
    expdata_platamps['label'] = 'Plateau Amplitude (mV)'
    expdata_platamps['values'] = platamps
    
That works.  Changing the rest.  All experimental data works now.

Running dev.py.  Crashes on batch_analysis.meas_batch_num_spikes

Need to finish fixing 1D measurements.

*** Fixing meas_batch_num_spikes

Fixed

*** Fixing meas_batch_freq

Fixed

*** Fixing meas_batch_time_to_spike

Fixed

*** Fixing meas_batch_first_interspike

Fixed

So all measurement functions are fixed now.  :)

Committing now.  
changeset:   482:b9d6d809d462

** Fixing plot functions

Need to update plot functions to handle 1d or 2d and take in a fig for overplotting

The problem is: par1label=par1label, par2label=par2label

"plotscalar" takes in a single list of param labels (param_labels=None)

I'll change plotting functions to match.

Doing a find and replace:
  find:    par1label=None, par2label=None
  replace: param_labels=None

Doing another find and replace:
  find:    par1label=par1label, par2label=par2label
  replace: param_labels=param_labels

Fixing:
    plot_plat_dur
    plot_plat_amp
    plot_num_spikes
    plot_freq
    plot_time_to_spike
    plot_first_interspike

*** Need to fix plot_ functions to return only one fig 

currently, if swapaxes is True, they returns two plots: original and swapped

but this breaks overplotting

Replacing all `swapaxes=True` with `swapaxes=False` in funcs using plotscalar

Changing this:

    for cellID in cellIDs:
        cellLabel = "cell_" + str(cellID)
        meas = meas_batch_plat_dur(params, data, cellID=cellID, platthresh=platthresh)
        fig = plotscalar(meas, params, title=title, measlabel=None, param_labels=param_labels, swapaxes=False)

        if swapaxes:
            fig2 = plotscalar(meas, params, title=title, measlabel=None, param_labels=param_labels, swapaxes=True)

        if savefig:
            batch_dir = os.path.join(outputdir, batchname + "_" + cellLabel)
            if not os.path.isdir(batch_dir):
                os.makedirs(batch_dir)

            fig.savefig(os.path.join(batch_dir, batchname + "_" + cellLabel + "_plat_dur.png"))
            if swapaxes:
                fig2.savefig(os.path.join(batch_dir, batchname + "_" + cellLabel + "_plat_dur_2.png"))

    return fig

To this:

    for cellID in cellIDs:
        cellLabel = "cell_" + str(cellID)
        meas = meas_batch_plat_dur(params, data, cellID=cellID, platthresh=platthresh)
        fig = plotscalar(meas, params, title=title, measlabel=None, param_labels=param_labels, swapaxes=swapaxes)

        if savefig:
            batch_dir = os.path.join(outputdir, batchname + "_" + cellLabel)
            if not os.path.isdir(batch_dir):
                os.makedirs(batch_dir)

            if not swapaxes:
                fig.savefig(os.path.join(batch_dir, batchname + "_" + cellLabel + "_plat_dur.png"))
            else:
                fig.savefig(os.path.join(batch_dir, batchname + "_" + cellLabel + "_plat_dur_2.png"))

    return fig

for all plot functions.

Adding in fig option to all plot functions.


** Plotting exp and model together

*** Works, but crashes on legend:

    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_20171207/dev.py in <module>()
        112     # batch_analysis.plotscalar(inter_output, params, swapaxes=True)
        113 
    --> 114     batch_analysis.plot_plat_amp(batchname, fig=fig1)
        115     batch_analysis.plot_plat_dur(batchname, fig=fig2)
        116     batch_analysis.plot_num_spikes(batchname, fig=fig3)

    /u/graham/projects/eee/sim/batch_analysis.py in plot_plat_amp(batchname, cellIDs, platthresh, stable, syntime, recstep, param_labels, title, savefig, swapaxes, showwork, outputdir, fig)
       1183         cellLabel = "cell_" + str(cellID)
       1184         meas = meas_batch_plat_amp(params, data, cellID=cellID, platthresh=platthresh, stable=stable, syntime=syntime, recstep=recstep)
    -> 1185         fig = plotscalar(meas, params, title=title, measlabel=None, param_labels=param_labels, swapaxes=swapaxes, fig=fig)
       1186 
       1187         if savefig:

    /u/graham/projects/eee/sim/batch_analysis.py in plotscalar(meas, params, title, measlabel, param_labels, swapaxes, fig)
        767     plt.title(title)
        768     if add_legend:
    --> 769         plt.legend(handles, legendvalues, title=legendtitle, loc="best")
        770 
        771     return figure

    /Users/graham/anaconda/lib/python2.7/site-packages/matplotlib/pyplot.pyc in legend(*args, **kwargs)
       3558 @docstring.copy_dedent(Axes.legend)
       3559 def legend(*args, **kwargs):
    -> 3560     ret = gca().legend(*args, **kwargs)
       3561     return ret
       3562 

    /Users/graham/anaconda/lib/python2.7/site-packages/matplotlib/axes/_axes.pyc in legend(self, *args, **kwargs)
        548             raise TypeError('Invalid arguments to legend.')
        549 
    --> 550         self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)
        551         self.legend_._remove_method = lambda h: setattr(self, 'legend_', None)
        552         return self.legend_

    /Users/graham/anaconda/lib/python2.7/site-packages/matplotlib/legend.pyc in __init__(self, parent, handles, labels, loc, numpoints, markerscale, markerfirst, scatterpoints, scatteryoffsets, prop, fontsize, borderpad, labelspacing, handlelength, handleheight, handletextpad, borderaxespad, columnspacing, ncol, mode, fancybox, shadow, title, framealpha, bbox_to_anchor, bbox_transform, frameon, handler_map)
        383 
        384         # init with null renderer
    --> 385         self._init_legend_box(handles, labels, markerfirst)
        386 
        387         if framealpha is None:

    /Users/graham/anaconda/lib/python2.7/site-packages/matplotlib/legend.pyc in _init_legend_box(self, handles, labels, markerfirst)
        624         legend_handler_map = self.get_legend_handler_map()
        625 
    --> 626         for orig_handle, lab in zip(handles, labels):
        627             handler = self.get_legend_handler(legend_handler_map, orig_handle)
        628             if handler is None:

    TypeError: zip argument #2 must support iteration

Looking into this...

*** Weird extra lines in some plots

file:gif/20180109_085041.png

Looking into this.


** Fixing measurement problems when there is one spike

With no spikes, plateau amplitude is calculated as max voltage.

With multiple spikes, plateau amplitude is calculated as the maximum interspike 
minimum.

With a single spike, plateau amplitude ends up being max height of spike.

Mike Hines recommended using a low pass filter to remove spikes and measure 
plateaus.  I'll try a simple filter and see how it looks.

I am just going to copy from the following link and modify:
https://stackoverflow.com/questions/25191620/creating-lowpass-filter-in-scipy-understanding-methods-and-units

Working here:
/u/graham/projects/eee/sim/misc/low_pass_filter.py 

And running thusly:
    graham-mac% eee ; cd batches/batch_20171207 ; ipython
    In [1]: execfile('/u/graham/projects/eee/sim/misc/low_pass_filter.py')

Need to know sample rate of the data.  I've got recstep as 0.2, so we get a 
sample every 0.2 ms.  (1 sample) * (1 / 0.2 ms) * (1000 ms / s) = 5000 Hz

Doing a `whos` shows:
    expdata                 DataFrame              Trace #1 (V)  T<...>n[5000 rows x 10 columns]

The traces are 1 seconds long and have 5000 samples, so 5000 Hz checks out.

Filtering at 500 Hz does almost nothing.  At 100 Hz, still not enough.

At 10 Hz, get a weird response. It looks like the filtering assumes data centered
around 0, and so the filtered signal is bizarre.

Trying switching from lfilter to filtfilt

That does the trick!  

Before and after: 
file:gif/20180109_155149.png

Still need to decrease filtering frequency.  

Committing to save current low_pass_filter.py 
changeset:   483:2f2290edd9fb

It looks like plateau height would be overestimated by filtering, the spikes
just drag up the average.  But it might be okay for cases with a single spike.

I will import sim data with one spike to see.  (Experimental data goes from 0
to 3 spikes in traces)

Will use get_vtraces(params, data, cellID=0, section="soma", stable=None)

Here's the code to load our data:
    # Using our own experimental data
    exptrace = 2 # Trace number to filter (0 to 9)
    expdata = batch_utils.import_excel("/u/graham/projects/eee/data/srdjan_20171017/B_73_004.xlsx")
    t = np.array(expdata.index.tolist())
    data = np.array(expdata.iloc[:,trace].tolist())

    # Using our own sim data
    simtrace = 6 # Trace number to filter (0 to 9)
    batchname = 'glutAmp'
    params, data = batch_utils.load_batch(batchname)
    simdata = batch_analysis.get_vtraces(params, data, cellID=0, section="soma", stable=50)
    data = simdata['yarray'][simtrace, :]
    t = simdata['xvector']

Even with only one spike, filtering still overestimates plateau.  I think it 
may be better to just remove 10 ms of trace centered on spike peak, and then 
find plateau height as max of trace...

Looks like I'll want to use `del` on a list:
https://stackoverflow.com/questions/627435/how-to-remove-an-element-from-a-list-by-index-in-python

Actually, I think it's probably fine just to find the max after 5ms after the spike...

Trying that.

Made the changes in batch_analysis.meas_trace_plat_amp and it looks good!


* 2018-01-10 -- Plateau measurements

** TODO

Fix plateau measurement plots
Analyze NMDA 
Work on article


** Fix plateau measurement plots -- weird extra lines

Looking at plat_dur to solve.

    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py
    fig2 = batch_analysis.plotscalar(expdata_platdurs, expdata_params, title=None, measlabel=None, param_labels=None)
    params, data = batch_utils.load_batch(batchname)
    dur_output = batch_analysis.meas_batch_plat_dur(params, data, showwork=False)
    In [7]: from pprint import pprint
    In [8]: pprint(dur_output)
    {'label': 'Plateau Duration (ms)',
     'params': [{u'label': u'glutAmp',
                 u'values': [0.0,
                             0.13,
                             0.27,
                             0.4,
                             0.53,
                             0.67,
                             0.8,
                             0.93,
                             1.07,
                             1.2]}],
     'values': [0,
                0,
                42.099999999999994,
                48.799999999999997,
                68.699999999999989,
                109.40000000000001,
                146.5,
                184.69999999999999,
                209.10000000000002,
                234.60000000000002]}

That looks fine...

Trying to plot plat_dur alone...

    In [9]: batch_analysis.plot_plat_dur(batchname)

That has the weird two lines, so looking into it.

    In [11]: data.keys()
    Out[11]: ['_9', '_8', '_7', '_6', '_5', '_4', '_3', '_2', '_1', '_0']

    In [12]: data['_7'].keys()
    Out[12]: [u'netpyne_version', u'simConfig', u'simData', 'paramValues', u'net', u'netpyne_changeset']

    In [13]: data['_7']['simData'].keys()
    Out[13]: [u'spkt', u'V_spine', u'spkid', u'V_soma', u'V_Bdend1', u't', u'popRates', u'avgRate']

    In [14]: data['_7']['simData']['V_soma'].keys()
    Out[14]: [u'cell_1', u'cell_0']

Hmmm, maybe the problem is the two cells (leading to two lines)...

I deleted batch_figs and re-executed dev.py.  This created a dir for each cell
inside batch_figs: 
  glutAmp_cell_0
  glutAmp_cell_1

The figs in the cell_0 dir look fine (single lines), while the figs in the 
cell_1 dir have the funky double lines.  It seems I am plotting the second cell
lines over the first...  Need new figures, not to plot on old...

Hmmmm...This may actually be a feature instead of a bug! If I can get the legend 
to work and label diff cells on the plots, it could be useful...

Working on legend

** Fix plateau measurement plots -- legend

Trying to add a legend manually:

    In [1]: fig2 = batch_analysis.plotscalar(expdata_platdurs, expdata_params, title=None, measlabel=None, param_l
       ...: abels=None)

    In [2]: plt.legend()
    /Users/graham/anaconda/lib/python2.7/site-packages/matplotlib/axes/_axes.py:531: UserWarning: No labelled objects found. Use label='...' kwarg on individual plots.
      warnings.warn("No labelled objects found. "

Maybe I need to apply 'label=' when plotting...

Adding to plotscalar:

    def plotscalar(meas, params, title=None, measlabel=None, param_labels=None, swapaxes=False, fig=None):
    -->
    def plotscalar(meas, params, title=None, measlabel=None, param_labels=None, legend_label=None, swapaxes=False, fig=None):

    if add_legend or legend_label:
    #plt.legend(handles, legendvalues, title=legendtitle, loc="best")
    plt.legend(title=legendtitle, loc="best")
    pass

Adding to plot_plat_dur:

    def plot_plat_dur(batchname, cellIDs=None, platthresh=platthresh, stable=stable, syntime=syntime, recstep=recstep, param_labels=None, title=None, savefig=True, swapaxes=False, showwork=False, outputdir="batch_figs", fig=None):
    -->
    def plot_plat_dur(batchname, cellIDs=None, platthresh=platthresh, stable=stable, syntime=syntime, recstep=recstep, param_labels=None, legend_label=None, title=None, savefig=True, swapaxes=False, showwork=False, outputdir="batch_figs", fig=None):

    for cellID in cellIDs:
        cellLabel = "cell_" + str(cellID)
        if legend_label is None:
            legend_label = cellLabel
        meas = meas_batch_plat_dur(params, data, cellID=cellID, platthresh=platthresh)
        fig = plotscalar(meas, params, title=title, measlabel=None, param_labels=param_labels, legend_label=legend_label, swapaxes=swapaxes, fig=fig)

That doesn't work, because legend_label is only None until the first cellLabel 
pops up.  Using this, all traces get labeled "cell_0".  Changing to:

    orig_legend_label = legend_label
    for cellID in cellIDs:
        cellLabel = "cell_" + str(cellID)
        if len(cellIDs) > 1:
            if orig_legend_label is None:
                legend_label = cellLabel
            else: 
                legend_label = orig_legend_label + " " + cellLabel

That works!

But, I think we need to only plot one cell at a time...  If we want to overlay 
two cells, that can be done manually.

I'm going to commit and then hike.  :)
changeset:   484:053342ae11eb

Changing code to plot only one cell.  Setting default to cell with ID 0.



* 2018-01-15 -- Fixed plateau measurement plots

** TODO

Fix plateau measurement plots
Analyze NMDA 
Work on article

** Updated Mac to High Sierra 10.13.2 and now trying to fix associated problems.


I get this error when opening Terminal:
    /usr/site/config/csh_defaults: No such file or directory.

Command to see hidden files in Finder:
    graham% defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app

It seems that the update deleted my /usr/site/ dir, which had a bunch of Neurosim
Mercurial repos.  Will reclone into these now.

Following directions from here:
    https://docs.google.com/document/d/1t9o_3nuxzZ7lhr7-UW2D15PjCPuwoK3STH8ETpICT7w/edit#

Directions:
    mkdir -p /usr/site/nrniv
    mkdir -p /usr/arch
    chown -R YOUR_USERNAME /usr/site
    chown -R YOUR_USERNAME /usr/arch
    cd /usr/site
    hg clone ssh://{user}@no.neurosim.downstate.edu//usr/site/scripts
    hg clone ssh://no.neurosim.downstate.edu//usr/site/config
    hg clone ssh://no.neurosim.downstate.edu//usr/site/site-lisp
    cd /usr/site/nrniv
    hg clone ssh://no.neurosim.downstate.edu//usr/site/nrniv/simctrl
    hg clone ssh://no.neurosim.downstate.edu//usr/site/nrniv/local  

Error:
    mkdir: /usr/site/nrniv: Permission denied

I think I need to disable the SIP...

    Can’t modify /usr, seems to be because of Apple’s new System Integrity Protrection

    Solution: http://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11
    Reboot your Mac into Recovery Mode by restarting your computer and holding down Command+R until the Apple logo appears on your screen.
    Click Utilities > Terminal.
    In the Terminal window, type in csrutil disable and press Enter.
    Restart your Mac.
    To restore, follow same procedure and type: csrutil enable

Still doesn't work.  Using sudo instead.

    graham% sudo mkdir -p /usr/site/nrniv
    graham% sudo mkdir -p /usr/arch
    graham% sudo chown -R graham /usr/site
    graham% sudo chown -R graham /usr/arch

    [graham-mac:/usr/site] graham% cd /usr/site
    [graham-mac:/usr/site] graham% hg clone ssh://no.neurosim.downstate.edu//usr/site/scripts
    destination directory: scripts
    requesting all changes
    adding changesets
    adding manifests
    adding file changes
    added 134 changesets with 651 changes to 502 files                                        
    updating to branch default
    492 files updated, 0 files merged, 0 files removed, 0 files unresolved
    [graham-mac:/usr/site] graham% hg clone ssh://no.neurosim.downstate.edu//usr/site/config
    destination directory: config
    requesting all changes
    adding changesets
    adding manifests
    adding file changes
    added 206 changesets with 322 changes to 83 files                                         
    updating to branch default
    76 files updated, 0 files merged, 0 files removed, 0 files unresolved
    [graham-mac:/usr/site] graham% hg clone ssh://no.neurosim.downstate.edu//usr/site/site-lisp
    destination directory: site-lisp
    requesting all changes
    adding changesets
    adding manifests
    adding file changes
    added 522 changesets with 1467 changes to 216 files                                       
    updating to branch default
    202 files updated, 0 files merged, 0 files removed, 0 files unresolved
    [graham-mac:/usr/site] graham% cd /usr/site/nrniv
    [graham-mac:/usr/site/nrniv] graham% hg clone ssh://no.neurosim.downstate.edu//usr/site/nrniv/simctrl
    destination directory: simctrl
    requesting all changes
    adding changesets
    adding manifests
    adding file changes
    added 193 changesets with 505 changes to 124 files
    updating to branch default
    104 files updated, 0 files merged, 0 files removed, 0 files unresolved
    [graham-mac:/usr/site/nrniv] graham% hg clone ssh://no.neurosim.downstate.edu//usr/site/nrniv/local 
    destination directory: local
    requesting all changes
    adding changesets
    adding manifests
    adding file changes
    added 1174 changesets with 1903 changes to 741 files                                      
    updating to branch default
    467 files updated, 0 files merged, 0 files removed, 0 files unresolved
    [graham-mac:/usr/site/nrniv] graham% 


That should be all the repos...  Restarting Terminal.

Good. Aliases all work now, Terminal looks normal again.

Trying to execute a sim to ensure everything is working...

    graham-mac% eee; cd batches/batch_20171207; ipython -i dev.py

    ---------------------------------------------------------------------------
    ImportError                               Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_20171207/dev.py in <module>()
          8 batchname = 'glutAmp'
          9 
    ---> 10 import numpy as np; import matplotlib.pyplot as plt; import batch_analysis; import batch_utils; import os; plt.ion()
         11 
         12 # First, we analyze actual data from Srdjan

    /u/graham/projects/eee/sim/batch_analysis.py in <module>()
         12 
         13 #from cfg import cfg
    ---> 14 import batch_utils
         15 import json
         16 import matplotlib.pyplot as plt

    /u/graham/projects/eee/sim/batch_utils.py in <module>()
          5 """
          6 
    ----> 7 from netpyne.batch import Batch
          8 import numpy as np
          9 import os

    ImportError: No module named netpyne.batch

Yeah, there is no Netpyne dir:

    OSError: [Errno 2] No such file or directory: '/usr/site/nrniv/local/python/netpyne'

Need to clone Netpyne.

Using directions from here:
    https://docs.google.com/document/d/1mM1KlucucOYUYDGSP4GSP0A0zqUEKdfwOYt-Tu5jO28/edit#

graham-mac% cd /usr/site/nrniv/local/python/
graham-mac% git clone https://github.com/Neurosim-lab/netpyne.git
graham-mac% cd /usr/site/nrniv/local/python/netpyne
graham-mac% git branch
[asterisk] development


It's already on the development branch, so should be good to go.

Running a quick `nsimupdate`...

Everything worked fine.  Good.

Trying to run a sim:
    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py

Success!  Everything seems to be back to normal.  :)


** Back to finishing up measurements

I got the legend working on plot_plat_dur.  Will replicate in other plots after
committing.

changeset:   485:f50bcb9cc268

1) Adding: 
    legend_label=None, 

Right after: 
    param_labels=None, 

2) Replacing:
    for cellID in cellIDs:
        cellLabel = "cell_" + str(cellID)

With: 
    orig_legend_label = legend_label
    for cellID in cellIDs:
        cellLabel = "cell_" + str(cellID)
        if len(cellIDs) > 1:
            if orig_legend_label is None:
                legend_label = cellLabel
            else: 
                legend_label = orig_legend_label + " " + cellLabel    

3) Adding:
    stable=stable, syntime=syntime, recstep=recstep

To:
    meas = meas_batch_plat_dur(params, data, cellID=cellID, platthresh=platthresh)

4) Adding
    legend_label=legend_label,

To:
        fig = plotscalar(meas, params, title=title, measlabel=None, param_labels=param_labels, swapaxes=swapaxes, fig=fig)   




Problem with the legend in plot_plat_amp:
    file:gif/20180115_140033.png
    file:gif/20180115_140358.png

Committing.
changeset:   486:77027cb73cac

I'm not sure why there is a difference... I've looked and looked and it seems
like the code calling both is the same...

It's weird, if I run dev.py with all other figures commented out, then the legend
is correct for plot_plat_amp...

Changed dev.py so the second plots are added to each figure right away instead
of all at the end.


** Fixing plot_num_spikes

1) Adding: 
    legend_label=None, 

Right after: 
    param_labels=None, 

2) Replacing:
    for cellID in cellIDs:
        cellLabel = "cell_" + str(cellID)

With: 
    orig_legend_label = legend_label
    for cellID in cellIDs:
        cellLabel = "cell_" + str(cellID)
        if len(cellIDs) > 1:
            if orig_legend_label is None:
                legend_label = cellLabel
            else: 
                legend_label = orig_legend_label + " " + cellLabel    

3) Unnecessary for this measure

4) Adding
    legend_label=legend_label,

To:
        fig = plotscalar(meas, params, title=title, measlabel=None, param_labels=param_labels, swapaxes=swapaxes, fig=fig)   


plot_num_spikes is fixed.


** Fixing plot_freq

Same as above.
Fixed.


** Fixing plot_time_to_spike

Same as above.
Fixed.


** Fixing plot_first_interspike

Same as above.
Fixed.


** All plots fixed

to execute:
    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py

to see two param batch:
    Change 'batchname' is dev.py and then run again

Changing data file path to relative so will work for anyone.

    #expdata = batch_utils.import_excel("/u/graham/projects/eee/data/srdjan_20171017/B_73_004.xlsx")
    expdata = batch_utils.import_excel("../../../data/srdjan_20171017/B_73_004.xlsx")

Committing.
changeset:   487:637187551906


** Running another batch to try out measurements

Added to my_batches:

    # Varying glutAmp and NMDABetaScale
    batch = {}
    batch["label"] = "glutAmp_NMDABetaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.55, 0.9, 10).round(2))
    params["NMDABetaScale"] = [1.0, 3.0, 6.0, 9.0]
    batch["params"] = params
    batches[batch["label"]] = batch

And running:

    graham-mac% eee ; cd batches/batch_20171207 ; ./runmybatches

Changing 'batchname' in dev.py and running:

    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py

Went the wrong way on varying NMDABetaScale, deleting old batch and trying again:

    # Varying glutAmp and NMDABetaScale
    batch = {}
    batch["label"] = "glutAmp_NMDABetaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.55, 0.9, 10).round(2))
    params["NMDABetaScale"] = [3.0, 1.0, 0.33, 0.1]
    batch["params"] = params
    batches[batch["label"]] = batch

Yeah, the glutAmp values aren't that good on that batch.


* 2018-01-16 -- Plateau batches and EEE meeting

** TODO

EEE Meeting
Run and analyze batches 
Analyze NMDA 
Work on article


** Run and analyze batches

Running a range of glutAmp batches to determine best values

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.0, 1.2, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.4, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp3"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.4, 1.6, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp4"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.6, 1.8, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch


** Creating function to compare sim with exp data

Will call it: plot_plat_comps(batchname) and put it in batch_analysis.

It is bascially the code I've been working on in dev.py wrapped in a function
and put in batch_analysis

Fixed a few bugs and now it is functional.  

Removing the code from dev.py.

Still need to:
1) allow cell number as an option
2) allow swapaxes as an option
3) allow all ind plot options to carry through
4) make it so it doesn't load batch for each plot
   (loads batch once only)
5) allow exp data as an option
6) plot just exp data if batch=None

But committing for now.
changeset:   489:186307306a1f

Now to generate some figures to show at the meeting.


** Finding good glutAmp values

Decent preliminary values:
    file:gif/20180116_082000_EEE_Meeting.pdf

Will have to quantitatively determine best values after the meeting.


** EEE Meeting

- Joe should come up with a few glutAmp spreads (linear and non-linear) to 
  match Srdjan's data

- Srdjan: glutAmp spreads experimentally are linear

- Bill: yes, but how much gets to receptor isn't necessarily linear, and other
        factors probably induce non-linearities

- Bill: perhaps try matching thresholds (spike threshold, depol block threshold)

- Joe should plot and manipulate NMDA to see its effects

- Srdjan will send Joe more data (another figure anyway)

- Srdjan would like to see more points in glutAmp spread (wants to see non-
  linearity in plateau activation)


* 2018-01-17 -- Article

** TODO

Run and analyze batches 
Analyze NMDA 
Work on article

** Article

Working on article in Overleaf here (Latex): 
https://www.overleaf.com/12553441btjhhyqqtfgj#/47834538/

Sergio's EEE network article is here:
https://www.overleaf.com/12612035njxsyrmvfvwf#/48073691/

** Article figures in Gdocs

It looks like I have three separate Google docs with EEE article figures:

1) https://docs.google.com/document/d/1lx1tQutiy1Qd9iSM3HJMyghEMA5EHKr4eN9qPQdhbPQ/edit

2) https://docs.google.com/document/d/1_q4xCkfIjfBW7z9l99GlOYDuaHCuDulADcMkdQ1vEIs/edit

3) https://docs.google.com/document/d/10fsvcRD5NgaXOHtR5j6PofwNRPIuBAV-mIP9NO7YJEM/edit

I'll have to settle on one Google doc for the figures.



* 2018-01-22 -- Exploring plateaus

** TODO

Increase number of glutAmp samples for Srdjan
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Analyze NMDA -- make plots to show 
Work on article

** Increase number of glutAmp samples

I will go from 0.4 to 1.6, and use 20 samples instead of 10.

Working in /u/graham/projects/eee/sim/batches/batch_20171207/

Adding a batch to my_batches:

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_srdjan"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.4, 1.6, 20).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

Running batch:

    graham-mac% eee ; cd batches/batch_20171207 ; ./runmybatches

Analyzing:

    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i analyze.py

Hmmm...  The multitrace comes out normal, but for some reason, the plateau 
overlay traces are somewhat out of order:

file:gif/20180122_092744.png

Have to look into that.  But first, plotting plateau analysis:

    In [1]: batch_analysis.plot_plat_comps('glutAmp_srdjan')

It looks a bit weird for two reasons:

    1) because the 20 samples should be lined up with the 10 exp traces
       (not having first 10 of the 20 line up)

    2) because I didn't start glutAmp at zero...  I think Srdjan 
       wants to see it from zero, so I will rerun that batch as:

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_srdjan"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.0, 1.6, 20).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

Deleting the old batch, re-running, and analyzing.

That solved problem #2.  Will commit, then head out for a hike.  When I get back,
I'll get the plateau overlays plotted in the proper order, and fix the 
plot_plat_comps() such that model and exp traces line up, no matter how many
model traces there are.

changeset:   490:ac15124dbcd2

** Fixing plateau stuff

plateau overlays plotted in the proper order and fix the plot_plat_comps() such 
that model and exp traces line up

*** Plateau overlays

To make the plot:
    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py
    In [1]: batch_analysis.plot_antic_plateaus('glutAmp_srdjan')

Added a print statement to plot_antic_plateaus:
    keys = sorted(data.keys())
    print
    print(keys)
    print

Aaaand there's the problem output from the print:
    ['_0', '_1', '_10', '_11', '_12', '_13', '_14', '_15', '_16', '_17', '_18', '_19', '_2', '_3', '_4', '_5', '_6', '_7', '_8', '_9']

It is sorting alphabetically instead of numerically...

It looks like I could use a Python module "natsort", but I'd rather not introduce
a dependency...  

    https://pypi.org/project/natsort/

I think I should use a lambda function instead:
    https://stackoverflow.com/questions/8966538/syntax-behind-sortedkey-lambda

Something like:
    #keys = sorted(data.keys())
    keys = sorted(data.keys(), key=lambda x: int(x[1:]))

That works!  Problem solved.  Removing print statements.

Committing.
changeset:   491:5064c80f7188


*** Fix plot_plat_comps() such that model and exp traces line up

To make plots:

    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py
    In [1]: batch_analysis.plot_plat_comps('glutAmp_srdjan')

Here's how the first figure (plat_amps) is made in plot_plat_comps:

   fig1 = plotscalar(expdata_platamps, expdata_params, title=None, measlabel=None, param_labels=None, legend_label="Exp Data")
    plot_plat_amp(batchname, fig=fig1, legend_label="Sim Data", swapaxes=True)

I'm going to try reversing the plotting order.

    fig1 = plot_plat_amp(batchname, fig=None, legend_label="Sim Data", swapaxes=True)
    plotscalar(expdata_platamps, expdata_params, fig=fig1, title=None, measlabel=None, param_labels=None, legend_label="Exp Data")

That doesn't fix it.  Basically same thing except order of plotting sim and exp
is reversed...

Maybe plotting on separate x axes would solve the problem...

ax2 = ax1.twiny()

Modifying plotscalar() from:

    if fig is None:
        figure = plt.figure()       
    else:
        figure = fig
    ax = figure.gca()

To:

    if fig is None:
        figure = plt.figure()
        ax = figure.gca()       
    else:
        figure = fig
        figax = figure.gca()
        ax = figax.twiny()

Hmmm... Now they line up nicely, but sim and exp are same color, and title is 
problematic...

    file:gif/20180122_152709.png


I think what I'll do is work in plot_plat_comps():
1) get values of glutAmp from sim data
2) spread those values across the 10 exp values
3) plot 

Changing plotscalar back to what it was.

Still doesn't line up like it should.  This is because plotscalar doesn't 
actually plot against x-values, but just x slots, then labels the slots with 
the values.

I'm going to change plotscalar so that it acutally plots against values.

    #handles = ax.plot(range(len(xticks)), measvals, marker='o', markersize=10, label=legend_label)
    handles = ax.plot(xticks, measvals, marker='o', markersize=10, label=legend_label)

Plots are compressed horizontally, probably because of xticks...

    #plt.xticks(range(len(xticks))[::2], xticks[::2])

Now it works.

Committing.
changeset:   492:ecb7c249a0b3

** Plotting all plat comparisons on one figure

I want to have one figure with six subplots.

But, this is a bit complicated.  I'll have to come back to it.

https://stackoverflow.com/questions/16750333/how-do-i-include-a-matplotlib-figure-object-as-subplot/16754215#16754215

Bottom line, I need to change my code to pass around axes instead of figs.

Then I can create my superplot, add an axis, and plot onto that axis.  Repeat
for all plateau comparisons.

Later.

** Calculating spike frequency differently

Quickly going to try calculating frequency as spikes per plateau duration 
rather than spikes - 1 divided by time between first and last.  Should be more
stable, I think.

It does look better for experimental data, but I would also need to change it 
for simulation data...  maybe later

Here's how I did it (before I change it back):

    #def meas_trace_spike_freq(trace, time=None, recstep=recstep, spikethresh=spikethresh, showwork=False):
    def meas_trace_spike_freq(trace, time=None, recstep=recstep, spikethresh=spikethresh, showwork=False, syntime=syntime, platthresh=platthresh, stable=stable):
        
        spike_times, spike_inds = meas_trace_spike_times(trace, time=time, recstep=recstep, spikethresh=spikethresh, showwork=False)

        # if len(spike_times) > 1:
        #     spike_freq = 1000 * (len(spike_times)-1) / (spike_times[-1] - spike_times[0]) 
        # else:
        #     spike_freq = 0

        platdur, plattimes = meas_trace_plat_dur(trace, time=time, recstep=recstep, syntime=syntime, platthresh=platthresh, stable=stable, showwork=False, spikethresh=spikethresh)

        if len(spike_times) > 1:
            spike_freq = 1000 * len(spike_times) / platdur
        else:
            spike_freq = 0

        return spike_freq


** Allowing figsize to be set

Tired of resizing plots on my screen to see them all.

Adding a figsize option to plotscalar()

    def plotscalar(meas, params, title=None, measlabel=None, param_labels=None, legend_label=None, swapaxes=False, fig=None, figsize=(6, 4.5)):

    if fig is None:
        figure = plt.figure(figsize=figsize)       
    else:
        figure = fig
    ax = figure.gca()

Much better.


** Speeding up comparing plateau plots

Right now each plot loads the batch data.  Good if you only want one plot, 
but bad for multiples.

Changing from accepting a string "batchname", I am going to change plateau 
plots to accepts (params, data) as a tuple or batchname as a string.

Changing from:
    params, data = batch_utils.load_batch(batchname)

To:
    if type(batchname) == tuple:
        params, data = batchname
    else:
        params, data = batch_utils.load_batch(batchname)

In all plateau measurement plotting functions.

And adding to plot_plat_comps():
    batchname = (params, data)

Crap.  That messes with file saving, because the batchname string was used to 
name the plot files.  

    In [1]: batch_analysis.plot_plat_comps('glutAmp_srdjan_2')
    Reading data...
    0 files missing
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    <ipython-input-1-d20de424647f> in <module>()
    ----> 1 batch_analysis.plot_plat_comps('glutAmp_srdjan_2')

    /u/graham/projects/eee/sim/batch_analysis.py in plot_plat_comps(batchname, cellIDs, outputdir, savefig)
       1543     expdata_platamps['values'] = platamps
       1544     fig1 = plotscalar(expdata_platamps, expdata_params, title=None, measlabel=None, param_labels=None, legend_label="Exp Data")
    -> 1545     plot_plat_amp(batchname, fig=fig1, legend_label="Sim Data", swapaxes=True)
       1546 
       1547     expdata_platdurs = {}

    /u/graham/projects/eee/sim/batch_analysis.py in plot_plat_amp(batchname, cellIDs, platthresh, stable, syntime, recstep, param_labels, legend_label, title, savefig, swapaxes, showwork, outputdir, fig)
       1211 
       1212         if savefig:
    -> 1213             batch_dir = os.path.join(outputdir, batchname + "_" + cellLabel)
       1214             if not os.path.isdir(batch_dir):
       1215                 os.makedirs(batch_dir)

    TypeError: can only concatenate tuple (not "str") to tuple

I'm going to change the input tuple to include the batchname.

Changing in plots:
        params, data = batchname
        -->
        params, data, batchname = batchname

Changing in plot_plat_comps():
    batchname = (params, data)
    -->
    batchname = (params, data, batchname)

Now it works, and it's about 6 times faster.  Nice.


** Matching glutAmps better

Making figs:
    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py
    In [1]: batch_analysis.plot_plat_comps('glutAmp_srdjan')

file:gif/20180122_171653.png

It looks like our glutAmp range will be better if we shift two values to the 
left (remove first two glutAmps) and then scale glutAmp to increase a bit more
slowly.

First will try shifting:

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_srdjan_2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.8, 20).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

Running batches and plotting plateau measurements.

    graham-mac% eee ; cd batches/batch_20171207 ; ipython -i dev.py
    In [1]: batch_analysis.plot_plat_comps('glutAmp_srdjan_2')

Output:
    file:gif/20180122_185451.png

Looks better!  Now to try reducing the slope of glutAmp values.

my_batches:
    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_srdjan_3"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.3, 1.6, 20).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180122_190616.png

I think lower min and max glutAmps

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_srdjan_4"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.3, 1.3, 20).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

Lower min glutAmp, methinks.

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_srdjan_5"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 20).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180122_192414.png

I think lower both still.

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_srdjan_6"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.1, 1.2, 20).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180122_193022.png

Better slope, but maybe shift it all left...

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_srdjan_7"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.1, 1.2, 20).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch


I think "glutAmp_srdjan_5" looks best, but too few spikes. Will try to adjust 
this without affecting other parameters by adjusting resting membrane potential.

Currently:
    cfg.e_pas         = -80.0 # resting membrane potential

Trying a 2D batch:
my_batches:
    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_srdjan_5b"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 20).round(2))
    params["cfg.e_pas"] = [-75.0, -77.5, -80.0, -82.5]
    batch["params"] = params
    batches[batch["label"]] = batch


e_pas seems to have no effect...

** Making a new batch dir batch_20180122

As a copy of batch_20171207

my_batches:
    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_epas"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 5).round(2))
    params["cfg.e_pas"] = [-75.0, -80.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Running:
    graham-mac% eee ; cd batches/batch_20180122 ; ./runmybatches


** Need to fix plateau meas plots when params = 2

Like I fixed it earlier with x-axis stuff...

    else:
        #handles = ax.plot(measvals, marker='o', markersize=10, label=legend_label)
        handles = ax.plot(xticks, measvals, marker='o', markersize=10, label=legend_label)
        plt.legend(handles, legendvalues, title=legendtitle, loc="best")
        #plt.xticks(range(len(xticks))[::2], xticks[::2])

And now it works.

Trying a 2d batch

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_epas"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 20).round(2))
    params["e_pas"] = [-75.0, -77.5, -80.0]
    batch["params"] = params
    batches[batch["label"]] = batch

file:gif/20180122_211434.png

Cool!


** It looks like we want the glutAmp slope a bit lower.  

Low values should be higher, high values lower...
From 0.2 to 1.3
To   0.3 to 1.2

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_epas_2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.3, 1.2, 20).round(2))
    params["e_pas"] = [-75.0, -80.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180122_213412.png

Low values should be higher, high values lower...
From 0.3 to 1.2
To   0.4 to 1.1

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_epas_3"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.4, 1.1, 20).round(2))
    params["e_pas"] = [-75.0, -80.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180122_214816.png

Committing now.  Tomorrow I will explore changing NMDA properties, starting
with the reversal potential and the binding rate.

changeset:   493:7613445dd3fc


* 2018-01-23 -- EEE Meeting and exploring NMDA effects

** TODO

Look into poster means to increase spiking w/o affecting plateau
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Analyze NMDA -- make plots to show 
Work on article


** Look into poster ways to increase spiking w/o affecting plateau

From SfN 2017 poster:

Exploring effects on plateaus
● Increasing dendritic Ra 
increases plateau duration
while decreasing spiking.
● Increasing dendritic Rm
increases plateau duration
and spiking.
● Decreasing NMDAR
unbinding rate increases plateau duration and spiking.
● Increasing spine Rneck increases plateau duration while decreasing spiking.


I'm going to start with 20180122_211434.png, which uses these values:
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 20).round(2))
    params["e_pas"] = [-75.0, -77.5, -80.0]

While I'm thinking about what to do, I'm going to run a batch:

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_epas_4"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 20).round(2))
    params["e_pas"] = [-85.0, -80.0, -75.0]
    batch["params"] = params
    batches[batch["label"]] = batch

file:gif/20180123_070736.png

There's a strange hump in plateau duration for e_pas = -85  

PLotting traces to look into.  Not obvious.  Will have to dig into it.


** Exploring NMDA reversal potential

Adding to cfg and netParams:

    cfg.NMDARev        = 0.0 # Reversal potential

    netParams.synMechParams['NMDA'] = {'mod': 'NMDA', 'Cdur': cfg.CdurNMDAScale * 1.0, 'Cmax': cfg.CmaxNMDAScale * 1.0, 'Alpha': cfg.NMDAAlphaScale * 4.0, 'Beta': cfg.NMDABetaScale * 0.0015, 'e': cfg.NMDARev}

Adding a batch:

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_NMDARev"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 20).round(2))
    params["NMDARev"] = [-10.0, 0.0, 10.0]
    batch["params"] = params
    batches[batch["label"]] = batch

file:gif/20180123_071658.png

Affects plateau amplitude non-linearity.  Trying again with:

    # Varying glutAmp with many samples
    batch = {}
    batch["label"] = "glutAmp_NMDARev_2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 20).round(2))
    params["NMDARev"] = [-5.0, 0.0, 5.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180123_074338.png


** Exploring NMDA binding rate

Batch for unbinding rate:

    # Varying glutAmp and NMDABetaScale
    batch = {}
    batch["label"] = "glutAmp_NMDABetaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 20).round(2))
    params["NMDABetaScale"] = [3.0, 1.0, 0.33]
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180123_081349.png


Batch for binding rate:

    # Varying glutAmp and NMDAAlphaScale
    batch = {}
    batch["label"] = "glutAmp_NMDAAlphaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 20).round(2))
    params["NMDAAlphaScale"] = [3.0, 1.0, 0.33]
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180123_081701.png


** Exploring Rneck and glutLoc

Rneck:
    # Varying glutAmp and neck resistance
    batch = {}
    batch["label"] = "glutAmp_Rneck"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 20).round(2))
    params["Rneck"] = [30.0, 90.0, 120.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180123_090049.png

glutLoc:
    # Varying glutAmp and glutLoc
    batch = {}
    batch["label"] = "glutAmp_glutLoc"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 20).round(2))
    params["glutLoc"] = [0.25, 0.5, 0.75]
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180123_085134.png

** EEE Meeting

Putting figures into a Google Doc for presentation and discussion:
    https://docs.google.com/document/d/1lXUnoPuc4QQ6yWkAf7ZBkJJLtCsipVy2MJOP2-q-dxI/edit

- Fix plat measurement plots to remove jumps (e.g. zero freq should be NaN, not 
  zero)

- Get more data from Srdjan

- Srdjan wants more "jump" (non-linearity), doesn't think we are seeing true
  regeneration

- Check slope of mg curve (steepen it)

- Important question to ask oneself: what in figs has biological relevance?
    - Rneck affects plateau amplitude, e.g.

- Srdjan: Read Guy Major 2013 review paper and Jackie Schiller 2009

- A phase plane plot could be used to show regeneration (current --> voltage)


* 2018-01-24 -- Reading papers

** Slack chat

    joe [9:58 AM]
    `/u/graham/articles/2000_schiller_nmda.pdf`
    `/u/graham/articles/2013_major_dendrites.pdf`

    billl [9:58 AM]
    thx

    [9:59 AM]
    see if you can pinpoint the point that srdjan is making about relation between threshold and regeneracy

    joe [9:59 AM]
    Yeah, I’ll read ’em this afternoon.

    billl [10:12 AM]
    i think i see srdjan's point -- if you have a thresholded regenerative event like HH Na channel you have a sharp discontinuity between subthreshold state with no positive feedback and a regenerative state which will go to completion

    [10:14 AM]
    in the case you are showing joe, you are getting a threshold since there are levels of glu that do not show any activation; above that state you are getting activation but it is not necessarily going to the full plateau since you can get a balance of other currents that pull it back down - that would be the difference between a NMDA spike and an NMDA plateau

    [10:15 AM]
    (NMDA spike is also regenerative but is not enough to overcome the repolarizing forces all the way up to plateau level)

    [10:16 AM]
    experimental data also appears to show these NMDA spikes so have 2 different forms with multiple amplitudes -- diff sizes of graded NMDA spike vs plateau

    billl [1:29 PM]
    seems like the glu vs duration is where would expect to see a threshold if what srdjan is looking for is a thresh distinguishing nmda spike from nmda plat -- but expt (and sim) shows none

    [1:29 PM]
    joe's fig2

    sergio [2:20 PM]
    this is the nature paper that penny shared here. It is uncaged glut to the distal basal dend. The concentration is really of the caged glut is 1 mM

    billl [2:23 PM]
    what is the interpretation?

    sergio [2:28 PM]
    the interpretation is that they local dendritic spikes, that can be divided as subthreshold and suprathreshold. The suprathreshold spikes are sensitive to TTX and Cadmiun (VGCC blocker) .
    [2:29 PM]
    I think this is where the discussion was about regenerative mechanisms

    billl [2:29 PM]
    oh so nothing to do with NMDA? :)
    [2:29 PM]
    both the small spikes and the big ones are regenerative but oculd be due to different mecahnisms
    [2:30 PM]
    ok so the small ones could be just AMPA EPSPs so would not be regenerative - they are simply increased number of receptor occupancy

    sergio [2:31 PM]
    I’m checking the figs with APV

    billl [2:31 PM]
    then where see that nonlinearity that is presumed to involve a regenerative mechanism since is all-or-none with a characteristic shape/size

    sergio [2:39 PM]
    from the experiments, they concluded that sodium and calcium assist in the initiation of the spikes, but NMDA is the main carrier of the spikes
    [2:40 PM]
    they were able to induce the NMDA spikes even after blocking sodium and calcium

    billl [2:41 PM]
    ic
    [2:42 PM]
    so the distinction would be all-or-none vs graded
    [2:42 PM]
    ok so joe we wnat to show evidence of all or none which means at some point a discontinuity separating the all from the none



* 2018-01-25 -- Mg block slope

** TODO

Analyze NMDA -- make plots to show 
  Make Mg curve steeper
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Work on article

** Make Mg curve steeper

From NMDAeee.mod:

    FUNCTION mgblock(v(mV)) {
            TABLE
            DEPEND mg
            FROM -140 TO 80 WITH 1000

       mgblock = 1 / (1 + exp(0.062 (/mV) * -v) * (mg / 3.57 (mM)))  
         : from Jahr & Stevens, 1990 J Neurosci

Let's just see what that looks like.

Working in /u/graham/projects/eee/sim/dev.py

    # Steepen the mgblock curve
    voltrange = np.linspace(-80, 20, 100)

    def mgblock(slope, voltrange):
        voltrange = np.linspace(-80, 20, 100)
        block = 1 / (1 + np.exp(-slope*voltrange)*(1/3.57))
        return block

    # Default slope is 0.062
    slopes = [0.032, 0.042, 0.052, 0.062, 0.072, 0.082, 0.092]

    plt.figure()

    for slope in slopes:
      mgb = mgblock(slope, voltrange)
      plt.plot(voltrange, mgb, label=str(slope))

    plt.legend(loc="best")
    plt.title("Mg Block for various slopes")
    plt.ylabel('Mg Block')
    plt.xlabel('Membrane potential (mv)')

Output:
    file:gif/20180125_092521.png

Now to implement ability to change Mg block slope.

Okay, so need to modify NMDAeee mod file, which resides in the Neurosim repo, 
and is called using parameters.multi

    : DMS NMDA 
    DEFAULT NMDAeee

So I will 
1) comment out DEFAULT NMDAeee in parameters.multi
2) make a local copy of NMDAeee (put into /u/graham/projects/eee/sim/mod)
3) modify that to have "slope" instead of 0.062, make slope a range variable
4) recompile
5) set up cfg and netParams to handle mgSlope
6) run batches varying the Mg slope


*** Step 0: update Neurosim repos

graham-mac% nsimupdate

*** Step 1:

: DMS NMDA 
: DEFAULT NMDAeee

*** Step 2:

graham-mac% rm /u/graham/projects/eee/sim/mod/NMDAeee.mod 
graham-mac% cp /usr/site/nrniv/local/mod/NMDAeee.mod /u/graham/projects/eee/sim/mod/NMDAeee.mod

*** Step 3:

/u/graham/projects/eee/sim/mod/NMDAeee.mod

Line 73:    
    RANGE g, Alpha, Beta, e, ica, Cdur, Cmax, mgSlope

Line 96 (new line):
    mgSlope = 0.062  (/mV) 

Line 141:
  From:
       mgblock = 1 / (1 + exp(0.062 (/mV) * -v) * (mg / 3.57 (mM)))  
  To:
       mgblock = 1 / (1 + exp(mgSlope * -v) * (mg / 3.57 (mM)))  

Committing now.
graham-mac% hg add /u/graham/projects/eee/sim/mod/NMDAeee.mod

changeset:   495:d8878575a846

Got this message:
    graham-mac% hg commit -m "Working on Mg block slope"
    graham-mac% hgpush
    pushing to ssh://no.neurosim.downstate.edu//u/graham/projects/eee/
    searching for changes
    remote: adding changesets
    remote: adding manifests
    remote: adding file changes
    remote: added 1 changesets with 5 changes to 5 files
    Warning: No xauth data; using fake authentication data for X11 forwarding.
    sim/mod/NMDAeee.mod: untracked file differs
    abort: untracked files in working directory differ from files in requested revision

Not sure if it's tracking the modified mod file, so here it is in full:

**** /u/graham/projects/eee/sim/mod/NMDAeee.mod

    TITLE simple NMDA receptors

    COMMENT
    -----------------------------------------------------------------------------

    Essentially the same as /examples/nrniv/netcon/ampa.mod in the NEURON
    distribution - i.e. Alain Destexhe's simple AMPA model - but with
    different binding and unbinding rates and with a magnesium block.
    Modified by Andrew Davison, The Babraham Institute, May 2000


      Simple model for glutamate AMPA receptors
      =========================================

      - FIRST-ORDER KINETICS, FIT TO WHOLE-CELL RECORDINGS

        Whole-cell recorded postsynaptic currents mediated by AMPA/Kainate
        receptors (Xiang et al., J. Neurophysiol. 71: 2552-2556, 1994) were used
        to estimate the parameters of the present model; the fit was performed
        using a simplex algorithm (see Destexhe et al., J. Computational Neurosci.
        1: 195-230, 1994).

      - SHORT PULSES OF TRANSMITTER (0.3 ms, 0.5 mM)

        The simplified model was obtained from a detailed synaptic model that
        included the release of transmitter in adjacent terminals, its lateral
        diffusion and uptake, and its binding on postsynaptic receptors (Destexhe
        and Sejnowski, 1995).  Short pulses of transmitter with first-order
        kinetics were found to be the best fast alternative to represent the more
        detailed models.

      - ANALYTIC EXPRESSION

        The first-order model can be solved analytically, leading to a very fast
        mechanism for simulating synapses, since no differential equation must be
        solved (see references below).



    References

       Destexhe, A., Mainen, Z.F. and Sejnowski, T.J.  An efficient method for
       computing synaptic conductances based on a kinetic model of receptor binding
       Neural Computation 6: 10-14, 1994.

       Destexhe, A., Mainen, Z.F. and Sejnowski, T.J. Synthesis of models for
       excitable membranes, synaptic transmission and neuromodulation using a
       common kinetic formalism, Journal of Computational Neuroscience 1:
       195-230, 1994.

    Orignal file by:
    Kiki Sidiropoulou
    Adjusted Cdur = 1 and Beta= 0.01 for better nmda spikes
    PROCEDURE rate: FROM -140 TO 80 WITH 1000

    Modified by:
      Joe Graham joe.w.graham@gmail.com
      2017/09/18

    From:
      https://senselab.med.yale.edu/ModelDB/showmodel.cshtml?model=230811&file=/PapoutsiEtAl2017/mod_files/NMDA.mod#tabs-2

    * changed calcium handling
    * changed Beta from 0.01 to 0.0015 to get nice plateaus

    -----------------------------------------------------------------------------
    ENDCOMMENT



    NEURON {
      POINT_PROCESS NMDA
      RANGE g, Alpha, Beta, e, ica, Cdur, Cmax, mgSlope
      USEION ca READ cai,cao WRITE ica :USEION ca WRITE ica
      NONSPECIFIC_CURRENT  iNMDA
      GLOBAL mg, Cmax, fracca, gmax
    }
    UNITS {
      (nA) = (nanoamp)
      (mV) = (millivolt)
      (umho) = (micromho)
      (mM) = (milli/liter)
        FARADAY = (faraday) (coulomb)
        R = (k-mole) (joule/degC)
    }

    PARAMETER {
      Cmax  = 1      (mM)       : max transmitter concentration
      Cdur  = 1      (ms)   : transmitter duration (rising phase)
      Alpha = 4      (/ms /mM)  : forward (binding) rate (4)
      Beta  = 0.0015 (/ms)      : reverse (unbinding) rate
      e     = 0      (mV)   : reversal potential
        mg      = 1      (mM)       : external magnesium concentration
        fracca  = 0.13   : fraction of current that is ca ions; Spruston et al 95
      gmax    = 1      (uS)  
      mgSlope = 0.062  (/mV)          
    }


    ASSIGNED {
      v   (mV)    : postsynaptic voltage
      iNMDA   (nA)      : current = g*(v - e)
      g     (umho)    : conductance
      Rinf        : steady state channels open
      Rtau  (ms)      : time constant of channel binding
      synon
        B                   : magnesium block
      ica
        cai     (mM)
        cao     (mM)
    }

    STATE {Ron Roff}

    INITIAL {
      Rinf = Cmax*Alpha / (Cmax*Alpha + Beta)
      Rtau = 1 / (Cmax*Alpha + Beta)
      synon = 0
    }

    BREAKPOINT {
      SOLVE release METHOD cnexp
        B = mgblock(v)
      g = (Ron + Roff) * B * gmax
      iNMDA = g * (v - e) * (1-fracca) : iNMDA = g*(v - e)
        if(fracca > 0.0){ica = g * ghkg(v,cai,cao,2) * fracca} 
    }

    INCLUDE "ghk.inc"

    DERIVATIVE release {
      Ron' = (synon * Rinf - Ron) / Rtau
      Roff' = -Beta * Roff
    }

    FUNCTION mgblock(v(mV)) {
            TABLE
            DEPEND mg
            FROM -140 TO 80 WITH 1000

         mgblock = 1 / (1 + exp(mgSlope * -v) * (mg / 3.57 (mM)))
       : mgblock = 1 / (1 + exp(0.062 (/mV) * -v) * (mg / 3.57 (mM)))  
         : from Jahr & Stevens, 1990 J Neurosci
    }

    : following supports both saturation from single input and
    : summation from multiple inputs
    : if spike occurs during CDur then new off time is t + CDur
    : ie. transmitter concatenates but does not summate
    : Note: automatic initialization of all reference args to 0 except first

    NET_RECEIVE(weight, on, nspike, r0, t0 (ms)) {
      : flag is an implicit argument of NET_RECEIVE and normally 0
            if (flag == 0) { : a spike, so turn on if not already in a Cdur pulse
        nspike = nspike + 1
        if (!on) {
          r0 = r0 * exp(-Beta * (t - t0))
          t0 = t
          on = 1
          synon = synon + weight
          state_discontinuity(Ron, Ron + r0)
          state_discontinuity(Roff, Roff - r0)
        }
    :    come again in Cdur with flag = current value of nspike
        net_send(Cdur, nspike)
           }
      if (flag == nspike) { : if this associated with last spike then turn off
        r0 = weight * Rinf + (r0 - weight * Rinf) * exp(-(t - t0) / Rtau)
        t0 = t
        synon = synon - weight
        state_discontinuity(Ron, Ron - r0)
        state_discontinuity(Roff, Roff + r0)
        on = 0
      }
    }

*** Step 4: recompile

    graham-mac% eee ; cd .. ; ipython -i setup.py
    cd /u/graham/projects/eee/sim
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul  2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.

    IPython 5.1.0 -- An enhanced Interactive Python.
    ?         -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help      -> Python's own help system.
    object?   -> Details about 'object', use 'object??' for extra details.

    Setting up EEE project from setup.py

      eeedir    : /u/graham/projects/eee
      simdir    : /u/graham/projects/eee/sim
      moddir    : /u/graham/projects/eee/sim/mod
      batchesdir: /u/graham/projects/eee/sim/batches

    Making output dirs.
      Making figs dir: /u/graham/projects/eee/sim/batches/batch_glutdyn/batch_figs
    Removing links to compiled mods dir.
      Removing directory: /u/graham/projects/eee/sim/batches/batch_nmda_dms/x86_64
      Removing directory: /u/graham/projects/eee/sim/batches/batch_20180122/x86_64
      Removing directory: /u/graham/projects/eee/sim/batches/batch_gmax/x86_64
      Removing directory: /u/graham/projects/eee/sim/batches/batch_glutdyn/x86_64
      Removing directory: /u/graham/projects/eee/sim/batches/batch_nmda_comp/x86_64
      Removing directory: /u/graham/projects/eee/sim/batches/batch_sfn2017/x86_64
      Removing directory: /u/graham/projects/eee/sim/batches/batch_20171207/x86_64
      Removing directory: /u/graham/projects/eee/sim/batches/batch_rmp/x86_64
      Removing directory: /u/graham/projects/eee/sim/batches/batch_plat_overlay/x86_64
      Removing mod file: /u/graham/projects/eee/sim/mod/cadad.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/can_mig.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/h_migliore.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/kdr_BS.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/kdrin.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/h_kole.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/misc.h
      Removing mod file: /u/graham/projects/eee/sim/mod/nstim.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/vecst.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/nax_BS.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/cal_mig.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/catcb.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/kapcb.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/kdmc_BS.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/canin.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/MyExp2SynNMDABB.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/h_BS.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/cat_mig.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/IKsin.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/MyExp2SynBB.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/vecstim.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/gabab.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/kapin.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/kctin.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/hin.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/kBK.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/kap_BS.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/nafx.mod
      Removing mod file: /u/graham/projects/eee/sim/mod/cadyn.mod
    Compiling mod files using: mkmod
    Search path for mod files is /usr/site/nrniv/local/mod
    Creating AMPA.mod
    Creating GABAA.mod
      nrnivmodl vecst nstim MyExp2SynBB MyExp2SynNMDABB h_BS kap_BS kdmc_BS kdr_BS nax_BS cadad cat_mig can_mig cal_mig h_migliore h_kole kBK gabab nafx kdrin IKsin hin canin kapin kctin cadyn kapcb catcb vecstim AMPA GABAA
    /u/graham/projects/eee/sim/mod
    vecst nstim MyExp2SynBB MyExp2SynNMDABB h_BS kap_BS kdmc_BS kdr_BS nax_BS cadad cat_mig can_mig cal_mig h_migliore h_kole kBK gabab nafx kdrin IKsin hin canin kapin kctin cadyn kapcb catcb vecstim AMPA GABAA
    vecst nstim MyExp2SynBB MyExp2SynNMDABB h_BS kap_BS kdmc_BS kdr_BS nax_BS cadad cat_mig can_mig cal_mig h_migliore h_kole kBK gabab nafx kdrin IKsin hin canin kapin kctin cadyn kapcb catcb vecstim AMPA GABAA
    "/Applications/NEURON-7.5/nrn/x86_64/bin/nocmodl" vecst
    Translating vecst.mod into vecst.c
    Notice: VERBATIM blocks are not thread safe
    Notice: Assignment to the GLOBAL variable, "RES", is not thread safe
    Notice: Assignment to the GLOBAL variable, "VECST_INSTALLED", is not thread safe
    "/Applications/NEURON-7.5/nrn/share/nrn/libtool" --tag=CC --mode=compile gcc -DHAVE_CONFIG_H -I//usr/site/nrniv/local/mod -I. -I.. -I"/Applications/NEURON-7.5/nrn/include/nrn" -I"/Applications/NEURON-7.5/nrn/x86_64/lib"      -g -O2 -c -o vecst.lo `test -f 'vecst.c' || echo '/'`vecst.c
    libtool: compile:  gcc -DHAVE_CONFIG_H -I//usr/site/nrniv/local/mod -I. -I.. -I/Applications/NEURON-7.5/nrn/include/nrn -I/Applications/NEURON-7.5/nrn/x86_64/lib -g -O2 -c vecst.c  -fno-common -DPIC -o .libs/vecst.o
    In file included from vecst.c:281:
    //usr/site/nrniv/local/mod/misc.h:8:10: fatal error: 'values.h' file not found
    #include <values.h>
             ^~~~~~~~~~
    1 error generated.
    make: *** [vecst.lo] Error 1
    Linking to compiled mod file dir.
      Symlinking /u/graham/projects/eee/sim/batches/batch_nmda_dms/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_20180122/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_spineLoc/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_gmax/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_nospines_varsyns/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_fi/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_tospines/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_nospines_onesyn/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_glutdyn/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_nmda_comp/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_bap/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_nospines_5syns/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_sfn2017/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_spillover/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_20171207/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_rmp/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_nospines_255syns/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/batch_plat_overlay/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
      Symlinking /u/graham/projects/eee/sim/batches/x86_64 to /u/graham/projects/eee/sim/mod/x86_64
    Finished setting up EEE project.

*** Step 5: set up cfg and netParams to handle mgSlope

Working in: /u/graham/projects/eee/sim/batches/batch_20180122/cfg.py:
    
    cfg.mgSlope       = 0.062 # Mg block slope from NMDAeee.mod

Working in /u/graham/projects/eee/sim/batches/batch_20180122/netParams.py:

    #netParams.synMechParams['NMDA'] = {'mod': 'NMDA', 'Cdur': cfg.CdurNMDAScale * 1.0, 'Cmax': cfg.CmaxNMDAScale * 1.0, 'Alpha': cfg.NMDAAlphaScale * 4.0, 'Beta': cfg.NMDABetaScale * 0.0015, 'e': cfg.NMDARev}
    netParams.synMechParams['NMDA'] = {'mod': 'NMDA', 'Cdur': cfg.CdurNMDAScale * 1.0, 'Cmax': cfg.CmaxNMDAScale * 1.0, 'Alpha': cfg.NMDAAlphaScale * 4.0, 'Beta': cfg.NMDABetaScale * 0.0015, 'e': cfg.NMDARev, 'mgSlope': cfg.mgSlope}


*** Step 6: run batches varying the Mg slope

my_batches:

    # Varying glutAmp and mgSlope
    batch = {}
    batch["label"] = "glutAmp_mgSlope"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 10).round(2))
    params["mgSlope"] = [0.042, 0.052, 0.062, 0.072, 0.082]
    batch["params"] = params
    batches[batch["label"]] = batch

Running:
    graham-mac% eee ; cd batches/batch_20180122 ; ./runmybatches

Something's not working.  Debugging.

    graham-mac% eee; cd ..
    graham-mac% ipython -i netParams.py

No errors.

    graham-mac% eee; cd ..
    graham-mac% ipython -i batch_init.py

Error:

    ---------------------------------------------------------------------------
    LookupError                               Traceback (most recent call last)
    /u/graham/projects/eee/sim/batches/batch_20180122/batch_init.py in <module>()
         30 
         31 # add network stimulation
    ---> 32 sim.net.addStims()
         33 
         34 # setup variables to record for each cell (spikes, V traces, etc)

    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in addStims(self)
        163 
        164                         if source['type'] == 'NetStim':
    --> 165                             self._addCellStim(params, postCell)  # call method to add connections (sort out synMechs first)
        166                         else:
        167                             postCell.addStim(params)  # call cell method to add connection

    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in _addCellStim(self, stimParam, postCell)
        205             params['delay'] = finalParam['delaySynMech']
        206 
    --> 207             postCell.addStim(params=params)
        208 
        209 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addStim(self, params)
       1013                 'seed': params['seed'] if 'seed' in params else sim.cfg.seeds['stim']}
       1014 
    -> 1015             self.addConn(connParams, netStimParams)
       1016 
       1017 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addConn(self, params, netStimParams)
        718         # Add synaptic mechanisms
        719         if not pointp: # check not a point process
    --> 720             synMechs, synMechSecs, synMechLocs = self._setConnSynMechs(params, secLabels)
        721             if synMechs == -1: return
        722 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in _setConnSynMechs(self, params, secLabels)
       1186 
       1187         # add synaptic mechanism to section based on synMechSecs and synMechLocs (if already exists won't be added)
    -> 1188         synMechs = [self.addSynMech(synLabel=params['synMech'], secLabel=synMechSecs[i], loc=synMechLocs[i]) for i in range(synsPerConn)]
       1189 
       1190         return synMechs, synMechSecs, synMechLocs

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in addSynMech(self, synLabel, secLabel, loc)
        615                     for synParamName,synParamValue in synMechParams.iteritems():  # add params of the synaptic mechanism
        616                         if synParamName not in ['label', 'mod', 'selfNetCon', 'loc']:
    --> 617                             setattr(synMech['hSyn'], synParamName, synParamValue)
        618                         elif synParamName == 'selfNetcon':  # create self netcon required for some synapses (eg. homeostatic)
        619                             secLabelNetCon = synParamValue.get('sec', 'soma')

    LookupError: 'mgSlope' is not a defined hoc variable name.


Not quite sure what the problem is...  Committing and pushing to ask for help.

    graham-mac% hg commit -m "Fixing mgSlope"
    graham-mac% hgpush
    pushing to ssh://no.neurosim.downstate.edu//u/graham/projects/eee/
    searching for changes
    remote: adding changesets
    remote: adding manifests
    remote: adding file changes
    remote: added 1 changesets with 4 changes to 4 files
    Warning: No xauth data; using fake authentication data for X11 forwarding.
    sim/mod/NMDAeee.mod: untracked file differs
    abort: untracked files in working directory differ from files in requested revision

Seems to not be working because of the difference in NMDAeee.mod (untracked)

Will delete NMDAeee.mod on NO and try again.  That seems to have worked now.

changeset:   496:39a052426dc1

** Figuring out problem with mgSlope

I'm going to try to use NMDAeee outside of Netpyne and see if it works.

Working in 



** Updating misc.h

/usr/site/nrniv/local/mod/misc.h

Copied new misc.h from: 
https://senselab.med.yale.edu/modeldb/getModelFile.cshtml?model=185858&AttrID=23&s=yes&file=/%2fCaHDemo%2fmisc.h

Copied NMDAeee.mod to NMDAmgslope.mod

Changing parameters.multi:
: DMS NMDA 
:DEFAULT NMDAeee
DEFAULT NMDAmgslope

*** Chat about mkmod problem

    joe [1:05 PM]
    Got an error on compiling:

    [1:05 PM]
    In file included from vecst.c:281:
    //usr/site/nrniv/local/mod/misc.h:8:10: fatal error: ‘values.h’ file not found
    #include <values.h>
            ^~~~~~~~~~


    billl [1:06 PM]
    robert fixed that

    [1:06 PM]
    think can just take out values.h


    ramcdougal [1:07 PM]
    uhhh.... maybe... I fixed in the ModelDB versions (I think) but not on neurosim (although: I thought this was only an issue on linux, so maybe I'm thinking of something else?)


    billl [1:08 PM]
    only an issue on macOS you mean

    [1:08 PM]
    yeah thinking joe running on macOS

    [1:08 PM]
    the one for mac will also run on linux?


    ramcdougal [1:08 PM]
    you're right... things work on linux, don't work on not linux

    [1:09 PM]
    yeah, we've got a version that works across the board in ModelDB

    [1:09 PM]
    or at least it did in whatever we tested

    [1:09 PM]
    lms


    billl [1:09 PM]
    can grab any misc.h from modeldb joe -- let's replace the one that's currently on neurosim


    ramcdougal [1:09 PM]
    well, that file did evolve over time, I think

    [1:10 PM]
    this is a fixed misc.mod: https://senselab.med.yale.edu/ModelDB/showmodel.cshtml?model=185858&file=/CaHDemo/misc.mod#tabs-2

    [1:10 PM]
    direct download link: https://senselab.med.yale.edu/modeldb/getModelFile.cshtml?model=185858&AttrID=23&s=yes&file=/%2fCaHDemo%2fmisc.mod

    [1:10 PM]
    oooo

    [1:11 PM]
    so the files in that model entry are fixed in that they work together


    joe [1:11 PM]
    Thanks, Robert!

    ramcdougal [1:14 PM]
    why did you have a `#define` for the square root of 2pi? Fourier something?


    billl [1:15 PM]
    some of this goes back decades -- sounds as plausible a reason as any -- also may have inherited this misc from some other usage ..... all in the mists of time


    joe [1:19 PM]
    Okay, replaced misc.h with the new one from Robert, and now it compiles.

    [1:19 PM]
    Thx!


    ramcdougal [1:19 PM]
    glad it works!


    joe [1:24 PM]
    But, my NMDAeee didn’t compile.  I guess I’m confused about how parameters.multi and mkmod work…

    [1:24 PM]
    I put a local copy of NMDAeee.mod in my mod dir, and then commented out DEFAULT: NMDAeee in parameters.multi

    [1:25 PM]
    because I thought that line in p.multi would pull the NSim repo version…

    [1:25 PM]
    Instead of the local.


    billl [1:25 PM]
    nope

    [1:25 PM]
    you might want to change the name though


    joe [1:25 PM]
    But I guess that line is required to compile anytihng?


    billl [1:25 PM]
    NMDAmgslope

    [1:25 PM]
    seems confusing to have 2 files with same name

    [1:25 PM]
    yeah that line is required

    [1:26 PM]
    i would suggest keep same name in POINT_PROCESS though so don't have to edit the netpyne too much

    [1:26 PM]
    only add mgslope

    [1:26 PM]
    i would suggest keep same name in POINT_PROCESS though so don't have to edit the netpyne too much

    [1:26 PM]
    only add mgslope


    joe [1:26 PM]
    Got it.  I’ll do that.  From now on, I’ll rename any mod file from Nsim repo to avoid the problem.

    [1:28 PM]
    One more question about mkmod.

    [1:28 PM]
    Does it handle deleting and/or updating mod files?  Or do I need to manually delete old ones and then run mkmod?


    billl [1:29 PM]
    if you have a local file by a certain name it will take that and won't look in the other dirs so then would need to delete if wanted to switch to the central one

    [1:30 PM]
    the PATH to look for files includes `.` and also MODL_INCLUDE=/usr/site/nrniv/local/mod:/u/billl/nrniv/migliore/ca3_2002

    [1:30 PM]
    whatever MODL_INCLUDE is set to i mean


    joe [1:31 PM]
    Got it. Now, if I modify a mod file and then run mkmod, it will recompile and replace existing version of modified mod file?

    [1:32 PM]
    versions of compiled files


    billl [1:34 PM]
    yes -- it just calls nrnivmodl which checks for changes

    [1:34 PM]
    like a Makefile

    [1:35 PM]
    easier with diff filenames so don't get confusion between 2 with same names


    joe [1:35 PM]
    Cool, thanks.  Don’t know much about Make files, though!


    billl [1:35 PM]
    if want to give diff internal names can even compile both but not sure that makes things easier

    [1:36 PM]
    make checks what is changed before compiling


    joe [1:36 PM]
    Okay, so now I’ve got the new NMDA working.


    billl [1:36 PM]
    that's important when doing massive programs like eg NEURON else would take long time to recompile

    [1:36 PM]
    great


** Back to mgSlope

graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; ipython -i analyze.py
In [1]: batch_analysis.plot_plat_comps('glutAmp_mgslope')

file:gif/20180125_135647.png

file:gif/20180125_135837.png

file:gif/20180125_135853.png


** Varying mgSlope and Alpha at the same time

    # Varying NMDAAlphaScale and mgSlope
    batch = {}
    batch["label"] = "NMDAAlphaScale_mgSlope"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["NMDAAlphaScale"] = [0.01, 0.1, 1.0, 10.0, 100.0]
    params["mgSlope"] = [0.042, 0.052, 0.062, 0.072, 0.082]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp and NMDAAlphaScale
    batch = {}
    batch["label"] = "glutAmp_NMDAAlphaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 10).round(2))
    params["NMDAAlphaScale"] = [0.01, 0.1, 1.0, 10.0, 100.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp and mgSlope
    batch = {}
    batch["label"] = "glutAmp_mgSlope"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 10).round(2))
    params["mgSlope"] = [0.042, 0.052, 0.062, 0.072, 0.082]
    batch["params"] = params
    batches[batch["label"]] = batch

    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; ./runmybatches
    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; ipython -i analyze.py
    In [1]: batch_analysis.plot_plat_comps('glutAmp_mgslope')
    In [2]: batch_analysis.plot_plat_comps('glutAmp_NMDAAlphaScale')


Want to try a higher glutAmp value on the NMDAAlpha and mgSlope batch.

cfg.glutAmp    = 1.3 #0.8   # weight supplied to NMDAr and AMPAr 

Renaming batch and re-running
    batch["label"] = "NMDAAlphaScale_mgSlope_13"

That's a good value for glutAmp, but I'm going to adjust the NMDAAlpha values
slightly and the mgSlope values:

    # Varying NMDAAlphaScale and mgSlope
    batch = {}
    batch["label"] = "NMDAAlphaScale_mgSlope_2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["NMDAAlphaScale"] = [0.01, 0.1, 0.5, 1.0, 100.0]
    params["mgSlope"] = [0.022, 0.042, 0.062, 0.082, 0.102]
    batch["params"] = params
    batches[batch["label"]] = batch


** Chatting with Bill

joe [4:35 PM]
I varied Alpha scaling from 0.01 to 100x default value.
[4:35 PM]
But above a 1.0 scaling, there is very little change.

billl [4:35 PM]
why test 0.01?

joe [4:36 PM]
I always like to throw in a value on the other side.  Sanity check, I guess.

billl [4:36 PM]
we're looking for a threshold so want faster not slower
[4:36 PM]
you tested 0.01 0.1 and 0.5?? -- ok so don't need that
[4:36 PM]
really just need a single alpha which is instantaneous
[4:36 PM]
why don't you check that first
[4:36 PM]
prob 10x is suficient
[4:37 PM]
just look at the g value and see
[4:37 PM]
in your current sim
[4:37 PM]
form the fig you show here even 1x looks very fast
[4:37 PM]
but need to see the g
[4:38 PM]
can just look at the g for 1x 10x 20x see if any different
[4:38 PM]
ok so don't really need to explore alpha -- just find one value

joe [4:38 PM]
commented on NMDAAlphaScale_mgSlope_2_cell_1_vtrace_2.png
From Alpha scaling 0.5x to 100x, there is very little change in output.

billl [4:38 PM]
also don't need to explore shallow slopes for mgslope
[4:38 PM]
you can do sanity checks (controls) once you have some kind of result -- don't need to epxlore in the wrong direction
[4:39 PM]
little change -- where do you see that? -- ok i see; ok so 1x is fine -- but let's confirm that please
[4:40 PM]
and let's make a more realistic sim -- it's not so surprising that can't get any effect with activation of 1 spine

joe [4:40 PM]
Yeah, the columns middle and rightward change very little.
[4:40 PM]
Sounds good.  I’m gonna get some dinner and that’ll be next on my list.

billl [4:41 PM]
but you're not looking at nmda so don't know what's going on
[4:41 PM]
ok ttyl


* 2018-01-26 -- Exploring NMDA, improving plotting

** TODO

Analyze NMDA (g) make plots to show 
Explore multiple synapses and stim location
Read Major and Schilling articles
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Work on article

** Finalize plotscalar and plateau plot fixes

Need to remove plotscalar2 (plotscalar now handles 1d and 2d).
Will rename plotscalar as plot_measure
Will change all uses of plotscalar to plot_measure

Need to improve plot_plat_comps to accept options (e.g. swapaxes), to have
option to compare to Srdjan data.

Adding option expdata=False to plot_plat_comps, if set to True, compares to 
Srdjan's data

Adding more options:
    stable=stable, syntime=syntime, recstep=recstep, swapaxes=False

plot_plat_comps is working

Running this:
    In [19]: batch_analysis.plot_plat_comps("glutAmp_mgSlope", swapaxes=True, expdata=True)

Produces this:
    file:gif/20180126_100331.png

But only the final figure (first interspike interval) has the proper legend.
Fixing this...

Can't see any difference between plot_first_interspike and the other plot measures...

Maybe the problem is in plot_measure

It's weird, the last figure made by plot_plat_comps has the correct legend.  
When I comment out the last one, the new last one has correct legend.

Weird.

I'm going to try switching from plt.legend to ax.legend

https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.legend.html

That fixed the problem.


** Fix plot_relation

In order to plot g (or any other trace recorded) I need to improve plot_relation.

Plus I still need to make it work for any number of params (like I did for 
plot_scalar).  

Copying plotrelation2 to plot_relation

In [1]: batch_analysis.plot_vtraces("glutAmp_mgSlope")

Works right now (using plotrelation2).  Now I'm switching plot_vtraces to use
plot_relation and trying again.

It works.  :)

changeset:   500:daf1ca66cce9

Now to do the same thing for plot_vtraces_multicell.

In [1]: batch_analysis.plot_vtraces_multicell("glutAmp")

Works now with plotrelation2

And now it works with the new plot_relation

Deleted plotrelation2


** Record NMDA 

NMDA uses two currents: iNMDA and ica
So I can plot currents and/or g

First I need to set up recording for these variables.

    joe [12:58 PM]
    Hey Sergio, I’m ready to record g for my NMDA receptor.  Have you recorded conductance or currents from a syn mech in Netpyne?

    sergio [12:59 PM]
    I did it at some point

    joe [12:59 PM]
    Here’s how I set it up for recording a voltage from a sec:
    [12:59 PM]
    cfg.recordTraces = {‘V_soma’: {‘sec’: ‘soma’, ‘loc’: 0.5, ‘var’: ‘v’}}

    sergio [12:59 PM]
    let me check

    joe [12:59 PM]
    I’m assuming it’s something similar for a syn mech…

    sergio [1:00 PM]
    cfg.recordTraces[‘g_NMDA_Bdend1’] = {‘sec’: ‘Bdend1’, ‘loc’: 0.5, ‘synMech’: ‘NMDA’, ‘var’: ‘g’}

    joe [1:00 PM]
    Awesome, thanks!

    sergio [1:00 PM]
    cfg.recordTraces[‘i_NMDA_Bdend1’] = {‘sec’: ‘Bdend1’, ‘loc’: 0.5, ‘synMech’: ‘NMDA’, ‘var’: ‘iNMDA’}
    [1:00 PM]
    just need to check what do you want to record in the mod file
    [1:01 PM]
    in the parameter ‘var’

    joe [1:01 PM]
    Perfect.  I’ll give that a try.

Adding to cfg:
    cfg.recordTraces['g_NMDA'] = {'sec': 'head_55', 'loc': 0.5, 'synMech': 'NMDA', 'var': 'g'}

Archiving old batch data and figs, and running a batch to play around with:

    # Varying glutAmp and mgSlope
    batch = {}
    batch["label"] = "glutAmp_mgSlope"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 5).round(2))
    params["mgSlope"] = [0.042, 0.062, 0.082]
    batch["params"] = params
    batches[batch["label"]] = batch

And it works.

    In [1]: params, data = batch_utils.load_batch('glutAmp_mgSlope')
    Reading data...
    0 files missing

    In [2]: d = data['_0_0']

    In [3]: d.keys()
    Out[3]: 
    [u'netpyne_version',
     u'simConfig',
     u'simData',
     'paramValues',
     u'net',
     u'netpyne_changeset']

    In [4]: sd = d['simData']

    In [5]: sd.keys()
    Out[5]: 
    [u'spkt',
     u'V_spine',
     u'spkid',
     u'V_soma',
     u'V_Bdend1',
     u't',
     u'popRates',
     u'avgRate',
     u'g_NMDA']

    In [6]: sd['g_NMDA'].keys()
    Out[6]: [u'cell_1']

Now to copy get_vtraces to get_traces, and generalize it for whatever 
recorded trace I'd like to plot.

Committing for Bill to explore.

** Make a general get_traces function

Copying get_vtraces to get_traces

Copying plot_vtraces to plot_traces

Works now.

Running this:
    In [4]: batch_analysis.plot_traces("glutAmp_mgSlope", "g_NMDA", cellIDs=1)

Produces this:
    file:gif/20180126_161941.png

changeset:   503:f1cd905aa07d


** Record and plot iNMDA and ica

Changing up netParams and cfg first to only sim eee7ps, to save time.

Adding to cfg:

    cfg.recordTraces['i_NMDA'] = {'sec': 'head_55', 'loc': 0.99999, 'synMech': 'NMDA', 'var': 'iNMDA'}
    cfg.recordTraces['i_Ca'] = {'sec': 'head_55', 'loc': 0.99999, 'synMech': 'NMDA', 'var': 'ica'}

Running a couple batches:

    # Varying glutAmp and mgSlope
    batch = {}
    batch["label"] = "glutAmp_mgSlope"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 5).round(2))
    params["mgSlope"] = [0.042, 0.062, 0.082]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; ./runmybatches
graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; ipython -i analyze.py

In [14]: batch_analysis.plot_vtraces("glutAmp_mgSlope")
In [15]: batch_analysis.plot_traces("glutAmp_mgSlope", ["g_NMDA"])
In [16]: batch_analysis.plot_traces("glutAmp_mgSlope", ["i_NMDA", "i_Ca"])

Produces this:
    file:gif/20180126_170326.png

Committing now.
changeset:   504:166b63bf1a95



* 2018-01-29 -- Getting MPI to exit (unsuccessfully) and glutamate location

** TODO

Explore multiple synapses and stim location
Read Major and Schilling articles
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Work on article


** NMDA Alpha (binding rate)

Bill is asking about Alpha, so I'll put together a quick batch and figure.

    # Varying glutAmp and NMDAAlphaScale
    batch = {}
    batch["label"] = "glutAmp_NMDAAlphaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 5).round(2))
    params["NMDAAlphaScale"] = [1.0, 10.0, 100.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying NMDAAlphaScale and mgSlope
    batch = {}
    batch["label"] = "NMDAAlphaScale_mgSlope_2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["NMDAAlphaScale"] = [1.0, 10.0, 100.0]
    params["mgSlope"] = [0.042, 0.062, 0.082]
    batch["params"] = params
    batches[batch["label"]] = batch

graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; ./runmybatches
graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; ipython -i analyze.py
In [1]: batch_analysis.plot_vtraces("glutAmp_NMDAAlphaScale")
In [2]: batch_analysis.plot_traces("glutAmp_NMDAAlphaScale", ["g_NMDA"])
In [3]: batch_analysis.plot_traces("glutAmp_NMDAAlphaScale", ["i_NMDA", "i_Ca"])

** Fixing fig file naming so that trace figs don't overwrite previous ones...

Added tracename to trace plotting file naming:

    if type(traces) is str:
        tracename = traces
        traces = [traces]
    elif type(traces) is list:
        tracename = "_".join(traces)

    fig1.savefig(os.path.join(outputdir, batchname + "_" + cellLabel + "_" + tracename + "_trace_1.png"))
    fig2.savefig(os.path.join(outputdir, batchname + "_" + cellLabel + "_" + tracename + "_trace_2.png"))


** Back to Alpha

Re-running analysis as above.

NMDAAlphaScale 10 and 100 cause a huge jump in g_NMDA, which makes plots hard to 
see.  Re-running batch with lower values.

file:gif/20180129_083733.png

Batches:

    # Varying glutAmp and NMDAAlphaScale
    batch = {}
    batch["label"] = "glutAmp_NMDAAlphaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.2, 1.3, 5).round(2))
    params["NMDAAlphaScale"] = [1.0, 2.0, 5.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying NMDAAlphaScale and mgSlope
    batch = {}
    batch["label"] = "NMDAAlphaScale_mgSlope"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["NMDAAlphaScale"] = [1.0, 2.0, 5.0]
    params["mgSlope"] = [0.042, 0.062, 0.082]
    batch["params"] = params
    batches[batch["label"]] = batch


file:gif/20180129_085524.png
file:gif/20180129_085537.png

Chat with Bill:

    joe [8:57 AM]
    uploaded this image: Alpha (NMDA binding rate) and mgSlope: voltage traces 

    joe [8:57 AM]
    uploaded this image: Alpha and mgSlope: g_NMDA and i_NMDA 

    joe [8:58 AM]
    Alpha doesn’t do anything for us.  It seems to be already saturated at our default value.

    [8:59 AM]
    Increasing alpha further just causes discontinuities at the onset of activation (e.g. bottom middle g trace)

    [9:00 AM]
    Increasing mgSlope causes the plateau to turn off more abruptly, decreasing it causes a slowly decaying plateau.

    billl [9:00 AM]
    yeah that's what i assumed

    joe [9:00 AM]
    Gonna go for a hike and then explore the location and spread of glutamate.


** NMDA Alpha (binding rate)

I'm just going to quickly run a batch to see how lowering NDMA Alpha affects 
the plateau shape.  Need to increase glutAmp to see plateaus with spiking.

    # Varying glutAmp and NMDAAlphaScale
    batch = {}
    batch["label"] = "glutAmp_NMDAAlphaScale_2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    #params["glutAmp"] = list(np.linspace(0.2, 1.3, 5).round(2))
    params["glutAmp"] = list(np.linspace(0.2, 13, 10).round(2))
    params["NMDAAlphaScale"] = [0.1, 1.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180129_121622.png

iNMDA is interesting here: at high stims, it actually becomes mostly positive at
the beginning of the plateau...  But it's hard to read too much into it,
because the plateaus don't really line up.


** Lining up plateaus

I really need a way to line up different simulations according to some sort of 
plateau measurement... probably number of spikes...

I'm picturing a function I can run on any sim that will cycle through a range of 
glutAmps, and return the glutAmp threshold for a single spike, and the value of 
glutAmp when there are, say, 10 spikes.

I can then use these values to line up any two sims for comparison.

For that I need to fix the longstanding problem I've had where when I run 
a set of batches, the code just sits afterwards, and I have to open a new 
terminal to do analysis...

Fixing this would actually really streamline my workflow and save a lot of time.

Going to commit now.

So to run a set of batches (run the file my_batches.py), I execute the 
"runmybatches" script:

    e.g. graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; ./runmybatches

This simple script consists of the following:

    #!/bin/bash
    # Runs simulation, including MPI.

    numprocesses=$1; if [ -z $numprocesses ]; then numprocesses=4; fi # Number of processes to use
    shift # Eliminate first argument

    mpiexec -np $numprocesses nrniv -python -mpi my_batches.py $@ # Run the model

I think when it runs, it never gets back to this script.  I am going to add a line
at the end to see:

    echo "This is the end of runmybatches."

graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; ./runmybatches

Here is the output at the end:
    Completed eee/sim/batches/batch_sfn2017/my_batches.py
    Duration (s): 91.3748910427
    Please close this terminal and open another.
    >>> 

So yeah, it never gets back to the runmybatches script.  It ends up in Python.

This is how the my_batches.py file executes:

    ###############################################################################
    # Main code: runs all batches
    ###############################################################################

    if __name__ == '__main__':
      
      import time
      start = time.time()

      # Run all batches
      for label, batch in batches.items():
        print("Running batch with label: " + label)
        print
        batch_utils.run_batch(**batch)

      stop = time.time()
      print
      print("Completed eee/sim/batches/batch_sfn2017/my_batches.py")
      print("Duration (s): " + str(stop-start))
      print("Please close this terminal and open another.")

I am going to try running this without mpi and seeing what happens:

graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; python my_batches.py

Here is the output:
    Completed eee/sim/batches/batch_sfn2017/my_batches.py
    Duration (s): 151.474825144
    Please close this terminal and open another.
    graham-mac% 

So that exits normally...  The problem is likely in mpiexec then...

Well, actually, let's see if putting `python my_batches.py` in `runmybatches` works.

    #!/bin/bash
    # Runs simulation, including MPI.

    numprocesses=$1; if [ -z $numprocesses ]; then numprocesses=4; fi # Number of processes to use
    shift # Eliminate first argument

    #mpiexec -np $numprocesses nrniv -python -mpi my_batches.py $@ # Run the model
    python my_batches.py

    echo "This is the end of runmybatches."

Running:
    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; ./runmybatches

Output:
    Completed eee/sim/batches/batch_sfn2017/my_batches.py
    Duration (s): 137.926234007
    Please close this terminal and open another.
    This is the end of runmybatches.
    graham-mac% 

So that exited properly.  

I am going to try the same thing on a Neurosim machine: no

First to add a new file: runmybatches_nonmpi

Committing now, and then working in NO
changeset:   506:bd10fb28e8cd
changeset:   507:488d1b19b7e1

Commands:
    no% cd projects/eee
    no% python setup.py
    no% pwd
    no% cd /u/graham/projects/eee/sim/batches/batch_20180122
    no% ./runmybatches

Output:
    Completed my_batches.py
    Duration (s): 273.430521965
    Please close this terminal and open another.
    >>> 
    >>> exit()
    --------------------------------------------------------------------------
    mpiexec has exited due to process rank 0 with PID 0 on
    node no exiting improperly. There are three reasons this could occur:

    1. this process did not call "init" before exiting, but others in
    the job did. This can cause a job to hang indefinitely while it waits
    for all processes to call "init". By rule, if one process calls "init",
    then ALL processes must call "init" prior to termination.

    2. this process called "init", but exited without calling "finalize".
    By rule, all processes that call "init" MUST call "finalize" prior to
    exiting or it will be considered an "abnormal termination"

    3. this process called "MPI_Abort" or "orte_abort" and the mca parameter
    orte_create_session_dirs is set to false. In this case, the run-time cannot
    detect that the abort call was an abnormal termination. Hence, the only
    error message you will receive is this one.

    This may have caused other processes in the application to be
    terminated by signals sent by mpiexec (as reported here).

    You can avoid this message by specifying -quiet on the mpiexec command line.
    --------------------------------------------------------------------------
    This is the end of runmybatches.
    no% 

So, runmybatches didn't end properly on Neurosim machine either.  But when I 
manually exit Python, I get an interesting message before returning properly
to runmybatches and exiting...

I am going to try manually running mpiexec and seeing if that works.

    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ 
    graham-mac% mpiexec -np 4 nrniv -python -mpi my_batches.py

Output:
    Completed my_batches.py
    Duration (s): 76.7694401741
    Please close this terminal and open another.
    >>> 

Yeah, so same problem.  Asking for help.


** Drafting a question for Slack:

I'm having a problem with MPI.  When I execute without MPI, everything works, and when done it exits back to the system prompt:

    graham-mac% python my_batches.py
    ...
    Completed my_batches.py
    Duration (s): 137.926234007
    graham-mac% 

But when I use MPI (any number of processors), it hangs at the end in Python.

    graham-mac% mpiexec -np 4 nrniv -python -mpi my_batches.py
    ...
    Completed my_batches.py
    Duration (s): 137.926234007
    >>>

On my machine (Mac), if I try to `exit()`, it never returns to the system prompt.

I found that I can exit Python manually at the end on NO, and it gives me the following message:

    no% mpiexec -np 4 nrniv -python -mpi my_batches.py
    ...
    Completed my_batches.py
    Duration (s): 273.430521965
    >>> 
    >>> exit()
    --------------------------------------------------------------------------
    mpiexec has exited due to process rank 0 with PID 0 on
    node no exiting improperly. There are three reasons this could occur:

    1. this process did not call "init" before exiting, but others in
    the job did. This can cause a job to hang indefinitely while it waits
    for all processes to call "init". By rule, if one process calls "init",
    then ALL processes must call "init" prior to termination.

    2. this process called "init", but exited without calling "finalize".
    By rule, all processes that call "init" MUST call "finalize" prior to
    exiting or it will be considered an "abnormal termination"

    3. this process called "MPI_Abort" or "orte_abort" and the mca parameter
    orte_create_session_dirs is set to false. In this case, the run-time cannot
    detect that the abort call was an abnormal termination. Hence, the only
    error message you will receive is this one.

    This may have caused other processes in the application to be
    terminated by signals sent by mpiexec (as reported here).

    You can avoid this message by specifying -quiet on the mpiexec command line.
    --------------------------------------------------------------------------
    no% 

I'm not quite sure what the problem is, but I'd appreciate any help!  I'd like to be able to run batches and then automatically analyze and plot, rather than having to manually open another terminal window to analyze and plot after the batches run...


*** Responses 

    billl [2:35 PM]
    there's an exit call that you may be msising?
    [2:36 PM]
    ie still in a block condition?

    adamnewton [2:59 PM]
    Does calling `h.quit()` instead `exit()` work?

    ramcdougal [3:24 PM]
    does it work as expected if you launch `mpiexec -np 4 python my_batches.py` (note: before importing neuron, you'll need to `from mpi4py import MPI` if you're not already)

*** Trying out suggestions

h.quit() still hangs, never exiting.

Trying Robert's idea.  Adding `from mpi4py import MPI` to the top of my_batches.

    joe [4:01 PM]
    @billl, my code exits normally when run without MPI, so I don’t think that’s the problem…
    [4:01 PM]
    @adamnewton, `h.quit()` doesn’t work either.  It just hangs.

    billl [4:01 PM]
    you are exiting without mpi but need to finish up and quit all the nodes when using mpi

    joe [4:02 PM]
    @ramcdougal, When I run it that way it hangs and never even gets to the Python prompt at the end.  No prompt at all.  :disappointed:

    ramcdougal [4:02 PM]
    but... it shouldn't give you a prompt
    [4:02 PM]
    it should exit
    [4:02 PM]
    I understand that hanging is not exiting

    joe [4:03 PM]
    Right, but once it exits successfully, it should give me the system prompt again, right?

    billl [4:04 PM]
    system prompt yes, python prompt no

    joe [4:04 PM]
    I don’t know anything about quitting all nodes…

    billl [4:04 PM]
    btw, why not use the analysis and vis tools from within netpyne?
    [4:05 PM]
    think we talked about the quit phase in our paper - /usr/site/htdocs/pdfs/jnc_2016.pdf

    joe [4:07 PM]
    When I run `mpiexec nrniv -python` it spits me back out to the Python prompt (though it should spit me back out to the system prompt).  When I run `mpiexec python` it never spits me back out at all.  No prompt, just the square cursor.
    [4:08 PM]
    I’ll look into the paper now.
    [4:09 PM]
    I don’t use analysis and viz tools from Netpyne because the analyses and plots we want to see aren’t available in Netpyne.
    [4:09 PM]
    Netpyne has a lot of network-type plots, but not too many cell trace plots.

    billl [4:09 PM]
    add some

    joe [4:09 PM]
    Yup. :slightly_smiling_face:

    billl [4:10 PM]
    as we said the other day the added value will be by expanding netpyne
    [4:10 PM]
    otherwise my suggestion remains to do the stuff in neuron (after launching from netpyne) since quicker

    joe [4:22 PM]
    I didn’t see anything in the JNC paper about quitting or exiting, and I’ve never set up my own parallel context before, like discussed in the paper…  `pc = h.ParallelContext()`

    billl [4:27 PM]
    pc.done()                    # tell workers to quit

    joe [4:34 PM]
    I tried adding `pc = h.ParallelContext()` to the top of my_batches.py and `pc.done()` to the bottom.  The batches run as normal, but it still hangs at the end…

No solution yet.  :(


** Explore glutAmp spread

# Varying glutSpread
batch = {}
batch["label"] = "glutSpread01"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["glutSpread"] = [0.7, 1.5, 5.0, 10.0]
batch["params"] = params
batches[batch["label"]] = batch

glutAmp is too high 


# Varying glutSpread
batch = {}
batch["label"] = "glutSpread_glutAmp_01"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["glutSpread"] = [0.7, 1.5, 5.0, 10.0]
params["glutAmp"] = [1.3, 0.13, 0.013]
batch["params"] = params
batches[batch["label"]] = batch


Hmmmm.  Increasing the spread greatly reduces the range of glutAmp that 
produces good plateaus.  


** Explore glutAmp location

Tomorrow.


* 2018-01-30 -- EEE Meeting and glutamate clouds

** TODO

Explore multiple synapses and stim location (glutSpread and glutLoc)
Read Major and Schilling articles
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Work on article

** glutSpread and glutLoc

First to try a range of glutAmps to find good values:

    # Varying glutSpread
    batch = {}
    batch["label"] = "glutSpread_glutAmp_05"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpread"] = [10.0, 15.0, 20.0]
    params["glutAmp"] = list(np.linspace(0.04, 0.08, 10))
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180130_070426.png

Can lose the highest value, but need to include lower values

    # Varying glutSpread
    batch = {}
    batch["label"] = "glutSpread_glutAmp_01"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpread"] = [10.0, 15.0, 20.0]
    params["glutAmp"] = list(np.linspace(0.00, 0.06, 10))
    batch["params"] = params
    batches[batch["label"]] = batch

Improving:

    # Varying glutSpread and glutAmp
    batch = {}
    batch["label"] = "glutSpread_glutAmp_03"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpread"] = [10.0, 15.0, 20.0]
    params["glutAmp"] = list(np.linspace(0.025, 0.075, 10).round(3))
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180130_075402.png

Increasing the glutamate spread greatly reduces the glutAmp range for good 
plateaus...

I really need to have a method to determine the plateau range of any param set.


** Running a quick batch with delay and decay

cfg.glutDelay  = 10.0   # ms/um delay in glutamate activation
cfg.glutDecay  = 10.0   # %/um decrease in glutamate amplitude 

Other settings same as before.

    # Varying glutSpread and glutAmp
    batch = {}
    batch["label"] = "glutSpread_glutAmp_dd_01"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpread"] = [10.0, 15.0, 20.0]
    params["glutAmp"] = list(np.linspace(0.025, 0.075, 10).round(3))
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180130_084509.png

Need to increase glutAmp

    # Varying glutSpread and glutAmp
    batch = {}
    batch["label"] = "glutSpread_glutAmp_dd_02"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutSpread"] = [10.0, 15.0, 20.0]
    #params["glutAmp"] = list(np.linspace(0.025, 0.075, 10).round(3))
    params["glutAmp"] = list(np.linspace(0.065, 0.115, 10).round(3))
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180130_085249.png

Need to reduce glutAmp.  But now it's time for our meeting.


** Reading Guy Major article

Active Properties of Neocortical Pyramidal Neuron Dendrites
Guy Major,1 Matthew E. Larkum,2,∗ and Jackie Schiller3,∗

Annu. Rev. Neurosci. 2013. 36:1–24


*** Quotes

We emphasize the electrogenic capabilities of NMDA receptors (NMDARs) because these transmitter- gated channels seem to provide the major nonlinear depolarizing drive in thin dendrites, even allowing full-blown NMDA spikes.

distal basal, apical, and tuft EPSP peak voltages attenuate ... by ∼30-fold or more, as they spread from the synapse to the closest downstream (more proximal) intrinsic spike initiation zone ... In contrast to the strong attenuation of peak voltage, the loss of current along the input dendrite itself is comparatively minor, reflecting the fact that its membrane resistance is around an order of magnitude higher than its axial resistance over much of the likely biological parameter range1. 

(1 During the awake state or network upstates, however, mem- brane conductance and hence current loss may increase several-fold.)

In the case of basal and oblique branches, whatever the synapse site, most of the charge injected flows rapidly via the soma to the rest of the cell’s membrane capacitance before more slowly leaking out through the membrane resistance; over the distal ∼80% of these trees, input location per se makes only a relatively minor contribution to variations in postsyn- aptic potential (PSP) amplitude at the soma

PSP rise times at the soma differ as they spread from different lo- cations in the dendritic tree (Agmon-Snir & Segev 1993, Major et al. 1994, Rinzel & Rall 1974). This could be exploited for comput- ing the direction of input sequences lasting within the proximal-to-distal range of EPSP rise times (Rall 1964). Because their peaks co- incide, distal-to-proximal sequences of synap- tic inputs will result in a larger voltage surge at the soma than would the same inputs in reverse order.

In vitro, NMDA spikes (or plateau poten- tials) have been found in all classes of thin den- drite of neocortical excitatory neurons

The peak calcium in both zones in- creases with the spike/plateau duration

    Major uses the term NMDA spike and plateau potential interchangeably...

A key point is that at many dendritic locations it takes only a small number of synaptic inputs to evoke an NMDA spike: As few as ∼10 clustered single spine inputs may suffice (Figure 2). This is a small fraction of the synapses on a single thin dendrite, typically 100–400 dendritic spines, depending on the species (Chen et al. 2011, Larkman et al. 1992). An equally crucial point is that NMDA spikes can also be elicited by distributed inputs (Figure 2): Clustering is not a prerequisite for a clear threshold

A third important point is that both depolarization and glutamate prebinding from previous activation reduce the glutamate threshold, allowing cooperativity between NMDA spikes

    This could explain Sergio's second stim causing more activation...

NMDA-dependent dendritic electrogenesis has both thresholded and graded aspects, both of which can be predicted from the basic I-V curve of the NMDAR conductance

A spike is only all-or-none in the sense that it has some threshold below which it fails and above which it runs to completion.

    Our model has graded and thresholded aspects, but Srdjan doesn't like the graded part...

The properties of NMDAR channels have been reviewed extensively elsewhere (Paoletti 2011, Yuan et al. 2008).

    Should read these!




** EEE Meeting

Joe's notes before hand:

Guy Major paper: 

    1) during awake or network up states membrane conductance / 
    current loss may increase several-fold

    2) Major uses NMDA spike and plateau interchangeably

    3) ~ 10 clustered synaptic inputs --> NMDA spike/plateau (or more distributed 
    inputs)

    4) depolarization and/or glutamate pre-binding increases NMDA plateaus (Sergio's
    second and third stims have more effect...)

    5) NMDA plateau / spikes have graded and thresholded aspects

Discuss how to do glutSpread (decaly, delay, etc.)

    Still need to have this discussion

Organize a journal club for Major paper (NMDA stuff)

Look into Guy Major model (apparently in MATLAB)

Penny's detailed model has the jump (discontinuity) that Srdjan is looking for.
    (also has a good time to first spike)
    file:gif/20180201_090334.png

Bill wants an impedance comparison between detailed and simplified models
    Also check location-dependance of impedance

Finish MSM abstract!  (Due: Feb 12)

Try Penny's detailed model parameter values in the simplified model.

Penny's model:
https://bitbucket.org/peng_gao_penny/eee_detailed_model


* 2018-02-01 -- MPI

** TODO

Match Penny's parameter values (she gets good discontinuity)
Explore multiple synapses and stim location (glutSpread and glutLoc)
Read Major and Schilling articles for journal club
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Work on article
Figure out MPI problem


** Weird message on commit

graham-mac% hg commit -m "Matching param values with detailed model"
graham-mac% hgpush
pushing to ssh://no.neurosim.downstate.edu//u/graham/projects/eee/
searching for changes
remote: adding changesets
remote: adding manifests
remote: adding file changes
remote: added 1 changesets with 5 changes to 5 files
Warning: No xauth data; using fake authentication data for X11 forwarding.
merging sim/batches/batch_20180122/my_batches.py
libGL error: No matching fbConfigs or visuals found
libGL error: failed to load driver: swrast

(meld:7904): dconf-WARNING **: failed to commit changes to dconf: Timeout was reached

(meld:7904): Gdk-WARNING **: meld: Fatal IO error 11 (Resource temporarily unavailable) on X server localhost:13.0.

merging sim/batches/batch_20180122/my_batches.py failed!
4 files updated, 0 files merged, 0 files removed, 1 files unresolved
use 'hg resolve' to retry unresolved file merges
graham-mac% 


** Fixing MPI issue

Removing `pc = h.ParallelContext()` and `pc.done()` from my_batches.py

runmybatches uses mpiexec to do MPI parallelization, but I just looked into 
Netpyne batch.py code, and Netpyne already uses MPI to parallelize.  So I'm not 
sure I need to do it in runmybatches.

I am going to switch runmybatches back to the way it was and run a set of batches.
Then I will run the same set of batches using `python my_batches.py` and I will 
compare how long it takes.

runmybatches:      255.127078056, 296.587119818, 235.968575954
python my_batches: 524.520572186, 499.578292847, 496.99587512

So definitely want to use runmybatches and mpiexec

Looking at batch.py in Netpyne, I see there used to be a pc.done() that has
since been commented out.  I wonder if this is what I need to have runmybatches
exit properly (out of Python and back to system prompt).

I am uncommenting and seeing what happens.

Aaaaand it's sitting forever.  Seems to have been commented out for a reason.

Trying pc.done() at the end of the loop in Netpyne.  Still sitting forever.

Both times it completed the first batch fine, but then hangs on the second.

Trying pulling pc.done() back two indents, to the end of batch.run

Whoops, I think it should be indented one more.  I pulled it out of run.

Now it hangs at the start of the second batch.

I think the problem is that ParallelContext is started at the top of the batch.py 
file, with the imports.  

I'm going to try starting a ParallelContext `pc = h.ParallelContext()` in the 
run function in batch.py, and ending it at the end of the run...

    def run(self):
        
        pc = h.ParallelContext() # use bulletin board master/slave
        if pc.id()==0: pc.master_works_on_jobs(0) 

Got an error.

    Traceback (most recent call last):
      File "/usr/site/nrniv/local/python/netpyne/netpyne/batch.py", line 24, in runJob
    Traceback (most recent call last):
      File "/usr/site/nrniv/local/python/netpyne/netpyne/batch.py", line 24, in runJob
        print '\nJob in rank id: ',pc.id()
    NameError: global name 'pc' is not defined
        print '\nJob in rank id: ',pc.id()
    2 nrniv: PyObject method call failed:
    2  near line 0
    2  objref hoc_obj_[2]
    NameError: global name 'pc' is not defined
                 1 nrniv: PyObject method call failed:
    1  near line 0
    1  objref hoc_obj_[2]
           ^
                      ^
            2 ParallelContext[0].runworker()
            1 ParallelContext[0].runworker()
    oc_restore_code tobj_count=1 should be 0
    oc_restore_code tobj_count=1 should be 0
    Traceback (most recent call last):
      File "my_batches.py", line 514, in <module>
    Traceback (most recent call last):
      File "my_batches.py", line 514, in <module>
        batch_utils.run_batch(**batch)
      File "/u/graham/projects/eee/sim/batch_utils.py", line 62, in run_batch
        batch_utils.run_batch(**batch)
      File "/u/graham/projects/eee/sim/batch_utils.py", line 62, in run_batch
        b.run()
      File "/usr/site/nrniv/local/python/netpyne/netpyne/batch.py", line 172, in run
        b.run()
      File "/usr/site/nrniv/local/python/netpyne/netpyne/batch.py", line 172, in run
        pc.runworker()
    RuntimeError: hoc error
    >>>     pc.runworker()
    RuntimeError: hoc error
    >>> 

Trying this:

    def runJob(script, cfgSavePath, netParamsSavePath):
      -->
    def runJob(pc, script, cfgSavePath, netParamsSavePath):

    pc.submit(runJob, self.runCfg.get('script', 'init.py'), cfgSavePath, netParamsSavePath)
      -->
    pc.submit(runJob, pc, self.runCfg.get('script', 'init.py'), cfgSavePath, netParamsSavePath)

System fault.

Trying this:

    def runJob(pc, script, cfgSavePath, netParamsSavePath):
      -->
    def runJob(pcid, script, cfgSavePath, netParamsSavePath):

    pc.submit(runJob, pc, self.runCfg.get('script', 'init.py'), cfgSavePath, netParamsSavePath)
      -->
    pc.submit(runJob, pc.id(), self.runCfg.get('script', 'init.py'), cfgSavePath, netParamsSavePath)

That hangs after finishing the first batch.

I am thinking of making pc a global...

Adding `global pc` to Netpyne batch.py

And adding `pc.done()` to the bottom of my_batches.py
    print("Executing pc.done()")
    pc.done()

Fingers crossed, I think this might do it.

    Completed my_batches.py
    Duration (s): 177.567358971
    Executing pc.done()
    Traceback (most recent call last):
      File "my_batches.py", line 520, in <module>
        pc.done()
    NameError: name 'pc' is not defined
    >>> 

Making it a global didn't work.

Tried a few other things, none of which worked.  Ugh.

** Match Penny's param values

https://bitbucket.org/peng_gao_penny/eee_detailed_model



* 2018-02-02 -- MPI and h.ParallelContext()

** TODO

Match Penny's parameter values (she gets good discontinuity)
Explore multiple synapses and stim location (glutSpread and glutLoc)
Read Major and Schilling articles for journal club
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Work on article
Figure out MPI problem

** One last thing to try on MPI

Trying to start (and end) a ParallelContext in my_batches.py and commenting out in 
netpyne/batch.py

Well, that runs the batches, but still spits me out into Python instead of 
system prompt.

** Actually tried a bunch more stuff

None of which I could get to work.



* 2018-02-04 -- A hacky solution to a longstanding problem

** Figure out way to exit from running batches back to system prompt

So that I can run sims and analyze them all in one command, e.g.:

graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; rm -r batch_data ; mkdir batch_data ; ./runmybatches ; ipython -i analyze.py

I added the following to the bottom of my_batches.py:

  print("Attempting to terminate process:")
  import psutil
  print(psutil.Process().parent().parent())
  psutil.Process().parent().parent().terminate()

And now it works.  I get back to the system prompt at the end of my_batches.py now.

I'll have to check if this also works when running my_batches.py without MPI...

Yeah, it doesn't work without MPI:

    Completed my_batches.py
    Duration (s): 50.1404049397

    Attempting to terminate process:
    psutil.Process(pid=4219, name='login')

    [Process completed]

Running without MPI (added a few print statements):

    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; rm -r batch_data ; mkdir batch_data ; python my_batches.py ; ipython -i analyze.py

    ...

    Completed my_batches.py
    Duration (s): 50.1047441959

    Current process:
    psutil.Process(pid=4286, name='python2.7')
    Parent process:
    psutil.Process(pid=4279, name='tcsh')
    Attempting to terminate process:
    psutil.Process(pid=4278, name='login')

    [Process completed]

Running with MPI:

    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180122/ ; rm -r batch_data ; mkdir batch_data ; ./runmybatches ; ipython -i analyze.py

    ...

    Completed my_batches.py
    Duration (s): 43.2609951496

    Current process:
    psutil.Process(pid=4346, name='nrniv')
    Parent process:
    psutil.Process(pid=4345, name='orterun')
    Attempting to terminate process:
    psutil.Process(pid=4344, name='bash')
    >>> Terminated

Will set it such that if the current process is Python, nothing happens.  
Otherwise, will terminate granparent of process.

Bottom of my_batches.py now:

  import psutil
  print("Current process:")
  print(psutil.Process())
  
  if 'python' not in psutil.Process().name():
    print("Parent process:")
    print(psutil.Process().parent())
    print("Attempting to terminate grandparent process:")
    print(psutil.Process().parent().parent())
    psutil.Process().parent().parent().terminate()

Testing.

Works for both MPI and non-MPI.  :)

Committing.

Weird problem pushing to NO

    no% hg update
    abort: outstanding merge conflicts
    no% hg merge
    abort: nothing to merge
    (use 'hg update' instead)
    no% hg update
    abort: outstanding merge conflicts
    no% hg merge
    abort: nothing to merge
    (use 'hg update' instead)
    no% 

This worked:
    https://stackoverflow.com/questions/12690557/mercurial-hg-abort-outstanding-uncommitted-merges


    no% hg update --clean -r tip
    3 files updated, 0 files merged, 0 files removed, 0 files unresolved
    no% 


Now I need to match parameters with Penny's detailed model:
    https://bitbucket.org/peng_gao_penny/eee_detailed_model


* 2018-02-05 -- Comparing models

** TODO

Match Penny's parameter values (she gets good discontinuity)
Explore multiple synapses and stim location (glutSpread and glutLoc)
Read Major and Schilling articles for journal club
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Work on article

** Match Penny's parameter values

Now I need to match parameters with Penny's detailed model:
    https://bitbucket.org/peng_gao_penny/eee_detailed_model

She gets good discontinuity and good time to first spike

Her current commit: 
3daf0f9  Add sample data and updated simulation file

*** From CA229.py:

    """
    CA229.py    : Reconstructed morphology of prefrontal layer V pyramidal cell from
       Acker, Antic (2008)

    Original    :
    https://senselab.med.yale.edu/ModelDB/ShowModel.cshtml?model=117207&file=/acker_antic/Model/CA%20229.hoc#tabs-2
    Modified by : Peng (Penny) Gao <penggao.1987@gmail.com>
    Dec 01, 2017

    The cell class has 3d morphology structure infomation.
    They can be placed in a network (logical 3d location).
    """
    import sys
    from neuron import h, gui
    from matplotlib import pyplot
    from math import sqrt, pi, log, exp

    #########################################
    # Parameters
    #########################################
    # Cell passive properties
    global_Ra=90
    spineFACTOR = 1.5
    somaRm = 1000/0.04
    dendRm = somaRm/spineFACTOR
    somaCm = 1
    dendCm = somaCm*spineFACTOR
    spinedist = 50 # distance at which spines start
    Vk = -105 # -80
    VNa = 60 #55 # 60
    pasVm = -85 #-89 #-90 #-65

    # Specify cell biophysics
    somaNa = 900  # [pS/um2]
    axonNa = 5000  # [pS/um2]
    basalNa = 150  # [pS/um2]
    mNa = 0.5  # decrease in sodium channel conductance in basal dendrites [pS/um2/um]
    apicalNa = 375
    gNamax = 2000  # maximum basal sodium conductance
    vshiftna = -10

    somaKv = 40 # somatic, apical, and initial basal Kv conductance
    mKV = 0  # increase in KV conductance in basal dendrites
    gKVmax = 500  # maximum basal KV conductance
    axonKv = 100
    somaKA = 150  # initial basal total GKA conductance [pS/um2] equals somatic
    mgka = 0.7  # linear rise in IA channel density
    mgkaratio = 1./300 # linear drop in KAP portion, 1 at soma
    apicalKA = 300 # apical total GKA conductance
    gkamax = 2000  # pS/um2

    somaCa = 10 # total calcium channel conductance density of soma [pS/um^2]
    dendCa = 2 # dendritic total calcium conductance density
    cadist = 30  # dendritic calcium channel conductance equals that of soma up until this distance
    gcaratio = 0.2 #portion of gHVA to gHVA+gIT total, 1 is all HVA, 0 is all IT#
    gkl = 0.005
    ILdist = 15

    #############kBK.mod
    kBK_gpeak = 7.67842640257e-05 # original value of 268e-4 too high for this model
    kBK_caVhminShift = 45.0 # shift upwards to get lower effect on subthreshold


    #########################################
    # Set up the CA229 cell class
    #########################################

    class CA229:
        """
        A detailed model of Prefrontal layer V pyramidal neuron in Rat.

        Channel distributions and all other biophysical properties of model basal
        dendrites of prefrontal layer V pyramidal cell from Acker, Antic (2008)
        Membrane Exitability and Action Potential Backpropagation in Basal Dendrites
        of Prefrontal Cortical Pyramidal Neurons.

        soma: soma compartments (soma[0] - soma[3])
        apical: apical dendrites (apical[0] - apical[44])
        basal: basal dendrites (basal[0] - basal[35])
        basals: SectionList of all basal but excluing basal[16]
        axon: SectionList of basal[16] (basal[16] is modeled as axon here)
        all: SectionList of all the above compartments
        """
        def __init__(self):
            self.create_cell()
            self.add_axon()
            self.optimize_nseg()
            self.add_all()
            self.addsomachan()
            self.addapicalchan()
            self.addbasalchan()
            self.addaxonchan()
            self.gna_control()
            self.distCa()
            self.distKV()
            self.distKA()
            self.distspines()
            self.add_ih()
            self.add_CaK()

        def geom_nseg (self):
            # local freq, d_lambda, before, after, tmp
            # these are reasonable values for most models
            freq = 100 # Hz, frequency at which AC length constant will be computed
            d_lambda = 0.05
            before = 0
            after = 0
            for sec in self.all: before += sec.nseg
            #soma area(0.5) # make sure diam reflects 3d points
            for sec in self.all:
                # creates the number of segments per section
                # lambda_f takes in the current section
                sec.nseg = int((sec.L/(d_lambda*self.lambda_f(sec))+0.9)/2)*2 + 1
            for sec in self.all: after += sec.nseg
            print "geom_nseg: changed from ", before, " to ", after, " total segments"

        def lambda_f (self, section):
            # these are reasonable values for most models
            freq = 100
            # The lowest number of n3d() is 2
            if (section.n3d() < 2):
                return 1e5*sqrt(section.diam/(4*pi*freq*section.Ra*section.cm))
            # above was too inaccurate with large variation in 3d diameter
            # so now we use all 3-d points to get a better approximate lambda
            x1 = section.arc3d(0)
            d1 = section.diam3d(0)
            self.lam = 0
            #print section, " n3d:", section.n3d(), " diam3d:", section.diam3d(0)
            for i in range(section.n3d()): #h.n3d()-1
                x2 = section.arc3d(i)
                d2 = section.diam3d(i)
                self.lam += (x2 - x1)/sqrt(d1 + d2)
                x1 = x2
                d1 = d2
                #  length of the section in units of lambda
            self.lam *= sqrt(2) * 1e-5*sqrt(4*pi*freq*section.Ra*section.cm)
            return section.L/self.lam

        def optimize_nseg (self):
            """
            Set up nseg
            """
            # Set up Ra and cm first, since the nseg calculation depends on the value of Ra and cm
            for sec in self.all:
                sec.Ra = global_Ra
                sec.cm = 1

            self.geom_nseg()

            for sec in self.all:
                sec.insert('vmax')

        def add_axon(self):
            """
            Set up the SectionLists and temporal axon branch.
            """
            self.all = h.SectionList()
            self.all_no_axon = h.SectionList()
            for section in self.soma:
                self.all.append(sec = section)
                self.all_no_axon.append(sec = section)
            for section in self.basal:
                self.all.append(sec = section)
            for section in self.apical:
                self.all.append(sec = section)
                self.all_no_axon.append(sec = section)
            self.basals = h.SectionList()
            self.axon = h.SectionList()
            self.axon.append(sec = self.basal[16])
            for section in self.basal:
                self.basals.append(sec = section)
            self.basals.remove(sec = self.basal[16])
            for section in self.basals:
                self.all_no_axon.append(sec = section)

        def add_all(self):
            for sec in self.all:
                sec.insert('pas')
                sec.e_pas = pasVm
                sec.insert('na')
                sec.insert('na_ion')
                sec.insert('k_ion')
                sec.ena = VNa
                h.vshift_na = vshiftna
                sec.ek = Vk
                sec.insert('kv')


            for sec in self.all_no_axon:
                sec.insert('kap')
                sec.insert('ca')
                sec.insert('it')  # Properties from CaT.mod
                sec.vh1_it = 56
                sec.vh2_it = 415
                sec.ah_it = 30
                sec.v12m_it = 45
                sec.v12h_it = 65
                sec.am_it = 3
                sec.vshift_it = 10
                sec.vm1_it = 50
                sec.vm2_it = 125
                sec.insert('ca_ion')
                sec.eca = 140
                h.vshift_ca = 10
                sec.insert('cad')
                h.taur_cad = 100


        def addsomachan(self):
            for sec in self.soma:
                sec.cm = somaCm
                sec.g_pas = 1./somaRm
                # if h.ismembrane('na', sec = sec):
                #     sec.ena = VNa
                #     h.vshift_na = vshiftna
                # if h.ismembrane ('ca_ion', sec = sec):
                #     sec.eca = 140
                #     h.ion_style("ca_ion", 0, 1, 0, 0, 0)
                #     h.vshift_ca = 10

        def addapicalchan(self):
            for sec in self.apical:
                sec.insert('kad')

        def addbasalchan(self):
            for sec in self.basals:
                sec.insert('kad')

        def addaxonchan(self):
            for sec in self.axon:
                sec.cm = somaCm
                sec.g_pas = 1./somaRm
                h.thi1_na = -58
                h.thi2_na = -58

                sec.insert('kl')
                h.distance(0,0.5,sec=self.soma[0])
                for seg in sec.allseg():
                    dist = h.distance(seg.x, sec=sec)
                    if (dist>= ILdist):
                        sec(seg.x).gbar_kl = gkl
                    else:
                        sec(seg.x).gbar_kl = 0

    #########################################
    # Distribution of sodium channels
    #########################################
        def gna_control(self):
            for sec in self.soma:
                sec.gbar_na = somaNa

            for sec in self.basals:
                h.distance(0, 0.5, sec = self.soma[0])
                for seg in sec.allseg():
                    dist = h.distance(seg.x, sec = sec)
                    gNalin = basalNa - mNa * dist
                    if (gNalin > gNamax):
                        gNalin = gNamax
                        print "Setting basal Na to maximum ",gNamax,
                        " at distance ",dist," in basal dendrite ", sec.name()
                    elif (gNalin < 0):
                        gNalin = 0
                        print "Setting basal Na to zero at distance ",dist,
                        " in basal dendrite ",sec.name()
                    sec(seg.x).gbar_na = gNalin

            for sec in self.axon:
                sec.gbar_na = axonNa

            for sec in self.apical:
                sec.gbar_na = apicalNa

    #########################################
    # Distribution of potassium channels
    #########################################
        def distKV(self):
            for sec in self.soma:
                sec.gbar_kv = somaKv

            for sec in self.basals:
                h.distance(0,0.5,sec=self.soma[0])
                for seg in sec.allseg():
                    dist = h.distance(seg.x, sec=sec)
                    gKVlin = somaKv + mKV * dist
                    if (gKVlin > gKVmax):
                        gKVlin = gKVmax
                        print "Setting basal GKV to maximum ",gKVmax," at distance ",dist," in basal dendrite",sec.name()
                    elif (gKVlin < 0):
                        gKVlin = 0
                        print "Setting basal GKV to zero at distance ",dist," in basal dendrite ",sec.name()
                    sec(seg.x).gbar_kv = gKVlin

            for sec in self.axon:
                sec.gbar_kv = axonKv

            for sec in self.apical:
                sec.gbar_kv = somaKv

    #########################################
    # Distribution of potassium channels
    #########################################
        def distKA(self):

            for sec in self.soma:
                gkabar_kap = somaKA/1e4

            for sec in self.basals:
                h.distance(0,0.5,sec=self.soma[0])
                for seg in sec.allseg():
                    dist = h.distance(seg.x, sec=sec)
                    gkalin = somaKA + mgka*dist
                    ratiolin = 1 - mgkaratio*dist
                    if (ratiolin < 0):
                        ratio = 0
                    else:
                        ratio = ratiolin

                    if (gkalin > gkamax):
                        gkalin = gkamax
                        print "Setting GKA to maximum ",gkamax," in basal dendrite",sec.name()
                    elif (gkalin < 0):
                        gkalin = 0
                        print "Setting GKA to 0 in basal dendrite",sec.name()
                    sec(seg.x).gkabar_kap = gkalin * ratio/1e4
                    sec(seg.x).gkabar_kad = gkalin * (1-ratio)/1e4

            for sec in self.apical:
                h.distance(0,0.5,sec=self.soma[0])
                for seg in sec.allseg():
                    dist = h.distance(seg.x, sec=sec)
                    ratiolin = 1 - mgkaratio*dist
                    if (ratiolin < 0):
                        ratio = 0
                    else:
                        ratio = ratiolin
                    sec(seg.x).gkabar_kap = apicalKA*ratio/1e4
                    sec(seg.x).gkabar_kad = apicalKA*(1-ratio)/1e4

    #########################################
    # Distribution of Ca channels
    #########################################
        def distCa(self):
            for sec in self.soma:
                sec.gbar_ca = somaCa * gcaratio
                sec.gbar_it = somaCa *(1-gcaratio)/1e4

            for sec in self.basals:
                h.distance(0,0.5,sec = self.soma[0])
                for seg in sec.allseg():
                    dist = h.distance(seg.x, sec = sec)
                    if (dist > cadist):
                        sec(seg.x).gbar_ca = dendCa * gcaratio
                        sec(seg.x).gbar_it = dendCa * (1-gcaratio)/1e4
                    else:
                        sec(seg.x).gbar_ca = somaCa * gcaratio
                        sec(seg.x).gbar_it = somaCa * (1-gcaratio)/1e4

            for sec in self.apical:
                h.distance(0,0.5,sec = self.soma[0])
                for seg in sec.allseg():
                    dist = h.distance(seg.x, sec=sec)
                    if (dist > cadist):
                        sec(seg.x).gbar_ca = dendCa * gcaratio
                        sec(seg.x).gbar_it = dendCa * (1-gcaratio)/1e4
                    else:
                        sec(seg.x).gbar_ca = somaCa * gcaratio
                        sec(seg.x).gbar_it = somaCa * (1-gcaratio)/1e4

    #########################################
    # Distribution of spines on dendrites (This should be optimized!!!)
    #########################################
        def distspines(self):
            for sec in self.basals:
                h.distance(0,0.5,sec = self.soma[0])
                for seg in sec.allseg():
                    dist = h.distance(seg.x, sec=sec)
                    if (dist >= spinedist):
                        sec(seg.x).cm = dendCm
                        sec(seg.x).g_pas = 1./dendRm
                    else:
                        sec(seg.x).cm = somaCm
                        sec(seg.x).g_pas = 1./somaRm

            for sec in self.apical:
                h.distance(0,0.5,sec = self.soma[0])
                for seg in sec.allseg():
                    dist = h.distance(seg.x, sec=sec)
                    if (dist >= spinedist):
                        sec(seg.x).cm = dendCm
                        sec(seg.x).g_pas = 1./dendRm
                    else:
                        sec(seg.x).cm = somaCm
                        sec(seg.x).g_pas = 1./somaRm

    #########################################
    # Add Ih channels
    #########################################
        def add_ih(self):
            for sec in self.soma:
                sec.insert('Ih')
                sec.gIhbar_Ih = 0.0001

            for sec in self.basals:
                sec.insert('Ih')
                sec.gIhbar_Ih = 0.0001

            for sec in self.apical:
                sec.insert('Ih')
                h.distance(0,0.5,sec=self.soma[0])
                for seg in sec.allseg():
                    dist = h.distance(seg.x, sec=sec)
                    sec(seg.x).gIhbar_Ih = 0.0002*(-0.8696 + 2.0870*exp(dist/323))

    #########################################
    # Add calcium activated potassium current
    #########################################
        # def add_SK(self):
        #     for sec in self.soma:
        #         sec.insert('SK_E2')
        #         sec.gSK_E2bar_SK_E2 = 0.00024 #0.0024 #0.00441
        #     # for sec in self.basals:
        #     #     sec.insert('SK_E2')
        #     #     sec.gSK_E2bar_SK_E2 = 0.0004 #0.0024 #0.00441
        #     for sec in self.apical:
        #         sec.insert('SK_E2')
        #         sec.gSK_E2bar_SK_E2 = 0.0012

        def add_CaK(self):
            for sec in self.apical:
                sec.insert('kBK')
                sec.gpeak_kBK = kBK_gpeak
                sec.caVhmin_kBK = -46.08 + kBK_caVhminShift
            for sec in self.basals:
                sec.insert('kBK')
                sec.gpeak_kBK = kBK_gpeak
                sec.caVhmin_kBK = -46.08 + kBK_caVhminShift
            for sec in self.soma:
                sec.insert('kBK')
                sec.gpeak_kBK = kBK_gpeak
                sec.caVhmin_kBK = -46.08 + kBK_caVhminShift


*** Cloning Penny's repo

graham-mac% mkdir penny
graham-mac% cd penny
graham-mac% git clone https://joewgraham@bitbucket.org/peng_gao_penny/eee_detailed_model.git

graham-mac% cd eee_detailed_model/
graham-mac% python compile.py

Making a Google doc to hold param values:
https://docs.google.com/spreadsheets/d/1rUO0jQG911CQ1BegZy2rf1-t301rNgw297KcKoNzSTg/edit#gid=0

Penny's g Na in the soma is:
900 pS/um2

Simple model g Na in the soma is:
0.0345117294903 mho/cm2

Converting 900 pS/um2 to mho/cm2 gives us:
0.09 mho/cm2


** List of currents 

Same currents in detailed and simplified models:
  ih
  na/nax
  pas

Calcium currents:
  Det         Simp
    ca          cadad
    cad         cal
    it (CaT)    can

Potassium currents:
  Det         Simp
    kBK         kBk
    kap         kap
    kad         kdmc
    kl          kdr
    kv         

Now need to figure out which of these are different models of the same channels.


* 2018-02-06 -- EEE Meeting and Comparing models

** TODO

Match Penny's parameter values (she gets good discontinuity)
Explore multiple synapses and stim location (glutSpread and glutLoc)
Read Major and Schilling articles for journal club
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Work on article

** Chat with Penny

    joe [4:54 PM]
    Hey Penny, I’m going through your detailed model so I can match parameter values.  I’ve got a few questions…
    It looks like you’re using Ih?  I thought we had decided not to use Ih in the model because Srdjan didn’t like it?
    Are you using physical spines?  It looks like maybe you’re applying synapses on basal dendrite but faking spines with the spineFACTOR parameter?
    No hurry.

    penny [7:20 PM]
    Hey Joe, yay, I was playing with ih and BK channel for a while but it turns neither of them plays a role in the jump from subthreshold to suprathreshold. You are right, srdjan didn’t like it that much.
    Physical spines do not work very well on the detailed model yet. I am just using faking spines with spineFACTOR for now
    I tried to remove multiple parameters, none of them is critical for the jump so far… I am guessing the key one would be the NMDA receptors. But we are using the same NMDA mod file. So I am not sure what would be the key here:disappointed:
    Maybe try membrane resistance and axis resistance?

    joe [6:00 AM]
    Thanks Penny, I’ll try playing around with those.

** Compare currents between models

Trying to see if we are using the same currents even with diff mod files.

*** Sodium current

Detailed model:

    na      na.mod        "Sodium channel, Hodgkin-Huxley style kinetics"

Simple model:

    nax     nax_BS.mod    "Na current for axon. No slow inact."

Comments:

    Slightly different implementation.  Need to find out what vshift does --
    Penny uses a value of -10 in detailed model while simple model may have 
    same thing (called sh) but it's set to 0 

*** Calcium currents and handling

Detailed model:

    cad     Cad.mod     "decay of internal calcium concentration"
    ca      ca.mod      "HVA Ca current"
    it      Cat.mod     "T-type Ca channel"

Simple model:

    cadad   cadad.mod     "Fast mechanism for submembranal Ca++ concentration (cai)"
    cal     cal_mig.mod   "L-type calcium channel with [Ca]i inactivation"
    can     can_mig.mod   "n-type calcium channel"

Unused in the Simple model:

    cadyn   cadyn.mod     "simple first-order model of calcium dynamics"
    canin   canin.mod     "N-type calcium channel"
    catcb   catcb.mod     "t-type calcium channel with high threshold for activation"
    cat     cat_mig       "T-type calcium channel"

Calcium channel types:

HVA -- high voltage activated -- L-type, N-type, P-type
LVA -- low voltage activated  -- T-type


*** Potassium currents

Detailed model:  

    kBK     kBk.mod       "large-conductance calcium-activated potassium channel (BK)"         
    kap     kaprox.mod    "K-A channel from Klee Ficker and Heinemann"  
    kad     kadist.mod    "K-A channel from Klee Ficker and Heinemann"    
    kl      IL.mod        "K-A channel from Klee Ficker and Heinemann"    
    kv      kv.mod        "Potassium channel, Hodgkin-Huxley style kinetics"

Simple model:

    kBK     kBk.mod       "large-conductance calcium-activated potassium channel (BK)"
    kap     kap_BS.mod    "K-A channel from Klee Ficker and Heinemann"
    kdmc    kdmc_BS.mod   "K-D channel with activation for motor cortex"
    kdr     kdr_BS.mod    "K-DR channel"


** Compare parameter values between models

Working here:
https://docs.google.com/spreadsheets/d/1rUO0jQG911CQ1BegZy2rf1-t301rNgw297KcKoNzSTg/edit#gid=0

*** Calcium handling

Detailed model uses Cad.mod (suffix cad), while simple model uses cadad.mod 
(suffix cadad), which are slightly different.

Here's a note from top of cadad.mod:
    : This mechanism is compatible with the calcium pump "cad" and has the 
    : same name and parameters; however the parameters specific to the pump
    : are dummy here.

Values are different:
    
Detailed:
    
    taur  = 15  (ms)    : Ca decay from Sabatini 2002, uses kb/
    cainf = 100e-6(mM)  : will be adjusted during init phase

Simple:

    taur  = 5 (ms)    : rate of calcium removal
    cainf = 2.4e-4  (mM)

Need to talk about Calcium in meeting.  

Detailed model uses gcaratio to split Ca between HVA and IT (which is LVA)
    
    gcaratio = 0.2 #portion of gHVA to gHVA+gIT total, 1 is all HVA, 0 is all IT#

        for sec in self.soma:
            sec.gbar_ca = somaCa * gcaratio
            sec.gbar_it = somaCa *(1-gcaratio)/1e4

Why is the 1e4 in there?

Simple model doesn't have LVA Calcium channels...  Simple model has L and N type
Calcium channels (both HVA).  Maybe we need LVA calcium channels?  Ask in meeting.

** EEE Meeting

- Srdjan wants to submit article in 7 to 10 days

- Bill asks to incorporate experimental data (better journal, better comparison
  with reality)

- Srdjan expects spillover delay of 10 to 20 ms

- TTX increases the plateau amplitude, opposite of simple model

- Penny's model is looking good!  (Slight problem with plateau shape -- extended
  hump)

- Srdjan would like noise in simulations, then plot averages (with errorbars)

- Penny is using random delays in NMDA (0-8ms, 0-25ms) and spillover (8-12ms, 12-50ms)

- Oikonomou 2012 (looks like citation for data Srdjan was showing -- get article)

- We want to find out why plateau duration changes with location of glut stim
  (duration should be the same)

- Penny wonders what 100 data points at threshold would do to discontinuity

- We like Ih now, Penny is using again, seems not to affect plateaus

- I will use Penny's mods in the simple model and go from there

- I will analyze simple model without and with physical spines

changeset:   511:6136d58d2e3a

** Using Penny's mods

Copying over batch directory 

Removing old analyses.



* 2018-02-07 -- Using detailed mods in simple model

** TODO

Use Penny's mods and parameter values (she gets good discontinuity)
Explore multiple synapses and stim location (glutSpread and glutLoc)
Read Major and Schilling articles for journal club
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Work on article

** Update Penny's repo

graham-mac% cd penny/eee_detailed_model/
graham-mac% git status
On branch master
Your branch is up-to-date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)

  CA229.pyc
  Data_02_06/
  mod/x86_64/
  utils.pyc
  x86_64

nothing added to commit but untracked files present (use "git add" to track)
graham-mac% git pull
remote: Counting objects: 16, done.
remote: Compressing objects: 100% (16/16), done.
remote: Total 16 (delta 11), reused 0 (delta 0)
Unpacking objects: 100% (16/16), done.
From https://bitbucket.org/peng_gao_penny/eee_detailed_model
   3daf0f9..1e43059  master     -> origin/master
Updating 3daf0f9..1e43059
Fast-forward
 Analysis_for_plateau_duration.py | 184 ++++++++++---------
 Analysis_for_trace_location.py   | 265 +++++++++++++-------------
 CA229.py                         | 123 +++++++++----
 Experiment_new.py                | 232 +++++++++++++++++++++++
 Experiment_no_spines.py          |  71 ++++---
 Platamp_TTX.py                   | 152 +++++++++++++++
 README.md                        |  20 +-
 analysis_utils.py                |  24 +++
 mod/Ca_HVA.mod                   |  72 ++++++++
 mod/Cad.mod                      |  19 +-
 mod/na.mod                       |   2 +-
 stdrun.hoc                       | 746 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 utils.py                         |  37 +---
 13 files changed, 1619 insertions(+), 328 deletions(-)
 create mode 100644 Experiment_new.py
 create mode 100644 Platamp_TTX.py
 create mode 100644 mod/Ca_HVA.mod
 create mode 100644 stdrun.hoc
graham-mac% 


** Running a preliminary batch of glut stims

To see how changing mod files affects model behavior

Two batches actually: 
  1) a range of glut stims
  2) back-propagating APs



* 2018-02-08 -- Using detailed mods in simple model

** TODO

Use Penny's mods and parameter values (she gets good discontinuity)
Explore multiple synapses and stim location (glutSpread and glutLoc)
Read Major and Schilling articles for journal club
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Work on article

** Set up two batches two run after every change

1) a range of glutAmp stims
2) back-propagating action potentials into basal dendrite

Working in batch_20180207

Updating cfg_bAP to match cfg

Using the following batch to find spike threshold for current clamp 

    # Varying ampIClamp1
    batch = {}
    batch["label"] = "ampIClamp1"
    batch["cfgFile"] = "cfg_bAP.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["ampIClamp1"] = [3.0, 5.0, 7.0, 9.0]
    batch["params"] = params
    batches[batch["label"]] = batch

3.0 is too low.  Using 5.0 works.

Running the following code runs the sims and analysis for a range of glutamate
amplitudes and back-propagating action potentials:

    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180207/ ; ./runmybatches ; ipython -i analyze.py

changeset:   513:f16ea0b0f69d

** Remove spines from simple model

Penny's detailed model doesn't have physical spines, she uses a "spineFACTOR"
to adjust membrane resistance and capacitance to mimic effect of spines.

So it doesn't seem to make sense having physical spines on the simplified model.

I will remove the spines, apply the glutamate stimulation to the dendritic shaft
at the same distance where the spine is currently stimmed.

Then I'll run batches to see the effect on plats and baps. 

Copying eee7ps.py to eee7.py and making necessary changes.

Updating netParams and cfg

Running this command:
    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180207/ ; ./runmybatches ; ipython -i analyze.py

Generates the sims and analysis for eee7, our model but without spines again.

changeset:   514:c765d1c910de

bAP still looks good, higher glutAmps now cause depol blockade.


* 2018-02-12 -- Playing with detailed model

** TODO

Use Penny's mods and parameter values (she gets good discontinuity)
Explore multiple synapses and stim location (glutSpread and glutLoc)
Read Major and Schilling articles for journal club
Email Srdjan to ask for data/figure
Figure out a way to find glutAmps that match plat thresholds 
Work on article


** Setting up detailed model in Netpyne

I am going to implement Penny's model / experiment in Netpyne.  Then I can use
my bAP and glutAmp batches and analyses to explore her model systematically.

Copying my existing version of Penny's code to my desktop (some of her older
experiments have interesting code I'd like to look at) and updating the 
eee_detailed_model dir in my eee dir.

    graham-mac% cd /u/graham/projects/eee/sim
    graham-mac% rm -r penny
    graham-mac% git clone https://bitbucket.org/peng_gao_penny/eee_detailed_model
    graham-mac% hg addremove
    graham-mac% hg commit -m "Updated detailed model repo"

changeset:   515:00f162ac5682

Compiling Penny's mod files:
    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/
    graham-mac% ipython compile.py
    graham-mac% mkdir netpyne

I am going to use eee_utils.make_symlinks(filepath, linkpath) to symlink the 
necessary files:

filepaths = [

    '/u/graham/projects/eee/sim/batches/analyze.py',
    '/u/graham/projects/eee/sim/batches/batch_init.py',
    '/u/graham/projects/eee/sim/batches/instantiate.py',
    '/u/graham/projects/eee/sim/batches/runmybatches',
    '/u/graham/projects/eee/sim/eee_detailed_model/x86_64']

linkpaths = [

    '/u/graham/projects/eee/sim/eee_detailed_model/netpyne',
    '/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap',
    '/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp']

Performing linkage:

    graham-mac% eee
    graham-mac% ipython
    In [1]: import eee_utils
    In [2]: filepaths = [
       ...: 
       ...:     '/u/graham/projects/eee/sim/batches/analyze.py',
       ...:     '/u/graham/projects/eee/sim/batches/batch_init.py',
       ...:     '/u/graham/projects/eee/sim/batches/instantiate.py',
       ...:     '/u/graham/projects/eee/sim/batches/runmybatches',
       ...:     '/u/graham/projects/eee/sim/eee_detailed_model/x86_64']
       ...: 
       ...: linkpaths = [
       ...: 
       ...:     '/u/graham/projects/eee/sim/eee_detailed_model/netpyne',
       ...:     '/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap',
       ...:     '/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp']
       ...: 
    In [3]: eee_utils.make_symlinks(filepaths, linkpaths)
    Executing: os.symlink(/u/graham/projects/eee/sim/batches/analyze.py, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/analyze.py)
    Executing: os.symlink(/u/graham/projects/eee/sim/batches/analyze.py, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/analyze.py)
    Executing: os.symlink(/u/graham/projects/eee/sim/batches/analyze.py, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/analyze.py)
    Executing: os.symlink(/u/graham/projects/eee/sim/batches/batch_init.py, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_init.py)
    Executing: os.symlink(/u/graham/projects/eee/sim/batches/batch_init.py, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/batch_init.py)
    Executing: os.symlink(/u/graham/projects/eee/sim/batches/batch_init.py, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/batch_init.py)
    Executing: os.symlink(/u/graham/projects/eee/sim/batches/instantiate.py, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/instantiate.py)
    Executing: os.symlink(/u/graham/projects/eee/sim/batches/instantiate.py, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/instantiate.py)
    Executing: os.symlink(/u/graham/projects/eee/sim/batches/instantiate.py, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/instantiate.py)
    Executing: os.symlink(/u/graham/projects/eee/sim/batches/runmybatches, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/runmybatches)
    Executing: os.symlink(/u/graham/projects/eee/sim/batches/runmybatches, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/runmybatches)
    Executing: os.symlink(/u/graham/projects/eee/sim/batches/runmybatches, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/runmybatches)
    Executing: os.symlink(/u/graham/projects/eee/sim/eee_detailed_model/x86_64, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/x86_64)
    Executing: os.symlink(/u/graham/projects/eee/sim/eee_detailed_model/x86_64, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/x86_64)
    Executing: os.symlink(/u/graham/projects/eee/sim/eee_detailed_model/x86_64, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/x86_64)
    In [4]: 

That seems to have worked fine.

Copying cfg.py/cfg_bAP.py, netParams.py, and my_batches.py over from:
    /u/graham/projects/eee/sim/batches/batch_20180207

To:
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp

Also need to symlink the cell model over to the new batch dirs.

filepath = ['/u/graham/projects/eee/sim/eee_detailed_model/CA229.py']
linkpaths = [

    '/u/graham/projects/eee/sim/eee_detailed_model/netpyne',
    '/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap',
    '/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp']

    graham-mac% ipython
    In [1]: filepath = ['/u/graham/projects/eee/sim/eee_detailed_model/CA229.py']
       ...: linkpaths = [
       ...: 
       ...:     '/u/graham/projects/eee/sim/eee_detailed_model/netpyne',
       ...:     '/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap',
       ...:     '/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp']
       ...: 

    In [2]: import eee_utils
    In [3]: eee_utils.make_symlinks(filepath, linkpaths)
    Executing: os.symlink(/u/graham/projects/eee/sim/eee_detailed_model/CA229.py, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/CA229.py)
    Executing: os.symlink(/u/graham/projects/eee/sim/eee_detailed_model/CA229.py, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/CA229.py)
    Executing: os.symlink(/u/graham/projects/eee/sim/eee_detailed_model/CA229.py, /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/CA229.py)
    In [4]: 

Okay, so all the files should be in place now.  I will commit and then modify 
the files as needed to run the detailed model.

changeset:   516:950a7ed5b54b


** Running detailed model through Netpyne

Now I need to modify the new files to work with the detailed model.

*** Previous config file for detailed model

    """
    cfg.py 
    """

    from netpyne import specs
    import numpy as np

    cfg = specs.SimConfig()  

    ###############################################################################
    #
    # SIMULATION CONFIGURATION
    #
    ###############################################################################

    cfg.checkErrors = True
    cfg.temp = 666

    ###############################################################################
    # Run parameters
    ###############################################################################
    cfg.duration = 1200 
    cfg.dt = 0.05
    cfg.seeds = {'conn': 4321, 'stim': 1234, 'loc': 4321} 
    cfg.hParams = {'celsius': cfg.temp, 'v_init': -80} 
    cfg.verbose = 0
    cfg.cvode_active = False
    cfg.printRunTime = 0.1
    cfg.printPopAvgRates = True


    ###############################################################################
    # Recording 
    ###############################################################################
    cfg.recordTraces = {'V_soma': {'sec': 'soma_2', 'loc': 0.5, 'var': 'v'}}
    cfg.recordTraces['V_Bdend_0.8'] = {'sec': 'basal_34', 'loc': 0.8, 'var': 'v'}
    cfg.recordTraces['V_Bdend_0.5'] = {'sec': 'basal_34', 'loc': 0.5, 'var': 'v'}
    cfg.recordTraces['V_Bdend_0.3'] = {'sec': 'basal_34', 'loc': 0.3, 'var': 'v'}

    cfg.recordCells = ['all']
    cfg.recordStims = False  
    cfg.recordStep = 0.1 


    ###############################################################################
    # Saving
    ###############################################################################
    cfg.simLabel = 'detailed_model'
    cfg.saveFolder = 'batch_data'
    cfg.savePickle = False
    cfg.saveJson = True
    cfg.saveDataInclude = ['simData', 'simConfig', 'netParams', 'net']


    ###############################################################################
    # Analysis and plotting 
    ###############################################################################
    cfg.analysis['plotTraces'] = {'include': ['all'], 'oneFigPer': 'cell', 'saveFig': True, 
                                  'showFig': False, 'figSize': (10,8), 'timeRange': [0,cfg.duration]}


    ###############################################################################
    # Parameters
    ###############################################################################

    # Sodium and potassium conductance scaling
    cfg.dendNaScale = 1.0 # Scales dendritic Na conductance
    cfg.dendKScale  = 1.0 # Scales dendritic K  conductance
    cfg.allNaScale  = 1.0 # Scales all Na conductances (overrides dendNaScale if not commented)
    cfg.allKScale   = 1.0 # Scales all K  conductances (overrides dendKScale  if not commented)

    # DMS NMDA params
    cfg.NMDAAlphaScale = 1.0 # Scales original value of 4.0
    cfg.NMDABetaScale  = 20.0 #1.0 # Scales original value of 0.0015 (by 20 = 0.03)
    cfg.NMDACdurScale  = 1.0 # Scales original value of 1.0
    cfg.NMDACmaxScale  = 1.0 # Scales original value of 1.0
    cfg.NMDAgmax       = 0.05 #1.0
    cfg.ratioAMPANMDA  = 2.0

    # # glutamate stim parameters
    # cfg.glutAmp    = 0.007  # weight supplied to NMDAr and AMPAr
    # cfg.glutLoc    = 0.3    # fraction of branch, not microns
    # cfg.glutSpread = 10.0   # microns, diameter of glutamate puff
    # cfg.glutDelay  = 1.0    # ms/um delay in glutamate activation
    # cfg.glutDecay  = 10.0   # %/um decrease in glutamate amplitude 
     
    # # spillover params
    # cfg.spillDelay    = 10.0 # (ms) time to reach dendritic shaft
    # cfg.spillFraction = 0.0  # (%)  percent of glutamate weight that reaches shaft

    # glutamate and spillover parameters for Penny's model
    cfg.syn_num        = 8 
    cfg.syn_weight     = 1.0
    cfg.syn_startloc   = 0.5
    cfg.syn_endloc     = 0.7
    cfg.syn_delay      = 10.0

    cfg.exsyn_num      = 8
    cfg.exsyn_weight   = cfg.syn_weight
    cfg.exsyn_startloc = 0.4
    cfg.exsyn_endloc   = 0.7
    cfg.exsyn_delay    = 10.0

    cfg.syn_locs   = list(np.linspace(cfg.syn_startloc, cfg.syn_endloc, cfg.syn_num))
    cfg.exsyn_locs = list(np.linspace(cfg.exsyn_startloc, cfg.exsyn_endloc, cfg.exsyn_num))

    ###############################################################################
    # NetStim inputs 
    ###############################################################################
    cfg.addNetStim = 1

    # Synaptic glutamate (NMDA and AMPA)
    cfg.NetStim1 = {'pop': 'PT5', 'synsPerConn': cfg.syn_num, 'loc': cfg.syn_locs, 'sec': 'basal_34', 'synMech': ['NMDA','AMPA'], 'start': 100, 'interval': 10, 'noise': 0.0, 'number': 1, 'weight': [cfg.syn_weight, cfg.syn_weight], 'delay': cfg.syn_delay}

    # Extrasynaptic glutamate (NMDA)
    cfg.NetStim2 = {'pop': 'PT5', 'synsPerConn': cfg.exsyn_num, 'loc': cfg.exsyn_locs, 'sec': 'basal_34', 'synMech': ['NMDA'], 'start': 100, 'interval': 10, 'noise': 0.0, 'number': 1, 'weight': [cfg.exsyn_weight], 'delay': cfg.exsyn_delay}

*** Previous netParams file for detailed model:

    """
    netParams.py 
    Specifications for EEE model using NetPyNE

    Originally:
    High-level specifications for M1 network model using NetPyNE
    Contributors: salvadordura@gmail.com
    """

    from netpyne import specs
    import os
    import numpy as np
    from neuron import h

    # Find path to cells directory
    curpath = os.getcwd()
    while os.path.split(curpath)[1] != "eee_detailed_model":
        curpath = os.path.split(curpath)[0]
    cellpath = curpath
    print(os.path.join(cellpath, 'CA229_PFC.py'))

    try:
        from __main__ import cfg  # import SimConfig object with params from parent module
    except:
        from cfg import cfg  # if no simConfig in parent module, import directly from cfg module

    ###############################################################################
    # NETWORK PARAMETERS
    ###############################################################################

    netParams = specs.NetParams()   # object of class NetParams to store the network parameters
    netParams.defaultThreshold = -20.0

    ###############################################################################
    # Cell parameters
    ###############################################################################

    # EEE cell model with uniform spine distribution (7 comps)
    #cellRule = netParams.importCellParams(label='eee7us', conds={'cellType': 'eee7us', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7us.py'), cellName='eee7us')

    # EEE cell model with physiological spine distribution (7 comps)
    #cellRule = netParams.importCellParams(label='eee7ps', conds={'cellType': 'eee7ps', 'cellModel': 'HH_reduced'}, fileName=os.path.join(cellpath, 'eee7ps.py'), cellName='eee7ps')

    # Detailed EEE cell model
    cellRule = netParams.importCellParams(label='PT5_detailed', conds={'cellType': 'PT5B', 'cellModel': 'PFC_full'}, fileName=os.path.join(cellpath, 'CA229_PFC.py'), cellName='MakeCA229')

    # define section lists
    cellRule['secLists']['alldend'] = ['Bdend1', 'Bdend2', 'Adend1', 'Adend2', 'Adend3']
    cellRule['secLists']['apicdend'] = ['Adend1', 'Adend2', 'Adend3']
    cellRule['secLists']['basaldend'] = ['Bdend1', 'Bdend2']
    cellRule['secLists']['stimheads'] = []
    cellRule['secLists']['stimnecks'] = []

    # apply values to parameters
    activeSpines = {}
    for cell_label, cell_params in netParams.cellParams.iteritems():

        for secName,sec in cell_params['secs'].iteritems(): 

            sec['vinit'] = -67.3  # set vinit for all secs
            
            # if hasattr(cfg, 'allNaScale') or hasattr(cfg, 'dendNaScale'):
            #     if 'nax' in sec['mechs']:
            #         orig_nax = sec['mechs']['nax']['gbar']
            #         print
            #         print(secName)
            #         print("orig nax gbar")
            #         print(orig_nax)
            #         if hasattr(cfg, 'dendNaScale'):
            #             print('dendNaScale = %s' % (str(cfg.dendNaScale)))
            #             sec['mechs']['nax']['gbar'] = cfg.dendNaScale * orig_nax       
            #         if hasattr(cfg, 'allNaScale'):
            #             print('allNaScale = %s' % (str(cfg.allNaScale)))
            #             sec['mechs']['nax']['gbar'] = cfg.allNaScale * orig_nax
            #         print(sec['mechs']['nax']['gbar'])
            
            # if hasattr(cfg, 'allKScale') or hasattr(cfg, 'dendKScale'):
            #     if 'kdr' in sec['mechs']:
            #         orig_kdr = sec['mechs']['kdr']['gbar']
            #         print
            #         print(secName)
            #         print("orig kdr gbar")
            #         print(orig_kdr)
            #         if hasattr(cfg, 'dendKScale'):
            #             print('dendKScale = %s' % (str(cfg.dendKScale)))
            #             sec['mechs']['kdr']['gbar'] = cfg.dendKScale * orig_kdr
            #         if hasattr(cfg, 'allKScale'):
            #             print('allKScale = %s' % (str(cfg.allKScale)))
            #             sec['mechs']['kdr']['gbar'] = cfg.allKScale * orig_kdr
            #         print(sec['mechs']['kdr']['gbar'])
                
            #     if 'kap' in sec['mechs']:
            #         orig_kap = sec['mechs']['kap']['gbar']
            #         print
            #         print(secName)
            #         print("orig kap gbar")
            #         print(orig_kap)
            #         if hasattr(cfg, 'dendKScale'):
            #             print('dendKScale = %s' % (str(cfg.dendKScale)))
            #             sec['mechs']['kap']['gbar'] = cfg.dendKScale * orig_kap
            #         if hasattr(cfg, 'allKScale'):
            #             print('allKScale = %s' % (str(cfg.allKScale)))
            #             sec['mechs']['kap']['gbar'] = cfg.allKScale * orig_kap
            #         print(sec['mechs']['kap']['gbar'])
            
            

    ###############################################################################
    # Population parameters
    ###############################################################################

    #netParams.popParams['eee7us']= {'cellModel':'HH_reduced', 'cellType':'eee7us', 'numCells':1}
    #netParams.popParams['eee7ps']= {'cellModel':'HH_reduced', 'cellType':'eee7ps', 'numCells':1}
    netParams.popParams['PT5']  = {'cellModel': 'PFC_full', 'cellType': 'PT5B', 'numCells': 1} 


    ###############################################################################
    # Synaptic mechanism parameters
    ###############################################################################

    netParams.synMechParams['NMDA'] = {'mod': 'NMDA', 'Cdur': cfg.NMDACdurScale * 1.0, 'Cmax': cfg.NMDACmaxScale * 1.0, 'Alpha': cfg.NMDAAlphaScale * 4.0, 'Beta': cfg.NMDABetaScale * 0.0015}

    netParams.synMechParams['AMPA'] = {'mod': 'AMPA'}

    h.gmax_NMDA = cfg.NMDAgmax
    h.gmax_AMPA = cfg.ratioAMPANMDA * cfg.NMDAgmax

    print
    print("=======================================================")
    print("h.celsius:")
    print(h.celsius)
    print("cfg.temp:")
    print(cfg.temp)
    print("cfg.hParams['celsius']:")
    print(cfg.hParams['celsius'])

    # print 
    # print("h.celsius = cfg.temp")
    # h.celsius = cfg.temp
    # print
    # print("h.celsius:")
    # print(h.celsius)
    # print("cfg.temp:")
    # print(cfg.temp)
    # print("cfg.hParams['celsius']:")
    # print(cfg.hParams['celsius'])

    print
    print("cfg.hParams['celsius'] = cfg.temp")
    cfg.hParams['celsius'] = cfg.temp
    print
    print("h.celsius:")
    print(h.celsius)
    print("cfg.temp:")
    print(cfg.temp)
    print("cfg.hParams['celsius']:")
    print(cfg.hParams['celsius'])


    print("=======================================================")
    print
    print

    ###############################################################################
    # NetStim inputs
    ###############################################################################
    if cfg.addNetStim:
        
        for nslabel in [k for k in dir(cfg) if k.startswith('NetStim')]:
            ns = getattr(cfg, nslabel, None)

            # add stim source
            netParams.stimSourceParams[nslabel] = {'type': 'NetStim', 'start': ns['start'], 'interval': ns['interval'], 'noise': ns['noise'], 'number': ns['number']}

            # connect stim source to target
            for i in range(len(ns['synMech'])):
                netParams.stimTargetParams[nslabel+'_'+ns['pop']+'_'+ns['synMech'][i]] = \
                    {'source': nslabel, 'conds': {'pop': ns['pop']}, 'sec': ns['sec'], 'synsPerConn': ns['synsPerConn'], 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': cfg.syn_weight, 'delay': ns['delay']}


*** Back-propagating APs in detailed model

Working in /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/

Here's Penny's recordings (Bnum = 34):

    ###########################################
    ### Recording
    ###########################################
    t_vec = h.Vector()
    t_vec.record(h._ref_t)
    v_vec_soma = h.Vector()
    v_vec_dend1 = h.Vector()
    v_vec_dend2 = h.Vector()
    v_vec_dend3 = h.Vector()

    v_vec_soma.record(Cell.soma[2](0.5)._ref_v)
    v_vec_dend1.record(Cell.basal[Bnum](0.8)._ref_v)
    v_vec_dend2.record(Cell.basal[Bnum](0.5)._ref_v)
    v_vec_dend3.record(Cell.basal[Bnum](0.3)._ref_v)

Here's my original recordings:

    cfg.recordTraces = {'V_soma': {'sec': 'soma', 'loc': 0.5, 'var': 'v'}}

    for loc in np.arange(0.1, 1.1, 0.1):
        locstr = str(loc).replace(".","")
        cfg.recordTraces['V_Bdend1_' + locstr] = {'sec': 'Bdend1', 'loc': loc, 'var': 'v'}

My new recordings:

    cfg.recordTraces = {'V_soma': {'sec': 'soma[2]', 'loc': 0.5, 'var': 'v'}}

    for loc in np.arange(0.1, 1.1, 0.1):
        locstr = str(loc).replace(".","")
        cfg.recordTraces['V_Bdend1_' + locstr] = {'sec': 'basal[34]', 'loc': loc, 'var': 'v'}

    cfg.recordCells = ['eeeD']
    cfg.IClamp1 = {'pop': ['eeeD'], 'sec': 'soma[2]', 'loc': 0.5, 'start': 200, 'dur': cfg.durIClamp1, 'amp': cfg.ampIClamp1}

    from cfg import cfg
    -->
    from cfg_bap import cfg

Now working in netParams

    # Detailed EEE cell model
    #cellRule = netParams.importCellParams(label='PT5_detailed', conds={'cellType': 'PT5B', 'cellModel': 'PFC_full'}, fileName=os.path.join(cellpath, 'CA229_PFC.py'), cellName='MakeCA229')
    cellRule = netParams.importCellParams(label='eeeD', conds={'cellType': 'eeeD', 'cellModel': 'PFC_full'}, fileName='CA229_PFC.py', cellName='MakeCA229')

Changing all cfg_bap to cfg

Put this into CA229.py:

    ############################################
    # Function for importing cell into NetPyNE
    ############################################
        def MakeCA229 ():
            cell = CA229()
            cell.init_once()
            return cell

Penny made some updates and there is no longer an init_once, just an __init__

Changed to this (at the end of the file, outside the cell definition) and it works:

    ############################################
    # Function for importing cell into NetPyNE
    ############################################
    def MakeCA229():
        cell = CA229()
        return cell

Now getting an error in netParams with sim setup, so we're looking good.

    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/netParams.py in <module>()
        113         if hasattr(cfg, 'RmScale'):
        114             if "neck" not in secName and "head" not in secName:
    --> 115                 sec['mechs']['pas']['g'] = (1.0/cfg.RmScale) * sec['mechs']['pas']['g']
        116 
        117         if hasattr(cfg, 'e_pas'):

    TypeError: can't multiply sequence by non-int of type 'float'

Yeah, problem is that some segs have different Na conductances in diff secs

I'm going to comment out the unnecessary stuff.

Yeah, now I get an error indicating I need to rename stuff the way Penny did,
e.g. K now includes Kap, KbK, etc., and Nax is now Na

Scaling the Na and K now works.

Getting a Netpyne error:

    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    <ipython-input-1-02d695d843ec> in <module>()
    ----> 1 execfile('/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/batch_init.py')

    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/batch_init.py in <module>()
         25 
         26 # instantiate network cells based on defined populations
    ---> 27 sim.net.createCells()
         28 
         29 # create connections between cells based on params

    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in createCells(self)
         74 
         75         for ipop in self.pops.values(): # For each pop instantiate the network cells (objects of class 'Cell')
    ---> 76             newCells = ipop.createCells() # create cells for this pop using Pop method
         77             self.cells.extend(newCells)  # add to list of cells
         78             sim.pc.barrier()

    /usr/site/nrniv/local/python/netpyne/netpyne/pop.pyc in createCells(self)
         56         # create cells based on fixed number of cells
         57         elif 'numCells' in self.tags:
    ---> 58             cells = self.createCellsFixedNum()
         59 
         60         # create cells based on density (optional ynorm-dep)

    /usr/site/nrniv/local/python/netpyne/netpyne/pop.pyc in createCellsFixedNum(self)
        136                 else:
        137                     cellTags['params']['spkTimes'] = self.tags['spkTimes'] # 1D list (same for all)
    --> 138             cells.append(self.cellModelClass(gid, cellTags)) # instantiate Cell object
        139 
        140             if sim.cfg.verbose: print('Cell %d/%d (gid=%d) of pop %s, on node %d, '%(i, sim.net.params.scale * self.tags['numCells']-1, gid, self.tags['pop'], sim.rank))

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in __init__(self, gid, tags, create, associateGid)
        226         self.secLists = Dict()  # dict of sectionLists
        227 
    --> 228         if create: self.create()  # create cell
        229         if associateGid: self.associateGid() # register cell for this node
        230 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in create(self)
        257                     self.createPyStruct(prop)
        258                 if sim.cfg.createNEURONObj:
    --> 259                     self.createNEURONObj(prop)  # add sections, mechanisms, synaptic mechanisms, geometry and topolgy specified by this property set
        260 
        261 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in createNEURONObj(self, prop)
        421                                 mechParamValueFinal = mechParamValue[iseg]
        422                             if mechParamValueFinal is not None:  # avoid setting None values
    --> 423                                 setattr(getattr(seg, mechName), mechParamName,mechParamValueFinal)
        424 
        425             # add ions

    ValueError: must be a double

    In [2]: 

Putting it a try/except in Netpyne:

    setattr(getattr(seg, mechName), mechParamName,mechParamValueFinal)
    -->
    try:
        setattr(getattr(seg, mechName), mechParamName,mechParamValueFinal)
    except:
        print("##########" * 10)
        print(mechName)
        print(mechParamName)
        print(mechParamValueFinal)
        print
        setattr(getattr(seg, mechName), mechParamName,mechParamValueFinal)

Output:

    ####################################################################################################
    kad
    gkabar
    [ 0.00624113  0.00734816  0.00851992  0.00975642  0.01173255]

Hmmm...  This problem may be because I used arrays instead of lists when 
scaling the currents...  I'm going to try getting 'em back into lists.

Yeah, turns out multiplying an array by a float returns a float, not an array.

Finally fixed that problem by forcing the arrays to have a minimum dimension of
one.  Problem is, that puts single values into a list, which Netpyne handles
differently than a single value...

    ---------------------------------------------------------------------------
    IndexError                                Traceback (most recent call last)
    <ipython-input-1-02d695d843ec> in <module>()
    ----> 1 execfile('/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/batch_init.py')

    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/batch_init.py in <module>()
         25 
         26 # instantiate network cells based on defined populations
    ---> 27 sim.net.createCells()
         28 
         29 # create connections between cells based on params

    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in createCells(self)
         74 
         75         for ipop in self.pops.values(): # For each pop instantiate the network cells (objects of class 'Cell')
    ---> 76             newCells = ipop.createCells() # create cells for this pop using Pop method
         77             self.cells.extend(newCells)  # add to list of cells
         78             sim.pc.barrier()

    /usr/site/nrniv/local/python/netpyne/netpyne/pop.pyc in createCells(self)
         56         # create cells based on fixed number of cells
         57         elif 'numCells' in self.tags:
    ---> 58             cells = self.createCellsFixedNum()
         59 
         60         # create cells based on density (optional ynorm-dep)

    /usr/site/nrniv/local/python/netpyne/netpyne/pop.pyc in createCellsFixedNum(self)
        136                 else:
        137                     cellTags['params']['spkTimes'] = self.tags['spkTimes'] # 1D list (same for all)
    --> 138             cells.append(self.cellModelClass(gid, cellTags)) # instantiate Cell object
        139 
        140             if sim.cfg.verbose: print('Cell %d/%d (gid=%d) of pop %s, on node %d, '%(i, sim.net.params.scale * self.tags['numCells']-1, gid, self.tags['pop'], sim.rank))

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in __init__(self, gid, tags, create, associateGid)
        226         self.secLists = Dict()  # dict of sectionLists
        227 
    --> 228         if create: self.create()  # create cell
        229         if associateGid: self.associateGid() # register cell for this node
        230 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in create(self)
        257                     self.createPyStruct(prop)
        258                 if sim.cfg.createNEURONObj:
    --> 259                     self.createNEURONObj(prop)  # add sections, mechanisms, synaptic mechanisms, geometry and topolgy specified by this property set
        260 
        261 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.pyc in createNEURONObj(self, prop)
        419                         for iseg,seg in enumerate(sec['hSec']):  # set mech params for each segment
        420                             if type(mechParamValue) in [list]:
    --> 421                                 mechParamValueFinal = mechParamValue[iseg]
        422                             if mechParamValueFinal is not None:  # avoid setting None values
        423                                 try:

    IndexError: list index out of range

I can either return a float from a float or a list from a list in my code, or 
I can try to have Netpyne handle single value lists differently...

Seems safer to handle it in my code, but the fix in Netpyne would be simple, 
and should be a general improvement...

Making improvement in Netpyne, starting at line 420:
    
    if type(mechParamValue) in [list]: 
        mechParamValueFinal = mechParamValue[iseg]
    
    -->

    if type(mechParamValue) in [list]: 
        if len(mechParamValue) == 1: 
            mechParamValueFinal = mechParamValue[0]
        else:
            mechParamValueFinal = mechParamValue[iseg]

Now attempting to run and analyze:

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/ ; ./runmybatches ; ipython -i analyze.py

That works!  Need to reduce iClamp amplitude, but it works!

changeset:   517:a885b4230ece


** Getting Netpyne improvement into Netpyne

Following directions here:
https://docs.google.com/document/d/1mM1KlucucOYUYDGSP4GSP0A0zqUEKdfwOYt-Tu5jO28/edit#

Work:

    graham-mac% mkdir netpyne_temp
    graham-mac% cd netpyne temp
    cd: Too many arguments.
    graham-mac% cd netpyne_temp
    graham-mac% git clone https://github.com/joewgraham/netpyne.git
    Cloning into 'netpyne'...
    remote: Counting objects: 11157, done.
    remote: Compressing objects: 100% (137/137), done.
    remote: Total 11157 (delta 116), reused 126 (delta 60), pack-reused 10960
    Receiving objects: 100% (11157/11157), 41.08 MiB | 1.13 MiB/s, done.
    Resolving deltas: 100% (7884/7884), done.
    graham-mac% 
    graham-mac% : copied over my cell.py to netpyne/cell.py
    graham-mac% 
    graham-mac% git status
    fatal: Not a git repository (or any of the parent directories): .git
    graham-mac% 
    graham-mac% 
    graham-mac% cd netpyne
    graham-mac% git branch
    * development
    graham-mac% 
    graham-mac% 
    graham-mac% 
    graham-mac% git status
    On branch development
    Your branch is up-to-date with 'origin/development'.

    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)

      modified:   netpyne/.DS_Store
      modified:   netpyne/cell.py

    no changes added to commit (use "git add" and/or "git commit -a")
    graham-mac%  git diff
    diff --git a/netpyne/.DS_Store b/netpyne/.DS_Store
    index 35b2161..f797eb6 100644
    Binary files a/netpyne/.DS_Store and b/netpyne/.DS_Store differ
    diff --git a/netpyne/cell.py b/netpyne/cell.py
    index a4bb756..16b3b4a 100644
    --- a/netpyne/cell.py
    +++ b/netpyne/cell.py
    @@ -418,7 +418,10 @@ class CompartCell (Cell):
                             mechParamValueFinal = mechParamValue
                             for iseg,seg in enumerate(sec['hSec']):  # set mech params for each segment
                                 if type(mechParamValue) in [list]: 
    -                                mechParamValueFinal = mechParamValue[iseg]
    +                                if len(mechParamValue) == 1: 
    +                                    mechParamValueFinal = mechParamValue[0]
    +                                else:
    +                                    mechParamValueFinal = mechParamValue[iseg]
                                 if mechParamValueFinal is not None:  # avoid setting None values
                                     setattr(getattr(seg, mechName), mechParamName,mechParamValueFinal)
                                 
    graham-mac% 
    graham-mac% 
    graham-mac% git add netpyne/cell.py
    graham-mac% 
    graham-mac% git status
    On branch development
    Your branch is up-to-date with 'origin/development'.

    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)

      modified:   netpyne/cell.py

    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)

      modified:   netpyne/.DS_Store

    graham-mac% 
    graham-mac% git commit -m "In cell.py, now if mechParamValue is a single-item list, it uses that value for all segs in sec (used to be if mechParamValue was a list, it had to be the length of the number of secs)."
    [development 76d7341] In cell.py, now if mechParamValue is a single-item list, it uses that value for all segs in sec (used to be if mechParamValue was a list, it had to be the length of the number of secs).
     1 file changed, 4 insertions(+), 1 deletion(-)
    graham-mac% 
    graham-mac% git remote add upstream https://github.com/Neurosim-lab/netpyne.git 
    graham-mac% git fetch upstream
    From https://github.com/Neurosim-lab/netpyne
     * [new branch]      development                -> upstream/development
     * [new branch]      documentation              -> upstream/documentation
     * [new branch]      fixPlotShape               -> upstream/fixPlotShape
     * [new branch]      master                     -> upstream/master
     * [new branch]      metadata                   -> upstream/metadata
     * [new branch]      metadata_update_1_4_18     -> upstream/metadata_update_1_4_18
     * [new branch]      neuroml_export             -> upstream/neuroml_export
     * [new branch]      neuroml_export_test_random -> upstream/neuroml_export_test_random
     * [new branch]      new_fixes_1_4_18           -> upstream/new_fixes_1_4_18
     * [new branch]      py2to3_easy                -> upstream/py2to3_easy
     * [new branch]      py3                        -> upstream/py3
     * [new branch]      py3_pg                     -> upstream/py3_pg
     * [new branch]      travis_test                -> upstream/travis_test
    graham-mac% git merge upstream/development
    Already up-to-date.
    graham-mac% 
    graham-mac% 
    graham-mac% git remote show origin
    * remote origin
      Fetch URL: https://github.com/joewgraham/netpyne.git
      Push  URL: https://github.com/joewgraham/netpyne.git
      HEAD branch: development
      Remote branches:
        development                tracked
        documentation              tracked
        fixPlotShape               tracked
        master                     tracked
        metadata                   tracked
        metadata_update_1_4_18     tracked
        neuroml_export             tracked
        neuroml_export_test_random tracked
        new_fixes_1_4_18           tracked
        py2to3_easy                tracked
        py3                        tracked
        py3_pg                     tracked
        travis_test                tracked
      Local branch configured for 'git pull':
        development merges with remote development
      Local ref configured for 'git push':
        development pushes to development (fast-forwardable)
    graham-mac% 
    graham-mac% git push
    Counting objects: 4, done.
    Delta compression using up to 8 threads.
    Compressing objects: 100% (4/4), done.
    Writing objects: 100% (4/4), 517 bytes | 517.00 KiB/s, done.
    Total 4 (delta 3), reused 0 (delta 0)
    remote: Resolving deltas: 100% (3/3), completed with 3 local objects.
    To https://github.com/joewgraham/netpyne.git
       f70792b..76d7341  development -> development
    graham-mac% 
    graham-mac% 
    graham-mac% : created a pull request at github
    graham-mac% 


** Pushing improved misc.h back to Neurosim

    Last login: Mon Feb 12 14:50:19 on ttys001
    graham-mac% cd /usr/site/nrniv/local
    graham-mac% hg status
    M mod/misc.h
    graham-mac% 
    graham-mac% hg diff
    diff -r 36212e0ba9d5 mod/misc.h
    --- a/mod/misc.h  Tue Dec 05 17:15:44 2017 -0500
    +++ b/mod/misc.h  Mon Feb 12 14:51:09 2018 -0700
    @@ -1,134 +1,136 @@
    -// $Id: misc.h,v 1.38 2011/11/02 15:26:48 billl Exp $
    -
    -#include <stdlib.h>
    -#include <math.h>
    -#include <limits.h> /* contains LONG_MAX */
    -#include <time.h>
    -#include <sys/time.h> 
    -#include <values.h>
    -#include <pthread.h>
    -
    -#if !defined(t)
    -  #define _pval pval
    -#endif
    -
    -typedef struct LISTVEC {
    -  int isz;
    -  Object* pL;
    -  double** pv;
    -  unsigned int* plen;
    -  unsigned int* pbuflen;
    -} ListVec;
    -
    -typedef struct BVEC {
    - int size;
    - int bufsize;
    - short *x;
    - Object* o;
    -} bvec;
    -
    -#define BYTEHEADER int _II__;  char *_IN__; char _OUT__[16]; int BYTESWAP_FLAG=0;
    -#define BYTESWAP(_X__,_TYPE__) \
    -    if (BYTESWAP_FLAG == 1) { \
    - _IN__ = (char *) &(_X__); \
    - for (_II__=0;_II__<sizeof(_TYPE__);_II__++) { \
    -   _OUT__[_II__] = _IN__[sizeof(_TYPE__)-_II__-1]; } \
    - (_X__) = *((_TYPE__ *) &_OUT__); \
    -    }
    -
    -#define UNCODE(_X_,_J_,_Y_) {(_Y_)=floor((_X_)/sc[(_J_)])/sc[4]; \
    -                             (_Y_)=floor(sc[4]*((_Y_)-floor(_Y_))+0.5);}
    -#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
    -#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
    -
    -//square root of 2 * PI
    -#define SQRT2PI 2.5066282746310002416
    -//ln(2), base e log of 2
    -#define LG2 0.69314718055994530941723212145818
    -#define VRRY 200
    -#define ISVEC(_OB__) (strncmp(hoc_object_name(_OB__),"Vector",6)==0)
    -#define dmaxuint 4294967295. // for 32 bits
    -
    -// Andre Fentons cast designations
    -typedef  unsigned char ui1;  /* one byte unsigned integer */
    -typedef  char    si1;  /* one byte signed integer */
    -typedef unsigned short ui2;  /* two byte unsigned integer */
    -typedef short    si2;  /* two byte signed integer */
    -typedef unsigned int ui4;  /* four byte unsigned integer */ 
    -typedef int    si4;  /* four byte signed integer */ 
    -typedef float    sf4;  /* four byte signed floating point number */ 
    -typedef double   sf8;  /* eight byte signed floating point number */ 
    -
    -extern double ERR,GET,SET,OK,NOP,ALL,NEG,POS,CHK,NOZ,GTH,GTE,LTH,LTE,EQU;
    -extern double EQV,EQW,EQX,NEQ,SEQ,RXP,IBE,EBI,IBI,EBE;
    -
    -extern double *vector_newsize();
    -extern unsigned int  dcrsz;
    -extern double       *dcr;
    -extern double       *dcrset(int);
    -extern unsigned int  scrsz;
    -extern unsigned int *scr;
    -extern unsigned int *scrset(int);
    -extern unsigned int  iscrsz;
    -extern int *iscr;
    -extern int *iscrset(int);
    -extern double BVBASE;
    -extern double* hoc_pgetarg();
    -extern void hoc_notify_iv();
    -extern double hoc_call_func(Symbol*, int narg);
    -extern FILE* hoc_obj_file_arg(int narg);
    -extern Object** hoc_objgetarg();
    -char *gargstr();
    -char** hoc_pgargstr();
    -extern void vector_resize();
    -extern int vector_instance_px();
    -extern void* vector_arg();
    -extern double* vector_vec();
    -extern int vector_buffer_size(void*);
    -extern double hoc_epsilon;
    -extern int stoprun;
    -extern void set_seed();
    -extern void dshuffle(double* x,int nx);
    -extern void mcell_ran4_init(u_int32_t);
    -extern double mcell_ran4(u_int32_t *idx1, double *x, unsigned int n, double range);
    -extern int nrn_mlh_gsort();
    -extern int ivoc_list_count(Object*);
    -extern Object* ivoc_list_item(Object*, int);
    -extern int list_vector_px2();
    -extern int hoc_is_double_arg(int narg);
    -extern int hoc_is_str_arg(int narg);
    -extern int hoc_is_object_arg(int narg);
    -extern int hoc_is_pdouble_arg(int narg);
    -extern Symbol *hoc_get_symbol(char *);
    -extern Symbol *hoc_lookup(const char*);
    -extern Point_process* ob2pntproc(Object*);
    -
    -extern char* hoc_object_name(Object*);
    -extern int cmpdfn();
    -extern int openvec(int, double **);
    -int list_vector_px();
    -double *list_vector_resize();
    -static void hxe() { hoc_execerror("",0); }
    -extern void FreeListVec(ListVec** pp);
    -extern ListVec* AllocListVec(Object* p);
    -extern ListVec* AllocILV(Object*, int, double *);
    -void FillListVec(ListVec* p,double dval);
    -void ListVecResize(ListVec* p,int newsz);
    -extern short *nrn_artcell_qindex_;
    -extern double nrn_event_queue_stats(double*);
    -extern void clear_event_queue();
    -
    -static double sc[6];
    -static FILE*  testout;
    -
    -//* in vecst.mod
    -extern int** getint2D(int rows,int cols);
    -extern void freeint2D(int*** ppp,int rows);
    -extern double** getdouble2D(int rows,int cols);
    -extern void freedouble2D(double*** ppp,int rows);
    -extern double ismono1 (double *x, int n, int flag);
    -
    -//* in stats.mod
    -double kcorfast(double* input1, double* input2, double* i1d , double* i2d,int n,double* ps);
    -double Rktau (double* x, double* y, int n); // R version
    -double kcorfast (double* input1, double* input2, double* i1d , double* i2d,int n,double* ps);
    +// $Id: misc.h,v 1.38 2011/11/02 15:26:48 billl Exp $
    +
    +#include <stdlib.h>
    +#include <math.h>
    +#include <limits.h> /* contains LONG_MAX */
    +#include <time.h>
    +#include <pthread.h>
    +
    +#if !defined(t)
    +  #define _pval pval
    +#endif
    +
    +typedef struct LISTVEC {
    +  int isz;
    +  Object* pL;
    +  double** pv;
    +  unsigned int* plen;
    +  unsigned int* pbuflen;
    +} ListVec;
    +
    +typedef struct BVEC {
    + int size;
    + int bufsize;
    + short *x;
    + Object* o;
    +} bvec;
    +
    +#define BYTEHEADER int _II__;  char *_IN__; char _OUT__[16]; int BYTESWAP_FLAG=0;
    +#define BYTESWAP(_X__,_TYPE__) \
    +    if (BYTESWAP_FLAG == 1) { \
    + _IN__ = (char *) &(_X__); \
    + for (_II__=0;_II__<sizeof(_TYPE__);_II__++) { \
    +   _OUT__[_II__] = _IN__[sizeof(_TYPE__)-_II__-1]; } \
    + (_X__) = *((_TYPE__ *) &_OUT__); \
    +    }
    +
    +#define UNCODE(_X_,_J_,_Y_) {(_Y_)=floor((_X_)/sc[(_J_)])/sc[4]; \
    +                             (_Y_)=floor(sc[4]*((_Y_)-floor(_Y_))+0.5);}
    +#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
    +#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
    +
    +//square root of 2 * PI
    +#define SQRT2PI 2.5066282746310002416
    +//ln(2), base e log of 2
    +#define LG2 0.69314718055994530941723212145818
    +#define VRRY 200
    +#define ISVEC(_OB__) (strncmp(hoc_object_name(_OB__),"Vector",6)==0)
    +#define dmaxuint 4294967295. // for 32 bits
    +
    +// Andre Fentons cast designations
    +typedef  unsigned char ui1;  /* one byte unsigned integer */
    +typedef  char    si1;  /* one byte signed integer */
    +typedef unsigned short ui2;  /* two byte unsigned integer */
    +typedef short    si2;  /* two byte signed integer */
    +typedef unsigned int ui4;  /* four byte unsigned integer */ 
    +typedef int    si4;  /* four byte signed integer */ 
    +typedef float    sf4;  /* four byte signed floating point number */ 
    +typedef double   sf8;  /* eight byte signed floating point number */ 
    +
    +extern double ERR,GET,SET,OK,NOP,ALL,NEG,POS,CHK,NOZ,GTH,GTE,LTH,LTE,EQU;
    +extern double EQV,EQW,EQX,NEQ,SEQ,RXP,IBE,EBI,IBI,EBE;
    +
    +extern double *vector_newsize();
    +extern unsigned int  dcrsz;
    +extern double       *dcr;
    +extern double       *dcrset(int);
    +extern unsigned int  scrsz;
    +extern unsigned int *scr;
    +extern unsigned int *scrset(int);
    +extern unsigned int  iscrsz;
    +extern int *iscr;
    +extern int *iscrset(int);
    +extern double BVBASE;
    +extern double* hoc_pgetarg();
    +extern void hoc_notify_iv();
    +extern double hoc_call_func(Symbol*, int narg);
    +extern FILE* hoc_obj_file_arg(int narg);
    +extern Object** hoc_objgetarg();
    +char *gargstr();
    +char** hoc_pgargstr();
    +extern void vector_resize();
    +extern int vector_instance_px();
    +extern void* vector_arg();
    +extern double* vector_vec();
    +extern int vector_buffer_size(void*);
    +extern double hoc_epsilon;
    +extern int stoprun;
    +extern void set_seed();
    +extern void dshuffle(double* x,int nx);
    +extern int nrn_mlh_gsort();
    +extern int ivoc_list_count(Object*);
    +extern Object* ivoc_list_item(Object*, int);
    +extern int list_vector_px2();
    +extern int hoc_is_double_arg(int narg);
    +extern int hoc_is_str_arg(int narg);
    +extern int hoc_is_object_arg(int narg);
    +extern int hoc_is_pdouble_arg(int narg);
    +extern Symbol *hoc_get_symbol(char *);
    +extern Symbol *hoc_lookup(const char*);
    +extern Point_process* ob2pntproc(Object*);
    +
    +extern char* hoc_object_name(Object*);
    +extern int cmpdfn();
    +extern int openvec(int, double **);
    +int list_vector_px();
    +double *list_vector_resize();
    +static void hxe() { hoc_execerror("",0); }
    +extern void FreeListVec(ListVec** pp);
    +extern ListVec* AllocListVec(Object* p);
    +extern ListVec* AllocILV(Object*, int, double *);
    +void FillListVec(ListVec* p,double dval);
    +void ListVecResize(ListVec* p,int newsz);
    +extern short *nrn_artcell_qindex_;
    +extern double nrn_event_queue_stats(double*);
    +extern void clear_event_queue();
    +
    +static double sc[6];
    +static FILE*  testout;
    +
    +//* in vecst.mod
    +extern int** getint2D(int rows,int cols);
    +extern void freeint2D(int*** ppp,int rows);
    +extern double** getdouble2D(int rows,int cols);
    +extern void freedouble2D(double*** ppp,int rows);
    +extern double ismono1 (double *x, int n, int flag);
    +
    +//* in stats.mod
    +double kcorfast(double* input1, double* input2, double* i1d , double* i2d,int n,double* ps);
    +double Rktau (double* x, double* y, int n); // R version
    +double kcorfast (double* input1, double* input2, double* i1d , double* i2d,int n,double* ps);
    +
    +
    +
    +
    +
    +
    graham-mac% hg commit -m "Replaced misc.h with a copy from here: https://senselab.med.yale.edu/ModelDB/showmodel.cshtml?model=185858&file=/CaHDemo/misc.mod#tabs-2"
    graham-mac% 
    graham-mac% 
    graham-mac% 
    graham-mac% hgpush
    pushing to ssh://no.neurosim.downstate.edu//u/graham/projects/eee/
    searching for changes
    abort: repository is unrelated
    Warning: No xauth data; using fake authentication data for X11 forwarding.
    0 files updated, 0 files merged, 0 files removed, 0 files unresolved
    graham-mac% 
    graham-mac% 
    graham-mac% 
    graham-mac% 
    graham-mac% hg push
    pushing to ssh://no.neurosim.downstate.edu//usr/site/nrniv/local
    searching for changes
    remote: adding changesets
    remote: adding manifests
    remote: adding file changes
    remote: added 1 changesets with 1 changes to 1 files
    remote: 1 files updated, 0 files merged, 0 files removed, 0 files unresolved
    graham-mac% 



** Back to working with detailed model

file:gif/20180212_150401.png

Need to figure out why membranes don't return to baseline (probably not enough
potassium to repolarize)

Also need to figure out why bAP amplitude comparison plot is blank.

Figured out amplitude comparison problem: had to specify branch (diff branch 
name in detailed model -- Bdend1 in simp, basal_34 in detailed)

file:gif/20180212_170300.png

The amplitude comparisons look a bit weird, will have to ask in the meeting
about which K gets blocked, etc.  Should also look at original article Srdjan
sent showing bAPs to see the details.

changeset:   518:875410ae92ac


** Getting glutAmp batches working with detailed model in Netpyne

Working in /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/

Getting an error:

    ---------------------------------------------------------------------------
    LookupError                               Traceback (most recent call last)
    <ipython-input-1-76a40cd56a51> in <module>()
    ----> 1 execfile('/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/batch_init.py')

    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/batch_init.py in <module>()
         31 
         32 # add network stimulation
    ---> 33 sim.net.addStims()
         34 
         35 # setup variables to record for each cell (spikes, V traces, etc)

    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in addStims(self)
        163 
        164                         if source['type'] == 'NetStim':
    --> 165                             self._addCellStim(params, postCell)  # call method to add connections (sort out synMechs first)
        166                         else:
        167                             postCell.addStim(params)  # call cell method to add connection

    /usr/site/nrniv/local/python/netpyne/netpyne/network.pyc in _addCellStim(self, stimParam, postCell)
        205             params['delay'] = finalParam['delaySynMech']
        206 
    --> 207             postCell.addStim(params=params)
        208 
        209 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.py in addStim(self, params)
       1023                 'seed': params['seed'] if 'seed' in params else sim.cfg.seeds['stim']}
       1024 
    -> 1025             self.addConn(connParams, netStimParams)
       1026 
       1027 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.py in addConn(self, params, netStimParams)
        728         # Add synaptic mechanisms
        729         if not pointp: # check not a point process
    --> 730             synMechs, synMechSecs, synMechLocs = self._setConnSynMechs(params, secLabels)
        731             if synMechs == -1: return
        732 

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.py in _setConnSynMechs(self, params, secLabels)
       1205 
       1206         # add synaptic mechanism to section based on synMechSecs and synMechLocs (if already exists won't be added)
    -> 1207         synMechs = [self.addSynMech(synLabel=params['synMech'], secLabel=synMechSecs[i], loc=synMechLocs[i]) for i in range(synsPerConn)]
       1208 
       1209         return synMechs, synMechSecs, synMechLocs

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.py in addSynMech(self, synLabel, secLabel, loc)
        625                                 print(synParamValue)
        626                                 print(synMech['hSyn'])
    --> 627                                 setattr(synMech['hSyn'], synParamName, synParamValue)
        628                         elif synParamName == 'selfNetcon':  # create self netcon required for some synapses (eg. homeostatic)
        629                             secLabelNetCon = synParamValue.get('sec', 'soma')

    LookupError: 'Cmax' is not a defined hoc variable name.

    In [2]: 

It looks like Penny doesn't have Cmax added as a RANGE variable in her NMDA mod.

I'll remove Cmax from my options...

Running glutAmp batch works now!

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/ ; ./runmybatches ; ipython -i analyze.py

Plateaus look a bit funny, but I haven't put Penny's NMDA/AMPA synapse properties 
and locations in yet.

changeset:   519:2e771311b684


** Matching Penny's glut stim in Netpyne

In cfg.py:

    # glutamate stim parameters
    cfg.numSyns           = 9
    cfg.numExSyns         = 9
    cfg.glutAmp           = 0.01
    cfg.glutAmpExSynScale = 1.0
    cfg.synLocStart       = 0.2
    cfg.synLocStop        = 0.6
    cfg.synDelay          = 12.5
    cfg.exSynDelay        = 15.0

Now to connect it in netParams.py

        # connect stim source to target
        for i in range(len(ns['synMech'])):
            # netParams.stimTargetParams[nslabel+'_'+cur_pop+'_'+ns['synMech'][i]] = \
            #     {'source': nslabel, 'conds': {'pop': ns['pop']}, 'sec': ns['sec'], 'synsPerConn': 1, 'loc': ns['loc'], 'synMech': ns['synMech'][i], 'weight': ns['weight'][i], 'delay': ns['delay']}
            netParams.stimTargetParams[nslabel+'_'+cur_pop+'_'+ns['synMech'][i]] = \
                {'source': nslabel, 'conds': {'pop': ns['pop']}, 'sec': ns['sec'], 'synsPerConn': cfg.numSyns, 'loc': list(np.linspace(cfg.synLocStart, cfg.synLocStop, cfg.numSyns)), 'synMech': ns['synMech'][i], 'weight': cfg.glutAmp, 'delay': ns['delay']}

Plateau measurements are weird.  I changed vinit to epas and that fixed the problem.

Time to put in the extrasynaptic stuff.

Seems to be working now.

I haven't randomized the delay like Penny has, should try that tomorrow.

Things look pretty good, except plateau is longer than expected. Trying to 
reduce plateau duration tonight

First thing tomorrow, I need to work on getting the simplified morphology to 
replace the detailed morphology.

graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/ ; rm -r batch_data ; mkdir batch_data ; rm -r batch_figs ; mkdir batch_figs ; ./runmybatches ; ipython -i analyze.py

** Mac preview quick look

It continually stops working.  Solution is:
https://apple.stackexchange.com/questions/259504/quicklook-not-working

Open the Terminal application (/Applications/Utilities/Terminal.app)
Type qlmanage -r and hit enter
Type qlmanage -r cache and hit enter
Close Terminal and restart your system

I am going to add an alias to my tcshrc file.

alias qlfix 'qlmanage -r ; qlmanage -r cache ; killall Finder /System/Library/CoreServices/Finder.app'

That works!



* 2018-02-13 -- EEE Meeting 

** TODO

Get simple morphology to replace detailed
Explore multiple synapses and stim location (glutSpread and glutLoc)
Read Major and Schilling articles for journal club
Figure out a way to find glutAmps that match plat thresholds 

** Get simplified model into detailed framework

Copied sim/eee_detailed_model/CA229.py to sim/eee_detailed_model/CA229simp.py

Modifying to remove 3d structure and replace with simplified morph

Copying /eee_detailed_model/netpyne/batch_glutAmp to 
/eee_detailed_model/netpyne/batch_simp

Adding a symlink to the CA229simp.py cell in:
/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp

eee_utils.make_symlinks(filepath, linkpaths)

    eee_utils.make_symlinks("/u/graham/projects/eee/sim/eee_detailed_model/CA229simp.py", "/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp")

Modified cfg.py and netParams.py

Debugging:

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp/ ; ipython -i netParams.py  

Error:

    ---------------------------------------------------------------------------
    AttributeError                            Traceback (most recent call last)
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp/netParams.py in <module>()
         63 
         64 # Simplified detailed model
    ---> 65 cellRule = netParams.importCellParams(label='CA229simp', conds={'cellType': 'CA229simp', 'cellModel': 'PFC'}, fileName='CA229simp.py', cellName='MakeCA229simp')
         66 
         67 # define section lists

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
        517             label = int(self._labelid)
        518             self._labelid += 1
    --> 519         secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
        520         cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
        521 

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, s)
        177         modulePointer = tempModule
        178         if isinstance(cellArgs, dict):
    --> 179             cell = getattr(modulePointer, cellName)(**cellArgs) # create cell using template, passing dict with args
        180         else:
        181             cell = getattr(modulePointer, cellName)(*cellArgs)  # create cell using template, passing list with args

    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp/CA229simp.py in MakeCA229simp()
        473 ############################################
        474 def MakeCA229simp():
    --> 475     cell = CA229simp()
        476     return cell

    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp/CA229simp.py in __init__(self)
         96         self.addapicalchan()
         97         self.addbasalchan()
    ---> 98         self.addaxonchan()
         99         self.gna_control()
        100         self.distCa()

    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp/CA229simp.py in addaxonchan(self)
        181             h.thi2_na = -58
        182 
    --> 183             sec.insert('kl')
        184             h.distance(0,0.5,sec=self.soma[0])
        185             for seg in sec.allseg():

    AttributeError: 'nrn.Segment' object has no attribute 'insert'


I think the problem is that the axon is just one section, and probably just one nseg

I'm going to try making axon.nseg = 3

That didn't matter.

This fixed it (in the cell file):

    def addaxonchan(self):
        for sec in self.axon:
            sec.cm = somaCm

    -->

    def addaxonchan(self):
        #for sec in self.axon:
            sec = self.axon
            sec.cm = somaCm

Fixing a lot of similar issues.

Finally it runs!

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp/ ; rm -r batch_data ; mkdir batch_data ; rm -r batch_figs ; mkdir batch_figs ; ./runmybatches ; ipython -i analyze.py

Not seeing a response to the synaptic stim, but I'll look into it tomorrow.

changeset:   521:ecbd3392d12e


** Getting synaptic stim into new simple model

Forgot to change cfg.NetStims cell pop to CA229simp from eeeD

Trying again.

Works now!  But the glutAmp range between first spike and depol blockade is 
quite small.


** Figures for meeting today

Det model bAP:
file:gif/20180213_083014.png
file:gif/20180213_083156.png

file:gif/20180213--EEE_Meeting.pdf

** EEE Meeting

Michael Hines gave a great demo of using NEURON interactively

Should look into what happens when two sets of syns on two dends are activated.
    Hines: I expect only one set of syns to be active (otherwise too much input)
    Srdjan: voltage doesn't double with two stims experimentally

Why is there a kink/plateau in the current?  NMDA looks like sawtooth (triangle),
  but in more proximal areas, there is a peak, then a flat part, then it steepens
  again.

  Hines: different voltages distal to proximal --> diff driving forces 

Hines: we need to critically analyze NMDA.mod
    Set to be 70% Calcium and 30% non-specific (sodium and potassium)
    Reversal potential for Calcium not likely to be constant
    Using GHK to determine reversal would be a good idea
    Actual numbers for percent Na/K would be better

Joe: we are using GHK in the simple model for NMDA
Hines: we should try GHK in detailed model, explore effects

Question about Ca concentrations Hines is seeing intracellularly.
    Srdjan: value seems reasonable, though maybe 10x too high

Srdjan: we should switch to GHK NMDA mod

Hines: need trick to get Python/NEURON working interactively
  
  There are no hoc names for sections created in Python (Hines is thinking 
  about improving NEURON/Python to make this easier)

  Solution: save setup to session file, and added code to the ses file to make 
  permanent names for sections.

  Cells created in hoc don't have this problem.


** Working on getting my setup code working

So that a single command line can get the code, set it up, run the sims, and 
generate the plots.


* 2018-02-14 -- Fixing setup, interacting with NEURON

** TODO

Fix setup code
Explore parameters (e.g. multiple synapses and stim location)
Read Major and Schilling articles for journal club
Figure out a way to find glutAmps that threshold plateaus/depol block


** Fix setup code

I want the following command to run everything from scratch:

    mkdir eee_temp; cd eee_temp; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee; cd eee; ipython setup.py; cd sim/eee_detailed_model; ipython compile.py; cd netpyne/batch_bap; ./runmybatches; ipython analyze.py; cd ../batch_glutAmp; ./runmybatches; ipython analyze.py; cd ../batch_simp; ./runmybatches; ipython analyze.py

mkdir eee_temp; 
cd eee_temp; 
hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee; 
cd eee; 
ipython setup.py; 
cd sim/eee_detailed_model; 
ipython compile.py; 
cd netpyne/batch_bap; 
./runmybatches; 
ipython analyze.py; 
cd ../batch_glutAmp; 
./runmybatches; 
ipython analyze.py; 
cd ../batch_simp; 
./runmybatches; 
ipython analyze.py

Error:

    ---------------------------------------------------------------------------
    OSError                                   Traceback (most recent call last)
    /Users/graham/eee_temp/eee/sim/eee_detailed_model/netpyne/batch_simp/analyze.py in <module>()
         19 batches = [dir for dir in os.listdir('batch_data') if os.path.isdir(os.path.join('batch_data', dir))]
         20 
    ---> 21 batchfigs = os.listdir(outputdir)
         22 
         23 batches1D = []

    OSError: [Errno 2] No such file or directory: 'batch_figs'
    graham-mac% 

I need to create batch_data and batch_figs directories in every batch dir.
My code already does that for my own batches, so I just need to expand that 
to handle batches for Penny's model.

Improving setup.make_output_dirs to also make output dirs for detailed model.

I am going to include code to compile mod files for Penny's detailed model in 
my setup.py file, then I can remove ipython compile.py 

New single command:

    graham-mac% rm -r eee_temp; mkdir eee_temp ; cd eee_temp ; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee ; cd eee ; ipython setup.py ; cd sim/eee_detailed_model ; cd netpyne/batch_bap ; ./runmybatches ; ipython analyze.py ; cd ../batch_glutAmp ; ./runmybatches ; ipython analyze.py ; cd ../batch_simp ; ./runmybatches ; ipython analyze.py

Need to commit and push for these changes to take effect.

changeset:   522:3d5bb8e9faa4

Works!

I am now going to remove larger batch, commit, and then ask Sergio and Penny
to run the code.

changeset:   523:1aeb0f0a5186

** Work with detailed model interactively in NEURON

How Michael Hines did it:

    penny [10:50 AM]
    Hi Michael, the detailed model file is in bitbucket: git@bitbucket.org:peng_gao_penny/eee_detailed_model.git
    @michaelhinescheshire If it doesn’t work, I can just share the file here. Let me know :slightly_smiling_face:

    michaelhinescheshire [11:13 AM]
    I have cloned the repository. Thanks!

    penny [11:16 AM]
    Cool!

    michaelhinescheshire [11:25 AM]
    Great. I was able to launch 'python -i Experiment_no_spines.py'
    wait until it came to an end and execute >>> cell = CA229() and look at the shape.  Will have to do a bit of experimenting to get the full NEURONMainMenu working.

    penny [11:29 AM]
    I am using NEURON -- VERSION 7.5 master (8c17845) 2017-06-22
    Maybe mine is an older version?

    michaelhinescheshire [11:31 AM]
    NEURONMainMenu/Tools/ModelView worked when I launched ' nrniv -python Experiment_no_spines.py' and waited til the prompt and typed >>> Cell = CA229()

    penny [11:32 AM]
    Ahh… let me check the mod files again. Sorry, maybe I missed one or two mod file.

    michaelhinescheshire [11:33 AM]
    I'm not experiencing any problems. Everything is fine.

Trying it myself.

Oops.  Need to uncomment the NEURON gui in Penny's cell model.

Yeah, that works!  Need to set some time aside tomorrow to play around.

** Getting my code working on any machine

Fails on MY because compiler can't find curses library.  Bill says not to 
worry about it if I don't really need to run on MY.

Hmmm...  The Netpyne plotting really takes up a lot of time...  I should probably
set that to not make those plots.

Removed unnecessary `import batch_utils` from analyze.py


* 2018-02-15 -- Interacting with NEURON, grading apps for NEURON course


* 2018-02-16 -- EEE setup and interactive NEURON

** TODO

Explore parameters (e.g. multiple synapses and stim location)
Read Major and Schilling articles for journal club
Figure out a way to find glutAmps that threshold plateaus/depol block

** Ensure setup is working now

Need to ensure a bunch of files are symlinked into each batch.

Made improvements that now work.

Error running on Neurosim `no`:

    /usr/site/nrniv/local/python/netpyne/netpyne/cell.py in createNEURONObj(self, prop)
        419                         for iseg,seg in enumerate(sec['hSec']):  # set mech params for each segment
        420                             if type(mechParamValue) in [list]:
    --> 421                                 mechParamValueFinal = mechParamValue[iseg]
        422                             if mechParamValueFinal is not None:  # avoid setting None values
        423                                 setattr(getattr(seg, mechName), mechParamName,mechParamValueFinal)

    IndexError: list index out of range

This is the error I fixed by modifying Netpyne (awaiting my pull request to be accepted)

https://github.com/Neurosim-lab/netpyne/pull/292

Once the pull request goes through I will test on Neurosim machines again.

Tested on my machine, and it seems to work perfectly.


** Playing around interactively in NEURON



* 2018-02-19 -- Running Sergio's sims, working on measuring his plateaus

** TODO

Get plateau measurements working with network sims
Explore parameters (e.g. multiple synapses and stim location)
Read Major and Schilling articles for journal club
Figure out a way to find glutAmps that threshold plateaus/depol block

** Measuring plateaus in networks sims

*** Chats

    joe [8:04 AM]
    Looks like Bill is on vacation this week.  I’m not really sure what I should be working on right now…  Any suggestions?  You guys need help with anything?

    sergio [8:05 AM]
    it seems interesting the nmda modifications by mh
    in that part of our nmdaeee mod file?
    I need to work on the batch analysis, any help is more than welcome

    joe [8:12 AM]
    Yeah, I can play around with the NMDA…  Very interesting how he put a flag in to switch one mod file between two modes…
    What’s your latest repo?  I can clone into and have a look around.  What are you trying to do right now?

    sergio [8:17 AM]
    my repo is at /u/sergioangulo/projects/eee
    I ran a batch in comet, but the data it is not part of the repo
    it is a lot
    now, I’m trying to look at the rasters plots to see firing activity after stim no longer than 300ms

    joe [8:21 AM]
    Honestly, I’m not even quite sure what we’re looking for in the network sims… :shushing_face:
    But it seems like looking through a thousand raster plots isn’t very efficient…

    sergio [8:22 AM]
    it is not

    joe [8:22 AM]
    Is there some sort of measurement we can make to compare different sims?
    Kind of like I can measure plateau duration now in single cell stuff (instead of looking at plateau traces)…
    What is the most important thing you’d (we’d!) like to see in the sims?

    sergio [8:24 AM]
    I haven’t implemented the plateau measurement in the network, but I need to do it

    joe [8:24 AM]
    Ahhh, great, that’s something I can work on.

    sergio [8:24 AM]
    added this Plain Text snippet: Untitled 
    -** 1) find net with reasonable rates and transient (not persistent) response
    - Select from batch sim
    -** 2) Quantify plateaus, to make sure Eact actually means something
    -- joe has some code
    -- quantify amplitude + duration
    -- quantify % of cells with plateau
    -- need to record voltage from all cells -- inc recordStep to 0.5?: 800 cells * 1000 * 2 = 1.6M 
    -** 3) compare Esync (apical input) with and without Eact (basal input)
    - Compare:
    -- only inputs to basal -- get plateaus + some spikes (minimize spikes)
    -- inputs to basal + apical simultaneously -- more spiking, more sync
    -- input to basal first + then to apical (delay of 200ms) 
    -** 4) Find control case with same amount of exc input but no plateau
    -- eg. if spread inputs (not clustered) do not generate plateau
    -- changing NMDA (taus) or other mech parameters to avoid plateau generation
    -- use inh inputs to avoid getting plateau -- but keep same total input
    Collapse 

    sergio [8:24 AM]
    this was a discussion with salva on friday

    joe [8:26 AM]
    That sounds like a good plan!

    sergio [8:26 AM]
    definitely, needs to measure plateaus

    joe [8:26 AM]
    I can work on getting my plateau measurements to work on your network stuff.
    :slightly_smiling_face:

    sergio [8:27 AM]
    that would be incredibly helpful
    I have an analysis file for the network, it is not that sophisticated like your routines, but helps to extract data from json, plot traces and analyze sync
    do you want to take a look?

    joe [8:32 AM]
    Yeah, gimme a sec to get your repo…


*** Work

graham-mac% mkdir serg_temp; cd serg_temp; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee 
graham-mac% cd eee/sim
graham-mac% ./compile

graham-mac% cd layersim/
graham-mac% ./runsim


*** Getting rid of batch_utils

Decided to keep batch_utils until I have the time to get rid of it all at once


** Sergio's sims:

rm -r serg_temp ; mkdir serg_temp ; cd serg_temp ; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee ; cd eee/sim ; ./compile ; cd layersim/ ; ipython -i netParams.py 


** Chats 

*** Chat with Sergio/Penny

    joe [8:04 AM]
    Looks like Bill is on vacation this week.  I’m not really sure what I should be working on right now…  Any suggestions?  You guys need help with anything?

    sergio [8:05 AM]
    it seems interesting the nmda modifications by mh
    in that part of our nmdaeee mod file?
    I need to work on the batch analysis, any help is more than welcome

    joe [8:12 AM]
    Yeah, I can play around with the NMDA…  Very interesting how he put a flag in to switch one mod file between two modes…
    What’s your latest repo?  I can clone into and have a look around.  What are you trying to do right now?

    sergio [8:17 AM]
    my repo is at /u/sergioangulo/projects/eee
    I ran a batch in comet, but the data it is not part of the repo
    it is a lot
    now, I’m trying to look at the rasters plots to see firing activity after stim no longer than 300ms

    joe [8:21 AM]
    Honestly, I’m not even quite sure what we’re looking for in the network sims… :shushing_face:
    But it seems like looking through a thousand raster plots isn’t very efficient…

    sergio [8:22 AM]
    it is not

    joe [8:22 AM]
    Is there some sort of measurement we can make to compare different sims?
    Kind of like I can measure plateau duration now in single cell stuff (instead of looking at plateau traces)…
    What is the most important thing you’d (we’d!) like to see in the sims?

    sergio [8:24 AM]
    I haven’t implemented the plateau measurement in the network, but I need to do it

    joe [8:24 AM]
    Ahhh, great, that’s something I can work on.

    sergio [8:24 AM]
    added this Plain Text snippet: Untitled 
    ** 1) find net with reasonable rates and transient (not persistent) response
    - Select from batch sim
    ** 2) Quantify plateaus, to make sure Eact actually means something
    -- joe has some code
    -- quantify amplitude + duration
    -- quantify % of cells with plateau
    -- need to record voltage from all cells -- inc recordStep to 0.5?: 800 cells * 1000 * 2 = 1.6M 
    ** 3) compare Esync (apical input) with and without Eact (basal input)
    - Compare:
    -- only inputs to basal -- get plateaus + some spikes (minimize spikes)
    -- inputs to basal + apical simultaneously -- more spiking, more sync
    -- input to basal first + then to apical (delay of 200ms) 
    ** 4) Find control case with same amount of exc input but no plateau
    -- eg. if spread inputs (not clustered) do not generate plateau
    -- changing NMDA (taus) or other mech parameters to avoid plateau generation
    -- use inh inputs to avoid getting plateau -- but keep same total input
    Collapse 

    sergio [8:24 AM]
    this was a discussion with salva on friday

    joe [8:26 AM]
    That sounds like a good plan!

    sergio [8:26 AM]
    definitely, needs to measure plateaus

    joe [8:26 AM]
    I can work on getting my plateau measurements to work on your network stuff.
    :slightly_smiling_face:

    sergio [8:27 AM]
    that would be incredibly helpful
    I have an analysis file for the network, it is not that sophisticated like your routines, but helps to extract data from json, plot traces and analyze sync
    do you want to take a look?

    joe [8:32 AM]
    Yeah, gimme a sec to get your repo…

    joe [8:41 AM]
    Okay, everything compiles fine.  Now which sim/batch should I run?  How do you do the analysis?

    sergio [8:42 AM]
    I run the sim on sim/layersim
    the command is `runsim`
    and the analysis is on `eee/sim/layersim/sync.py`

    joe [8:43 AM]
    Okay, let me make sure batch runs…

    sergio [8:44 AM]
    perfect
    I’m running the version of `batch.py`

    joe [8:45 AM]
    back in 15…

    sergio [8:45 AM]
    ok

    joe [8:56 AM]
    added this Plain Text snippet: It freezes up here... 
    graham-mac% cd layersim/
    graham-mac% ./runsim
    rm: *.pyc: No such file or directory
    numprocs=4
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    Additional mechanisms from files
     vecst.mod nstim.mod MyExp2SynBB.mod MyExp2SynNMDABB.mod NMDAeee.mod h_BS.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod cat_mig.mod can_mig.mod cal_mig.mod h_kole.mod h_migliore.mod kBK.mod gabab.mod nafx.mod kdrin.mod IKsin.mod hin.mod canin.mod kapin.mod kctin.mod cadyn.mod kapcb.mod catcb.mod vecstim.mod Gfluct.mod Gfluctp.mod AMPA.mod GABAA.mod
    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]
    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]
    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]
    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]
    Warning: Could not load netParams from command line path or from default netParams.py
    Warning: Could not load netParams from command line path or from default netParams.py
    Warning: Could not load netParams from command line path or from default netParams.py
    Warning: Could not load netParams from command line path or from default netParams.py
     Number of cells on node 2: 0 
    Creating network of 0 cell populations on 4 hosts...
     Number of cells on node 0: 0 
     Number of cells on node 1: 0 
     Number of cells on node 3: 0 
     Done; cell creation time = 0.00 s.
    Making connections...
     Number of connections on node 1: 0 
     Number of connections on node 3: 0 
     Number of connections on node 2: 0 
     Number of connections on node 0: 0 
     Number of stims on node 2: 0 
     Done; cell connection time = 0.00 s.
     Number of stims on node 1: 0 
     Number of stims on node 3: 0 
     Number of stims on node 0: 0 
     Done; cell stims creation time = 0.00 s.
    Recording 0 traces of 0 types on node 2
    Recording 0 traces of 0 types on node 0
    Recording 0 traces of 0 types on node 1
    Recording 0 traces of 0 types on node 3
    first instance of tstop
    Running simulation for 800 ms...
     Done; run time = 0.01 s; real-time ratio: 0.00.
    Gathering data...
     Done; gather time = 0.02 s.
    Analyzing...
     Cells: 0
     Connections: 0 (0.00 per cell)
     Spikes: 0 (0.00 Hz)
    >>> 
    >>> 
    >>> 
     Simulated time: 0.8 s; 4 workers
     Run time: 0.01 s
    Gathering data...
    Collapse 

    sergio [8:57 AM]
    hmm, need to check netParams.py
    can you check it with ipython? maybe it is just a path issue

    joe [9:01 AM]
    Yeah, it’s just a path issue…  It can’t find batch_utils.  But the only thing we need batch_utils for is for the spine addition…

    sergio [9:03 AM]
    I have added batch_utils to the pythonpath, but it should be the same for you

    joe [9:05 AM]
    Yeah, I don’t use batch_utils for much anymore…  I’m thinking of getting rid of it…

    sergio [9:05 AM]
    `setenv PYTHONPATH /u/sergioangulo/projects/eee/sim:$PYTHONPATH`
    this is my path in neurosim
    I see, how do you get rid of it?

    joe [9:07 AM]
    Gimme a minute…

    joe [9:15 AM]
    Huh.  Actually I still use it for more than I thought.  Probably easier to just get it into my path.

    sergio [9:19 AM]
    what are the functions that batch_utils have for the sims to work? is it for the dendritic spines?

    joe [9:20 AM]
    Yeah, a func to add spines, but then also funcs to run batches, load batch data, etc.
    The problem is, I don’t want to add your path ahead of my own batch_utils location…  I added this to the top of `/Users/graham/serg_temp/eee/sim/layersim/netParams.py`:

    joe [9:22 AM]
    added this Python snippet: Untitled 
    import os
    import sys
    ​
    try: 
      import batch_utils
    except:
      curpath = os.getcwd()
      while os.path.split(curpath)[1] != "sim":
        curpath = os.path.split(curpath)[0]
      sys.path.append(curpath)
      import batch_utils
      
    batchoutputdir = "batch_data"
    if not os.path.exists(batchoutputdir):
      os.mkdir(batchoutputdir)
    Collapse 

    sergio [9:22 AM]
    nice

    joe [9:22 AM]
    So that just adds it to the path when I’m working in your dirs.
    Now let me try running the whole thing…

    sergio [9:23 AM]
    ok

    joe [9:30 AM]
    added and commented on this Plain Text snippet: This is error I get now 
    graham-mac% cd serg_temp/eee/sim/layersim/ ; ipython -i netParams.py
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul 2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.
    IPython 5.1.0 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     vecst.mod nstim.mod MyExp2SynBB.mod MyExp2SynNMDABB.mod NMDAeee.mod h_BS.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod cat_mig.mod can_mig.mod cal_mig.mod h_kole.mod h_migliore.mod kBK.mod gabab.mod nafx.mod kdrin.mod IKsin.mod hin.mod canin.mod kapin.mod kctin.mod cadyn.mod kapcb.mod catcb.mod vecstim.mod Gfluct.mod Gfluctp.mod AMPA.mod GABAA.mod
    Balancing each compartment to -73 mV
    In [1]: execfile('/Users/graham/serg_temp/eee/sim/layersim/init.py')
    /Users/graham/anaconda/lib/python2.7/site-packages/matplotlib/__init__.py:1357: UserWarning: This call to matplotlib.use() has no effect
    because the backend has already been chosen;
    matplotlib.use() must be called *before* pylab, matplotlib.pyplot,
    or matplotlib.backends is imported for the first time.
     warnings.warn(_use_error_msg)
    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]
    NEURON: section in the object was deleted
     near line 0
     ^
    graham-mac% 
    Collapse 
    Any ideas?

    sergio [9:32 AM]
    uff, I have never seen that error before

    joe [9:32 AM]
    Yeah, kind of a weird one…  Seems to be a problem in NEURON…  I’ll dig into it.

    sergio [9:35 AM]
    is this helpful?
    https://groups.google.com/forum/#!topic/spyderlib/tRwgqEAIyvs

    joe [9:36 AM]
    The matplotlib is just a warning.  The crash happens in `cfg, netParams = sim.readCmdLineArgs()`

    joe [10:12 AM]
    How long does it usually take to run the sim, Sergio?

    sergio [10:14 AM]
    on comet, it tooks 3 mins to run 1 sim, with 2 nodes
    for 800 ms
    on ‘zn’ with 48 core, around for same sim time, around 700-800s

    joe [10:26 AM]
    Huh.  On my own machine and on `no`, it just sits at `Running simulation for 800 ms...`
    Isn’t there supposed to be a counter or something?  Seems like there must still be a problem…
    Could you please try running the whole thing out of the box on `no` and letting me know what happens?
    mkdir serg_temp ; cd serg_temp ; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee ; cd eee/sim ; ./compile ; cd layersim/ ; ./runsim

    sergio [10:29 AM]
    perfect, let me run it on `no`,  do you want to try it on `zn`
    ?

    joe [10:29 AM]
    Yeah, I’ll give it a try.

    joe [10:43 AM]
    Seems to be a problem…  On my own machine, on `no` and on `zn` it’s jsut sitting at `Running simulation for 800 ms...`
    I’m gonna get a little hike in, and I’ll try to figure it out when I get back.

    sergio [10:45 AM]
    ok, I’m running on no and waiting …
    enjoy the hike!

    joe [1:12 PM]
    So it never finished on `zn` or on `no` before the pipes got broken, but it did eventually finish on my machine: `Total time = 1779.41 s`

    sergio [1:27 PM]
    on `no` takes a long time: ` 10013.16 s`
    I ran another sim on `my` with 24 cores: `Total time = 1586.19 s`

    joe [1:36 PM]
    Great, well it’s working anyway.  So then what do you do for analysis, just run `sync.py`?

    sergio [1:37 PM]
    yep, but have different functions. Now it is configured with volt plotting
    but we did some changes for the batches sims and I did not record voltage traces

    joe [1:40 PM]
    Okay, that explains why I’m getting an error in volt_plot.

    sergio [1:42 PM]
    that one works if there are recordings in the json :grimacing:

    joe [1:42 PM]
    I see…  We’ve got `cfg.cellsrec = 4` which sets `cfg.recordCells = []`, so there was nothing recorded in this sim, right?

    sergio [1:43 PM]
    right
    the option 2 records 20 cells with plateau

    joe [1:51 PM]
    Cool, well I’ll start working on getting my plateau analysis into Netpyne.

    sergio [1:51 PM]
    perfect, that sounds great



*** Chat with Salvador

    joe [9:40 AM]
    added this Plain Text snippet: Untitled 
    graham-mac% cd serg_temp/eee/sim/layersim/ ; ipython -i netParams.py
    In [1]: execfile('/Users/graham/serg_temp/eee/sim/layersim/init.py')
    /Users/graham/anaconda/lib/python2.7/site-packages/matplotlib/__init__.py:1357: UserWarning: This call to matplotlib.use() has no effect
    because the backend has already been chosen;
    matplotlib.use() must be called *before* pylab, matplotlib.pyplot,
    or matplotlib.backends is imported for the first time.
     warnings.warn(_use_error_msg)
    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]
    NEURON: section in the object was deleted
     near line 0
     ^
    graham-mac% 
    Collapse 

    joe [9:41 AM]
    Hey Salva, I’m trying to run Sergio’s sims, but I keep crashing at `cfg, netParams = sim.readCmdLineArgs()` with a NEURON error…  Have you ever seen this before?

    salvadord [9:42 AM]
    yeah, maybe, but don’t recall :slightly_smiling_face:
    is it really an error of readCmdLineArgs?
    or something happening later on?

    joe [9:43 AM]
    I stepped through his `init.py` and it def crashes at `cfg, netParams = sim.readCmdLineArgs()`

    salvadord [9:43 AM]
    ok let me have a quick look
    where do I clone from?

    joe [9:44 AM]
    ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee

    sergio [9:44 AM]
    that one

    salvadord [9:46 AM]
    added this Python snippet: missing files? 
    Pavos-MBP% hg clone ssh://no///u/sergioangulo/projects/eee eee_temp
    requesting all changes
    adding changesets
    adding manifests
    adding file changes
    added 565 changesets with 1826 changes to 397 files                                                               
    updating to branch default
    76 files updated, 0 files merged, 0 files removed, 0 files unresolved
    Pavos-MBP% cd ee
    eee/    eee_sergio/ eee_temp/  
    Pavos-MBP% cd eee_temp
    Pavos-MBP% cd sim/layersim/
    Pavos-MBP% ipy -i netParams.py 
    Python 2.7.13 |Anaconda custom (x86_64)| (default, Dec 20 2016, 23:05:08) 
    Type "copyright", "credits" or "license" for more information.
    ​
    IPython 5.3.0 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 master (0388d94) 2017-08-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    ​
    ---------------------------------------------------------------------------
    ImportError                Traceback (most recent call last)
    /u/salvadord/Documents/ISB/Models/eee_temp/sim/layersim/netParams.py in <module>()
       57 if 'PT5_0' in cellParamLabels:
       58  cellRule = netParams.importCellParams(label='PT5_0', conds={'cellType': 'PT5_0', 'cellModel': 'HH_reduced'}, 
    ---> 59     fileName='../cells/eee7ps.py', cellName='eee7ps')
       60 
       61  netParams.cellParams['PT5_0']['secs']['soma']['pointps']= {'noise': {'loc': 0.5, 
    ​
    /u/salvadord/Documents/ISB/Models/netpyne_repo/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
      517       label = int(self._labelid)
      518       self._labelid += 1
    --> 519     secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
      520     cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
      521 
    ​
    /u/salvadord/Documents/ISB/Models/netpyne_repo/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, s)
      174       removeFilePath = False
      175     moduleName = fileNameOnly.split('.py')[0] # remove .py to obtain module name
    --> 176     tempModule = importlib.import_module(moduleName)
      177     modulePointer = tempModule
      178     if isinstance(cellArgs, dict):
    ​
    /u/salvadord/anaconda/lib/python2.7/importlib/__init__.pyc in import_module(name, package)
       35       level += 1
       36     name = _resolve_name(name[level:], package, level)
    ---> 37   __import__(name)
       38   return sys.modules[name]
    ​
    /u/salvadord/Documents/ISB/Models/eee_temp/sim/cells/eee7ps.py in <module>()
       9 from math import exp,log
       10 import numpy as np
    ---> 11 from batch_utils import getspineLocs
       12 
       13 h.load_file('stdrun.hoc')
    ​
    ImportError: No module named batch_utils
    Collapse 

    joe [9:47 AM]
    One sec, I fixed that already…

    sergio [9:47 AM]
    do you want to push the fix Joe?

    joe [9:47 AM]
    Yeah, doing now…

    sergio [9:47 AM]
    ok

    joe [9:49 AM]
    Okay, I pushed.  I tried to `hg update` but it denied me, so you may have to update Sergio.

    sergio [9:49 AM]
    do I have to change something to give you permission?

    joe [9:50 AM]
    Can you trust me with write access to your repo?!  :wink:

    salvadord [9:51 AM]
    permission just needed to hg up on neurosim, but changes are pushed already, thx
    which mod files do I need to compile? any script?

    sergio [9:52 AM]
    I trust you with my eyes closed! hehe
    on `eee/sim` you can run `compile`

    joe [9:53 AM]
    `rm -r serg_temp; mkdir serg_temp; cd serg_temp; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee; cd eee/sim ; ./compile`
    Just tried it on `no` and I get the same error.
    I run this:
    `rm -r serg_temp ; mkdir serg_temp ; cd serg_temp ; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee ; cd eee/sim ; ./compile ; cd layersim/ ; ipython -i netParams.py `

    salvadord [9:57 AM]
    added this Python snippet: seems to be working... 
    Pavos-MBP% ipy netParams.py 
    Python 2.7.13 |Anaconda custom (x86_64)| (default, Dec 20 2016, 23:05:08) 
    Type "copyright", "credits" or "license" for more information.
    ​
    IPython 5.3.0 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 master (0388d94) 2017-08-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    ​
    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     vecst.mod nstim.mod MyExp2SynBB.mod MyExp2SynNMDABB.mod NMDAeee.mod h_BS.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod cat_mig.mod can_mig.mod cal_mig.mod h_kole.mod h_migliore.mod kBK.mod gabab.mod nafx.mod kdrin.mod IKsin.mod hin.mod canin.mod kapin.mod kctin.mod cadyn.mod kapcb.mod catcb.mod vecstim.mod Gfluct.mod Gfluctp.mod AMPA.mod GABAA.mod
    Balancing each compartment to -73 mV
    ​
    In [1]: 
    ​
    In [1]:                                                                                     
    Do you really want to exit ([y]/n)? 
    Pavos-MBP% ipy init.py 
    Python 2.7.13 |Anaconda custom (x86_64)| (default, Dec 20 2016, 23:05:08) 
    Type "copyright", "credits" or "license" for more information.
    ​
    IPython 5.3.0 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 master (0388d94) 2017-08-09
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits
    ​
    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     vecst.mod nstim.mod MyExp2SynBB.mod MyExp2SynNMDABB.mod NMDAeee.mod h_BS.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod cat_mig.mod can_mig.mod cal_mig.mod h_kole.mod h_migliore.mod kBK.mod gabab.mod nafx.mod kdrin.mod IKsin.mod hin.mod canin.mod kapin.mod kctin.mod cadyn.mod kapcb.mod catcb.mod vecstim.mod Gfluct.mod Gfluctp.mod AMPA.mod GABAA.mod
    Balancing each compartment to -73 mV
    ERROR: popParams->'rate': Must be a float if specified. Value provided is:[80.0, 100.0]
    ​
    An exception occurred during the error checking process...
    ​
    Creating network of 14 cell populations on 1 hosts...
    Collapse 

    joe [9:57 AM]
    Then I `execfile("init.py")`

    salvadord [9:58 AM]
    ran init.py from command line and works

    salvadord [9:58 AM]
    added this Python snippet: Untitled 
    Creating network of 14 cell populations on 1 hosts...
     Number of cells on node 0: 2080 
     Done; cell creation time = 35.62 s.
    Making connections...
     Number of connections on node 0: 27381 
     Number of synaptic contacts on node 0: 57973 
     Done; cell connection time = 5.83 s.
     Number of stims on node 0: 0 
     Done; cell stims creation time = 0.00 s.
    Recording 0 traces of 0 types on node 0
    ​
    Running simulation for 800 ms...
    ​
    Collapse 

    salvadord [9:58 AM]
    let me try via execfile

    joe [9:58 AM]
    I’ll try from command line…

    salvadord [9:59 AM]
    ok, reproduced using execfile
    aah I know what it is, its trying to read a netParams.py file from command line, because the orig launching command was `ipython netParams.py` which matches the syntax: `python file.py [simConfig=filepath] [netParams=filepath]`
    do u specifically need to launch 1st netParams.py and then init.py via execfile for some reason?

    joe [10:01 AM]
    Ahhhh!
    No, not at all, that’s just how I’ve always debugged.  It always worked in the past!
    Thanks Salva! I was afraid it was somehting goofy.

    sergio [10:01 AM]
    Thanks Salva!
    yep, I always run init.py as part of a script in `runsim`

    salvadord [10:04 AM]
    hmm actually not sure its that exactly cause the readcmdline func looks for “netParams=” (with equal sign) … and not sure why it worked befoer and not now!
    but anyway, since works by running directly via init.py, I won’t worry too much about it :slightly_smiling_face:



* 2018-02-20 -- EEE Meeting 

** TODO

Run Sergio sim with traces recorded
Analyze Sergio plateaus
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club
Figure out a way to find glutAmps that threshold plateaus/depol block


** Run sergio sim with traces recorded

First to clone Sergio repo.  I'll put it in /u/graham/projects

    graham-mac% cd /u/graham/ ; mkdir sergio ; cd sergio ; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee; cd eee/sim ; ./compile

That worked.  
changeset:   567:1794980132ef

Working in /u/graham/sergio/eee/sim/layersim/

Changing in cfg.py (need to record some traces to analyze):

    cfg.cellsrec = 4
    -->
    cfg.cellsrec = 2

And running:

    graham-mac% cd /u/graham/sergio/eee/sim/layersim
    graham-mac% ./runsim

That will take awhile to run.  Looking into getting analysis/plotting code into
Netpyne now.

Finished:

    graham-mac% ./runsim
    rm: *.pyc: No such file or directory
    numprocs=4
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    Additional mechanisms from files
     vecst.mod nstim.mod MyExp2SynBB.mod MyExp2SynNMDABB.mod NMDAeee.mod h_BS.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod cat_mig.mod can_mig.mod cal_mig.mod h_kole.mod h_migliore.mod kBK.mod gabab.mod nafx.mod kdrin.mod IKsin.mod hin.mod canin.mod kapin.mod kctin.mod cadyn.mod kapcb.mod catcb.mod vecstim.mod Gfluct.mod Gfluctp.mod AMPA.mod GABAA.mod

    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]

    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]

    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]

    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]
    Balancing each compartment to -73 mV
    Balancing each compartment to -73 mV
    Balancing each compartment to -73 mV
    Balancing each compartment to -73 mV

    Creating network of 14 cell populations on 4 hosts...
      Number of cells on node 1: 520 
      Number of cells on node 0: 520 
      Done; cell creation time = 14.83 s.
      Number of cells on node 3: 520 
      Number of cells on node 2: 520 
    Making connections...
      Number of connections on node 0: 6846 
      Number of synaptic contacts on node 0: 14494 
      Number of connections on node 1: 6846 
      Number of synaptic contacts on node 1: 14495 
      Number of connections on node 3: 6845 
      Number of synaptic contacts on node 3: 14494 
      Number of connections on node 2: 6844 
      Number of synaptic contacts on node 2: 14490 
      Done; cell connection time = 2.57 s.
      Number of stims on node 1: 0 
      Number of stims on node 3: 0 
      Number of stims on node 2: 0 
      Number of stims on node 0: 0 
      Done; cell stims creation time = 0.00 s.
    Recording 0 traces of 0 types on node 3
    Recording 0 traces of 0 types on node 2
    Recording 0 traces of 0 types on node 0
    Recording 40 traces of 2 types on node 1

    Running simulation for 800 ms...
      Done; run time = 1543.55 s; real-time ratio: 0.00.

    Gathering data...
      Done; gather time = 1.07 s.

    Analyzing...
    >>> 
    >>> 
    >>> 
      Cells: 2080
      Connections: 0 (0.00 per cell)
      Spikes: 42259 (25.40 Hz)
       PT5_0 : 0.000 Hz
       PT5_1 : 4.703 Hz
       PT5_2 : 4.750 Hz
       PT5_3 : 4.250 Hz
       PT5_4 : 5.188 Hz
       PT5_5 : 4.156 Hz
       PT5_6 : 5.234 Hz
       PT5_7 : 4.672 Hz
       PT5_8 : 4.562 Hz
       PT5_9 : 4.406 Hz
       PT5_10 : 4.891 Hz
       PV5 : 8.725 Hz
       dTC : 89.232 Hz
       NetStim1 : 1.250 Hz
      Simulated time: 0.8 s; 4 workers
      Run time: 1543.55 s
    Saving output as ../../data/v29/network130.json  ... 
    Finished saving!
      Done; saving time = 2.63 s.
    Plotting raster...
      Done; plotting time = 2.13 s

    Total time = 1567.60 s
    >>> 

** Looking into Sergio's data

file:gif/20180220_084636.png

** Getting analysis and plotting code into Netpyne


** EEE Meeting

*** Earlier chat with Michael Hines:

    michaelhinescheshire [12:24 PM]
    I've extended NEURON to allow easy gui use (session save and restore) of trajectories involving python sections. Presently, this extension is in the github nrn branch called pysecname and I need to improve a bit further before it gets into the master branch.  Anyway, this allowed me to do some comparison simulations
    on the effect of cai ion accumulation on the NMDA current (inmda depends on ena, ek, eca) and the previous simulations using a NMDA reversal potential of 0mV. The substantive NMDA.mod file change was
    if (useions == 0) {
           iNMDA = g*(v - e)
       ica = 7*iNMDA/10   :(5-10 times more permeable to Ca++ than Na+ or K+, Asch$
       iNMDA = 3*iNMDA/10
       ik = 0
       ina = 0
     }else{
       ica = .7*useions*g*(v - eca)
       ik = .15*useions*g*(v - ek)
       ina = .15*useions*g*(v - ena)
       iNMDA = 0  
     }
     inmda = iNMDA + ica + ik + ina
    comparison results for useions_NMDA=1 and useions_NMDA=0.2 are...

    michaelhinescheshire [12:32 PM]
    uploaded this file:  
    useions_NMDA1.0.pdf
    596 kB PDF

    michaelhinescheshire [12:32 PM]
    uploaded this file:  
    useions_NMDA0.2.pdf
    555 kB PDF

    michaelhinescheshire [12:33 PM]
    can discuss at tuesday's eee meeting


** Meeting Minutes

Hines discussed the effect of ion concentrations/currents on NMDA

The original NMDA mod set up the following currents:
    7/10 iCa
    3/10 iNMDA

This basically set up NMDA as a voltage clamp at 0 volts

Changing to using actual ions and concentrations --> larger internal Ca 

We need to know how Cai affects eCa (i.e. how calcium is handled)

Hines explored with TTX (no spiking)

We need to compare/use experimental data

Publication possibility: we take into account changing erev and explore
the consequences (current NMDA mod uses constant erev)

Hines: it's nice to be able to setup a spine/NMDA 'complex'.  Look into 
reciprocal synapses (olfactory bulb model on ModelDB).  -- Creates a synapse
with each Netcon

Srdjan: we should show how we can get simple model to match, discuss ways it
doesn't

Joe: simple model has physical spines, detailed model doesn't...

Penny: she tried physical spines, but couldn't get good results, she thinks 
      physical spines limit the Ca flow

Hines: limiting the Ca flow would be an improvement!

We should all look into literature on spines, Ca, NMDA, etc.


* 2018-02-23 -- Detecting depol block

** TODO

Analyze Sergio plateaus
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club
Figure out a way to find glutAmps that threshold plateaus/depol block


** Get some traces from Sergio's model to analyze

    In [2]: cd /u/graham/projects/eee/sim/batches/
    In [3]: import batch_utils
    In [4]: cd /u/graham/sergio/eee/data/v29/
    In [7]: data = batch_utils.load_json('network130.json')
    In [9]: data.keys()
    Out[9]: [u'netpyne_version', u'net', u'simData', u'simConfig', u'netpyne_changeset']

    In [10]: data['simData'].keys()
    Out[10]: [u'spkt', u'avgRate', u'spkid', u'v_soma', u'v_Bdend1', u't', u'popRates']

    In [11]: data['simData']['v_soma'].keys()
    Out[11]: 
    [u'cell_205',
     u'cell_705',
     u'cell_285',
     u'cell_305',
     u'cell_845',
     u'cell_685',
     u'cell_525',
     u'cell_625',
     u'cell_945',
     u'cell_865',
     u'cell_445',
     u'cell_365',
     u'cell_225',
     u'cell_765',
     u'cell_605',
     u'cell_785',
     u'cell_385',
     u'cell_545',
     u'cell_465',
     u'cell_925']

    In [20]: cells = data['simData']['v_soma'].keys()

    In [21]: traces = [data['simData']['v_soma'][cell] for cell in cells]

    In [23]: np.shape(traces)
    Out[23]: (20, 8000)

    In [25]: import matplotlib.pyplot as plt

    In [26]: for cell in cells:
        ...:     plt.figure()
        ...:     plt.title(cell)
        ...:     plt.plot(data['simData']['v_soma'][cell])
        ...:     

Still seeing a lot of depol blockade...

Going to try re-running sim..

    graham-mac% cd /u/graham/sergio/eee/sim/layersim/
    graham-mac% ./runsim
    numprocs=4
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    Additional mechanisms from files
     vecst.mod nstim.mod MyExp2SynBB.mod MyExp2SynNMDABB.mod NMDAeee.mod h_BS.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod cat_mig.mod can_mig.mod cal_mig.mod h_kole.mod h_migliore.mod kBK.mod gabab.mod nafx.mod kdrin.mod IKsin.mod hin.mod canin.mod kapin.mod kctin.mod cadyn.mod kapcb.mod catcb.mod vecstim.mod Gfluct.mod Gfluctp.mod AMPA.mod GABAA.mod

    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]

    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]

    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]

    Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]
    Balancing each compartment to -73 mV
    Balancing each compartment to -73 mV
    Balancing each compartment to -73 mV
    Balancing each compartment to -73 mV

    Creating network of 14 cell populations on 4 hosts...
      Number of cells on node 0: 520 
      Number of cells on node 3: 520 
      Number of cells on node 2: 520 
      Number of cells on node 1: 520 
      Done; cell creation time = 14.11 s.
    Making connections...
      Number of connections on node 2: 6844 
      Number of synaptic contacts on node 2: 14490 
      Number of connections on node 3: 6845 
      Number of synaptic contacts on node 3: 14494 
      Number of connections on node 0: 6846 
      Number of synaptic contacts on node 0: 14494 
      Number of connections on node 1: 6846 
      Number of synaptic contacts on node 1: 14495 
      Done; cell connection time = 2.61 s.
      Number of stims on node 0: 0 
      Number of stims on node 1: 0 
      Number of stims on node 2: 0 
      Number of stims on node 3: 0 
      Done; cell stims creation time = 0.00 s.
    Recording 625 traces of 2 types on node 2
    Recording 625 traces of 2 types on node 0
    Recording 625 traces of 2 types on node 3
    Recording 625 traces of 2 types on node 1

    Running simulation for 800 ms...
      Done; run time = 1479.83 s; real-time ratio: 0.00.

    Gathering data...
      Done; gather time = 9.23 s.

    Analyzing...
    >>> 
    >>> 
    >>> 
      Cells: 2080
      Connections: 0 (0.00 per cell)
      Spikes: 42259 (25.40 Hz)
       PT5_0 : 0.000 Hz
       PT5_1 : 4.750 Hz
       PT5_2 : 4.734 Hz
       PT5_3 : 4.078 Hz
       PT5_4 : 5.172 Hz
       PT5_5 : 4.109 Hz
       PT5_6 : 5.406 Hz
       PT5_7 : 4.719 Hz
       PT5_8 : 4.578 Hz
       PT5_9 : 4.516 Hz
       PT5_10 : 4.641 Hz
       PV5 : 8.742 Hz
       dTC : 89.232 Hz
       NetStim1 : 1.250 Hz
      Simulated time: 0.8 s; 4 workers
      Run time: 1479.83 s
    Saving output as ../../data/v29/network130.json  ... 
    Finished saving!
      Done; saving time = 77.86 s.
    Plotting raster...
    Plotting recorded cell traces ...
      Done; plotting time = 616.35 s

    Total time = 2201.02 s
    >>> 

Hmmm... Still a lot of depol block...  Also, stim time and sim duration are 
different from the traces he posted earlier...  Asking Sergio about this on 
Slack.

I think I need a function that checks to see if depol blockade has occurred.

Sergio has a function in /u/graham/sergio/eee/analysis/batchAnalysis.py:

    def detectDepolBlock(volt, minSamples=200, vRange=[-50, -10]):
        cumm = 0
        for v in volt:
            if v >= vRange[0] and v<= vRange[1]:
                cumm += 1
                if cumm > minSamples:
                    return 1
            else:
                cumm = 0

        return 0 

Trying to use it:

    In [15]: totplots = 100

    In [16]: numplots = 0

    In [17]: while numplots < totplots:
        ...:     numplots += 1
        ...:     for cell in cells:
        ...:         trace = data['simData']['v_soma'][cell]
        ...:         db = detectDepolBlock(trace)
        ...:         if db == 0: title = ""
        ...:         if db == 1: title = " BLOCKADE"
        ...:         plt.figure()
        ...:         plt.title(cell + title)
        ...:         plt.plot(trace)

That didn't work...


cd /u/graham/projects/eee/sim/batches/
import batch_utils
cd /u/graham/sergio/eee/data/v29/
data = batch_utils.load_json('network130.json')
cells = data['simData']['v_soma'].keys()
traces = [data['simData']['v_soma'][cell] for cell in cells]

def detectDepolBlock(volt, minSamples=200, vRange=[-50, -10]):
    cumm = 0
    for v in volt:
        if v >= vRange[0] and v<= vRange[1]:
            cumm += 1
            if cumm > minSamples:
                return 1
        else:
            cumm = 0

    return 0 


def plot_db(start=0, end=10):
     for cell in cells[start:end]:
         trace = data['simData']['v_soma'][cell]
         db = detectDepolBlock(trace)
         if db == 0: title = ""
         if db == 1: title = " BLOCKADE"
         plt.figure()
         plt.title(cell + title)
         plt.plot(trace)
     plt.show()



def plot_all_dbs():
    for cell in cells:
        print(cell)
        trace = data['simData']['v_soma'][cell]
        db = detectDepolBlock(trace)
        if db == 1:
            print("  BLOCKADE")
            plt.figure()
            plt.title(cell + " BLOCKADE")
            plt.plot(trace)


Yeah, lots of depolarization blockade.

To see cells with depol block:

    cd /u/graham/projects/eee/sim/batches/
    ipython

    import batch_utils
    data = batch_utils.load_json('/u/graham/sergio/eee/data/v29/network130.json')
    cells = data['simData']['v_soma'].keys()
    traces = [data['simData']['v_soma'][cell] for cell in cells]

    def detectDepolBlock(volt, minSamples=200, vRange=[-50, -10]):
        cumm = 0
        for v in volt:
            if v >= vRange[0] and v<= vRange[1]:
                cumm += 1
                if cumm > minSamples:
                    return 1
            else:
                cumm = 0

        return 0 

    def list_all_dbs():
        dbs = []
        for cell in cells:
            trace = data['simData']['v_soma'][cell]
            db = detectDepolBlock(trace)
            if db == 1:
                dbs.append(cell)   
        return dbs

    db_cells = list_all_dbs()         

    db_cells.sort()

    db_cells


Will have to discuss with Sergio tomorrow or Monday.

Anyway, there are some good traces that I can play around with.

    In [15]: good_cells = [cell for cell in cells if cell not in db_cells]
    In [16]: good_traces = [data['simData']['v_soma'][cell] for cell in good_cells]

** Chats

    joe [11:38 AM]
    uploaded this image: network130_traces_gid_200.png 


    joe [11:39 AM]
    Hey Sergio, I just re-ran your sim, and I’m still getting a lot of depolarization blockade (this is the same cell you posted a trace for earlier…)
    On your earlier trace, stim started at 200 and sim ended at 600 (mine has stim at 50 and sim ends at 800)…  So it seems like we’re not on the same page…

    joe [12:50 PM]
    added and commented on this Plain Text snippet: There are 382 cells that get depol blockade 
    In [8]: len(db_cells)
    Out[8]: 382
    In [9]: db_cells
    Out[9]: 
    Your batchAnalysis.detectDepolBlock() seems to work pretty well for detecting it…

    sergio [1:13 PM]
    This is really cool
    I have a batch that would like run with this
    I’m attending a friend’s wedding
    I’ll be offline for today
    But I’ll be back tomorrow

    joe [1:17 PM]
    Cool buddy. Have fun!

    sergio [9:58 AM]
    Hi  Joe, I have some results fro the batch, I think they have less depol block and less persistent activity. Do you want me to add this params to the repo and then you can check the analysis?

    joe [10:00 AM]
    Yeah, that’d be great. Thanks!

    sergio [10:01 AM]
    ok let me do that

    sergio [10:32 AM]
    ok Joe, I just pushed new params for the repo
    I’ll be back in 1h

    joe [11:02 AM]
    Thanks, Sergio. I’m mostly renovating today, but I’ll be around off and on. I’ll try running your params now.

    sergio [11:02 AM]
    Ok, thanks Joe!

    joe [12:11 PM]
    added and commented on this Python snippet: dev.py 
    import json
    from pprint import pprint
    ​
    ​
    ​
    def load_json(filename, show=False):
      """Loads a json file into Python and pretty prints it."""
      with open(filename) as data_file:
        data = json.load(data_file)
        if show: pprint(data)
        return data
    ​
    ​
    def detectDepolBlock(volt, minSamples=200, vRange=[-50, -10]):
      cumm = 0
      for v in volt:
        if v >= vRange[0] and v<= vRange[1]:
          cumm += 1
          if cumm > minSamples:
            return 1
        else:
          cumm = 0
    ​
      return 0 
    ​
    def list_all_dbs():
      dbs = []
      for cell in cells:
        trace = data['simData']['v_soma'][cell]
        db = detectDepolBlock(trace)
        if db == 1:
          dbs.append(cell)  
      return dbs
    ​
      
    data = load_json('/u/graham/sergio/eee/data/v29/network130.json')
    cells = data['simData']['v_soma'].keys()
    traces = [data['simData']['v_soma'][cell] for cell in cells]
    ​
    db_cells = list_all_dbs()     
    db_cells.sort()
    ​
    print("Number of Depol Block cells: " + str(len(db_cells)))
    print("Depol block cells:")
    print(db_cells)
    ​
    Collapse 
    `graham-mac% cd /u/graham/sergio/eee/sim/layersim/`
    `graham-mac% ipython -i dev.py`

    joe [12:11 PM]
    added and commented on this Plain Text snippet: Untitled 
    graham-mac% cd /u/graham/sergio/eee/sim/layersim/
    graham-mac% ipython -i dev.py
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul 2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.
    IPython 5.1.0 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    Number of Depol Block cells: 46
    Depol block cells:
    [u'cell_201', u'cell_205', u'cell_219', u'cell_221', u'cell_233', u'cell_235', u'cell_239', u'cell_299', u'cell_306', u'cell_314', u'cell_363', u'cell_386', u'cell_443', u'cell_445', u'cell_450', u'cell_524', u'cell_531', u'cell_535', u'cell_538', u'cell_539', u'cell_540', u'cell_546', u'cell_559', u'cell_609', u'cell_612', u'cell_613', u'cell_618', u'cell_620', u'cell_627', u'cell_638', u'cell_683', u'cell_687', u'cell_766', u'cell_781', u'cell_783', u'cell_784', u'cell_792', u'cell_797', u'cell_844', u'cell_872', u'cell_921', u'cell_947', u'cell_948', u'cell_951', u'cell_953', u'cell_957']
    In [1]:
    Collapse 
    Much better! Now only 46 cells in depol block…

    sergio [12:12 PM]
    nice!
    now, I need to select a series of params
    how can I run your analysis?

    joe [12:24 PM]
    added this Plain Text snippet: Untitled 
    I changed your cfg.py file to plot all traces (forces recording of all traces):
    cfg.analysis['plotTraces'] = {'include':['all'],'oneFigPer':'cell', 'colors': ['black'], 'figSize': (12,8),'saveFig': True ,'saveData': False,'showFig': False, 'ylim':[-100,30]} 
    (added 'all' to 'include')
    Then I did ./runsim and waited a long time.
    Then I executed dev.py (I posted it just a minute ago)
    Collapse 

    joe [12:25 PM]
    I’m still working on the plateau analyses, hopefully I’ll have it functional this weekend.  I’ll let you know.

    sergio [12:54 PM]
    perfect!
    thanks joe

    sergio [1:23 PM]
    just a question, dev.py is part of netpyne?

    joe [1:26 PM]
    No, I just threw that together because I was seeing depol block, and I wanted to know how widespread the problem was.
    dev = development code
    Something I picked up from the cool computer scientists.  :wink:

    sergio [1:32 PM]
    thanks :grimacing:, so dev.py is on the repo at /u/sergioangulo/projects/eee?

    joe [1:36 PM]
    I just pushed, so dev.py will be in layersim dir.  I changed cfg to plot all cells (forces recording), but you may want to set it to record all instead of plot all (1500 plots — takes awhile)

    sergio [1:43 PM]
    perfect! thanks again!




* 2018-02-26 -- Plateau analysis improvement

** TODO

Analyze Sergio plateaus
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club
Figure out a way to find glutAmps that threshold plateaus/depol block

** Analyzing Sergio's plateaus

    graham-mac% cd /u/graham/sergio/eee/sim/layersim/
    graham-mac% ipython -i dev.py

    Number of Depol Block cells: 46
    Depol block cells:
    [u'cell_201', u'cell_205', u'cell_219', u'cell_221', u'cell_233', u'cell_235', u'cell_239', u'cell_299', u'cell_306', u'cell_314', u'cell_363', u'cell_386', u'cell_443', u'cell_445', u'cell_450', u'cell_524', u'cell_531', u'cell_535', u'cell_538', u'cell_539', u'cell_540', u'cell_546', u'cell_559', u'cell_609', u'cell_612', u'cell_613', u'cell_618', u'cell_620', u'cell_627', u'cell_638', u'cell_683', u'cell_687', u'cell_766', u'cell_781', u'cell_783', u'cell_784', u'cell_792', u'cell_797', u'cell_844', u'cell_872', u'cell_921', u'cell_947', u'cell_948', u'cell_951', u'cell_953', u'cell_957']

    good_cells = [cell for cell in cells if cell not in db_cells]
    good_traces = [data['simData']['v_soma'][cell] for cell in good_cells]

Sergio's traces are all very noisy...  Rather than filtering them, I'm going to 
try reducing the noise and running the sim again.

I changed data loading in layersim/dev.py to relative paths:
    data = load_json('../../data/v29/network130.json')

Getting the latest copy of Sergio's repo:

    graham-mac% cd /u/graham/sergio/
    graham-mac% hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee
    graham-mac% cd eee/sim
    graham-mac% ./compile

Turning off the noise and running the sim.

    cfg.noise_amp = 0.0 #1.0

    graham-mac% cd /u/graham/sergio/eee/sim/layersim/
    graham-mac% ./runsim

Trying a low noise sim

cfg.noise_amp = 0.2 #1.0


Different noises:
file:gif/20180226_122549.png

I think we are using too much noise.  Plus reducing the noise makes measuring 
things easier...

Yeah, a low noise condition looks much better.




** Analyzing plateaus

Currently, the baseline for plateau measurements is the average membrane voltage
before the stim, but this is often not near potential at time of stim.

I will change baseline calculation to be average of 100 ms of potential right
before the stim.

I just realized my syntime is set to 100, but Sergio's network syns at 200.
Changing and re-running plateau analyses...

No need to change the baseline calculation I think.  Fixing the syntime improved
matters.

I need to prevent plateau measurements from preceding the syntime...
file:gif/20180226_151325.png

Improving above_index in meas_trace_plat_amp:
    
    above_index = [valind for valind, val in enumerate(trace) if val > (baseline + platthresh)]
      -->
    above_index = [valind for valind, val in enumerate(trace) if (val > (baseline + platthresh) and valind > syntime_index)]

Improving plat_dur:

    plattime = [time[ind] for ind,val in enumerate(trace) if (val > (platvolt-platamp/2) and (ind > syntime_index))]



** Plateau analysis

Plateaus versus non-plateaus:
file:gif/20180226_192148.png

Depol block:
file:gif/20180226_193826.png

Depol block false positives:
file:gif/20180226_194138.png

Ignore the last three figures.  I had the cells missorted into plateau and non-
plateau groups.

Fixed now.

Getting an error:

    graham-mac% cd /u/graham/sergio/eee/sim/layersim/
    graham-mac% ipython -i dev_joe.py
    Python 2.7.12 |Anaconda 4.2.0 (x86_64)| (default, Jul  2 2016, 17:43:17) 
    Type "copyright", "credits" or "license" for more information.

    IPython 5.1.0 -- An enhanced Interactive Python.
    ?         -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help      -> Python's own help system.
    object?   -> Details about 'object', use 'object??' for extra details.
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
     vecst.mod nstim.mod MyExp2SynBB.mod MyExp2SynNMDABB.mod NMDAeee.mod h_BS.mod kap_BS.mod kdmc_BS.mod kdr_BS.mod nax_BS.mod cadad.mod cat_mig.mod can_mig.mod cal_mig.mod h_kole.mod h_migliore.mod kBK.mod gabab.mod nafx.mod kdrin.mod IKsin.mod hin.mod canin.mod kapin.mod kctin.mod cadyn.mod kapcb.mod catcb.mod vecstim.mod Gfluct.mod Gfluctp.mod AMPA.mod GABAA.mod

    Number of Depol Block cells: 21
    Depol block cells:
    [u'cell_201', u'cell_203', u'cell_239', u'cell_282', u'cell_291', u'cell_292', u'cell_306', u'cell_372', u'cell_466', u'cell_478', u'cell_540', u'cell_559', u'cell_619', u'cell_705', u'cell_783', u'cell_847', u'cell_863', u'cell_923', u'cell_947', u'cell_951', u'cell_952']
    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    /u/graham/sergio/eee/sim/layersim/dev_joe.py in <module>()
        134     num_spikes_non_plat.append(num_spike)
        135 
    --> 136     plat_amp, plat_volt = ba.meas_trace_plat_amp(data['simData']['v_soma'][cell], showwork=False)
        137     plat_amps_non_plat.append(plat_amp)
        138 

    /u/graham/projects/eee/sim/batch_analysis.pyc in meas_trace_plat_amp(trace, time, recstep, syntime, platthresh, stable, showwork, spikethresh)
         99             maxind = np.max(above_index)
        100             v_above = trace[minind:maxind]
    --> 101             platvolt = np.max(v_above)
        102             platamp = np.max(v_above) - baseline
        103     elif len(spike_indices) == 1:

    /usr/local/lib/python2.7/site-packages/numpy/core/fromnumeric.pyc in amax(a, axis, out, keepdims)
       2291         except AttributeError:
       2292             return _methods._amax(a, axis=axis,
    -> 2293                                 out=out, **kwargs)
       2294         return amax(axis=axis, out=out, **kwargs)
       2295     else:

    /usr/local/lib/python2.7/site-packages/numpy/core/_methods.pyc in _amax(a, axis, out, keepdims)
         24 # small reductions
         25 def _amax(a, axis=None, out=None, keepdims=False):
    ---> 26     return umr_maximum(a, axis, None, out, keepdims)
         27 
         28 def _amin(a, axis=None, out=None, keepdims=False):

    ValueError: zero-size array to reduction operation maximum which has no identity

    In [1]: 

Needed to change Line 97 from:
       if len(above_index) > 0:
to
       if len(above_index) > 1:

Hmmm... No crash, but now I'm getting some negative plateau amplitudes

Problem seems to be when there are spikes before the plateau syntime:
file:gif/20180226_215623.png

Fixed that problem, still getting negative values.  Seems to be because using
the interspike minimum is a poor measure when the traces are noisy.

Need to use some sort of interspike mean... 

But I should really "clip out" the spikes first.  I should also clip out any
spikes before the syntime from the baseline measurement...

Created a spike clipper:

    def clip_spike_trace(trace, time=None, recstep=recstep, clipwidth=10, spikethresh=spikethresh, showwork=False):

        if time is None:
            timesteps = len(trace)
            time = recstep * np.arange(0, timesteps, 1)

        spike_times, spike_indices = meas_trace_spike_times(trace, time=time, recstep=recstep, spikethresh=spikethresh, showwork=False)

        clipwidth_ind = int((clipwidth/recstep)/2) # the radius of the clip in indices

        orig_trace = trace
        orig_time  = time

        if len(spike_times) > 0:

            remove_indices = []

            for spki in spike_indices:
                remove_indices.extend(range(spki - clipwidth_ind, spki + clipwidth_ind + 1))

            trace = [i for j, i in enumerate(trace) if j not in remove_indices]
            time = [i for j, i in enumerate(time) if j not in remove_indices]

        if showwork is not False:
            fig = plt.figure()
            plt.plot(orig_time, orig_trace, label="Original", linewidth=1)
            for spktm in spike_times:
                plt.plot([spktm, spktm], plt.gca().get_ylim(), 'r-', alpha=0.75)
            plt.plot(plt.gca().get_xlim(), [spikethresh, spikethresh], 'g-')
            plt.plot(time, trace, 'k-', label="Clipped", linewidth=2)
            plt.ylabel("Membrane Potential (mv)")
            plt.xlabel("Time (ms)")
            plt.title("Trace Spike Times")
            plt.ylim([-80, 20])
            plt.legend()
            if type(showwork) == str:
                fig.savefig(showwork + ".png")
            if showwork is True:
                plt.show()
            else:
                plt.close(fig)

        return trace, time

Now testing it out.

Better, but still getting some negative plateau amplitudes, e.g.:
file:gif/20180227_004104.png

I need to trim the v_above list if there aren't enough consecutive indices in 
a row (i.e. remove little blurbs above threshold)

def clip_blurbs(above_index, clipwidth=101):
    new_above_index = []
    for index_index, index_val in enumerate(above_index):
        prev_index_val = index_val
        if index_index > 1 and index_index < len(above_index):
            if all(x in above_index for x in range(index_val, index_val + clipwidth)):
                new_above_index.append(index_val)
            elif (prev_index_val in new_above_index) and (any(x in above_index for x in range(ind, ind + clipwidth))):
                new_above_index.append(index_val)
            else:
                new_above_index.append(0)
        else:
            new_above_index.append(0)
    return new_above_index



* 2018-02-27 -- EEE Meeting and network plateaus

** TODO

Analyze Sergio plateaus
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club
Figure out a way to find glutAmps that threshold plateaus/depol block



** Created function to clip out blurbs above threshold

In batch_analysis:

    def clip_trace_thresh(trace, time=None, threshdur=threshdur, stable=stable, platthresh=platthresh, recstep=recstep, syntime=syntime, showwork=False):

        syntime_index = int(syntime / recstep) - 1
        stable_index = int(stable / recstep)
        pre_index = range(len(trace))
        threshdur = int(threshdur / recstep)

        if time is None:
            timesteps = len(trace)
            time = recstep * np.arange(0, timesteps, 1)

        baseline_trace, baseline_time = clip_trace_spikes(trace[stable_index:syntime_index], time=time[stable_index:syntime_index], recstep=recstep, spikethresh=spikethresh)
        baseline = np.mean(baseline_trace)
        
        above_index = [valind for valind, val in enumerate(trace) if (val > (baseline + platthresh) and (valind > syntime_index))]
        above_time  = [i for j, i in enumerate(time) if j in above_index]
        new_above_index = []
        
        for index_index, index_val in enumerate(above_index):
            #print("index_index: %i \t index_val: %i \t time: %.4f" % (index_index, index_val, above_time[index_index]))

            prev_index_val = index_val - 1

            if index_index > 1 and index_index < len(above_index):
                if all(x in above_index for x in range(index_val, index_val + threshdur)):
                    new_above_index.append(index_val)
                    #print("  all = True")
                elif (prev_index_val in new_above_index) and (any(x in above_index for x in range(index_val, index_val + threshdur))):
                    new_above_index.append(index_val)
                    #print("    any forward = True")
                elif (all(x in above_index for x in range(index_val - 1, index_val - threshdur - 1, -1))):
                    new_above_index.append(index_val)
                    #print("    all backward = True")
                    print[x in above_index for x in range(index_val, index_val - threshdur - 1, -1)]
                else:
                    pass
                    #print("      prev_index_val: %i" % prev_index_val)
                    #new_above_index.append(np.NaN)
            else:
                pass
                #new_above_index.append(np.NaN)


        new_trace = [i for j, i in enumerate(trace) if j in new_above_index]
        new_time = [i for j, i in enumerate(time) if j in new_above_index]

        remove_trace = [i for j, i in enumerate(trace) if j not in new_above_index]
        remove_time = [i for j, i in enumerate(time) if j not in new_above_index]   
        
        if showwork is not False:
            fig = plt.figure()
            plt.plot(time, trace, label="Original")
            plt.plot([time[0], time[-1]], [baseline, baseline], 'g', label="Baseline")
            plt.plot([time[0], time[-1]], [baseline+platthresh, baseline+platthresh], 'r', label="Threshold")
            plt.plot(new_time, new_trace, 'bo', linewidth=2, label="Kept")
            plt.plot(remove_time, remove_trace, 'xr', linewidth=2, label="Removed")
            
            plt.ylabel("Membrane Potential (mv)")
            plt.xlabel("Time (ms)")
            plt.title("Trace Plateau Amplitude")
            plt.ylim([-80, 20])
            plt.legend()
            if type(showwork) == str:
                fig.savefig(showwork + ".png")
            if showwork is True:
                plt.show()
            else:
                plt.close(fig)

        return new_above_index

Seems to be working, but slow.  Will commit and restart computer.
changeset:   533:f840144cd2b7


** EEE Meeting

Noise figure to show:
file:gif/20180227_125359.png

Meeting

Srdjan: need to fix a few issues before finishing article (Penny is working on it)

Penny:  shows time constant comparison for plat/non-plat: plateau has faster (shorter)
        time constant --> wants this to be figure in article

Bill:   we're okay with a RMP of -80mV?  
Salva:  corticospinal pyramidal cells sit at -80 to -85 mV (Ben Suter paper)

Penny:  need to reduce AHP in model, currently too deep.  Discussion about 
        reducing potassium currents

Penny:  wants to use Netpyne to explore params, Joe has already ported her model
        and experiment to Netpyne.  Srdjan and Bill both think to wait on Netpyne.

Bill:   what journal are we aiming for?

Srdjan: don't care about journal, just need an article out

Bill:   Joe should work on exploring behavior of simple model

Joe:    Network model has too much noise!  Everyone agrees, Srdjan doesn't even
        see noise like that in his experiments

Bill:   Joe should work on simple model, posts some results to Slack this week

Joe:    We also have a problem with depol blockade, advice?  Salva: it's a common
        problem in modeling, just need to play around with params and test for it



** Plateau analysis

Analysis figure
file:gif/20180227_163812.png

And with lower noise:
file:gif/20180227_164218.png

With correct log scale to compare with earlier.
file:gif/20180227_164436.png




* 2018-02-28 -- Netpyne batching

** TODO

Run and show Penny how to use Netpyne batches for her model
Run and show Sergio how to use batches
Remove anti-noise function that takes so long to run
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block


** Detailed model in Netpyne

First I'll update Netpyne.

    graham-mac% nsimupdate

Detailed model is in my repo (clone of Penny's repo) here:
/u/graham/projects/eee/sim/eee_detailed_model

I'll make sure I have the latest copy of Penny's repo.

I do.  Now I pushed my changes to Penny's repo.

    peng gao (Penny)  EEE_detailed_model  Commits
    Commit
     Joe Graham  committed f032162
    3 minutes ago
    View source  
    Approve
     Added a .gitignore file, added netpyne dir, modified CA229.py to work with Netpyne, added CA229simp.py

    Participants
     joewgraham
    Parent commits 1e43059
    Branches master
    TagsNo tags
    Raw commit View raw commit
    Watch Stop watching
    Run pipeline
    Comments (0)


    Files changed (40)
    +6 -0 A .gitignore
    +9 -0 M CA229.py
    +484 -0 A CA229simp.py
    +1 -0 A netpyne/CA229.py
    +0 -0 A netpyne/__init__.py
    +1 -0 A netpyne/analyze.py
    +1 -0 A netpyne/batch_bap/CA229.py
    +1 -0 A netpyne/batch_bap/analyze.py
    +1 -0 A netpyne/batch_bap/batch_analysis.py
    +1 -0 A netpyne/batch_bap/batch_init.py
    +1 -0 A netpyne/batch_bap/batch_utils.py
    +123 -0 A netpyne/batch_bap/cfg.py
    +1 -0 A netpyne/batch_bap/instantiate.py
    +96 -0 A netpyne/batch_bap/my_batches.py
    +191 -0 A netpyne/batch_bap/netParams.py
    +1 -0 A netpyne/batch_bap/runmybatches
    +1 -0 A netpyne/batch_glutAmp/CA229.py
    +1 -0 A netpyne/batch_glutAmp/analyze.py
    +1 -0 A netpyne/batch_glutAmp/batch_analysis.py
    +1 -0 A netpyne/batch_glutAmp/batch_init.py
    +1 -0 A netpyne/batch_glutAmp/batch_utils.py
    +123 -0 A netpyne/batch_glutAmp/cfg.py
    +1 -0 A netpyne/batch_glutAmp/instantiate.py
    +199 -0 A netpyne/batch_glutAmp/my_batches.py
    +213 -0 A netpyne/batch_glutAmp/netParams.py
    +1 -0 A netpyne/batch_glutAmp/runmybatches
    +1 -0 A netpyne/batch_init.py
    +1 -0 A netpyne/batch_simp/CA229.py
    +1 -0 A netpyne/batch_simp/CA229simp.py
    +1 -0 A netpyne/batch_simp/analyze.py
    +1 -0 A netpyne/batch_simp/batch_analysis.py
    +1 -0 A netpyne/batch_simp/batch_init.py
    +1 -0 A netpyne/batch_simp/batch_utils.py
    +124 -0 A netpyne/batch_simp/cfg.py
    +1 -0 A netpyne/batch_simp/instantiate.py
    +210 -0 A netpyne/batch_simp/my_batches.py
    +214 -0 A netpyne/batch_simp/netParams.py
    +1 -0 A netpyne/batch_simp/runmybatches
    +1 -0 A netpyne/instantiate.py
    +1 -0 A netpyne/runmybatches

    File .gitignore ADDED
    +# Files for Git to ignore
    +x86_64
    +*.pyc
    +**/batch_data/*
    +**/batch_figs/*
    +Data*

Okay, time to set up a batch to explore Penny's cell model.

Working in:
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/my_batches.py

Added to my_batches.py:

    # Varying Potassium conductance scale
    batch = {}
    batch["label"] = "allKScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["allKScale"] = [0.50, 0.75, 1.0, 1.25, 1.5]
    batch["params"] = params
    batches[batch["label"]] = batch


Running the batch:

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/
    graham-mac% ./runmybatches

Hard to see the effect on AHPs.  Trying another batch with more values, and 
including a range of glutAmps.

    # Varying Potassium conductance scale and glutAmp
    batch = {}
    batch["label"] = "allKScale_glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["allKScale"] = [0.25, 0.50, 0.75, 1.0]
    params["glutAmp"] = list(np.linspace(0.0, 0.5, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

Running and analyzing:

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/ ; ./runmybatches ; ipython -i analyze.py

Trying one where I increase K above default to see effects:

    # Varying Potassium conductance scale and glutAmp
    batch = {}
    batch["label"] = "allKScale_glutAmp_2"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["allKScale"] = [0.25, 0.50, 1.0, 2.0]
    params["glutAmp"] = list(np.linspace(0.0, 0.5, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

Output:
    file:gif/20180228_174348.png

I should improve the batch figure such that zooming in on one subplot zooms in
on all of them to the same range...

Working in batch_analysis:

    subplotind += 1
    ax = plt.subplot(rows, cols, subplotind)
 
    -->

    subplotind += 1
    if subplotind == 1:
        ax = plt.subplot(rows, cols, subplotind)
        ax_share = ax
    else:
        ax = plt.subplot(rows, cols, subplotind, sharex=ax_share, sharey=ax_share)

Had to fix ticks and ticklabels using info from here:

    https://matplotlib.org/examples/pylab_examples/shared_axis_demo.html

    """
    You can share the x or y axis limits for one axis with another by
    passing an axes instance as a sharex or sharey kwarg.

    Changing the axis limits on one axes will be reflected automatically
    in the other, and vice-versa, so when you navigate with the toolbar
    the axes will follow each other on their shared axes.  Ditto for
    changes in the axis scaling (e.g., log vs linear).  However, it is
    possible to have differences in tick labeling, e.g., you can selectively
    turn off the tick labels on one axes.

    The example below shows how to customize the tick labels on the
    various axes.  Shared axes share the tick locator, tick formatter,
    view limits, and transformation (e.g., log, linear).  But the ticklabels
    themselves do not share properties.  This is a feature and not a bug,
    because you may want to make the tick labels smaller on the upper
    axes, e.g., in the example below.

    If you want to turn off the ticklabels for a given axes (e.g., on
    subplot(211) or subplot(212), you cannot do the standard trick

       setp(ax2, xticklabels=[])

    because this changes the tick Formatter, which is shared among all
    axes.  But you can alter the visibility of the labels, which is a
    property

      setp( ax2.get_xticklabels(), visible=False)

    """

It works now, and zooming in on one plot zooms in on all.  :)

Committing now.


* 2018-03-01 -- Improving plateaus measures

** TODO

Run and show Penny how to use Netpyne batches for her model
Run and show Sergio how to use batches
Remove anti-noise function that takes so long to run
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block


** Remove anti-noise function that takes so long to run

Also, it affects the measurement of non-noisy plateaus and experimental data.

And time to first spike now has negative values.

Need to figure out what's going on.

Problem might be the syntime setting...  Yup.  Going to try to automate...

Adding cfg.synTime to cfg file.  Will pull that from cfg during batch_analysis 
to set the syntime.

batch_analysis:
    syntime      = cfg.synTime  #200    # time in ms when glutamate is released (synapse time)

That works and it solved the negative time to first spike problem.

Now looking into experimental data changes between analyses...

Working in /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/dev.py

Clipping the spikes and averaging doesn't do a good job of measuring plateaus.
Going back to the old method.  I'll have to test the old method with slightly 
noisy data again...

Actually, clipping spikes at a width of 3.0 ms and setting the plateau threshold
to 15 mV looks really good in terms of plateau measurements.

I'm going to try these settings on sims now.

my_batches.py:

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp04"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.0, 0.4, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp05"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.0, 0.5, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp06"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.0, 0.6, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

running:

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/ ; ./runmybatches ; ipython -i analyze.py

I looked at the plat amp and dur measurements for glutAmp04 and it looks good!

Now to check how it looks for TTX cells.

cfg.allNaScale  = 0.0

Output:
    file:gif/20180301_143746.png

Left column is normal, right column is TTX.  The plateau measurements are almost 
identical!!

Committing now.
changeset:   535:cec022b76aab


** Trying plateau analysis out on Sergio's low noise sim

Looks pretty good overall, but the baseline measurement seems a bit off...

Looking into it.

Switching tracks for a bit.  Penny has a new cell model.


** Testing Penny's new cell params

From Slack:

    Hey Joe, I added a new file in the bitbucket repo: CA229_v2.py.  It now has better time constant and RMP. I haven’t finished confirming all other properties yet. I will replace the older CA229.py with it when confirmed. Just in case u need those parameters now.

I need to symlink the new cell file into the netpyne dirs.



* 2018-03-02 -- Fixing plateau measurement (baseline)

** TODO

Change NMDAmgslope.mod back to NMDAeee.mod
Look into baseline measurement
Test out Penny's new detailed cell model
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block


** Testing Penny's new cell params

Need to symlink:
    /u/graham/projects/eee/sim/eee_detailed_model/CA229_v2.py

Into:
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp

Command:
    ln -s original symlink

Running:

    ln -s /u/graham/projects/eee/sim/eee_detailed_model/CA229_v2.py /u/graham/projects/eee/sim/eee_detailed_model/netpyne/CA229_v2.py

    ln -s /u/graham/projects/eee/sim/eee_detailed_model/CA229_v2.py /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_bap/CA229_v2.py

    ln -s /u/graham/projects/eee/sim/eee_detailed_model/CA229_v2.py /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_glutAmp/CA229_v2.py

    ln -s /u/graham/projects/eee/sim/eee_detailed_model/CA229_v2.py /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp/CA229_v2.py


I notice that I should change my mod NMDAmgslope.mod back to NMDAeee.mod.
Adding that to my list.

In netParams of each batch dir I want to use new cell in, I will have to change

    cellRule = netParams.importCellParams(label='eeeD', conds={'cellType': 'eeeD', 'cellModel': 'PFC_full'}, fileName='CA229.py', cellName='MakeCA229')

    -->

    cellRule = netParams.importCellParams(label='eeeD', conds={'cellType': 'eeeD', 'cellModel': 'PFC_full'}, fileName='CA229_v2.py', cellName='MakeCA229')

I added this to the bottom of CA229_v2.py to allow importing into Netpyne:

    ############################################
    # Function for importing cell into NetPyNE
    ############################################
    def MakeCA229():
        cell = CA229()
        return cell


** Looking into baseline measurement

I improved baseline measurement in meas_trace's but not in meas_batch's.

Adding it in now.

    baseline_trace, baseline_time = clip_spike_trace(trace[stable_index:syntime_index], time=time[stable_index:syntime_index], recstep=recstep, spikethresh=spikethresh)
        baseline = np.mean(baseline_trace)

Now running analysis on Sergio's low noise network.

    graham-mac% cd /u/graham/sergio/eee/sim/layersim/ ; ipython -i dev_joe.py

Increasing "stable" to 150 ms to see effect...

Hmmm... The analysis plots don't have the baseline/threshold/amplitude lines...

Baseline somehow became a NaN...

The problem is that batch_analysis gets syntime from cfg:
    syntime      = cfg.synTime  #200    # time in ms when glutamate is released (synapse time)

But there is no way for batch_analysis to know which batch cfg to use (it pulls
cfg from the same dir as batch_analysis.py)

I'll change it back to not using cfg to get the syntime.
    syntime      = 200    # time in ms when glutamate is released (synapse time)

That fixed the problem.

Changing the plateau threshold from 15 to 10 mV to see the difference
(seem to be missing some plateaus at 15)

Looks better.  I'll keep it at 10 mV.


* 2018-03-05 -- Comparing detailed and simple

** TODO

Change NMDAmgslope.mod back to NMDAeee.mod
Test out Penny's new detailed cell model
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block


** Testing Penny's new cell params

First I will compare CA229 and CA229_v2

Creating a new batch dir (copying from batch_glutAmp): 
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/

Adding the simplified cell (eeeS) to cfg and netParams.

Adding a glutAmp range batch to my_batches.py:

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp01"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.0, 0.4, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

Aaaaand taking it for a test drive:
    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/ ; ./runmybatches
    graham-mac% ipython -i analyze.py

Having trouble getting the simple model to plot.  Seems to be because sec names 
are different between the models. 

Asking on Slack:

    joe [10:51 AM]
    I’m trying to include both the detailed and simplified eee models in the same Netpyne sim, but I’m having trouble recording from both, because the sections aren’t the same…

    In the simple model, I want to record V_soma as `cfg.recordTraces = {'V_soma': {'sec': 'soma', 'loc': 0.5, 'var': 'v'}}`

    In the detailed model, it would be `cfg.recordTraces = {'V_soma': {'sec': 'soma_2', 'loc': 0.5, 'var': 'v'}}`

    Is there a way to record both of these as `V_soma`?
    @salvadord?

    salvadord [10:58 AM]
    you can use conditions for each recordTrace eg. `{'conds': {'cellType':'simplified'}, ...}` but unfortunately cannot use the same ‘V_soma’ label since that would replace the dict entry

    joe [11:00 AM]
    Hmmm… That makes it awkward, because my analysis looks for V_soma…
    Any ideas of how to work around this?

    salvadord [11:00 AM]
    you could also replace the simplified soma to ‘soma_2’ — you can use eg the netParams method `renameCellParamsSec(label, oldSec, newSec)`

    joe [11:00 AM]
    That sounds like it would work, I’ll give it a try.  Thanks, Salva!

    salvadord [11:01 AM]
    or maybe can call trace recordings ‘V_soma_simple’ and ‘V_soma_detailed’ and in your analysis use .startswith(‘V_soma’)

    joe [11:02 AM]
    That sounds even easier.  I’ll try that route.

Modifying the cfg file:

    cfg.recordTraces = {'V_soma_D': {'sec': 'soma_2', 'loc': 0.5, 'var': 'v'}}
    cfg.recordTraces['V_dend1_D'] = {'sec': 'basal_34', 'loc': 0.3, 'var': 'v'}
    cfg.recordTraces['V_dend2_D'] = {'sec': 'basal_34', 'loc': 0.5, 'var': 'v'}
    cfg.recordTraces['V_dend3_D'] = {'sec': 'basal_34', 'loc': 0.8, 'var': 'v'}

    cfg.recordTraces['V_soma_S'] = {'sec': 'soma', 'loc': 0.5, 'var': 'v'}
    cfg.recordTraces['V_dend1_S'] = {'sec': 'Bdend1', 'loc': 0.3, 'var': 'v'}
    cfg.recordTraces['V_dend2_S'] = {'sec': 'Bdend1', 'loc': 0.5, 'var': 'v'}
    cfg.recordTraces['V_dend3_S'] = {'sec': 'Bdend1', 'loc': 0.8, 'var': 'v'}

Actually, I am going to try renaming the simple soma as soma_2...

Fixing a lot of little things...

That works.

changeset:   536:2e41aa5910cd

I can run and analyze with:

    cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/ ; ./runmybatches ; ipython -i analyze.py

But that doesn't spit out the plateau comparison figures for the simplified model...

I need to remove the hardcoded cellIDs=0 in plot_plat_comps() and have cellIDs = None 
lead to plotting for all cells.


* 2018-03-06 -- Fix plateau measurements, Penny's new cell

** TODO

Finish fixing plot_plat_comps
Change NMDAmgslope.mod back to NMDAeee.mod
Test out Penny's new detailed cell model
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block
Need to update CA229simp.py to match Penny's CA229_v2.py

** Finish fixing plot_plat_comps

Need to fix legend on interspike interval, time to spike plots.

Done.

Still want to change plateau plotting a bit, if cellIDs is:
  None  : cycles through all cells individually
  "all" : plots all cells on same figures

Had to fix all the saving functions to save in correct dir and avoid overwriting.

Everything seems to be working properly now.


** There is a problem with measuring plateau amplitude

Looking into why plateau amplitudes have mostly disappeared...

Problem was I had stable set to 150, when syntime was only 100.

Fixed problem with showwork.

changeset:   538:fa6ae94893cb

Fixed a problem where the experimental data wasn't being plotted when 
expdata=True


** Testing Penny's new cell

Updated Penny's repo
ed6a2ba

changeset:   539:3406a1666819

Penny is working here:
    Experiment_no_spines_v2.py

I want to match her glutamate params and compare my output with hers.

Oops.  Seem to be missing her NMDAeee.mod

    joe [10:59 AM]
    Hey Penny, it seems you must have an `NMDAeee.mod` file in your `mod` dir that you don’t have committed in Git?

    penny [10:59 AM]
    Yes yes, I forgot about that one. I will commit it now.

    joe [11:00 AM]
    Thanks! I just want to use exactly the same stuff so debugging is easier.

    penny [11:03 AM]
    Of course. Make sense.
    Its updated. I think I moved gmax to range in your previous NMDAeee.mod file

Pulled her repo.

Committing to mine.
changeset:   540:fe748b95b19b

Need to update CA229simp.py to match Penny's CA229_v2.py, adding to list

Compiling Penny's mod files.

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/ ; python compile.py

And running her experiment:

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/ ; ipython -i Experiment_no_spines_v2.py

Penny's output:
file:gif/20180306_115613.png

Penny's GluStim:
    def Glu_Stim(TTX = False, Pool1_num = 9, Pool2_num = 9, Beta = 0.067,
                Cdur = 1, Syn_w1 = 0.01, Syn_w2 = 0.01, Loc = [0.2, 0.6]):

    loc = [0.3, 0.6]
    weight = [0.8]

    for w in weight:
        Pool_num = 8 + int(20*w)
        Glu_Stim(False, Pool_num, Pool_num, 0.02, 50 + int(100*w), w, w, loc)
        Glu_Stim(True, Pool_num, Pool_num, 0.02, 50 + int(100*w), w, w, loc)

Pool1_24_Pool2_24_NMDA_Beta_0.02_NMDA_Cdur_130_Pool1_W_0.8_Pool2_W_0.8_20180306-1115.png

She is stimming at 190 (but I'll set mine to 200)

Penny's params:
    Poolnums = 24
    AMPA gmax = 0.04
    NMDA gmax = 0.01
    ExNMDA gmax = 0.01
    NMDA Beta = 0.02
    NMDA Cdur = 50 + int(100*w) = 130
    Syn delay = random_2(10, 50 + int(Syn_w1*50), Pool1_num) =  shuffled uniform between 10 and 90
    ExSyn delay = random_2(15, 55 + int(Syn_w2*60), Pool2_num) = shuffled uniform between 15 and 103

From Penny's experiment:
    delay1
    [ 27.39130435  13.47826087  34.34782609  16.95652174  48.26086957
      51.73913043  83.04347826  55.2173913   58.69565217  20.43478261
      86.52173913  30.86956522  72.60869565  44.7826087   79.56521739  90.
      37.82608696  76.08695652  65.65217391  69.13043478  10.          62.17391304
      23.91304348  41.30434783]

    delay2
    [  34.13043478   18.82608696   41.7826087    22.65217391   57.08695652
       60.91304348   95.34782609   64.73913043   68.56521739   26.47826087
       99.17391304   37.95652174   83.86956522   53.26086957   91.52173913
      103.           45.60869565   87.69565217   76.2173913    80.04347826
       15.           72.39130435   30.30434783   49.43478261]

This is how Penny randomizes:

    def random_2(low, high, size):
        time_random = np.linspace(low, high, size)
        np.random.seed(10)
        np.random.shuffle(time_random)
        return time_random

It's a little odd...  I'll have to ask her about it.  

Also ask about why weight is used in determining Cdur and the upper range of delays.

Here's how I'll set my params:

    # DMS NMDA params
    cfg.NMDAAlphaScale = 1.0 # Scales original value of 4.0
    cfg.NMDABetaScale  = 13.3 # Scales original value of 0.0015 (0.2/0.0015 = 13.3)
    cfg.CdurNMDAScale  = 130.0 # Scales original value of 1.0
    cfg.NMDAgmax       = 0.01
    cfg.ratioAMPANMDA  = 4.0

    # glutamate stim parameters
    cfg.synTime           = 200.0
    cfg.numSyns           = 24
    cfg.numExSyns         = 24
    cfg.glutAmp           = 0.8
    cfg.glutAmpExSynScale = 1.0
    cfg.synLocStart       = 0.3
    cfg.synLocSpread      = 0.3 # 0.3 makes the spread from 0.3 to 0.6
    
    cfg.synDelay          = 12.5
    cfg.exSynDelay        = 16.0


Need to figure out how to do the delays...  Maybe just sample from a uniform distribution...

For now I'll just do this in netParams:

    if "ExSyn" in nslabel:
        cur_weight = cfg.glutAmp * cfg.glutAmpExSynScale
        cur_delay = np.random.uniform(10, 90)
    elif "Syn" in nslabel:
        cur_weight = cfg.glutAmp
        cur_delay = np.random.uniform(15, 103)
    else:
        raise Exception("NetStim must have Syn or ExSyn in name")

And this:

    netParams.stimTargetParams[nslabel+'_'+cur_pop+'_'+ns['synMech'][i]] = \
        {'source': nslabel, 'conds': {'pop': cur_pop}, 'sec': ns['sec'], 'synsPerConn': cfg.numSyns, 'loc': list(np.linspace(cfg.synLocStart, cfg.synLocStart + cfg.synLocSpread, cfg.numSyns)), 'synMech': ns['synMech'][i], 'weight': cur_weight, 'delay': cur_delay}

Later I'll need to parameterize the range in cfg and link to netParams.

Running:

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/ ; ./runmybatches ; ipython -i analyze.py




* 2018-03-07 -- Comparing model versions

Test out Penny's new detailed cell model
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block
Need to update CA229simp.py to match Penny's CA229_v2.py


** Working on Penny's model and simplified model

Checking on delay times... they seem too create too much vairaibility in when
the plateau starts

I was only putting sampling one delay for each syn.  Changed it to a random uniform
sample for each.

Netpyne crashing.  

Turns out Netpyne doesn't like arrays -- it likes lists.  

About to change batch_comp to compare Penny's two cell versions instead of 
detailed versus simple.

    cellRule = netParams.importCellParams(label='eeeD1', conds={'cellType': 'eeeD1', 'cellModel': 'PFC_full'}, fileName='CA229.py', cellName='MakeCA229')

    cellRule = netParams.importCellParams(label='eeeD2', conds={'cellType': 'eeeD2', 'cellModel': 'PFC_full'}, fileName='CA229_v2.py', cellName='MakeCA229')

    #cellRule = netParams.importCellParams(label='eeeS', conds={'cellType': 'eeeS', 'cellModel': 'PFC_simp'}, fileName='CA229simp.py', cellName='MakeCA229simp')


Hmmm...  My different cells are getting different delay times from random sampling
I should probably sample once outside the loop and then index into that in the loop



** Comparing Penny's two model versions

Copied batch_comp to:
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_vcomp

Getting an error:

    ---------------------------------------------------------------------------
    KeyError                                  Traceback (most recent call last)
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_vcomp/batch_init.py in <module>()
         34 
         35 # setup variables to record for each cell (spikes, V traces, etc)
    ---> 36 sim.setupRecording()
         37 
         38 # run parallel Neuron simulation

    /usr/site/nrniv/local/python/netpyne/netpyne/simFuncs.pyc in setupRecording()
        902 
        903         # get actual cell objects to record from, both from recordCell and plotCell lists
    --> 904         cellsRecord = getCellsList(sim.cfg.recordCells)+cellsPlot
        905 
        906         for key in sim.cfg.recordTraces.keys(): sim.simData[key] = Dict()  # create dict to store traces

    /usr/site/nrniv/local/python/netpyne/netpyne/simFuncs.pyc in getCellsList(include)
        958 
        959         elif isinstance(condition, basestring):  # entire pop
    --> 960             cellGids.extend(list(sim.net.pops[condition].cellGids))
        961 
        962         elif isinstance(condition, tuple) or isinstance(condition, list):  # subset of a pop with relative indices

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in __getitem__(self, k)
        172 
        173     def __getitem__(self, k):
    --> 174         return super(ODict, self).__getitem__(k)
        175 
        176 

    KeyError: 'eeeD1'

Looking into.

Problem was in netParams, forgot to update:

    netParams.popParams['eeeD']= {'cellModel':'PFC_full', 'cellType':'eeeD', 'numCells':1}
    netParams.popParams['eeeS']= {'cellModel':'PFC_simp', 'cellType':'eeeS', 'numCells':1}

      -->

    netParams.popParams['eeeD1']= {'cellModel':'PFC_full', 'cellType':'eeeD1', 'numCells':1}
    netParams.popParams['eeeD2']= {'cellModel':'PFC_full', 'cellType':'eeeD2', 'numCells':1}

Running:

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_vcomp/ ; ./runmybatches ; ipython -i analyze.py

Works now.



* 2018-03-09 -- Figures

Fix randomization of delay times
Test out Penny's new detailed cell model
Look into simp model -- input impedance
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block
Need to update CA229simp.py to match Penny's CA229_v2.py


** Improving plot_antic_plateaus to easily plot experimental data

Actually, I think the best thing to do is to come up with an import function
that gets experimental data into the same format as Netpyne.

So I'll need params and data

params

    [{u'label': u'glutAmp',
      u'values': [0.0, 0.06, 0.11, 0.17, 0.22, 0.28, 0.33, 0.39, 0.44, 0.5]}]

data

    In [10]: data.keys()
    Out[10]: ['_9', '_8', '_7', '_6', '_5', '_4', '_3', '_2', '_1', '_0']

    In [11]: data[data.keys()[0]].keys()
    Out[11]: 
    [u'netpyne_version',
     u'simConfig',
     u'simData',
     'paramValues',
     u'net',
     u'netpyne_changeset']

    In [12]: data[data.keys()[0]]['paramValues']
    Out[12]: (0.5,)

    In [13]: data[data.keys()[0]]['simData'].keys()
    Out[13]: 
    [u'spkt',
     u'V_dend3_D',
     u'avgRate',
     u'spkid',
     u'V_soma',
     u't',
     u'popRates',
     u'V_dend1_D',
     u'V_dend2_D']

    In [14]: data[data.keys()[0]]['simData']['V_soma'].keys()
    Out[14]: [u'cell_1', u'cell_0']

Will come back to this later.



* 2018-03-13 -- Spineless model

Explore simplified model
Fix randomization of delay times
Test out Penny's new detailed cell model
Look into simp model -- input impedance
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block
Need to update CA229simp.py to match Penny's CA229_v2.py


** Exploring simplified model

Working in:
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp/my_batches.py

# Varying glutAmp
batch = {}
batch["label"] = "glutAmp01"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["glutAmp"] = list(np.linspace(0.0, 0.5, 10).round(2))
batch["params"] = params
batches[batch["label"]] = batch

# Varying glutAmp
batch = {}
batch["label"] = "RmScale01"
batch["cfgFile"] = "cfg.py"
batch["netParamsFile"] = "netParams.py"
params = OrderedDict()
params["RmScale"] = [0.1, 0.25, 0.5, 0.75, 1.0]
batch["params"] = params
batches[batch["label"]] = batch

graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp/ ; ./runmybatches ; ipython -i analyze.py

Error:

    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_simp/netParams.py in <module>()
        133             except:
        134                 print(sec['mechs']['pas']['g'])
    --> 135                 sec['mechs']['pas']['g'] = (1.0/cfg.RmScale) * sec['mechs']['pas']['g']
        136         if hasattr(cfg, 'e_pas'):
        137             if 'pas' in sec['mechs']:

    TypeError: can't multiply sequence by non-int of type 'float'

Changing:

    sec['mechs']['pas']['g'] = (1.0/cfg.RmScale) * sec['mechs']['pas']['g']
      -->
    sec['mechs']['pas']['g'] = list((1.0/cfg.RmScale) * np.array(sec['mechs']['pas']['g']))
            
Now there's an error when the g_pas is a float instead of a list.

My fix:

       if hasattr(cfg, 'RmScale'):
            if type(sec['mechs']['pas']['g']) == list:
                sec['mechs']['pas']['g'] = list((1.0/cfg.RmScale) * np.array(sec['mechs']['pas']['g']))
            elif type(sec['mechs']['pas']['g']) == float:
                sec['mechs']['pas']['g'] = (1.0/cfg.RmScale) * sec['mechs']['pas']['g']
            else:
                raise Exception("Error occurred adjusting RmScale in " + cell_label + ", " + secName)

It's running now.

I just switched the NMDA mod to NMDAeee in netParams, so I'll need to re-run...

There was an error in analysis.  It seems like the soma voltage didn't get recorded.

    cfg.recordTraces = {'V_soma': {'sec': 'soma', 'loc': 0.5, 'var': 'v'}}
      -->
    cfg.recordTraces = {'V_soma': {'sec': 'soma_2', 'loc': 0.5, 'var': 'v'}}


Effects of reducing Rm:
file:gif/20180313_072328.png


Trying a smaller range of glutAmp values:

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp03"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.08, 0.16, 10).round(3))
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying RmScale
    batch = {}
    batch["label"] = "glutAmp_RmScale03"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.08, 0.16, 10).round(3))
    params["RmScale"] = [0.1, 0.25, 0.5, 0.75, 1.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Results:
file:gif/20180313_074418.png

Smaller glutAmp range:
file:gif/20180313_075411.png

There's some sort of problem with the experimental plateau figures:
file:gif/20180313_075533.png

They sawtooth weirdly...  Will check to see if it's a rounding problem.


Penny's plateaus:
file:gif/20180313_080459.png

And her traces:
file:gif/20180313_080532.png


** New batch for spineless cell models

/u/graham/projects/eee/sim/batches/batch_20180313/my_batches.py

Functional now.  Exploring parameters.



* 2018-03-14 -- Spineless model

Explore simplified spineless model
Look into simp model -- input impedance
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block
Need to update CA229simp.py to match Penny's CA229_v2.py


** Getting good plateaus

We only get a very small range of glutAmps between first spike and depol block.

Trying to reduce Na.  Varying allNaScale didn't do anything.  
Problem was Na in this model is 'nax'

To run and analyze:
    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180313/ ; ./runmybatches ; ipython -i analyze.py

file:gif/20180314_073245.png

Still getting depol block very quickly.  Will look into tuning Na and K based on
back-propagating action potentials (bAPs) into dendrite.

Well, actually first I am just going to try scaling up K...

    In netParams, changing kv to kdr, kad to kdmc

    Replaced: "basal" in secName or "apical" in secName
    With    : "dend" in secName

my_batches:

    # Varying glutAmp and allKScale
    batch = {}
    batch["label"] = "glutAmp_allKScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0.0, 0.3,  10).round(4))
    params["allKScale"] = [1.0, 1.5, 2.0, 5.0, 10.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Had to fix a bunch of linkages in netParams.

Analysis worked, and increasing K delays depol blockade.  Need to increase
glutAmp in order to see effect better.

Still depol block pretty early.

Some other possibilities to vary:

e_pas
RmScale
RaScale

Varying a bunch of stuff, but still having a hard time getting rid of depol 
blockade.

I think I need to run an fI frequency-current analysis and bAP analysis, so that
we can be sure any changes don't make a model completely unreasonable.

I notice Penny has Na reversal at 65, while ours is at 42.  I'm going to see effect 
of changing it.

Also, her e_pas is at -70, so I'll set ours there also.

Changing Na doesn't seem to have much effect:
file:gif/20180314_113836.png


Sharing with Sergio and Penny.

Single command to setup:
    graham-mac% rm -r eee_temp; mkdir eee_temp ; cd eee_temp ; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee ; cd eee ; ipython setup.py ;

** bAPs

Working on measuring the back propagating action potentials for this model.

Modified cfg to include a cfg.bap, which if set to True sets the cfg file up to
record the proper traces and stimulate with an iClamp

Modified netParams to play along.

Putting in a batch:

    # Turning dendritic Na and K on and off for bAPs
    batch = {}
    batch["label"] = "bap"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params['dendNaScale'] = [0.0, 1.0]
    params['dendKScale']  = [0.0, 1.0]
    batch["params"] = params
    batches[batch["label"]] = batch

And running it:

    graham-mac% cd /u/graham/projects/eee/sim/batches/batch_20180313/ ; ./runmybatches ; ipython -i analyze.py

Wow, it ran on the second try!

But, too many spikes.  Reducing iClamp amp/dur

Whoops!  Forgot to set cfg.addNetStim = False

Also forgot in cfg file to comment out:

    #cfg.allNaScale  = 1.0 # Scales all Na conductances (overrides dendNaScale if not commented)
    #cfg.allKScale   = 1.0 # Scales all K  conductances (overrides dendKScale  if not commented)

Because otherwise those overwrite cfg.dendNaScale and cfg.dendKScale

Everything is working except the plot: 
    Backpropagating AP Amplitude vs Distance from Soma
    Backpropagating AP Ratio vs ''

So I will commit now.
changeset:   544:75f6fe427e88

Working on fixing batch_analysis.plot_baps()


* 2018-03-15 -- Simplifying Penny's model

Fix bAP plotting
Explore simplified spineless model
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block
Need to update CA229simp.py to match Penny's CA229_v2.py


** Fixing bAP plotting

Working on fixing batch_analysis.plot_baps()

When running it directly, it seems to work fine:
    batch_analysis.plot_baps("bap")

Produces:
    file:gif/20180315_073729.png

Problem was in analyze.py:
    bap_branch = "basal_34"  #Bdend1
      -->
    bap_branch = "Bdend1"  #"basal_34"

Looking for Srdjan's article figure on bAP to compare

Current comparison:
file:gif/20180315_082205.png



** Working to better parameterize Penny's model

/u/graham/projects/eee/sim/eee_detailed_model/Experiment_no_spines_Joe.py

Joe's delays:

    delay1
    [ 22.46945687  21.38515627  20.30085567  19.21655508  18.13225448
      17.04795388  15.96365329  14.87935269  13.79505209  12.71075149
      11.6264509   10.5421503   10.5421503   11.6264509   12.71075149
      13.79505209  14.87935269  15.96365329  17.04795388  18.13225448
      19.21655508  20.30085567  21.38515627  22.46945687]

    mean: 16.505804
    std : 3.743063

    delay2
    [ 34.93891374  32.77031254  30.60171135  28.43311015  26.26450896
      24.09590776  21.92730657  19.75870538  17.59010418  15.42150299
      13.25290179  11.0843006   11.0843006   13.25290179  15.42150299
      17.59010418  19.75870538  21.92730657  24.09590776  26.26450896
      28.43311015  30.60171135  32.77031254  34.93891374]

    mean: 23.011607
    std : 7.486125

Penny's delays:

    delay1
    [ 27.39130435  13.47826087  34.34782609  16.95652174  48.26086957
      51.73913043  83.04347826  55.2173913   58.69565217  20.43478261
      86.52173913  30.86956522  72.60869565  44.7826087   79.56521739  90.
      37.82608696  76.08695652  65.65217391  69.13043478  10.          62.17391304
      23.91304348  41.30434783]

    mean: 50.000000
    std : 24.077171

    delay2
    [  34.13043478   18.82608696   41.7826087    22.65217391   57.08695652
       60.91304348   95.34782609   64.73913043   68.56521739   26.47826087
       99.17391304   37.95652174   83.86956522   53.26086957   91.52173913
      103.           45.60869565   87.69565217   76.2173913    80.04347826
       15.           72.39130435   30.30434783   49.43478261]

    mean: 59.000000
    std : 26.484888



** Working in eee_detailed_model batch_comp

The two cells should be identical, and everything is running, but somehow there 
are differences in the output:

file:gif/20180315_211705.png

Looking into it.


** #eee-theory chats

    billl [6:20 AM]
    joe -- sim working? ;; sergio -- you working this week?

    sergio [7:10 AM]
    yes
    I’m working with joe to explore params to induce plateaus in single cells

    billl [7:13 AM]
    didn't the penny loc work?  what did it show?
    this is just 1 sim :)
    also RPPR due soon --   275  15-Mar    era-notify@mail.nih.gov [230] [EXTERNAL]  NIH Automated Email: Progress Report for Grant 5 R01 EB022903-03, Due by 05/15/2018
    who wants to take charge of this task? -- adam can step you through it since he just finished the other one

    sergio [7:37 AM]
    let me work on penny stim locations

    billl [7:38 AM]
    it's just 1 loc

    billl [7:46 AM]
    can we run a single sim?

    sergio [7:51 AM]
    yes, sorry mi internet is not working well, I’ll do that sim

    billl [7:51 AM]
    this has been frustrating -- when i ask a simple thing that would be easy with neuron it seems somehow hard with netpyne?  -- shouldn't be hard either way

    joe [7:53 AM]
    I’ve been working in /u/graham/projects/eee/sim/batches/batch_20180313
    Executing batch_init.py gives a single sim.
    It uses Penny’s locs.

    billl [7:53 AM]
    ok so ... did i towkr?

    joe [7:54 AM]
    The problem is that we are getting depol blockade, and so a very low range of good glutAmps..

    joe [7:54 AM]
    shared this image: Varying g_Na 


    billl [7:54 AM]
    1 sim please -- i don't want to see varying gNa
    what does the sim show?

    joe [7:54 AM]
    shared this image: glutAmp_allKScale_02_cell_0_vtrace_1.png 

    joe [7:54 AM]
    Varying g K

    billl [7:55 AM]
    my question is about isolation in the 1 sim

    joe [7:56 AM]
    The model has dendrite nsegs = 15
    We’ve been exploring g_Na and g_K to get better plateaus, but with limited success.  We were thinking of adjusting “tha” in the Na mod to reduce spiking threshold.  (The plateaus have to be quite large to get spiking right now, and then quickly spiking becomes depol blockade).

    billl [8:15 AM]
    i have a simple question so would like to see sim result
    right now you have no isolation
    please run 1 sim and compare to penny sim and see why it is different
    from what i can see the isolation should be identical
    there's no sense in explore gNa or gK until you get comparable isolation
    that's not what we are looking for yet

    joe [8:18 AM]
    I’m happy to run a sim, but I guess I’m not quite sure what exactly your simple question is… :sweat_smile:

    billl [8:19 AM]
    can you get same bdend results as penny gets when using same Rin Ra secs, nsegs?
    if not we have to figure out why not
    perhaps first thing is to show that you can run the penny sim (1 sim) and get the result that she has reported -- clamp to ~0 mV
    can you get that with her sim?
    this would run in <1 min i woudl think?? -- no alteration in the sim; just run it and show results??

    joe [8:29 AM]
    Hey Penny, are your latest parameter values in your repo? Would you mind running one sim that shows a decent plateau? Then I’ll use those values and run your sim in Netpyne, and we can ensure we’re on the same page.

    billl [8:30 AM]
    so joe the penny one you currently have does not show a plateau?  can you show me and penny what that sim shows
    as before, once concern i have is that you don't have a mechanism to run a single sim and show arbitrary results;  i'm concerned that you've gotten yourself locked in to your analysis routines - -analysis is a great thing for a later stage in the process so this is not time wasted but for this early stage when nothing works it's important to be able to do something quick and dirty and get a result quickly

    joe [8:32 AM]
    uploaded this image: glutAmp06__multicell_vtrace_1.png 


    joe [8:32 AM]
    uploaded this image: glutAmp06_cell_0_plateau_overlay.png 


    billl [8:32 AM]
    ok so i did ask for 1 but we're getting closer -- that's something i can understsand

    joe [8:32 AM]
    These figs are from a couple days ago, and Penny’s param values seem to be evolving constantly.

    billl [8:32 AM]
    that's ok so we don't need her latest values
    you have a sim that runs ok
    so now you set your dend1 and dend2 with same values ; what are results in the dend (forget about soma for now)
    i assume that dend1-dend2 are in series as bdend
    perhaps show me the relevant portion of the h.topology() call for both your simplifieid sim and penny sim so we can make sure they are identical
    you can show whole topo for simple but whole topo for MC cell is too much

    joe [8:43 AM]
    Bill, prior to this week’s meeting, I was working with a simplified cell model based on Penny’s mod files and param values.  Sergio has been working with the original simplified cell model based on Salva’s M1 stuff, which I originally worked with for plateaus.  On Tuesday, you wanted me to switch back to the M1-based so we could get try to network stuff going…  

    Question: would you like me to work on simplifying Penny’s detailed model?  Or on getting the M1 to match hers?  Or both?

    billl [8:49 AM]
    i had thought that sergio and you were working on the same cell model -- another major discrepancy that has fallen thru the cracks :(
    not sure why we would be working with salva model at all -- we are developing fresh models to get plateaus
    originally we had said but i guess we (mostly meaning me) not clear that you were developing simplified models so that they could be used in large networks;  that was what was in the grant proposal
    sergio -- guess you and joe had some other understanding of the task??
    perhaps sergio started with the M1 model since was easy to just get off the ground for the first month or so but hadn't realized that we had never used our own models
    anyway answer is to use our models based now off of penny's model but simplified

    joe [8:59 AM]
    Great, glad we’re on the same page now.  Sergio and I started using the simplified model before Penny developed the detailed one.  We’ll all work together to get a functional plateau-producing simplification of Penny’s detailed model now.
    Give me a bit to switch back over and I’ll show you what’s going on in the simp model.

    billl [9:00 AM]
    great;thx

    billl [10:58 AM]
    get it to run?  what's slowing us down?

    billl [11:07 AM]
    ok i see you're still updating netpyne to get on same page as it were

    billl [1:15 PM]
    guys??

    joe [1:16 PM]
    Sorry, back at it after lunch now.

    sergio [1:16 PM]
    model is running, but we need fix the params

    joe [1:16 PM]
    Sergio has the model running, I’m working with Penny to parameterize both models the same way.

    billl [1:16 PM]
    the model should  be able to run in about 20 sec?
    what model is running? -- running networks again?  but we have no cell

    sergio [1:17 PM]
    single cell

    billl [1:17 PM]
    you were going to show me results from the model joe?
    no results after 4 hours??
    you're holdin' out on me here!
    if you're communicating extensively with penny why not put it here where i can at least have the assurance that something going on and see what the problems might be ...
    i'm still perplexed as to why if you use exactly the same dend you don't get almost same results in the dend itself
    so was hoping to see you show me that you don't get same results (or better yet that you do)

    joe [1:21 PM]
    uploaded and commented on this image: Same cell model, diff parameterizations 

    Top: Penny’s
    Bottom: Joe’s

    joe [1:22 PM]
    Let’s talk parameterization.

    billl [1:22 PM]
    they are perfectly identical!
    that's the reduced model??

    joe [1:22 PM]
    No, no…

    billl [1:22 PM]
    so what is problem
    oh no
    joe's is penny's
    so it's penny's
    ok so i was asking joe about joe's
    joe?

    joe [1:23 PM]
    shared sergio’s image: batch_simp_traces.png 

    joe [1:23 PM]
    Here’s the current simp model.

    billl [1:23 PM]
    i just want the bdends
    so the bdend is too low and the soma is too high
    why not superimpose in the way penny has with the diff colors
    i'm not clear if all 4 are on identical y axis?
    since have diff labeling

    joe [1:24 PM]
    Should be… I just put up a ‘raw’ data image spit out by Netpyne.

    billl [1:24 PM]
    so show these 4 superimposed underneath the other ones superimposed

    joe [1:24 PM]
    What would you like to see?

    billl [1:24 PM]
    compare with joe's penny's

    joe [1:24 PM]
    Okay, gimme a sec.

    joe [1:35 PM]
    uploaded and commented on this image: 20180315_133437.png 

    Here’s a fig to hold you over for a minute.  Problem plotting simple model because dend has diff name…  Working on it…

    billl [1:36 PM]
    ok, ok but anxiety building ....

    joe [1:43 PM]
    uploaded this image: 20180315_134243.png 


    billl [1:43 PM]
    topos?
    so you can see that problem has nothing to do with gna or gk so that was not helping us resolve; as we said on tues it's a problem with transfer impedeance

    joe [1:47 PM]
    added this Plain Text snippet: Untitled 
    Last login: Thu Mar 15 13:44:20 on ttys326
    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/ ; ipython -i instantiate.py
    geom_nseg: changed from 85 to 475 total segments

    billl [1:48 PM]
    just want to compare the corresponding basoilar dend -- the one we are using for the NMDA
    from the MC vs the simplified
    (SC)
    are they ident?
    you may want to use same names to make the process easier all the way thru
    *identical

    joe [1:50 PM]
    Yeah, I just renamed Bdend1 in simple model as basal_34

    billl [1:50 PM]
    good
    so what is the topo for basal34 for the MC vs SC?

    joe [1:56 PM]
    added this Plain Text snippet: topos 
    MC:
    |-|    <netpyne.cell.CompartCell object at 0x10c66e810>.soma_0(0-1)
      `--|    <netpyne.cell.CompartCell object at 0x10c66e810>.basal_26(0-1)
        `--------------|    <netpyne.cell.CompartCell object at 0x10c66e810>.basal_34(0-1)

    billl [1:57 PM]
    so she has only 1 section for #34 with ?15 segs; you have ?99 segs
    so let's make nseg the same
    and check again
    then let's check diam next

    joe [2:02 PM]
    uploaded and commented on this image: glutAmp01__multicell_vtrace_1.png 

    nsegs = 15
    Looks about the same.

    joe [2:04 PM]
    Here’s the geometry of SC:
           # Geometric properties
           somaL     = 48.4
           somaDiam  = 28.2
           axonL     = 594.3
           axonDiam  = 1.41
           apicL     = 261.9
           apicDiam  = 1.58
           bdendL    = 200.0
           bdendDiam = 2.28
    I just copied and pasted from the old M1-based model, so these are free parameters…

    billl [2:05 PM]
    all we care about now is bdend34
    let's compare those

    joe [2:07 PM]
    In [9]: mc.secs[‘basal_34’][‘geom’][‘diam’]
    Out[9]: 0.7051320293798398

    billl [2:09 PM]
    that's in netpyne
    let's make sure that we see in in neuron to make sure that there is no mistranslation
    but good to look at it in netpyne too
    also need to go thru all the segs not just the section

    sergio [2:11 PM]
    on the hoc file for the detailed cell the diams go from 1.28 (prox) to 0.32 (dist)

    billl [2:12 PM]
    ok so that's very different
    i think
    so document that from the interpreter too to make sure that that's what you actually end up with
    for both cell typs
    then fix the SC

    joe [2:13 PM]
    Is there an easy way to check actual NEURON values from Netpyne `sim` data structure?  @salvadord?

    billl [2:13 PM]
    yeah it's sim.net.cells i think
    can dir(sim)  dir(sim.net) and folow it down
    oh also need to use .keys() since some are in dicts
    eg think end up with a ['Section'] or similar
    this is in the tut i think or documentation

    salvadord [2:15 PM]
    `sim.net.cells[0].secs.hSec.diam`

    joe [2:15 PM]
    In [16]: mc = sim.net.cells[0]

    In [17]: mc.secs[‘basal_34’][‘geom’][‘diam’]
    Out[17]: 0.7051320293798398

    In [18]: sc = sim.net.cells[1]

    In [19]: sc.secs[‘basal_34’][‘geom’][‘diam’]
    Out[19]: 2.28
    Ahhh, hsec.  Thanks!

    salvadord [2:15 PM]
    `sim.net.cells[0].secs.soma.hSec.diam`

    billl [2:15 PM]
    but hSec is a sec so need then to do for segs in ...
    have to look at all the segs

    joe [2:19 PM]
    added this Plain Text snippet: diams 
    In [25]: for seg in mc.secs['basal_34'].hSec:
      ...:   print(seg.diam)
      ...:   
    0.888912220982
    0.890824032039

    billl [2:23 PM]
    ok so let's start by fixing that
    btw are we sure we have same location for NMDA
    what locations?
    can use pp.get_loc() -- something like that

    sergio [2:24 PM]
    https://neurosim.slack.com/archives/C2C7K1JKE/p1521042045000135
    penny
    Yay, Joe is right. The stimulation sites are around 60 ~ 120 um away from soma. 4 or 5 segments between soma and the first NMDA site
    Posted in #eee-theory
    Mar 14th

    billl [2:24 PM]
    pyseg = pnt.get_segment()

    sergio [2:24 PM]
    these are the loc from penny’s

    billl [2:24 PM]
    ok so where are they
    what are the locations in the 0-1 dend sec axis

    sergio [2:25 PM]
    and SC model uses 0.3 to 0.6
    let me check that

    joe [2:35 PM]
    This is part of the reason I was interested in discussing parameterization first…  The number of synapses in Penny’s model is related to the weight applied, and I’d like to separate those two things.

    for w in weight:
           Pool_num = 8 + int(20*w)

    billl [2:37 PM]
    but for starters we're just replicating penny
    so how about fixing those diams -- that's 1 enormous difference
    you were able to replicate penny using netpyne for the MC

    joe [2:37 PM]
    Okay, we can do diams first.

    billl [2:38 PM]
    so seems trivial to do it for the SC?  (everything allways seems trivial to the guy who doesn't have to do it)
    i mean we are using the same dend with the same name in both
    so i was thinking would be exactly same def  in netpyne

    joe [2:38 PM]
    So simp dend should have two secs, one with diam of basal_26 and one with diam of basal_34?

    billl [2:38 PM]
    sure
    26 and 34 are 2 dends where penny situates most of the action?

    joe [2:39 PM]
    26 leads to 34, which is where action is

    billl [2:39 PM]
    we can put in 3 if she's working 3 of them heavily or maybe need to put in a 3rd just to serve as the extra impedence drain rather than building that into the soma?
    26-34 are 2 secs of same dend then so not 2 dends??
    yeah so we need those 2 secs for 1 dend and then need at least 1 other and perhaps 2 other dends

    joe [2:40 PM]
    26 branches to 34 and something else

    billl [2:40 PM]
    confused -- can i see that piece of the topology
    26 branches?? -- neuron generally only allows bifurcation (2 branches) ??
    oh i'm sorry
    misunderstood  your syntax
    yes, english is my first language

    joe [2:41 PM]
    :joy:

    billl [2:42 PM]
    so if it has 2 things off the end we prob need those 2 pieces

    joe [2:42 PM]
    Okay, so basically just copy and paste diams/lengths of Penny’s active subtree?

    billl [2:42 PM]
    yup

    joe [2:43 PM]
    I’ll get on that.

    penny [2:44 PM]
    I checked other branches too. Didn’t find big difference caused by bifurcation yet. But would be nice to test to make sure

    billl [2:45 PM]
    once we get somehitng that looks similar to penny's we can get rid of little pieces and see also

    joe [3:25 PM]
    added and commented on this Plain Text snippet: Untitled 
    |-|    MC.soma_0(0-1)
      `|    MC.soma_3(0-1)
      `|    MC.soma_1(0-1)    
      `--|    MC.basal_26(0-1)
        `--|    MC.basal_27(0-1)
    Our active dend, basal_34 is terminal, but its sibling branch bifurcates multiple times.  How much of that do we want to include?

    billl [3:26 PM]
    we are stimulating on 34 right?
    why not start with this whole blob if can just c&p it

    joe [3:27 PM]
    Cool, I thought the same thing.  Can reduce complexity after and see its effect.

    billl [3:27 PM]
    my guess is that this is how it works - -these extra branches shunt current away allowing only a small amount of current to get into soma hence the diff between the 0 mV at stim site and the -40mV in soma
    and that in itself is interesting and can be part of your paper following up on penny's

    joe [3:28 PM]
    Nice.

    billl [3:28 PM]
    (once penny's is in yours can use both the MC and SC as needed)


* 2018-03-16 -- Simplifying Penny's model

Figure out diff between two cells
Explore simplified spineless model
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block

** Figure out diff between two cells

Right now I've got CA229.py and CA229simp.py, which are identical other than 
their names, in the same sim in:
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/my_batches.py 

But, their behavior is slightly different.  The detailed model has larger AHPs.

Figuring out the difference could help us reduce the AHP, as Penny has been trying
to do.

Making sure the cells are actually identical now.

*** Diff:

    --- /u/graham/projects/eee/sim/eee_detailed_model/CA229.py  Tue Mar  6 10:37:23 2018
    +++ /u/graham/projects/eee/sim/eee_detailed_model/CA229simp.py  Thu Mar 15 17:01:31 2018
    @@ -1,14 +1,28 @@
     """
    -CA229.py    : Reconstructed morphology of prefrontal layer V pyramidal cell from
    +CA229simp.py    : Reconstructed morphology of prefrontal layer V pyramidal cell from
        Acker, Antic (2008)
    -
    -Original    :
    +Original:
     https://senselab.med.yale.edu/ModelDB/ShowModel.cshtml?model=117207&file=/acker_antic/Model/CA%20229.hoc#tabs-2
     Modified by : Peng (Penny) Gao <penggao.1987@gmail.com>
    -Dec 01, 2017
    -
    +Feb 01, 2018
     The cell class has 3d morphology structure infomation.
     They can be placed in a network (logical 3d location).
    +
    +Improved on March 01, 2018 to have better membrane time constant & resting membrane potential.
    +Previous model has time constant ~ 6ms, most experimental data of
    +neocortex pyramidal L5-6 neurons have time constant ~ 10ms.
    +SpineFACTOR is increased from 1.5 to 1.6
    +somaRm increased from 1000/0.4 to 1400/0.04
    +dendRm increased to same value as somaRm
    +somaCm increased from 1 to 1.5431
    +dendCm increased to somaCm*spineFACTOR
    +
    +pasVm increased from -80 to -65
    +kBK_gpeak increased from 2.68e-4 to 16.8e-4
    +
    +Ref: https://neuroelectro.org/neuron/111/
    +     https://senselab.med.yale.edu/ModelDB/ShowModel.cshtml?model=168148&file=/stadler2014_layerV/LayerVinit.hoc#tabs-2
    +
     """
     import sys
     from neuron import h, gui
    @@ -20,19 +34,28 @@
     #########################################
     # Cell passive properties
     global_Ra = 90
    -spineFACTOR = 1.5
    -somaRm = 1000/0.04
    -dendRm = somaRm/spineFACTOR
    -somaCm = 1
    +spineFACTOR = 1.5 # It was 1.5 originally, in order to match the time constant,
    +# We try to increase it on Feb.27, 2018 according to Reetz et al. (2014)
    +somaRm = 1500/0.04 # Try 1500/0.04 on Feb.27, 2018, Original 1000/0.04
    +dendRm = somaRm/spineFACTOR # somaRm/spineFACTOR
    +somaCm = 1.45 # It was 1 originally, in order to increase the time constant,
    +# We increased it on Marth 1, 2018 according to Reetz et al. (2014)
    +
    +############ This is where the problem comes from when i want the hyperpolarization
    +# after spike change
    +# If dendCm = somaCm*spineFACTOR: No hyperpolarization after spike on plateau at all
    +# If dendCm = somaCm/spineFACTOR: Huge hyperpolarization!!!
     dendCm = somaCm*spineFACTOR
     spinedist = 50 # distance at which spines start
    -Vk = -95 # -100 #-105 # -80
    -VNa = 65 #60 #65 #42 #60 # # 45 #60 #55 # 60
    -pasVm = -80 #-80 #-85 #-89 #-90 #-65
    +Vk = -100 # -100 #-105 # -80
    +VNa = 65 #65 #60 #55
    +pasVm = -70 #-80 #-85 #-89 #-90 #-65
     
     # Specify cell biophysics
    +# ratio = 0
    +
     somaNa = 150 # 900  # [pS/um2]
    -axonNa = 5000  # [pS/um2]
    +axonNa = 5000   # [pS/um2]
     basalNa = 150  # [pS/um2]
     mNa = 0.5  # decrease in sodium channel conductance in basal dendrites [pS/um2/um]
     apicalNa = 375
    @@ -43,18 +66,24 @@
     mKV = 0  # increase in KV conductance in basal dendrites
     gKVmax = 500  # maximum basal KV conductance
     axonKv = 100
    -somaKA = 150  # initial basal total GKA conductance [pS/um2] equals somatic
    +somaKA = 150 #100  # It was 150 in the best fit model from Srdjan 2009
    +# In order to decrease the hyperpolirization after APs on plateau
    +# decreased to 100 on Feb 27, 2018
    +# Changed back to 150 on March 01, 2018
    +# initial basal total GKA conductance [pS/um2] equals somatic
     mgka = 0.7  # linear rise in IA channel density
     mgkaratio = 1./300 # linear drop in KAP portion, 1 at soma
    -apicalKA = 300 # apical total GKA conductance
    +apicalKA = 300  # apical total GKA conductance
     gkamax = 2000  # pS/um2
     
    -somaCa = 0.5 # total calcium channel conductance density of soma [pS/um^2]
    +
    +somaCa = 2 #0.5 # total calcium channel conductance density of soma [pS/um^2]
     # This value is original 2, set to 1 and 0.5 for better match with TTX trace
     dendCa = 0.4 # dendritic total calcium conductance density
    -SomaCaT = 1 # 6 #1
    +
    +SomaCaT = 2
     # This value is original 8, set to 4,2,1 or 0 for better match with TTX trace
    -dendCaT = 1.6 #0.5
    +dendCaT = 1.6  #0.5
     cadistB = 30  # dendritic calcium channel conductance equals that of soma up until this distance
     cadistA = 30
     #gcaratio = 0.2 #portion of gHVA to gHVA+gIT total, 1 is all HVA, 0 is all IT#
    @@ -62,18 +91,18 @@
     ILdist = 15
     
     #############kBK.mod
    -kBK_gpeak = 2.68e-4 #2.68e-4 #7.67842640257e-05 # Tried 2.68e-4 # original value of 268e-4 too high for this model
    +kBK_gpeak = 2.68e-4 #7.67842640257e-05 #2.68e-4 #16.8e-4 #2.68e-4 #7.67842640257e-05 # Tried 2.68e-4 # original value of 268e-4 too high for this model
     # 7.67842640257e-05 or 6.68e-4 both works, can change it based on the interspike invervals we are aiming for
    -kBK_caVhminShift = 45 #50 #45.0 # shift upwards to get lower effect on subthreshold
    -
    -
    -#########################################
    -# Set up the CA229 cell class
    -#########################################
    -
    -class CA229:
    +kBK_caVhminShift = 45 #45 #50 #45.0 # shift upwards to get lower effect on subthreshold
    +
    +
    +#########################################
    +# Set up the CA229simp cell class
    +#########################################
    +
    +class CA229simp:
         """
    -    A detailed model of Prefrontal layer V pyramidal neuron in Rat.
    +    A detailed model of Prefrontal layer V pyramidal neuron in Mouse.
     
         Channel distributions and all other biophysical properties of model basal
         dendrites of prefrontal layer V pyramidal cell from Acker, Antic (2008)
    @@ -503,14 +532,12 @@
             for sec in self.basals:
                 sec.gbar_ca = 0
                 sec.gbar_it = 0
    -
    -
     #########################################
     # 3D geometry of the cell
     #########################################
         def create_cell(self):
             """
    -        3D morphology of CA229 cell.
    +        3D morphology of CA229simp cell.
             The diam and L of each compartment is determined by 3D structure.
             Same as hoc 3D morphology: CA229.hoc
             """
    @@ -2044,6 +2071,6 @@
     ############################################
     # Function for importing cell into NetPyNE
     ############################################
    -def MakeCA229():
    -    cell = CA229()
    +def MakeCA229simp():
    +    cell = CA229simp()
         return cell


*** Summary of differences

- = orig
+ = simp

-somaRm = 1000/0.04
+somaRm = 1500/0.04

-somaCm = 1
+somaCm = 1.45

-Vk = -95
+Vk = -100

-pasVm = -80
+pasVm = -70 

-somaCa = 0.5 
+somaCa = 2 

-SomaCaT = 1 
+SomaCaT = 2


*** CA229simp is based on CA229_v2

I am going to rename CA229.py as CA229_v1.py
          and rename CA229_v2.py as CA229.py

Okay, now when I run and analyze, the cells output is the same.

Time to simplify the model.


** Simplifying detailed model

Will start with axon.

Penny uses basal_16 as the axon (removes it as basal)

basal_16 comes from the soma, and is terminal, so no connectivity problems
should arise from deleting it.

        self.basal[16].connect(self.soma[2])
        h.pt3dclear(sec = self.basal[16])
        h.pt3dadd(-54.06,-4.25,-5.96,2.5, sec = self.basal[16])
        h.pt3dadd(-57.1,-6.71,1.34,1.31, sec = self.basal[16])
        h.pt3dadd(-57.42,-14.48,1.54,1.226, sec = self.basal[16])
        h.pt3dadd(-59.66,-18.37,2.46,0.96, sec = self.basal[16])
        h.pt3dadd(-62.22,-20.96,4.94,0.96, sec = self.basal[16])
        h.pt3dadd(-63.18,-25.18,7.2,0.96, sec = self.basal[16])
        h.pt3dadd(-65.1,-29.06,10.1,0.96, sec = self.basal[16])

Geometry:

        self.basal[16].L = 200
        self.basal[16].nseg = 15
        h.distance(0,0.5,sec=self.soma[0])
        for seg in self.basal[16].allseg():
            dist = h.distance(seg.x, sec=self.basal[16])
            if (dist <= 15):
                self.basal[16](seg.x).diam = 1.725
            elif (dist > 15 and dist<= 30):
                self.basal[16](seg.x).diam = 1.119
            else:
                self.basal[16](seg.x).diam = 0.96

So I am going to create a single cylinder axon, with:
  L = 200
  diam = ((15 * 1.725) + (15 * 1.119) + (170 * 0.96)) / (200) = 1.0293
       = 1.03

Committing before I make any changes.
changeset:   546:525885ac1a21

In CA229simp.py:

    self.basal = [h.Section(name='basal[%d]' % i) for i in xrange(36)]
    -->
    basal_nums = [basal for basal in range(36) if basal != 16]
    self.basal = [h.Section(name='basal[%d]' % i) for i in basal_nums]

    self.axon = [h.Section(name='axon[0]')]
    self.axon[0].connect(self.soma[2])

And commenting out:

        self.basal[16].connect(self.soma[2])
        h.pt3dclear(sec = self.basal[16])
        h.pt3dadd(-54.06,-4.25,-5.96,2.5, sec = self.basal[16])
        h.pt3dadd(-57.1,-6.71,1.34,1.31, sec = self.basal[16])
        h.pt3dadd(-57.42,-14.48,1.54,1.226, sec = self.basal[16])
        h.pt3dadd(-59.66,-18.37,2.46,0.96, sec = self.basal[16])
        h.pt3dadd(-62.22,-20.96,4.94,0.96, sec = self.basal[16])
        h.pt3dadd(-63.18,-25.18,7.2,0.96, sec = self.basal[16])
        h.pt3dadd(-65.1,-29.06,10.1,0.96, sec = self.basal[16])

And modifying:

        #self.axon.append(sec = self.basal[16])
        self.axon.append(sec = self.axon[0])

        #self.basals.remove(sec = self.basal[16])

    def add_axon(self):
        """
        Set up the SectionLists and temporal axon branch.
        """

        # self.basal[16].L = 200
        # self.basal[16].nseg = 15
        # h.distance(0,0.5,sec=self.soma[0])
        # for seg in self.basal[16].allseg():
        #     dist = h.distance(seg.x, sec=self.basal[16])
        #     if (dist <= 15):
        #         self.basal[16](seg.x).diam = 1.725
        #     elif (dist > 15 and dist<= 30):
        #         self.basal[16](seg.x).diam = 1.119
        #     else:
        #         self.basal[16](seg.x).diam = 0.96

        self.axon[0].L = 200
        self.axon[0].diam = 1.03
        self.axon[0].nseg = 15

Getting an error:

    ---------------------------------------------------------------------------
    IndexError                                Traceback (most recent call last)
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/netParams.py in <module>()
         57 
         58 # Simplified EEE cell model
    ---> 59 cellRule = netParams.importCellParams(label='eeeS', conds={'cellType': 'eeeS', 'cellModel': 'PFC_simp'}, fileName='CA229simp.py', cellName='MakeCA229simp')
         60 
         61 # define section lists

    /usr/site/nrniv/local/python/netpyne/netpyne/specs.pyc in importCellParams(self, label, conds, fileName, cellName, cellArgs, importSynMechs, somaAtOrigin, cellInstance)
        518             label = int(self._labelid)
        519             self._labelid += 1
    --> 520         secs, secLists, synMechs, globs = utils.importCell(fileName, cellName, cellArgs, cellInstance)
        521         cellRule = {'conds': conds, 'secs': secs, 'secLists': secLists, 'globals': globs}
        522 

    /usr/site/nrniv/local/python/netpyne/netpyne/utils.pyc in importCell(fileName, cellName, cellArgs, cellInstance)
        177         modulePointer = tempModule
        178         if isinstance(cellArgs, dict):
    --> 179             cell = getattr(modulePointer, cellName)(**cellArgs) # create cell using template, passing dict with args
        180         else:
        181             cell = getattr(modulePointer, cellName)(*cellArgs)  # create cell using template, passing list with args

    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/CA229simp.py in MakeCA229simp()
       2085 ############################################
       2086 def MakeCA229simp():
    -> 2087     cell = CA229simp()
       2088     return cell

    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/CA229simp.py in __init__(self)
        118     """
        119     def __init__(self):
    --> 120         self.create_cell()
        121         self.optimize_nseg()
        122         self.add_axon()

    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/CA229simp.py in create_cell(self)
       1179         h.pt3dadd(-168.732,-116.409,-26.352,0.32, sec = self.basal[34])
       1180 
    -> 1181         self.basal[35].connect(self.soma[0])
       1182         h.pt3dclear(sec = self.basal[35])
       1183         h.pt3dadd(-53.42,3.52,-5.96,2.5, sec = self.basal[35])

    IndexError: list index out of range


It seems like I need to remove basal[16] after the cell has been created...

Yeah, and also had to do some changes to the axon stuff.


** Replacing detailed axon with simple one

I've done it, but now the soma sees no activity (the basals still do).

I'm going to commit and ask for help.

Decided to leave basal[16] in place and just add an axon with same properties
as Penny gave basal16

Seems to be working now!

file:gif/20180316_104154.png

Minor differences, but looks good.

changeset:   548:3a2b18e1e924


Trying different nseg for axon.

nseg = 1 : depol block
nseg = 3 : depol block
nseg = 5 : looks good

Setting axon nseg to 5

changeset:   549:fe8c356f07cf

** Replacing detailed apical tree with simple one

We decided to make the length of the cylinder equal to the average apical 
termination pathlength, then we can adjust the diameter of the cylinder
to match behavior.

Worked for several hours with Sergio co-coding to get this measurement.

Working in /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/dev.py

Current dev.py:

    import os
    from neuron import h

    # Following is code to measure the terminal path lengths of apical tree

    cur_dir = os.getcwd()
    os.chdir('/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/')
    execfile('instantiate.py')
    cell = sim.net.cells[0]
    secs = cell.secs
    h.distance(0, 0.5, sec=cell.secs['soma_0']['hSec'])
    for key, item in secs.iteritems():
        if "apical" in key:
            print(key)
            sec = item['hSec']
            for seg in sec.allseg():
                dist = h.distance(seg.x, sec=sec)
                print("  " + str(dist))

Still need to determine if an apical sec is terminal, and if so, add its 
terminal length to a list.



* 2018-03-19 -- Simplifying apical dend

Measure average apical terminal path length
Replace complex apical tree with cylinder
Explore simplified spineless model
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block


** Measure average apical terminal path length

My dev.py file:

    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/dev.py

Now measures the mean apical terminal path length.

    mean terminal length = 454.470732673

I will set the apical cylinder length as 454.5

changeset:   550:7ed5ded18762


** Amputate apical tree, attach apical cylinder

Acutally it was already amputated.  But I set the length to 454.5

Now to figure out how to vary the diam of the apical cylinder in netParams so 
that I can run a batch varying the value.

So here's how to the the diameter:

sim.net.cells[1].secs['apical_0']['geom']['diam']

Need to add a variable to cfg.py, link it to netParams.py and then batch 
run a bunch of sims varying diam.

In cfg.py:

    # Diameter of apical_0 in eeeS
    cfg.apicalDiam = 1.0

in netParams.py:

    # apply values to parameters
    for cell_label, cell_params in netParams.cellParams.iteritems():

        for secName,sec in cell_params['secs'].iteritems(): 
            sec['vinit'] = cfg.e_pas  # set vinit for all secs

            if cell_label == "eeeS":
                if secName == "apical_0":
                    if hasattr(cfg, 'apicalDiam'):
                        orig_diam = sec['geom']['diam']
                        print("eeeS original apical diam = " + str(orig_diam))
                        sec['geom']['diam'] = cfg.apicalDiam
                        print("eeeS new apical diam      = " + str(sec['geom']['diam']))

Running a bunch of batches:

    # Varying eeeS apical diam
    batch = {}
    batch["label"] = "apicalDiam01"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["apicalDiam"] = [1.0, 5.0, 10.0, 20.0, 100.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying eeeS apical diam
    batch = {}
    batch["label"] = "apicalDiam02"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["apicalDiam"] = [5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = [5.0, 10.0, 15.0, 20.0, 25.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp and eeeS apical diam
    batch = {}
    batch["label"] = "glutAmp_apicalDiam01"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = [5.0, 10.0, 15.0, 20.0, 25.0]
    params["apicalDiam"] = [1.0, 5.0, 10.0, 20.0, 100.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp and eeeS apical diam
    batch = {}
    batch["label"] = "glutAmp_apicalDiam02"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = [5.0, 10.0, 15.0, 20.0, 25.0]
    params["apicalDiam"] = [5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Running:

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/ ; ./runmybatches ; ipython -i analyze.py

Output, wide range:
file:gif/20180319_083907.png

Finer range:
file:gif/20180319_083932.png

Looking good, will choose a value for apical diam of 6.0

Committing now.


* 2018-03-20 -- Simplifying model

Measure average basal terminal path length
See how simple model looks under TTX
Replace complex basal trees (other than active) with cylinder
Run bAP analysis and f-I analysis
Explore detailed/simplified models together
Determine time required to sim detailed vs simplified
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block


** Measuring terminal path lengths

Using:
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/dev.py 

Apical mean terminal length = 454.470732673
Basal  mean terminal length = 157.154791074



** Run bAP analyses on models

Turning on in cfg.py:

  cfg.bap = true

Adding this to cfg.py:

  if cfg.bap:
    cfg.addNetStim = False

Adding to my_batches.py:

    # Turning dendritic Na and K on and off for bAPs
    batch = {}
    batch["label"] = "bap"
    batch["cfgFile"] = "cfg_bAP.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params[('dendNaScale')] = [0.0, 1.0] 
    params[('dendKScale')]  = [0.0, 1.0] 
    batch["params"] = params
    batches[batch["label"]] = batch

And running:

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/ ; ./runmybatches ; ipython -i analyze.py

Getting an error when running the whole thing (but running cfg, netParams, and 
batch_init all work fine):

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp/ ; ./runmybatches ; ipython -i analyze.py
    numprocs=4
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    Additional mechanisms from files
     CaDynamics_E2.mod CaT.mod Ca_HVA.mod Cad.mod IL.mod Ih.mod NMDA.mod NMDAeee.mod PlateauConductance.mod SK_E2.mod ampa.mod ca.mod gabaa.mod gabab.mod glutamate.mod h_kole.mod h_migliore.mod kBK.mod kadist.mod kaprox.mod kv.mod na.mod vecstim.mod vmax.mod
    Running batch with label: bap
    Saving batch to batch_data/bap/bap_batch.json ... 
    Running batch with label: bap
    Saving batch to batch_data/bap/bap_batch.json ... 
    Running batch with label: bap
    Saving batch to batch_data/bap/bap_batch.json ... 
    Running batch with label: bap
    Traceback (most recent call last):
      File "my_batches.py", line 109, in <module>
        batch_utils.run_batch(**batch)
      File "/u/graham/projects/eee/sim/batch_utils.py", line 62, in run_batch
        b.run()
      File "/usr/site/nrniv/local/python/netpyne/netpyne/batch.py", line 125, in run
        cfgModule = imp.load_source(cfgModuleName, self.cfgFile)
    IOError: [Errno 2] No such file or directory
    >>> 
    Saving batch to batch_data/bap/bap_batch.json ... 
    Traceback (most recent call last):
      File "my_batches.py", line 109, in <module>
        batch_utils.run_batch(**batch)
      File "/u/graham/projects/eee/sim/batch_utils.py", line 62, in run_batch
        b.run()
      File "/usr/site/nrniv/local/python/netpyne/netpyne/batch.py", line 125, in run
        cfgModule = imp.load_source(cfgModuleName, self.cfgFile)
    IOError: [Errno 2] No such file or directory
    >>> 
    Traceback (most recent call last):
      File "my_batches.py", line 109, in <module>
        batch_utils.run_batch(**batch)
      File "/u/graham/projects/eee/sim/batch_utils.py", line 62, in run_batch
        b.run()
      File "/usr/site/nrniv/local/python/netpyne/netpyne/batch.py", line 125, in run
        cfgModule = imp.load_source(cfgModuleName, self.cfgFile)
    IOError: [Errno 2] No such file or directory
    >>> 
    Traceback (most recent call last):
      File "my_batches.py", line 109, in <module>
        batch_utils.run_batch(**batch)
      File "/u/graham/projects/eee/sim/batch_utils.py", line 62, in run_batch
        b.run()
      File "/usr/site/nrniv/local/python/netpyne/netpyne/batch.py", line 125, in run
        cfgModule = imp.load_source(cfgModuleName, self.cfgFile)
    IOError: [Errno 2] No such file or directory
    >>> 

Looking into error.

Changing this:

    cfgModule = imp.load_source(cfgModuleName, self.cfgFile)

To this:

    try:
        cfgModule = imp.load_source(cfgModuleName, self.cfgFile)
    except:
        print
        print(cfgModuleName)
        print(self.cfgFile)
        cfgModule = imp.load_source(cfgModuleName, self.cfgFile)

Output before crash:

    cfg_bAP
    cfg_bAP.py

Hmmmm...  So I have cfg misnamed with _bAP somewhere...

It was in my_batches:

    batch["cfgFile"] = "cfg_bAP.py"
    -->
    batch["cfgFile"] = "cfg.py"

Now it works.

But, there's an error in plot_baps()

I changed a hardcoded "Bdend1" to the input section

Changed cfg to record from "basal_34" instead of "Bdend1"

Hmmm...  The detailed model gets depol blockade with dendK set to zero.

Also, I realize basal_34 doesn't start at the soma, so the bAP figures don't
look correct (ratio should be 1.0 at distance 0 from soma)

This requires a bit more work to fix, so I'm going to come back to it.


** Bill wanted to see what happens in simple model with passive dendrites

Sergio prepared a new netParams to turn off Ca, need to add cfg.dendCaScale to 
my cfg.py file.

Committing now before looking into that.
changeset:   552:5f26bdd0042d

Copying my old netParams.py to netParams_preCa.py and
copying in Sergio's new netParams.py

Adding Ca to cfg file.

I see the same results Sergio posted in Slack:

passive basals works fine in simple model, not in detailed model


** Changing apical nsegs from 99 to lower value

First will run as is.

file:gif/20180320_071116.png

Now changing nseg from 99 to 3

Still looks good.
file:gif/20180320_071424.png

                                                      / -- 32 
** Collapsing non-activated basals              / -- 30 -- 31
                                          / -- 29 -- 33
The activated basal tree includes: 26 -- 27 -- 28
                                    \ -- 34 (active area)

So, branches from 26 to 34 don't get collapsed yet.

For ease of naming and access, I may want to change the active basal branches
from (26 to 34) to (0 to 8)...

Will rename to have active tree first.

Basals go from 0 to 35

0  --> 9  x
1  --> 10 x
2  --> 11 x
3  --> 12 x
4  --> 13 x
5  --> 14 x
6  --> 15 x
7  --> 16 x
8  --> 17 x
9  --> 18 x
10 --> 19 x
11 --> 20 x
12 --> 21 x
13 --> 22 x
14 --> 23 x
15 --> 24 x
16 --> 25 x
17 --> 26 x
18 --> 27 x
19 --> 28 x
20 --> 29 x
21 --> 30 x
22 --> 31 x
23 --> 32 x
24 --> 33 x
25 --> 34 x
26 --> 0  x
27 --> 1  x
28 --> 2  x
29 --> 3  x
30 --> 4  x
31 --> 5  x
32 --> 6  x
33 --> 7  x
34 --> 8  x
35 --> 35 

Okay, so I have a modified detailed cell:
    /u/graham/projects/eee/sim/eee_detailed_model/CA229_rearranged.py

In which I reordered the basal branches such that the stimulated tree comes 
from basal[0], and includes basals 0 to 8 inclusive (used to be 26 to 34).

I will confirm that this cell behaves exactly like its basis, and then I can 
compress branches 9 to 35 into one cylinder for simplified model.

Some quick changed to netParams:

    # Detailed EEE cell model
    cellRule = netParams.importCellParams(label='eeeD', conds={'cellType': 'eeeD', 'cellModel': 'PFC_full'}, fileName='CA229.py', cellName='MakeCA229')

    # Rearranged Detailed EEE cell model
    cellRule = netParams.importCellParams(label='eeeS', conds={'cellType': 'eeeS', 'cellModel': 'PFC_full'}, fileName='CA229_rearranged.py', cellName='MakeCA229')

    # Simplified EEE cell model
    #cellRule = netParams.importCellParams(label='eeeS', conds={'cellType': 'eeeS', 'cellModel': 'PFC_simp'}, fileName='CA229simp.py', cellName='MakeCA229simp')

Need to symlink:
    /u/graham/projects/eee/sim/eee_detailed_model/CA229_rearranged.py

Into:
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp

Command:
    ln -s original symlink

Running:
    ln -s /u/graham/projects/eee/sim/eee_detailed_model/CA229_rearranged.py /u/graham/projects/eee/sim/eee_detailed_model/netpyne/

    ln -s /u/graham/projects/eee/sim/eee_detailed_model/CA229_rearranged.py /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_comp

Now running batches.

Hmmm.. No output for the rearranged cell.

I realize the stim will have to go into a different branch...  I should make 
a rearranged_simp cell as well, so that can compare


** Fixing sims for rearranged cells

I reversed the changes in netParams, now will copy batch_comp to batch_rearr
and work there.

changeset:   554:c14edd877870

Okay, both cell models should have their basals rearranged:

/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_rearr/CA229.py
/u/graham/projects/eee/sim/eee_detailed_model/CA229simp.py

Changing cfg to new branch:
'sec': 'basal_34' becomes 'sec': 'basal_8'

Aaaand attempting to run:
    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_rearr/ ; ./runmybatches ; ipython -i analyze.py

Whoops.  Forgot to change basal_34 to basal_8 in cfg.recordTraces

Works.  And looks pretty similar.  Time to tune diam of simp basal_9

Adding to netParams:

            if secName == "basal_9":
                if hasattr(cfg, 'basalDiam'):
                    orig_diam = sec['geom']['diam']
                    print("eeeS original basal_9 diam = " + str(orig_diam))
                    sec['geom']['diam'] = cfg.basalDiam
                    print("eeeS new basal_9 diam      = " + str(sec['geom']['diam']))


Adding to cfg:

    # Diameter of basal_9 in eeeS
    cfg.basalDiam = 1.0

Looks good.  A diameter of around 10 um for basal cylinder gives similar output 
to detailed model.

With active currents:
file:gif/20180320_144220.png

Active currents off:
file:gif/20180320_144649.png

With active currents off, as seen in above fig, the simplified model hits depol 
blockade at basal_9 diams of 10 and higher (detailed model always depol block)

Will run a batch zooming in around diam 10 on simp model.

So a basal diam of 6.0 looks good, but 7.0 has depol block
file:gif/20180320_145631.png

Setting basal diam to 6.0

** Comparing detailed with simplified inactive dends

I am indenting a big chunk of netParams from 88 to 154, under if cell is eeeS.

It won't work to scale det model params this way, but it will allow us to 
compare simp with inactive dends to det with active dends

Looking for good glutAmp ranges

It's nice, there's now a huge glutAmp range that slowly increases response, 
without depol blockade

It looks like our plateau duration and amplitude are a bit high

Should explore effects of:
  increasing NMDA beta (unbinding rate)
  moving syn location more distally
  changing synaptic spread


* 2018-03-21 -- Exploring models

See how simple model looks under TTX
Measure how long sim takes with ind det and simp models
Run bAP analysis and f-I analysis
Explore detailed/simplified models together
Determine time required to sim detailed vs simplified
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block

** Prepare to show model to Slack

I ran a variety of glutAmp ranges:

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp10"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0., 1.0, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp20"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0., 2.0, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp30"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0., 3.0, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp40"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0., 4.0, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp50"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0., 5.0, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

For now I'm going to work with glutAmp20

file:gif/20180321_064837.png
file:gif/20180321_064858.png

First, I want to run a batch with 20 glutAmp values, for comp with exp

Plateau measurements:
file:gif/20180321_064434.png


** Bill want to know number of compartments in models

Work in dev.py:

    # Following is code to count total nsegs in cells

    cur_dir = os.getcwd()
    os.chdir('/u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_rearr/')
    execfile('instantiate.py')
    eeeD = sim.net.cells[0]
    eeeS = sim.net.cells[1]

    Dsecs = eeeD.secs 
    Dnsegs = []
    Dsecnames = []

    print
    print("eeeD")
    print("======================")
    for key, item in Dsecs.iteritems():
        print(key)
        print(item['hSec'].nseg)
        Dsecnames.append(key)
        Dnsegs.append(item['hSec'].nseg)

    print
    print("======================")
    print(" Num secs = " + str(len(Dsecnames)))
    print(" Num cmps = " + str(np.sum(Dnsegs)))
    print("======================")


    Ssecs = eeeS.secs
    Snsegs = []
    Ssecnames = []

    print
    print("eeeS")
    print("======================")
    for key, item in Ssecs.iteritems():
        print(key)
        print(item['hSec'].nseg)
        Ssecnames.append(key)
        Snsegs.append(item['hSec'].nseg)

    print
    print("======================")
    print(" Num secs = " + str(len(Ssecnames)))
    print(" Num cmps = " + str(np.sum(Snsegs)))
    print("======================")

Output:

    Detailed model:
     Num secs = 85
     Num cmps = 487
     
    Simplified model:
     Num secs = 16
     Num cmps = 72

Penny's optimize_nseg function in cell model files adjusts nseg.  I should turn 
this off in simp model.


** Committing and pushing

To give Sergio and Penny access to simp model

changeset:   555:8a7089e9a38b


** Asking Bill what he wants me to do

joe [7:19 AM]
At this point, there’s a few ways I could go.  I see at least the following options:

1) collapse eeeS stim tree into single cylinder
2) try to better match exp data (e.g. reduce plateau duration, prbly w NMDA unbinding rate)
3) start exploring effects of stim location, spread, decay, delay etc.
4) run other analyses to ensure decent models (f-I analysis, bAP analysis)

Any preference on what I start on, @billl?



** Running a few batches for exploratory purposes

Batches:

    #cfg.NMDABetaScale  = 14.0
    batch = {}
    batch["label"] = "NMDABetaScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["NMDABetaScale"] = [3.5, 7.0, 14.0, 28.0, 56.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    #cfg.glutAmpDecay      = 0.0 # percent/um
    batch = {}
    batch["label"] = "glutAmpDecay"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmpDecay"] = [0.0, 1.0, 5.0, 10.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    #cfg.synLocMiddle      = 0.45 
    batch = {}
    batch["label"] = "synLocMiddle"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["synLocMiddle"] = [0.3, 0.4, 0.5, 0.6, 0.7]
    batch["params"] = params
    batches[batch["label"]] = batch

    #cfg.CdurNMDAScale  = 1.0   # Scales original value of 1.0
    batch = {}
    batch["label"] = "CdurNMDAScale"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["CdurNMDAScale"] = [0.01, 0.1, 1.0, 10.0, 100.0]
    batch["params"] = params
    batches[batch["label"]] = batch

    #cfg.e_pas         = -80.0 # resting membrane potential
    batch = {}
    batch["label"] = "e_pas"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["e_pas"] = [-70.0, -75.0, -80.0, -85.0, -90.0]
    batch["params"] = params
    batches[batch["label"]] = batch

Results:

    NMDA Beta Scale
    file:gif/20180323_085541.png

    glutAmp decay
    file:gif/20180323_085605.png

    synLocMiddle
    file:gif/20180323_085637.png

    Cdur NMDA scale
    file:gif/20180323_085759.png

    e_pas
    file:gif/20180323_085840.png


* 2018-03-23 -- Simplifying

Reduce number of compartments further
See how models looks under TTX
Measure how long sim takes with indiv det and simp models
Run bAP analysis and f-I analysis
Explore detailed/simplified models together
Determine time required to sim detailed vs simplified
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block

** Uploading contents of gif folder 

To no.neurosim.downstate.edu


** Reducing number of compartments further

billl [7:53 AM]
72 still a lot of compartments -- we whould like to get down to <=25 if possible
so currently only have active channels in soma?
(a lot of our complex models are only 100 segs so this is stil lbig)

Output from batch_rearr/dev.py:

    eeeS
    ======================
    13   cmps in: apical_0
    1  cmps in: soma_3
    1  cmps in: soma_2
    1  cmps in: soma_1
    1  cmps in: soma_0
    5  cmps in: basal_7
    5  cmps in: basal_6
    5  cmps in: basal_5
    3  cmps in: basal_4
    1  cmps in: basal_3
    5  cmps in: basal_2
    3  cmps in: basal_1
    3  cmps in: basal_0
    5  cmps in: axon_0
    5  cmps in: basal_9
    15   cmps in: basal_8

    ======================
     Num secs = 16
     Num cmps = 72
    ======================

Time to start reducing the number of compartments.  Will run sims after each 
change to avoid depol blockade.

First, I will deactivate optimize_nseg (in the cell model file)

That function seems to set Ra and Cm in secs, so I don't want to disable it 
completely.  I will just comment out line 208

    # self.geom_nseg()

That's the function that actually changes the nsegs.

    eeeS
    ======================
    3  cmps in: apical_0
    1  cmps in: soma_3
    1  cmps in: soma_2
    1  cmps in: soma_1
    1  cmps in: soma_0
    1  cmps in: basal_7
    1  cmps in: basal_6
    1  cmps in: basal_5
    1  cmps in: basal_4
    1  cmps in: basal_3
    1  cmps in: basal_2
    1  cmps in: basal_1
    1  cmps in: basal_0
    5  cmps in: axon_0
    3  cmps in: basal_9
    1  cmps in: basal_8

    ======================
     Num secs = 16
     Num cmps = 24
    ======================

Wow, down to only 24 cmps.  I'm going to run a batch of sims and make sure 
behavior still looks good.

    graham-mac% cd /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_rearr/ ; ./runmybatches ; ipython -i analyze.py

They all look good, but need more glutAmp

    # Varying glutAmp
    batch = {}
    batch["label"] = "glutAmp50"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["glutAmp"] = list(np.linspace(0., 5.0, 10).round(2))
    batch["params"] = params
    batches[batch["label"]] = batch

Uh oh.  Only ever gettting one spike in the simp model:
file:gif/20180323_100044.png

While I look into that I am going to run a super-high glutAmp to see what happens

I went up to a glutAmp of 50.0, and it's nice that there's never depol blockade, 
but simp cell still only spikes once.

Running glutAmp up to 500.  Cool, no depol block.  Still one spike in simp.

Okay, I'm going to reduce nseg in once sec at at time.  I'll modify geom_nseg()
to exclude apical_0

            if sec.name() != "apical[0]":
                sec.nseg = int((sec.L/(d_lambda*self.lambda_f(sec))+0.9)/2)*2 + 1

Now executing dev.py:

    eeeS
    ======================
    3  cmps in: apical_0
    1  cmps in: soma_3
    1  cmps in: soma_2
    1  cmps in: soma_1
    1  cmps in: soma_0
    5  cmps in: basal_7
    5  cmps in: basal_6
    5  cmps in: basal_5
    3  cmps in: basal_4
    1  cmps in: basal_3
    5  cmps in: basal_2
    3  cmps in: basal_1
    3  cmps in: basal_0
    5  cmps in: axon_0
    5  cmps in: basal_9
    15   cmps in: basal_8

    ======================
     Num secs = 16
     Num cmps = 62
    ======================

Okay, so that bumped apical_0 cmps from 13 to 3.  Let's see output.

Running glutAmp50 (up to 5.0)

Good spiking!  

Let's try removing active currents from apical.

Working in:
    /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_rearr/netParams.py

I will add apicals back into the dendIon scaling

Aaaand there's no spiking at all now.

Will crank up the glutAmp just to see if we ever get spiking.  
No spiking ever.

Will turn apical currents back on, and try removing axon currents.

Removing axon currents works fine:
file:gif/20180323_110301.png

Will try bumping apical nseg from 3 to 1

That works fine.

Will try bumping axon from 5 nsegs to 1

Commenting out add_axon(self) because it hardcodes nseg = 5

Executing dev.py:

    eeeS
    ======================
    1  cmps in: apical_0
    1  cmps in: soma_3
    1  cmps in: soma_2
    1  cmps in: soma_1
    1  cmps in: soma_0
    5  cmps in: basal_7
    5  cmps in: basal_6
    5  cmps in: basal_5
    3  cmps in: basal_4
    1  cmps in: basal_3
    5  cmps in: basal_2
    3  cmps in: basal_1
    3  cmps in: basal_0
    1  cmps in: axon_0
    5  cmps in: basal_9
    15   cmps in: basal_8

    ======================
     Num secs = 16
     Num cmps = 56
    ======================

Now that's the same as Penny's print statements about nseg

Running sims.

Output looks fine.

Will try reducing basal_9 (the lumped basals) to nseg = 1

Output looks fine.

Down to 52 compartments.  Can collapse the 4 somatic compartments into one, but 
most cmps are in the stim basal tree.

Most are actually in basal_8, so I'll try changing that from 15 to 3.

There's more spiking, but I think it looks fine.
file:gif/20180323_114407.png

Down to 40 compartments:

    eeeS
    ======================
    1  cmps in: apical_0
    1  cmps in: soma_3
    1  cmps in: soma_2
    1  cmps in: soma_1
    1  cmps in: soma_0
    5  cmps in: basal_7
    5  cmps in: basal_6
    5  cmps in: basal_5
    3  cmps in: basal_4
    1  cmps in: basal_3
    5  cmps in: basal_2
    3  cmps in: basal_1
    3  cmps in: basal_0
    1  cmps in: axon_0
    1  cmps in: basal_9
    3  cmps in: basal_8

    ======================
     Num secs = 16
     Num cmps = 40
    ======================


Will turn off geom_nsegs now, which should reduce all other basals to 1 cmp

Looks okay.

Down to 18 cmps.

    eeeS
    ======================
    1  cmps in: apical_0
    1  cmps in: soma_3
    1  cmps in: soma_2
    1  cmps in: soma_1
    1  cmps in: soma_0
    1  cmps in: basal_7
    1  cmps in: basal_6
    1  cmps in: basal_5
    1  cmps in: basal_4
    1  cmps in: basal_3
    1  cmps in: basal_2
    1  cmps in: basal_1
    1  cmps in: basal_0
    1  cmps in: axon_0
    1  cmps in: basal_9
    3  cmps in: basal_8

    ======================
     Num secs = 16
     Num cmps = 18
    ======================

Will try reducing basal_8 to 1 cmp.

That reduces simp model to max of two spikes.  Makes sense we need more resolution
in this branch: it is where we are releasing all the glutamate.

Back to nseg = 3 in basal_8

Will run a big set of batches to make sure there's no weirdness.

Everything looks pretty good.  Trying a lower range of glutAmps to see subthreshold
effects.

Looks pretty good.

file:gif/20180323_121750.png



** Measure how long running det / simp models takes

Detailed model averages 11.25 s per sim.
Simplified model average 0.52 s per sim.

changeset:   557:aad754996ce2


** Posting to Slack

joe [12:36 PM]
added this Plain Text snippet: Model simplification 
eeeD
======================
 Num secs = 85
 Num cmps = 487
======================
eeeS
======================
1  cmps in: apical_0
1  cmps in: soma_3
1  cmps in: soma_2
1  cmps in: soma_1
1  cmps in: soma_0
1  cmps in: basal_7
1  cmps in: basal_6
1  cmps in: basal_5
1  cmps in: basal_4
1  cmps in: basal_3
1  cmps in: basal_2
1  cmps in: basal_1
1  cmps in: basal_0
1  cmps in: axon_0
1  cmps in: basal_9
3  cmps in: basal_8
======================
 Num secs = 16
 Num cmps = 18
======================
Detailed model averages 11.25 s per sim.
Simplified model average 0.52 s per sim.
Basal dendrites and axon are passive. Changing apical or soma to passive stopped spiking.
/u/graham/projects/eee/sim/eee_detailed_model/CA229simp.py
To set up my repo:
mkdir eee_temp ; cd eee_temp ; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee ; cd eee ; ipython setup.py 
To run a single sim:
cd eee_temp/eee/sim/eee_detailed_model/netpyne/batch_rearr/ ; ipython -i batch_init.py
Collapse 

joe [12:37 PM]
uploaded this image: 20180323_121750.png 


sergio [12:40 PM]
it looks nice
let me update the cell

joe [12:45 PM]
So it still requires the cfg and netParams files from `eee/sim/eee_detailed_model/netpyne/batch_rearr/` to properly set all the params.
I’m gonna get some lunch.  When I get back I’ll work on getting everything into the cell model file itself.

sergio [12:47 PM]
perfect, thanks Joe


** Moving params from cfg/netParams to cell model file

Will get to this on Monday



* 2018-03-26 -- Networking

Get complete simp model into model cell file
See how models looks under TTX
Run bAP analysis and f-I analysis
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block


** Getting complete simp model into model cell file

Going through cfg file, and moving any param values to CA229simp.py

So in NMDAeee.mod, the original Beta (unbinding rate) was 0.01 but I changed
it a long time ago to be 0.0015 to get longer plateaus.  Now we are using the 
cfg file to set Beta to 0.021 (14 * 0.0015).  It might be worthwhile to revert
to the off-the-shelf Beta value.

If I'm going to clean up and modify simp cell model, it seems like I might as
well start by improving det model, so models basically stay aligned.

Penny's model could use some cleaning up anyway.  Would be nice to have easy
way to insert or not channels based on type of section, etc.

For now, I'm going to leave simp model as it is, and ask Bill what he thinks 
I should be working on.


** Options for things I could be doing

Improve detailed/simple cell models (better organization, cleaner)
Further reduce compartments in simp model (collapse soma, collapse stim basal tree)
Work with Sergio on Network sims
Explore models (stim location, delays, decays, etc)


** Helping Sergio with network sims

graham-mac% cd /u/graham/sergio/ ; rm -r eee_temp ; mkdir eee_temp ; cd eee_temp; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee

*** chat log

    joe [8:08 AM]
    Happy Monday.  Sergio, how’s getting the new simp model into network sims going?  Penny, how’s the article coming?  I’m about to ask Bill what he’d like me to be working on, but I thought I’d check in with you guys first.

    sergio [8:09 AM]
    Hi Joe, I’m still checking the last updates of the new simp model

    joe [8:10 AM]
    Need any help with anything?  Here’s the options I was going to send Bill.
    Thing I could be doing right now:
    * Improve detailed/simple cell models (better organization, cleaner)
    * Further reduce compartments in simp model (collapse soma, collapse stim basal tree)
    * Work with Sergio on getting simp model into Network sims
    * Explore models

    sergio [8:11 AM]
    the cell is included in the network, the last sims I was running seems like need to balance the Inh/exc syn weights

    penny [8:12 AM]
    I probably can give the first draft to Srdjan today :slightly_smiling_face: But still need a lot of editing

    sergio [8:12 AM]
    also need to update the params from cfg and netParams

    joe [8:13 AM]
    If Srdjan will let you share the article with us, I’d be happy to go over it.
    Serg, what do you mean by update cfg/nP?
    Do you have the network sims running with newest simp model and its latest param values?

    penny [8:15 AM]
    Yay, I will ask him today. Definitely needs all your input for editing.:wink: I am just not sure he prefers that to be after him or at the same time
    The suggestions to Bill all sounds good to me

    sergio [8:16 AM]
    the network runs, just adding the CA229simp.py and mod files. Do I need add files from `eee/sim/eee_detailed_model/netpyne/batch_rearr/`?

    joe [8:16 AM]
    Cool, thanks!
    Yeah, that’s where the latest simp model is.
    I had to *rearr*ange the basal dendrites (now active tree is basal_0 to basal_8, with glut stim in basal_8, basal_9 is now a lumped simplification of rest of basal trees.
    I’d just get rid of the old mod files we were using and copy over the one’s from Penny’s model.
    Where are you working right now?  I can take a look at the cfg/nP files.

    sergio [8:19 AM]
    ok
    I’m working on `eee/sim/layersim/`
    and using mod files on `eee/sim/mod`

    joe [8:20 AM]
    Cool, I’ll take a look.

    sergio [8:20 AM]
    I copied the mod files from `eee/sim/eee_detailed_model/mod/` from your repo

    joe [8:21 AM]
    That should be fine.  Mine were a direct copy of Penny’s

    sergio [8:21 AM]
    ok
    on `batch_rearr` do you use `CA229simp.py` or `CA229simp_pre_rearranged.py`?

    joe [8:26 AM]
    `CA229simp.py`

    sergio [8:27 AM]
    ok
    that is located on `eee/sim/eee_detailed_model/`?

    joe [8:29 AM]
    Lemme see..
    Yeah, the original is here: `eee/sim/eee_detailed_model/CA229simp.py`, and I symlinked it into working dirs.

    sergio [8:31 AM]
    perfect
    we are using the same one

    joe [8:32 AM]
    :+1:

    joe [8:51 AM]
    Yeah, so just glanced at your cfg and netParams, and we need to adapt to the changes I made in simp model.

    sergio [8:52 AM]
    the changes need to done on the stim params

    joe [8:53 AM]
    For example, now it uses `cfg.synLocMiddle` instead of `cfg.glutLoc`…
    I’m going to get a hike in before it gets too hot here.  When I get back, we can work on your cfg and nP together, if you have the time and inclination.

    sergio [8:54 AM]
    sure
    time and inclination

    joe [8:55 AM]
    Cool.  Probably about 1.5 hours.

    sergio [8:55 AM]
    ok, I’m start working on it
    meanwhile

    joe [8:55 AM]
    Perfect.  See you in a bit.

    sergio [8:55 AM]
    have fun

    joe [11:46 AM]
    Whoops.  I didn’t mean to start chatting in #eee-theory …

    joe [11:47 AM]
    added this Plain Text snippet: I can't compile 
    graham-mac% cd /u/graham/sergio/eee_temp/eee/sim ; ./compile
    Compiling...
    rm: mod/x86_64: No such file or directory
    Search path for mod files is /usr/site/nrniv/local/mod
    grep: vmax.mod: No such file or directory
    vmax.mod NOT FOUND; check env variable MODL_INCLUDE.
    Done.
    Collapse 

    sergio [11:47 AM]
    hehehe yes I saw that
    I modified your setup.py file, it is located in the same loc as your repo

    joe [11:48 AM]
    :face_palm:

    sergio [11:48 AM]
    and need to add all the mod files
    let me do that

    joe [11:49 AM]
    Perfect.  I’d love it if you could give me a one line command to clone your repo and do all setting up.

    sergio [12:04 PM]
    perfect I just pushed the last changes. Command is `rm -rf eee_temp; mkdir eee_temp; cd eee_temp; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee; cd eee; ipython -i setup.py; cd sim/layersim; runsim`

    joe [12:05 PM]
    Lemme give it a go…

    joe [12:09 PM]
    added and commented on this Plain Text snippet: Untitled 
    ---------------------------------------------------------------------------
    NameError                 Traceback (most recent call last)
    /Users/graham/eee_temp/eee/setup.py in <module>()
       36 
       37 batch_tools = ['analyze.py', 'batch_analysis.py', 'batch_init.py', 'batch_utils.py', 'instantiate.py', 'runmybatches']
    ---> 38 batch_tools_paths = [os.path.join(batchesdir, bt) for bt in batch_tools]
       39 
       40 
    NameError: name 'batchesdir' is not defined
    Collapse 
    Getting an error in setup.py

    sergio [12:10 PM]
    let me check that one

    joe [12:10 PM]
    It looks like you commented out the line defining `batchesdir`
    It used to point to `eee/sim/batches`
    Which doesn’t exist.
    Oh, I remember.  Awhile ago I moved `batch_analysis.py` and `batch_utils.py` to be in `eee/sim/`

    sergio [12:14 PM]
    yes, I left out the comment and it is working

    joe [12:15 PM]
    Looking at the error (line 38), we don’t even need that line.
    It seems.
    I’m gonna try commenting it out.

    sergio [12:15 PM]
    yep

    joe [12:17 PM]
    Okay setup worked.  :slightly_smiling_face:  Gonna try running sim.
    Haha, first thing we gotta get rid of is all those print statements in the cell file.

    sergio [12:19 PM]
    ok hehe

    joe [12:20 PM]
    added this Plain Text snippet: crash 
    Creating network of 13 cell populations on 4 hosts...
     Number of cells on node 0: 500 
     Number of cells on node 1: 500 
     Number of cells on node 3: 500 
     Number of cells on node 2: 500 
     Done; cell creation time = 2.12 s.
    Making connections...
     Number of connections on node 1: 6746 
     Number of synaptic contacts on node 1: 10495 
     Number of connections on node 0: 6746 
     Number of synaptic contacts on node 0: 10494 
     Number of connections on node 2: 6744 
     Number of synaptic contacts on node 2: 10490 
     Number of connections on node 3: 6745 
     Number of synaptic contacts on node 3: 10494 
     Done; cell connection time = 2.46 s.
    Adding stims...
    Traceback (most recent call last):
     File "init.py", line 82, in <module>
      sim.net.addStims()             # add network stimulation
     File "/usr/site/nrniv/local/python/netpyne/netpyne/network.py", line 167, in addStims
    Traceback (most recent call last):
     File "init.py", line 82, in <module>
      sim.net.addStims()             # add network stimulation
     File "/usr/site/nrniv/local/python/netpyne/netpyne/network.py", line 167, in addStims
    Traceback (most recent call last):
     File "init.py", line 82, in <module>
      sim.net.addStims()             # add network stimulation
     File "/usr/site/nrniv/local/python/netpyne/netpyne/network.py", line 167, in addStims
    Traceback (most recent call last):
     File "init.py", line 82, in <module>
      sim.net.addStims()             # add network stimulation
     File "/usr/site/nrniv/local/python/netpyne/netpyne/network.py", line 167, in addStims
      postCell.addStim(params) # call cell method to add connection
      postCell.addStim(params) # call cell method to add connection
     File "/usr/site/nrniv/local/python/netpyne/netpyne/cell.py", line 1073, in addStim
     File "/usr/site/nrniv/local/python/netpyne/netpyne/cell.py", line 1073, in addStim
      postCell.addStim(params) # call cell method to add connection
     File "/usr/site/nrniv/local/python/netpyne/netpyne/cell.py", line 1073, in addStim
      postCell.addStim(params) # call cell method to add connection
     File "/usr/site/nrniv/local/python/netpyne/netpyne/cell.py", line 1073, in addStim
      stim = getattr(h, params['type'])(sec['hSec'](params['loc']))
    TypeError: a float is required
      stim = getattr(h, params['type'])(sec['hSec'](params['loc']))
    >>> TypeError: a float is required
      stim = getattr(h, params['type'])(sec['hSec'](params['loc']))
    TypeError: a float is required
    >>> 
    >>> 
      stim = getattr(h, params['type'])(sec['hSec'](params['loc']))
    TypeError: a float is required
    >>> 
    Collapse 

    joe [12:20 PM]
    Is this what you’re getting also?

    sergio [12:20 PM]
    oh yes this the error
    *this is

    joe [12:20 PM]
    Okay, so let’s dig into it.
    First thing I’d do is not run it in parallel.
    graham-mac% cd eee_temp/eee/sim/layersim ; ./runsim 1
    numprocs=1

    joe [12:23 PM]
    added this Plain Text snippet: Easier to see the error now 
    Creating network of 13 cell populations on 1 hosts...
     Number of cells on node 0: 2000 
     Done; cell creation time = 6.56 s.
    Making connections...
     Number of connections on node 0: 26981 
     Number of synaptic contacts on node 0: 41973 
     Done; cell connection time = 6.39 s.
    Adding stims...
    Traceback (most recent call last):
     File "init.py", line 82, in <module>
      sim.net.addStims()             # add network stimulation
     File "/usr/site/nrniv/local/python/netpyne/netpyne/network.py", line 167, in addStims
      postCell.addStim(params) # call cell method to add connection
     File "/usr/site/nrniv/local/python/netpyne/netpyne/cell.py", line 1073, in addStim
      stim = getattr(h, params['type'])(sec['hSec'](params['loc']))
    TypeError: a float is required
    >>> 
    Collapse 

    sergio [12:23 PM]
    cleaner

    joe [12:24 PM]
    Okay, so the crash occurs in `/usr/site/nrniv/local/python/netpyne/netpyne/network.py` at line 167
    Let’s open that file and take a look.

    sergio [12:24 PM]
    ok

    joe [12:25 PM]
    Whoops.  Actually, that’s not the latest file that ran.
    We want to look at `/usr/site/nrniv/local/python/netpyne/netpyne/cell.py`

    sergio [12:26 PM]
    ok

    joe [12:26 PM]
    line 1073
    So first, let’s get our bearings.  That line is in an `else` statement, coming after the `if` statement at line 1020.
    Are your line numbers the same?  We should be sure we’re both using the same version of Netpyne.

    sergio [12:29 PM]
    getting there, one second

    joe [12:29 PM]
    Take your time.  No hurry.

    joe [12:30 PM]
    added this Plain Text snippet: checking netpyne version 
    graham-mac% ipython 
    In [1]: import netpyne
    In [2]: netpyne.__version__
    Out[2]: '0.7.7'
    Collapse 

    sergio [12:30 PM]
    ok there

    sergio [12:31 PM]
    added this Plain Text snippet: Untitled 
    zn% ipython
    Python 2.7.12 (default, Dec 4 2017, 14:50:18)
    Type "copyright", "credits" or "license" for more information.
    IPython 5.4.1 -- An enhanced Interactive Python.
    ?     -> Introduction and overview of IPython's features.
    %quickref -> Quick reference.
    help   -> Python's own help system.
    object?  -> Details about 'object', use 'object??' for extra details.
    In [1]: import netpyne
    In [2]: netpyne.__version__
    Out[2]: '0.7.7'
    Collapse 

    joe [12:31 PM]
    Perfect.
    Okay, so we only get to the line that crashes if the following is not true: `if params['type'] == 'NetStim'`

    sergio [12:33 PM]
    I did change it to ‘VecStim’
    let me modify that one

    joe [12:34 PM]
    and also the following (line 1047): `elif params['type'] in ['IClamp', 'VClamp', 'SEClamp', 'AlphaSynapse']`
    No, no, don’t change anything yet.
    Just getting my bearings.
    So there must be a million ways to debug code, but I like to use try/except
    At first.
    It usually works.
    Are you familiar at all with try/except in Python?

    sergio [12:36 PM]
    not really, I haven’t used that one that much

    joe [12:36 PM]
    I like it because that line probably gets run a bunch without error, and we only want to catch the case where there is an error.

    sergio [12:38 PM]
    joe, let eat something quickly and be back in 15 mins

    joe [12:39 PM]
    Cool.  Take your time.  Let me know when you’re back.

    joe [12:49 PM]
    added this Plain Text snippet: try / except 
    In [1]: try: 
      ...:   print("This is good code.")
      ...: except:
      ...:   print("This won't print.")
      ...: 
    This is good code.
    In [2]: 
    In [2]: try:
      ...:   # code that crashes here
      ...:   raise Exception("This is like forcing a crash.")
      ...: except:
      ...:   print("This will print.")
      ...: 
    This will print.
    In [3]: 
    Collapse 

    sergio [1:29 PM]
    I just changed ‘type’ from ‘VecStim’ to ‘NetStim’ and worked

    joe [1:30 PM]
    Great, even easier!
    Push please, and I’ll pull, so we don’t have to worry to much about merging (which I always find to be a nightmare).

    sergio [1:31 PM]
    done
    you can pull

    joe [1:33 PM]
    I’m still getting the same error…  It seems to still be a vectsim…

    sergio [1:35 PM]
    I’m running it agai
    again
    it is working
    I pushed it again to see if there was an error on the process

    joe [1:42 PM]
    Okay, I’ll check.
    While I run, just out of curiosity, why did you change it to a VecStim?
    I’m still getting same error…  Let me try it from scratch.

    sergio [1:45 PM]
    because, I can create a pop of the stims, and then plot the the activity in a raster

    joe [1:46 PM]
    Ahh, I see.
    Cool, well it’s running now!

    sergio [1:47 PM]
    :+1:

    joe [1:49 PM]
    uploaded this image: network162_raster.png 


    joe [1:49 PM]
    uploaded this image: network162_traces.png 


    sergio [1:49 PM]
    yep
    need to balance the network

    joe [1:50 PM]
    Great, can you work on that?  I’ll work on plotting all the cells and measuring plats.

    sergio [1:50 PM]
    sure
    thanks Joe for the help

    joe [1:50 PM]
    No worries.

    sergio [2:08 PM]
    joe, for the exc-to-exc connectivity I need to select a second basal to add rhe syn input,  which basal do you recommend me?

    joe [2:13 PM]
    Hmmm…  Right now we have two basal trees, the detailed one where do glutamate, and basal_9, which is a lumped cylinder to represent the rest of basal trees.
    Are we sure we want the exc in basal?  I seem to recall thinking we would do exc in apicals?
    Why don’t you ask in #eee-theory ?  Bill would be glad to see we’re working, and we can get his opinion.

    sergio [2:21 PM]
    ok

*** Got sims running again with new cell model

Now want to see what it looks like
Changing sim time to 1000
Setting to record all cells

Here's one-liner to get and prepare repo:
graham-mac% rm -rf eee_temp ; mkdir eee_temp ; cd eee_temp ; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee ; cd eee ; ipython -i setup.py

To run sim:
graham-mac% cd eee_temp/eee/sim/layersim ; ./runsim

To run plat analysis on cells:
graham-mac% cd /Users/graham/eee_temp/eee/sim/layersim/; ipython -i dev_joe.py


** Reducing noise in Network model

Looking at output of network model, I still think there's too much noise.  It 
really messes with the plat measurements.

Seems premature to me to be adding noise before we're sure what's happening 
underneath the noise

Working in:
    /Users/graham/eee_temp/eee/sim/layersim/cfg.py

Changing noise level to:
    cfg.exc_noise_amp = 0.0 #0.5 
    cfg.inh_noise_amp = 0.0 #0.5

Changing save folder to:
    cfg.saveFolder = '../../data/v36'

Changing dev_joe.py to match saveFolder

Running:
    graham-mac% cd eee_temp/eee/sim/layersim ; ./runsim

    Total time = 280.13 s

Analyzing:
    graham-mac% cd eee_temp/eee/sim/layersim/ ; ipython -i dev_joe.py

With no noise, there is some weird stuff going on.  Will delve into more in a 
bit, but first will run with low noise to see what happens.

Noise levels to 0.1
v37

Run and analyze:
    graham-mac% cd eee_temp/eee/sim/layersim ; ./runsim ; ipython -i dev_joe.py

Ahh, this doesn't have my hacky Python exit.  Have to analyze separately.

There's spiking with low noise, but the strange bumps in the trace are still
there.  

Also, RMP is more depolarized.  I have e_pas at -80 in cfg, but -70 in cell model.

Changing cell model to -80.

v38

That doesn't seem to have changed the RMP.  Will look into tomorrow.

Side note: run sim with axon traces

Weird bumpy traces:
file:gif/20180327_023919.png



* 2018-03-27 -- EEE Meeting 

Plot axon traces in det and simp models
Figure out weirdness in network simp models
Run bAP analysis and f-I analysis
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block


** Plot axon traces 

file:gif/20180327_025042.png

Can see axon in eeeS, but not in eeeD (it's very close to somatic trace)

Ahhh, I still have eeeD axon as basal_16, but after rearrangement, it is now 
basal_25

New plot:
file:gif/20180327_030608.png


** Fix network plateaus

First step, reduce number of cells in Network to reduce run time

/Users/graham/eee_temp/eee/sim/layersim/netParams.py

Starting line 236:
    numcellsPT5_0 = 20 #200
    numcellsPT5 = 8 #80

Biggest problem seems to be RMP, which is more depolarized than in ind sims

Sergio seems to have fixed RMP problem.  

** EEE Meeting

Check input imedance in eeeD and eeeS

Axon APs in eeeS don't look right (amplitude very low)

Turn on axon active currents and see diff

Mike Hines: axon nseg = 3 should be good

Hines thinks plateaus shouldn't appear in axon

Antic: axon terminals "see" plateaus, they affect behavior in axon

Collapsing basal tree is a go.

Look into basal active currents: Srdjan would like to see inital spikelet
(though it doesn't always appear experimentally)

Also, basal plateau amplitude shouldn't be higher than AP amplitude
(probably related to basal active currents)

Try to reduce size of basal plateaus (want max of 45-50 mV in basals)
1) reduce eNMDA (try at -10 mV)
2) try other RMPs (Srdjan's cells sit at about -65 mV)

Hines: reason for axons in models is to provide reliable AP threshold and shape

Joe leads RPPR (grant progress report)


** Work chats

    joe [7:28 AM]
    Any luck on the RMP?  I looked around a bit yesterday evening, but never found the problem.

    sergio [7:29 AM]
    uploaded this image: network162_traces_11.png 


    sergio [7:29 AM]
    uploaded this image: network162_raster_11.png 


    joe [7:30 AM]
    Looks much better!

    sergio [7:30 AM]
    I think I found something

    joe [7:30 AM]
    What was the deal with RMP?  Have you pushed?

    sergio [7:30 AM]
    I decreased Ra by 0.5
    and worked
    let me push last changes
    ok I just pushed new changes
    I'm going to run a 1 sec sim, record all the cells  and do the analysis of plateaus

    joe [7:33 AM]
    Perfect.  That should give you some figure to show at the meeting.  Can you also run one with zero noise to see about the weird plateau shape?

    sergio [7:33 AM]
    sure

    penny [7:46 AM]
    Sorry, I didn’t finished the writing yesterday. Probably need 1 or 2 more days. I don’t have anything new to show. Do u guys have anything?
    The new raster plot looks very nice

    joe [7:46 AM]
    I’ve updated the stuff from last meeting (about simplification).

    joe [7:46 AM]
    shared this file:  
    EEE Meeting -- 2018-03-27
    Document from Google Drive

    penny [7:48 AM]
    Less firing for PV5 cells but highly correlate with the plateau. And the time delay~ Very nice fig
    Great!
    Srdjan is back, you might have to explain to him one more time :slightly_smiling_face: I think he missed the whole simplification part
    lol~ funny… I am not late :joy:

    joe [7:50 AM]
    Yeah, I figured.  Also, Bill missed it. :sweat_smile:

    sergio [2:04 PM]
    I tried to see if I can get the spikelet in the basal dend but it only happened when I restore the active currents

    joe [2:06 PM]
    Interesting.  Maybe post a figure to #eee-theory  so we can all discuss.

    penny [2:07 PM]
    uploaded and commented on this file:  
    EEE_draft_figs_03_25.docx
    2 MB Word Document
    Hey Joe, the paper still needs extensive editing at this point. I am still working on it, but you might need the figures for the RPPR report.

    joe [2:07 PM]
    Awesome, thanks!!

    penny [2:08 PM]
    Sergio, that makes sense
    the spikelet are sodium channel activated responses in basal dendrites
    I think its the sodium channels on basal dendrites to generate spikelet. I might be wrong, confirm in the EEE channels for sure :slightly_smiling_face:

    sergio [2:11 PM]
    sure, that sounds correct

    penny [2:16 PM]
    I got bad tenosynovitis in the wrist~ the doctor said it happens quite often in programmers :joy: We should exercise our figures and wrists every hour.

    joe [2:17 PM]
    :+1::spock-hand::the_horns::call_me_hand::wave::v::ok_hand:

    sergio [2:17 PM]
    :joy:

    penny [2:17 PM]
    Hahahaha

    joe [2:18 PM]
    Seriously, though, that sucks.
    A lot of hardcore programmers I know have those split keyboards.

    penny [2:19 PM]
    Split keyboards? Interesting
    It looks very helpful! I am considering about getting one, although I don’t programming much:joy:

    joe [2:20 PM]
    Yeah, but lots of typing, I’m sure, especially with the article.


* 2018-03-28 -- Active currents

** chats

sergio [7:59 AM]
I just realized that `unsinsert` is use for delete mechanisms in a sec

joe [8:09 AM]
Yeah, I think Bill mentioned yesterday that we should try that.
But like Salva said, it’s better I think to have the sec lists and active current on/off switches in the cell model file itself.
I’m about to start on the cell model files.

sergio [8:11 AM]
ok

joe [8:11 AM]
What are you working on?
Is the weird bumpy plateau shape gone now?

sergio [8:13 AM]
there is still a bumpy thing that’s more notorious with the active currents, but I think it is related to the AP
I was taking a look to the uninsert func

sergio [8:14 AM]
added this Plain Text snippet: Untitled 
def uninsert_mech(self):
    for sec in self.basals:
      sec.uninsert('na')

sergio [8:14 AM]
this seems to work

joe [8:15 AM]
Nice.  I was thinking more along the lines of something like this for the cell files:
if basal_active is True:
   insert all mechs
else:
   just insert passive
For all sec types.

sergio [8:17 AM]
that actually works also

joe [8:18 AM]
One thing I’d love to see (if you’re looking for work :wink:) is comparison between network simp model and individual simp model for a range of glutAmp values…  I don’t think they match up as well as they should for some reason…

sergio [8:20 AM]
sure, the glut amp definitely don’t match up in network vs individual
for the network I move the stim more proximal in basal (loc=0.2) and increased the glut amp to 3.0
also for a better plateau I modified the Ra (by 0.5), I was thinking that this might also modify the amp of the AP
the Gfluct  alter some properties of the cell also

joe [8:25 AM]
It’d be interesting to see raster plots and ind traces in network for a range of glutAmps.
Would also be interesting to see a range of stim locations (further from soma leads to less spiking on plateau).

sergio [8:26 AM]
sure, let me work on that


sergio [3:18 PM]
added this Plain Text snippet: Untitled 
#########################################
# uninsert mech
#########################################
  def uninsert_mech(self):
    for sec in self.basals:
      sec.uninsert('na')
      sec.uninsert('kv')
      sec.uninsert('kap')
      sec.uninsert('kad')
      sec.uninsert('kBK')
      sec.uninsert('ca')
      sec.uninsert('it')
Collapse 

sergio [3:19 PM]
I inserted this definition in the CA229simp.py cell and it works
the sim runs faster without the active currents in the basal dend but there is not spikelets
I pushed the changes on my repo



* 2018-03-30 --  Organizing cell model files

Finish new contract
Clean up cell model files
Work on RPPR
Run bAP analysis and f-I analysis
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block


** Cleaning up cell model files

Need a set of switches which determine whether active currents are added to 
the different sec types:

soma_active       = True / False
axon_active       = True / False
apical_active     = True / False
glut_basal_active = True / False
ctrl_basal_active = True / False

Here's the original init from CA229.py:

    def __init__(self):
        self.create_cell()
        self.optimize_nseg()
        self.add_axon()
        self.add_all()
        self.addsomachan()
        self.addapicalchan()
        self.addbasalchan()
        self.addaxonchan()
        self.gna_control()
        self.distCa()
        self.distKV()
        self.distKA()
        self.distspines()
        self.add_ih()
        self.add_CaK()

Here's the init from Salva's SPI6:

  def __init__(self,x=0,y=0,z=0,ID=0):
    self.x,self.y,self.z=x,y,z
    self.ID=ID
    self.all_sec = []
    self.add_comp('soma')
    self.set_morphology()
    self.insert_conductances()
    self.set_props()


CA229 has the parameter values interspersed in the file, while SPI6 has them 
neatly organized at the beginning of the file.  I like them at the beginning.

Saving CA229.py as eeeD.py
Saving CA229simp.py as eeeS.py



* 2018-04-05 -- Posters and contract 

Finish new contract
Clean up cell model files
Work on RPPR
Run bAP analysis and f-I analysis
Get analysis/plotting code into Netpyne
Read Major and Schilling articles for journal club, read Penny's chapters
Figure out a way to find glutAmps that threshold plateaus/depol block


** Catch up on Slack 

Sergio changed params, plateaus look good

    sergio [3:45 PM]
    e for NMDA = -10mV; RMP = -70mV; increased gbar for sodium by a factor of 1.2
    sergio [3:47 PM]
    the goal was to decrease the amplitude of the plateau in the basal dendrite, and increase the peak amplitude for the APs

Salvador posted interesting article about dendritic spines:

    Dendritic spines modify action potential back-propagation in a multicompartment neuronal model
    T. M. Hoang Trong ; S. E. Motley ; J. Wagner ; R. R. Kerr ; J. Kozloski

    IBM Journal of Research and Development ( Volume: 61, Issue: 2/3, March-May 1 2017 )

    Abstract:
        Pyramidal neurons in the brain's neocortex receive, on average, approximately 10,000 synaptic inputs. The majority of these are made onto dendritic spines, which are chemically and electrically isolated from other parts of the neuron. We present an extension to the IBM Neural Tissue Simulator that models details of neuron morphology and the dynamics of intracellular diffusible ions or molecules, and here, for the first time, we demonstrate the ability to simulate the functional role of spines and their calcium dynamics at a detailed whole neuron and tissue level. We create a multicompartment model of a neuron in which a realistic number of spines (∼10,000) are explicitly simulated as individual compartments (two compartments per spine) branching from the dendrites. Simulations of this model neuron run efficiently using a parallel computing infrastructure. Experimental data are used to constrain the geometry of each spine as a function of morphological class and to distribute spines in a statistically realistic manner along the dendrite. We show how the model behaves differently with and without spines of different classes and how transmembrane potential and calcium dynamics differ between the spine neck and shaft. These results suggest that spines impose a constraint on back-propagation of action potentials dependent on their morphology and neck resistance.

Penny's poster for BRAIN Initiative meeting:
    file:gif/20180405_104625.png

Sergio is still working on his.  Will ask if he needs help.


** Finish new contract

Dates: 4/9/2018 to 6/30/2018

Our last contract ended 5/30/2017, so I need to be paid from:
6/1/2017 to 6/30/2018

That's 13 months, but I'll charge for 12: $40,000


* 2018-04-17 -- EEE Meeting

Bill: recent "place cell" paper uses plateaus also -- should look into

Joe starts running network sims, gets brain dump from Sergio

Joe helps Subha look for emergent properties in network

From BRAIN meeting:
  
  Look into synfire chains
  
  Look into "first wave" idea by Simon Thorpe

Srdjan: plan is now to use more experimental data, aim for higher journal

Next two weeks meeting will be at 3pm Eastern (12 pm PHX)

joe [8:20 AM]
https://www.sciencedirect.com/science/article/pii/S0042698902002985
sciencedirect.com
Surfing a spike wave down the ventral stream
Numerous theories of neural processing, often motivated by experimental observations, have explored the computational properties of neural codes based…


* 2018-04-20 -- Helping to get network sims running

** Working with Sergio on network model

Getting latest version:

    rm -rf eee_temp ; mkdir eee_temp ; cd eee_temp ; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee ; cd eee ; ipython -i setup.py

Running 

    cd sim/layersim ; ./runsim

It works on my machine, but not on zn.  Looking into why.

Could be a diff in NEURON version (Netpyne version is same):

    graham-mac% nrniv --version
    NEURON -- VERSION 7.5 master (72f115e) 2017-05-05

    zn% nrniv --version
    NEURON -- VERSION 7.5 master (4f1e575) 2018-03-17


Trying to run a batch of my own on zn.

First to get latest eee version and compile:

    zn% mkdir eee_temp ; cd eee_temp ; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee ; cd eee ; ipython setup.py 

Then to run batch:

    zn% cd sim/eee_detailed_model/netpyne/batch_rearr/ ; ./runmybatches

Everything works.

Figured out why Sergio's wasn't running on Neurosim machines:

Adding:
    h.load_file('stdrun.hoc')

To the cell model file solved the problem.



* 2018-04-23 -- Network model

Go over network with Sergio et al.
Get minimal model to Subha
Clean up cell models, add switches
Combine Sergio and my repos, organize it
Work on RPPR


** Talk about network

mkdir eee_serg ; cd eee_serg ; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee ; cd eee ; python setup.py

*** Chat

    joe [1:51 PM]
    Hey gang, Sergio and I are going to walk through the network model now, and we thought it’d be good to include everyone.

    penny [1:52 PM]
    Yay!
    Would love to learn it too!

    joe [1:52 PM]
    Perfect.

    penny [1:53 PM]
    Are u guys doing google hangouts? Or just typing?

    sergio [1:53 PM]
    we checked on Friday with Joe, and the model was running

    penny [1:54 PM]
    What is your repo?
    May i clone it too?

    joe [1:55 PM]
    mkdir eee_serg ; cd eee_serg ; hg clone ssh://no.neurosim.downstate.edu://u/sergioangulo/projects/eee ; cd eee ; ipython -i setup.py

    penny [1:55 PM]
    Great! Thanks

    joe [1:58 PM]
    Okay, so you’re working in `eee/sim/layersim` , right Sergio?

    sergio [1:58 PM]
    yes
    that’s working dir
    penny, just need to run `python setup.py` on `eee_serg/eee`
    for compiling

    penny [1:59 PM]
    Cool

    joe [2:00 PM]
    Okay, and you use `runsim` file to run the simulation?

    sergio [2:00 PM]
    yes
    if you are on `zn`, you can run 48 cores to make it faster

    joe [2:01 PM]
    Okay, I’m running now on my local machine.  Seems to be working.

    joe [2:01 PM]
    added this Plain Text snippet: runsim 
    #!/bin/bash
    # Runs simulation, including MPI.
    rm *.pyc 
    numprocesses=$1; if [ -z $numprocesses ]; then numprocesses=4; fi # Number of processes to use
    shift # Eliminate first argument
    mpiexec -np $numprocesses nrniv -python -mpi init.py $@ # Run the model
    Collapse 

    joe [2:03 PM]
    So it looks like on `zn` you would do: `zn% ./runsim 48` to use more cores.
    I’m trying that now.

    sergio [2:04 PM]
    yes
    it should take 90 seg to run the sim

    penny [2:07 PM]
    I am on cu, should I switch to another computer?

    joe [2:07 PM]
    Try running it there. Always good to make sure it runs everywhere.

    sergio [2:07 PM]
    I haven’t done anything on `cu`
    I have used `my`

    penny [2:08 PM]
    okay. before I run it, how do I know how many cores are being used by other ppl now?

    sergio [2:08 PM]
    on `my`, you can use up to 24 cores

    joe [2:09 PM]
    You can type in `top` in an ssh session to see

    penny [2:09 PM]
    thanks

    sergio [2:10 PM]
    there is a table on the wiki for the lab with the machines and number of cores

    penny [2:11 PM]
    added and commented on this Plain Text snippet: Untitled 
    Tasks: 329 total,  1 running, 326 sleeping,  2 stopped,  0 zombie
    Is this safe for me to use now? totally newbie

    penny [2:13 PM]
    do u guys use “nano” or other text file editor on neurosim?

    joe [2:13 PM]
    You can use command `lscpu` to see how many cpus, cores, etc.

    sergio [2:14 PM]
    I use sublime on `no`

    joe [2:14 PM]
    How do you start it again?

    sergio [2:14 PM]
    to launch it, just type `subl` on terminal

    joe [2:14 PM]
    Penny, I haven’t done much editing on neurosim machines… I’ve always found it easier to work locally.

    penny [2:14 PM]
    okay

    joe [2:15 PM]
    But now that I’ll be running some network sims, I’ll need to.  Sublime is what I use on my machine.

    penny [2:15 PM]
    Cool, subl works

    joe [2:16 PM]
    Oof, yeah it works, but there’s a huge lag time…

    sergio [2:17 PM]
    joe, do you use a virtual machine?

    penny [2:17 PM]
    Hmm, I take it back. subline doesn’t work on cu, nano works

    joe [2:17 PM]
    I’m not really sure what a virtual machine is!

    penny [2:17 PM]
    what does instantiate.py file do?

    joe [2:18 PM]
    That should set up the model, but not actually run it.

    sergio [2:18 PM]
    yep
    there is a huge lag time if using a normal ssh connection
    but it is faster if you use x2go or nx machine

    joe [2:20 PM]
    I tried x2go awhile back, but also found lag time…  I don’t think my internet connection is that great.

    sergio [2:22 PM]
    I like nx better than x2go

    joe [2:22 PM]
    From here?
    https://www.nomachine.com/
    NoMachine
    NoMachine - Free Remote Desktop For Everybody
    Get to your desktop at the speed of light. NoMachine is the fastest remote desktop you have ever tried. Control any computer in the world and start working on it as if it was right in front of you. Free for individual use.
    https://www.nomachine.com/NMLogo.png

    sergio [2:22 PM]
    if you want to go give a try
    yep
    do you have the link for the wiki page of the lab?

    joe [2:24 PM]
    wiki: https://drive.google.com/drive/u/1/folders/0B24X-MxpNEilMTI1Y3dWMkhTY1N0WlRJNzYyd052dw
    I’ll have to try NoMachine.  For now, let’s get back to network.
    So it ran on zn:  `Total time = 137.69 s`

    penny [2:26 PM]
    I tired on cu with 4 cores: Total time = 240.23 s

    sergio [2:26 PM]
    i see, how long it takes on your machine?

    joe [2:28 PM]
    Checking on my local machine now.

    sergio [2:28 PM]
    do you guys want to start with the cfg.py file?

    joe [2:28 PM]
    Sounds great.

    penny [2:28 PM]
    yup

    joe [2:29 PM]
    added this Plain Text snippet: eee/sim/layersim/cfg.py 
    """
    cfg.py
    """
    from netpyne import specs
    cfg = specs.SimConfig()
    import numpy as np
    #------------------------------------------------------------------------------
    #
    # SIMULATION CONFIGURATION
    #
    #------------------------------------------------------------------------------
    #------------------------------------------------------------------------------
    # Run parameters
    #------------------------------------------------------------------------------
    cfg.duration = 600 #ms
    cfg.dt = 0.05 #don't do less than 0.05
    cfg.hParams = {'celsius': 32}
    cfg.verbose = 0
    cfg.createNEURONObj = True
    cfg.createPyStruct = True
    cfg.cvode_active = False
    cfg.cvode_atol = 1e-6
    cfg.cache_efficient = True
    cfg.checkErrors = True
    cfg.seed_wiring = 4123
    cfg.seeds = {'conn': cfg.seed_wiring,
          'stim': 1234, 
          'loc': 3214}
    cfg.printPopAvgRates = True
    cfg.scale = 1.0
    cfg.sizeY = 1600
    cfg.sizeX = 400
    cfg.sizeZ = 300
    cfg.factor = 0.05 #factor to multiply by the total mumber of cells
    #------------------------------------------------------------------------------
    # Recording
    #------------------------------------------------------------------------------
    L5 = ['PT5_0','PT5_1', 'PT5_2', 'PT5_3', 'PT5_4', 'PT5_5','PT5_6','PT5_7','PT5_8','PT5_9','PT5_10', 'PV5']
    PT5 = [v for v in L5 if not v=='PV5']
    plateau = [v for v in L5 if (not v=='PT5_0' and not v=='PV5')]
    cfg.cellsrec = 2
    if cfg.cellsrec == 0: #
      cfg.recordCells = ['all']
    elif cfg.cellsrec == 1: #
      cfg.recordCells = [(pop,5) for pop in L5]
    elif cfg.cellsrec == 2: # record selected cells
      cfg.recordCells = [(pop,5) for pop in plateau]+[(pop,25) for pop in plateau]
    elif cfg.cellsrec == 3: # record selected cells
      cfg.recordCells = [('PT5_0', 5), ('PV5', 0)]
    elif cfg.cellsrec == 4: # record selected cells
      cfg.recordCells = [] # doesn't record any cell
    cfg.recordTraces = {'v_soma': {'sec':'soma_2', 'loc':0.5, 'var':'v'}}
    #cfg.recordTraces['v_apical'] = {'sec':'apical_0', 'loc':0.5, 'var':'v'}
    cfg.recordTraces['v_basal'] = {'sec':'basal_8', 'loc':0.5, 'var':'v'}
    cfg.recordStims = False
    cfg.recordStep = 0.1 #sampling rate, orig =1.0, 1=1khz, 0.1=10khz, 0.05=20khz
    #------------------------------------------------------------------------------
    # Saving
    #------------------------------------------------------------------------------
    cfg.simLabel = 'network208'
    cfg.saveFolder = '../../data/v46'
    cfg.savePickle = False
    cfg.saveJson = True
    cfg.saveDataInclude = ['simData', 'simConfig', 'netParams', 'net']
    cfg.backupCfgFile = None 
    cfg.gatherOnlySimData = False
    cfg.saveCellSecs = False
    cfg.saveCellConns = False
    #------------------------------------------------------------------------------
    # Analysis and plotting
    #------------------------------------------------------------------------------
    cfg.cell_list = [5] #,45, 85, 125, 165] #,11,24,35] #plotmat gids of cells
    analysisList = [() for i in range((len(PT5))-1)]
    for k,v in enumerate(PT5): 
      if not k == 0: analysisList[k-1] = (v,range(0,40))
    cfg.analysis['plotRaster'] = {'include':[],'orderBy': 'gid','timeRange':[100,500], 'orderInverse':True,'saveFig': True, 'labels':'overlay','popRates': False, 'syncLines': False, 'figSize': (12,10),'showFig': True,'lw': 2.0,'marker': '|'}#, 'popColors': {'PT5':'red','PV5': 'blue'}}
    cfg.analysis['plotTraces'] = {'include': [],'oneFigPer':'cell', 'colors': ['black'], 'figSize': (12,8),'saveFig': True ,'saveData': False,'showFig': False, 'ylim':[-100,30]} 
    #cfg.analysis['plotConn'] = {'includePre':L5, 'includePost':L5,'feature': 'strength','synOrConn':'conn','synMech':['AMPA'],'groupBy': 'pop', 'saveFig': True, 'showFig': False}
    #cfg.analysis['plot2Dnet'] = {'include': L5, 'view': 'xy', 'showConns': True, 'showFig': False, 'saveFig': True}
    #cfg.analysis['plotSpikeStats'] = {'include':analysisList, 'timeRange': [200,500],'graphType':'boxplot','stats':['sync'],'saveFig': True , 'xlim': [0,1], 'showFig': False}
    #------------------------------------------------------------------------------
    # Cells
    #------------------------------------------------------------------------------
    cfg.singleCellPops = 0
    #------------------------------------------------------------------------------
    # Connections
    #------------------------------------------------------------------------------
    cfg.addConns = True
    #------------------------------------------------------------------------------
    # Parameter to control for Rm in all secs of eee7ps cell
    #------------------------------------------------------------------------------
    cfg.RmScale  = 1.0 #20.0
    cfg.RaScale  = 0.7
    #------------------------------------------------------------------------------
    # Parameter to control for Ih in all secs of eee7ps cell
    #------------------------------------------------------------------------------
    cfg.ihScale   = 0.0 # Scales ih conductance
    #------------------------------------------------------------------------------
    # Parameter to control for vinit in all secs of eee7ps cell
    #------------------------------------------------------------------------------
    cfg.vinit_PT5 = -70
    #------------------------------------------------------------------------------
    # Sodium, potassium, and calcium conductance scaling
    #------------------------------------------------------------------------------
    cfg.allNaScale = 1.2
    cfg.dendNaScale = 1.0 # Scales dendritic Na conductance
    cfg.dendKScale = 1.0 # Scales dendritic K conductance
    cfg.dendCaScale = 1.0 # Scales dendritic Ca conductance
    #------------------------------------------------------------------------------
    # Parameters AMPA, NMDA, AMPA/NMDA ratio
    #------------------------------------------------------------------------------
    # DMS NMDA params
    cfg.NMDAAlphaScale = 1.0  # Scales original value of 4.0
    cfg.NMDABetaScale = 14.0 # Scales original value of 0.0015
    cfg.CdurNMDAScale = 1.0  # Scales original value of 1.0
    cfg.NMDAgmax    = 0.01
    cfg.ratioAMPANMDA = 4.0 
    cfg.eNMDA     = -10.0
    # glutamate stim parameters
    cfg.synTime      = 200.0
    cfg.numSyns      = 24
    cfg.numExSyns     = cfg.numSyns
    cfg.glutAmp      = 2.0
    cfg.glutAmpExSynScale = 2.0
    cfg.glutAmpDecay   = 0.0 # percent/um
    cfg.synLocMiddle   = 0.3 #0.45 
    cfg.synLocRadius   = 0.15 
    cfg.initDelay     = 10.0
    cfg.synDelay     = 2.0 # ms/um
    cfg.exSynDelay    = 4.0 # ms/um
    #------------------------------------------------------------------------------
    # Noise params
    #------------------------------------------------------------------------------
    cfg.noise = 1 #add synaptic noise to soma of PT5
    cfg.noise_ptps = 0 # add noise as point process with addstim method
    cfg.noise_tau = 1.0
    cfg.noise_seed = [0,1,2,3,4,5,6,7,8,9,10] #different noise seed for different subset
    cfg.e_inh_noise = cfg.vinit_PT5 - 10.0 #-2
    cfg.e_exc_noise = cfg.vinit_PT5 + 60.0 #80
    cfg.exc_noise_amp = 0.22 #0.22
    cfg.inh_noise_amp = 0.22 #0.22 
    #------------------------------------------------------------------------------
    # Synaptic weigth 
    #------------------------------------------------------------------------------
    cfg.EEgain = 1.0#0.0008 # basal dend 
    cfg.IEgain = 0.001 #0.04  #PV to exc s
    cfg.EIgain = 2.0 #0.15 # exc to PV
    cfg.IIgain = 0.00012 #0.00001 #0.003  # PV to PV
    cfg.ratioapical = [0.8, 0.2] #AMPA/NMDA ratio for apical dendrite * 4.0
    cfg.ratiobdend = [0.666,0.334]# 2.0 AMPA/NMDA 
    cfg.GABAAfast_e = -80
    cfg.GABAAslow_e = -90
    #------------------------------------------------------------------------------
    # Long range inputs
    #------------------------------------------------------------------------------
    cfg.addLongConn = 1 #control all long connectivty, including glut stim 
    cfg.longConnPT5 = 0
    cfg.longConnPV5 = 1
    cfg.numCellsLong = 500 # num of cells per population
    cfg.noiseLong = 1.0  # firing rate random noise
    cfg.delayLong = 1.0 # (ms)
    cfg.weightLong = 0.0 #2.8 # to PT5 
    cfg.weightLongInh = 3.0 #1.4 # to PV5
    cfg.startLong = 0 # start at 0 ms
    cfg.ratesLong = {'dTC':[80.0, 100.0]}#, 'HC':[40.0,80.0]}
    #------------------------------------------------------------------------------
    # NetStim inputs
    #------------------------------------------------------------------------------
    cfg.addNetStim = 1
    cfg.secStim = 'apical_0'
    cfg.synTime2 = 400
    cfg.intervalStim = 50
    cfg.stimNumber2 = 1
    cfg.glutAmp2 = 7.5
    cfg.glutDelay = 1.0
    #cfg.Stim_apical = {'loc': 0.5, 'sec': cfg.secStim, 'synMech': ['NMDA','AMPA'], 'start': cfg.synTime2, 'interval': cfg.intervalStim, 'noise': 0.0, 'number': cfg.stimNumber2, 'weight': [cfg.glutAmp2, cfg.glutAmp2], 'delay': cfg.glutDelay}
    #cfg.NetStimSyn = {'loc': list(np.linspace(cfg.synLocMiddle-cfg.synLocRadius, cfg.synLocMiddle+cfg.synLocRadius, cfg.numSyns)), 'sec': 'basal_8', 'synMech': ['NMDA','AMPA'], 'start': cfg.synTime, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': cfg.glutAmp, 'delay': cfg.synDelay}
    #cfg.NetStimExSyn = {'loc': list(np.linspace(cfg.synLocMiddle-cfg.synLocRadius, cfg.synLocMiddle+cfg.synLocRadius, cfg.numExSyns)), 'sec': 'basal_8', 'synMech': ['NMDA'], 'start': cfg.synTime, 'interval': 1000, 'noise': 0.0, 'number': 1, 'weight': cfg.glutAmp * cfg.glutAmpExSynScale, 'delay': cfg.exSynDelay}
    #------------------------------------------------------------------------------
    # Current inputs (IClamp)
    #------------------------------------------------------------------------------
    cfg.addIClamp = 0
    ampl = 0.4
    durat = 1000
    cfg.IClamp1 = {'pop': 'PV5', 'sec': 'soma_2', 'loc': 0.5, 'start': 5, 'dur': durat, 'amp': ampl}
    Collapse 

    sergio [2:30 PM]
    from the first section, the most  important is `cfg.seeds`
    it is the randomizer for connections, location, and stims

    joe [2:31 PM]
    Okay, so each of those is randomized individually.

    sergio [2:31 PM]
    yep

    joe [2:31 PM]
    And we give it a seed so that we get the same “random” every time until we’re really ready for random?

    sergio [2:32 PM]
    yes

    joe [2:32 PM]
    Cool, so that just takes a four digit number?

    sergio [2:33 PM]
    every digit is a randomization
    so the configuration now 4x4x4

    joe [2:35 PM]
    Not sure I understand that…

    sergio [2:38 PM]
    I’m trying to understand also, so if you use one digit, the max number of possibilities will be 10 (0-9)

    joe [2:39 PM]
    I think I see.  Anyway, prob not too important right now.

    sergio [2:39 PM]
    but the 4 digits, you can have a combination of 4 numbers and change multiple times
    ok

    joe [2:40 PM]
    So next in cfg comes the size, which must be in microns.
    Now, does the size affect anything?  Connectivity?

    sergio [2:40 PM]
    yes
    it affects density of the cells

    joe [2:41 PM]
    Okay.

    sergio [2:41 PM]
    and depending of the configuration of the network, you can set a probability of connectivity depending of the loc in space

    joe [2:42 PM]
    That’s what I was wondering about.  But connectivity in this model doesn’t depend on location.
    Or does it?

    sergio [2:42 PM]
    it does not

    joe [2:42 PM]
    Cool.
    Then what is `cfg.factor = 0.05 #factor to multiply by the total mumber of cells`

    sergio [2:42 PM]
    it is set value, so cells receive the same number of inputs
    `cfg.factor` is an old parameter, I should take it away

    joe [2:45 PM]
    Okay, so then it looks like you set up your populations.

    sergio [2:45 PM]
    I have three lists
    `L5` includes all the PT5 subpops and PV5
    `PT5` only includes PT5 subpops

    joe [2:47 PM]
    Just two cell types in the model?  Pyramidal excitatory and pv (parvalbumin?) inhibitory?

    sergio [2:47 PM]
    `plateau` includes PT5_1 to PT5_10

    joe [2:47 PM]
    And just modeling Layer 5, right?

    sergio [2:47 PM]
    yes, just 2 cell types
    yes

    joe [2:48 PM]
    Great.  Could you explain the subpops again?

    sergio [2:49 PM]
    `PT5_0` is a control subpop, that does not receive stims, but it is connected to the other subpops
    it contains 200 cells
    `PT5_1` to `PT5_10` are subpops that receive stims
    each subpop is 80 cells
    for plateaus, the stim is set to induce plateau on 40 cells
    the other 40 cells are control
    ’no plateau`

    joe [2:54 PM]
    I haven’t done much network modeling at all, but that seems fairly complex.
    Why 10 diff subpops?

    sergio [2:56 PM]
    at some point, bill wanted to have 1 synaptic noise seed per each subpop to see if the sync was higher inside the subpop
    but then we changed everything and at this moment there is a 1 synaptic noise per cell
    it does not make sense to have 10 diff subpops anymore
    unless we can make them to have something different

    joe [2:58 PM]
    Okay, so that’s something we can simplify.
    Okay, so then you set up recording, saving, and analysis stuff.
    Then cell params, then AMPA/NMDA params.
    And then noise params.
    Could you explain the noise please?

    sergio [3:01 PM]
    ok
    there are 2 ways to add the noise
    one is 2 modify the dict with netpyne and include the noise as point process in the compartment that you want to
    *to
    it is the method that I’m using
    the 2nd one is to include noise as a stim

    joe [3:04 PM]
    So Netpyne is adding the noise?

    sergio [3:04 PM]
    so `cfg.noise` includes syn noise in the dict of the compartment

    joe [3:04 PM]
    Does it use a mod file?

    sergio [3:05 PM]
    yes
    there is something additional for the noise on `init.py`

    sergio [3:06 PM]
    added this Plain Text snippet: Untitled 
    """
    init.py
    Usage:
      python init.py # Run simulation, optionally plot a raster
    MPI usage:
      mpiexec -n 4 nrniv -python -mpi init.py
    Contributors: salvadordura@gmail.com
    """
    import matplotlib; matplotlib.use('Agg') # to avoid graphics error in servers
    from netpyne import sim
    from neuron import h
    #import sys
    #sys.path.insert(1,'/usr/site/nrniv/local/python/netpyne')
    cfg, netParams = sim.readCmdLineArgs()
    PT5 = ['PT5_0','PT5_1', 'PT5_2', 'PT5_3', 'PT5_4', 'PT5_5','PT5_6','PT5_7','PT5_8','PT5_9','PT5_10']
    def myinit1(): #different seed per subset
      for i,v in enumerate(PT5):
        if i==0:
          for c in sim.net.cells:
            if c.tags['pop'] in v:
              for isec,sec in c.secs.iteritems():
                if isec == 'soma':             
                  for ip, pointp in enumerate(sec.pointps.values()):
                    if pointp['mod'] == 'Gfluctp':                 
                      pointp.hPointp.noiseFromRandom123(c.gid, len(c.conns), ip)
        else:   
          for k,c in enumerate(sim.net.cells):
            if c.tags['pop'] in v:
              for isec,sec in c.secs.iteritems():
                if isec == 'soma':
                  for ip, pointp in enumerate(sec.pointps.values()):
                    if pointp['mod'] == 'Gfluctp':
                      pointp.hPointp.noiseFromRandom123(i, i*2, i*3)
    def myinit2(): #different seed per cell
      for i,v in enumerate(PT5):
        for c in sim.net.cells:
            if c.tags['pop'] in v:         
              for isec,sec in c.secs.iteritems():
                if isec == 'soma_2':
                  for ip, pointp in enumerate(sec.pointps.values()):
                    if pointp['mod'] == 'Gfluctp':
                      pointp.hPointp.noiseFromRandom123(c.gid, len(c.conns), ip)
    ss=h.SaveState()
    def savestate (fn='svst'):
      f = h.File(fn)
      ss.save()
      ss.fwrite(f)
    def restorestate (fn='svst'):
      f = h.File(fn)
      ss.fread(f)
      ss.restore()
    def rerun (t=400):
      h.finitialize()
      restorestate()
      sim.preRun() # to do sim.pc.set_maxstep(10)
      sim.pc.psolve(t)
    #restorestate()
    sim.initialize(
      simConfig = cfg,
      netParams = netParams)         # create network object and set cfg and net params
    sim.net.createPops()            # instantiate network populations
    sim.net.createCells()            # instantiate network cells based on defined populations
    sim.net.connectCells()           # create connections between cells based on params
    sim.net.addStims()             # add network stimulation
    myinit2()
    #sim.fih.append(h.FInitializeHandler(1,myinit()))
    sim.setupRecording()            # setup variables to record for each cell (spikes, V traces, etc)
    #rerun()
    #restorestate()
    sim.runSim()                # run parallel Neuron simulation
    #savestate()
    sim.gatherData()              # gather spiking data and cell info from each node
    sim.saveData()               # save params, cell info and sim output to file (pickle,mat,txt,etc)#
    sim.analysis.plotData()           # plot spike raster etc
    Collapse 

    sergio [3:07 PM]
    check `myinit1()` and `myinit2()`
    `myinit1()` set one noise seed per subset
    `myinit2()` set one noise seed per cell
    I’m using `myinit2()`

    joe [3:09 PM]
    Okay, so the mod file is `Gfluctp`, and that is injecting noise into the somas.

    sergio [3:09 PM]
    yep

    joe [3:10 PM]
    I’m a bit confused about the init file bit…  Why is that in init instead of netParams?
    And what is it doing?

    subha [3:13 PM]
    hello everyone

    sergio [3:13 PM]
    `Gfluctp` is the file that bill modified from the original. There was some changes in the randomizations methods. Before it was easier to change the seed, but with the new one `Gfluctp`, you need to change the seed via init.py. I think netpyne can not access to the seed param for the mod file

    joe [3:14 PM]
    Hi Subha!  Ask any questions you have.

    subha [3:15 PM]
    I am waiting for my access to SUNY systems so I can clone from the repo

    sergio [3:16 PM]
    Hi Subha!

    joe [3:16 PM]
    Sounds good.  In the meantime, we’ve been posting copies of the relevant files here.

    penny [3:16 PM]
    Hello subha:)

    joe [3:17 PM]
    Sergio, do you have a link to the original Gfluctp?

    sergio [3:18 PM]
    let me see

    joe [3:18 PM]
    I’ll have to dig into the noise a bit more to figure it all out.
    I’d like to compare original with new to see what all changed.

    sergio [3:18 PM]
    it must be on the central repo

    joe [3:18 PM]
    Okay, you got it from Neurosim and not from like ModelDB?

    sergio [3:19 PM]
    both

    joe [3:22 PM]
    Okay, we can dig into noise more later if we need to.

    sergio [3:22 PM]
    added and commented on this Plain Text snippet: Gfluct2.mod 
    TITLE Fluctuating conductances
    COMMENT
    -----------------------------------------------------------------------------
      Fluctuating conductance model for synaptic bombardment
      ======================================================
    THEORY
     Synaptic bombardment is represented by a stochastic model containing
     two fluctuating conductances g_e(t) and g_i(t) descibed by:
       Isyn = g_e(t) * [V - E_e] + g_i(t) * [V - E_i]
       d g_e / dt = -(g_e - g_e0) / tau_e + sqrt(D_e) * Ft
       d g_i / dt = -(g_i - g_i0) / tau_i + sqrt(D_i) * Ft
     where E_e, E_i are the reversal potentials, g_e0, g_i0 are the average
     conductances, tau_e, tau_i are time constants, D_e, D_i are noise diffusion
     coefficients and Ft is a gaussian white noise of unit standard deviation.
     g_e and g_i are described by an Ornstein-Uhlenbeck (OU) stochastic process
     where tau_e and tau_i represent the "correlation" (if tau_e and tau_i are 
     zero, g_e and g_i are white noise). The estimation of OU parameters can
     be made from the power spectrum:
       S(w) = 2 * D * tau^2 / (1 + w^2 * tau^2)
     and the diffusion coeffient D is estimated from the variance:
       D = 2 * sigma^2 / tau
    NUMERICAL RESOLUTION
     The numerical scheme for integration of OU processes takes advantage 
     of the fact that these processes are gaussian, which led to an exact
     update rule independent of the time step dt (see Gillespie DT, Am J Phys 
     64: 225, 1996):
       x(t+dt) = x(t) * exp(-dt/tau) + A * N(0,1)
     where A = sqrt( D*tau/2 * (1-exp(-2*dt/tau)) ) and N(0,1) is a normal
     random number (avg=0, sigma=1)
    IMPLEMENTATION
     This mechanism is implemented as a nonspecific current defined as a
     point process.
    PARAMETERS
     The mechanism takes the following parameters:
       E_e = 0 (mV)   : reversal potential of excitatory conductance
       E_i = -75 (mV)   : reversal potential of inhibitory conductance
       g_e0 = 0.0121 (umho)  : average excitatory conductance
       g_i0 = 0.0573 (umho)  : average inhibitory conductance
       std_e = 0.0030 (umho) : standard dev of excitatory conductance
       std_i = 0.0066 (umho) : standard dev of inhibitory conductance
       tau_e = 2.728 (ms)   : time constant of excitatory conductance
       tau_i = 10.49 (ms)   : time constant of inhibitory conductance
    Gfluct2: conductance cannot be negative
    REFERENCE
     Destexhe, A., Rudolph, M., Fellous, J-M. and Sejnowski, T.J. 
     Fluctuating synaptic conductances recreate in-vivo--like activity in
     neocortical neurons. Neuroscience 107: 13-24 (2001).
     (electronic copy available at http://cns.iaf.cnrs-gif.fr)
     A. Destexhe, 1999
    -----------------------------------------------------------------------------
    ENDCOMMENT
    INDEPENDENT {t FROM 0 TO 1 WITH 1 (ms)}
    NEURON {
      POINT_PROCESS Gfluct2
      RANGE g_e, g_i, E_e, E_i, g_e0, g_i0, g_e1, g_i1
      RANGE std_e, std_i, tau_e, tau_i, D_e, D_i
      RANGE new_seed
      NONSPECIFIC_CURRENT i
    }
    UNITS {
      (nA) = (nanoamp) 
      (mV) = (millivolt)
      (umho) = (micromho)
    }
    PARAMETER {
      dt   (ms)
      E_e = 0   (mV)  : reversal potential of excitatory conductance
      E_i = -75  (mV)  : reversal potential of inhibitory conductance
      g_e0  = 0.0121 (umho) : average excitatory conductance
      g_i0  = 0.0573 (umho) : average inhibitory conductance
      std_e  = 0.0030 (umho) : standard dev of excitatory conductance
      std_i  = 0.0066 (umho) : standard dev of inhibitory conductance
      tau_e  = 2.728 (ms)  : time constant of excitatory conductance
      tau_i  = 10.49 (ms)  : time constant of inhibitory conductance
    }
    ASSIGNED {
      v  (mV)    : membrane voltage
      i  (nA)    : fluctuating current
      g_e (umho)   : total excitatory conductance
      g_i (umho)   : total inhibitory conductance
      g_e1  (umho)   : fluctuating excitatory conductance
      g_i1  (umho)   : fluctuating inhibitory conductance
      D_e (umho umho /ms) : excitatory diffusion coefficient
      D_i (umho umho /ms) : inhibitory diffusion coefficient
      exp_e
      exp_i
      amp_e  (umho)
      amp_i  (umho)
    }
    INITIAL {
      g_e1 = 0
      g_i1 = 0
      if(tau_e != 0) {
        D_e = 2 * std_e * std_e / tau_e
        exp_e = exp(-dt/tau_e)
        amp_e = std_e * sqrt( (1-exp(-2*dt/tau_e)) )
      }
      if(tau_i != 0) {
        D_i = 2 * std_i * std_i / tau_i
        exp_i = exp(-dt/tau_i)
        amp_i = std_i * sqrt( (1-exp(-2*dt/tau_i)) )
      }
    }
    BREAKPOINT {
      SOLVE oup
      if(tau_e==0) {
        g_e = std_e * normrand(0,1)
      }
      if(tau_i==0) {
        g_i = std_i * normrand(0,1)
      }
      g_e = g_e0 + g_e1
      if(g_e < 0) { g_e = 0 }
      g_i = g_i0 + g_i1
      if(g_i < 0) { g_i = 0 }
      i = g_e * (v - E_e) + g_i * (v - E_i)
    }
    PROCEDURE oup() {    : use Scop function normrand(mean, std_dev)
      if(tau_e!=0) {
      g_e1 = exp_e * g_e1 + amp_e * normrand(0,1)
      }
      if(tau_i!=0) {
      g_i1 = exp_i * g_i1 + amp_i * normrand(0,1)
      }
    }
    PROCEDURE new_seed(seed) {   : procedure to set the seed
      set_seed(seed)
      VERBATIM
       printf("Setting random generator with seed = %g\n", _lseed);
      ENDVERBATIM
    }
    Collapse 
    orig version of synaptic noise

    joe [3:23 PM]
    Thanks!
    Can you talk about the `Synaptic weight` params?

    sergio [3:25 PM]
    but before jumpin to syn weight let me touch 2 points for the noise

    joe [3:26 PM]
    Great, please.

    sergio [3:27 PM]
    `cfg.noise_tau` is a factor that multiplies the default values for the inh and exc tau values
    it controls the frequency of the noise
    `cfg.noise_seed` is not used, should be erased
    `cfg.e_inh_noise` controls the reversal potential for the exc component of the noise
    and cfg.e_exc_noise` does it for the exc component
    I set this params to make the RMP around -70 mV
    but you can modify them to set other RMP values

    penny [3:31 PM]
    RMP is controlled by noise?

    sergio [3:33 PM]
    `cfg.vinit_PT5` also controls the RMP

    penny [3:33 PM]
    Ahh, I see. The noise mod file is changing the conductance. Okay

    sergio [3:34 PM]
    but the cells starts on vinit and then moves to the values for the reversal for the noise

    penny [3:34 PM]
    Okay

    joe [3:34 PM]
    Hmmm… That does seem a little odd to me.

    penny [3:35 PM]
    I agree. This Gflux noise thing has to be set up carefully.

    sergio [3:36 PM]
    the synaptic noise is a pain on the neck

    joe [3:37 PM]
    Yeah, maybe we should discuss in meeting tomorrow.

    sergio [3:37 PM]
    sure

    penny [3:37 PM]
    sounds good

    joe [3:37 PM]
    Anyway. Care to walk us through the rest of cfg?

    sergio [3:38 PM]
    sure
    the synaptic weight
    these are weight values for inh  and exc inputs
    there are 4 params
    E->E, E->I, I->E, and I->I
    to tune these values is very difficult
    it takes time
    but can modify depending of what you want to explore

    joe [3:43 PM]
    Okay, and these values set the weight of the synapse between the cells?
    What is the connectivity?  All-to-all?  Some sort of random?  Depends on E->E, E->I, etc.?

    sergio [3:48 PM]
    the connectivity is set as convergence
    there is a set number of inputs for each type
    for the E->E there is one input received from every subpop
    the same for E->I
    there are 4 inputs for I->E
    and 12 for I->I

    joe [3:54 PM]
    Where are those set?

    sergio [3:55 PM]
    on netParams.py
    under “Local connectivity parameters”

    joe [3:56 PM]
    added this Python snippet: netParams.py 
    from netpyne import specs
    from neuron import h
    import numpy as np
    import random
    import os

    sergio [3:59 PM]
    added this Plain Text snippet: Untitled 
    # (Exc) to Exc L5
     
     for prePop in excL5:
       for postPop in excL5:
         ruleLabel = prePop+'->'+postPop
         netParams.connParams[ruleLabel] = {
           'preConds': {'pop': prePop},
           'postConds': {'pop': postPop},
           'synMech': ESynMech, 
           'weight': cfg.EEgain, 
           'synMechWeightFactor': cfg.ratioapical, #cfg.ratiobdend,
           'delay': 'defaultDelay+dist_3D/propVelocity',
           'convergence': 1,
           'loc': 0.5,
           'sec': 'basal_0'}
     
    Collapse 

    sergio [4:00 PM]
    this is connectivity rule for E->E
    so the params from cfg.py are `cfg.EEgain` and `cfg.ratioapical`
    E->E has AMPA and NMDA
    and on `synMechWeightFactor` can set AMPA/NMDA ratio
    the ratio that I use is 4.0
    ESynMech is a list that contains [‘AMPA’, ‘NMDA’]
    for GABA, I have  slow and fast mechs
    there are in the list ISynMech
    the double mechs is only for I->E
    and the ratio is 0.7/0.3
    still there joe?

    joe [4:14 PM]
    Yeah, still here.
    Sorry, was looking at Netpyne connectivity:
    http://www.neurosimlab.com/netpyne/reference.html#connectivity-rules
    To figure out how the connectivity code was working

    sergio [4:16 PM]
    that’s the source that explain the connectivity
    the other is to check salva’s model
    but that one is complex

    joe [4:18 PM]
    So I see, in your I->I, you have `'convergence': 12`
    So, E->E, with convergence 1 has 1 connection between each E cell?
    And I->I, with convergence 12, has 12 connections between each I cell?

    sergio [4:21 PM]
    the E->E is looping over the number of subpops, so it creates 1 input for every pre-subpop
    so total each postpop will receive 11 inputs

    joe [4:24 PM]
    Sorry, I’m a bit confused…  So each E cell receives a total of 11 inputs from other E cells?  From one random cell in each of the subpops?

    sergio [4:26 PM]
    yes, each E cell receives total 11 E inputs, every input comes from a random cell in an E subpop

    joe [4:28 PM]
    And is that pretty standard?
    Where did the convergence values come from?

    sergio [4:29 PM]
    I used reference values from a network model in PT5, let me check those

    joe [4:32 PM]
    You had been saying the 10 subpops probably aren’t necessary any more…  How would we get the same connectivity without splitting into subpops?

    sergio [4:36 PM]
    https://www.frontiersin.org/files/Articles/56796/fncir-07-00161-HTML/image_m/fncir-07-00161-t006.jpg
    https://www.frontiersin.org/files/Articles/56796/fncir-07-00161-HTML/image_m/fncir-07-00161-t006.jpg
    I think it would be easier to change the convergence values if only 1 or 2 Exc subpops
    for example, the minimum of convergence values that I can use with looping over subpops is a total of 11 inputs, but the reference values is 5 for recurrent synapses (E->E)

    joe [4:45 PM]
    Do you know what article that table came from?

    sergio [4:47 PM]
    /u/sergioangulo/papers/papoutsi2013.pdf
    you can find the table there

    joe [4:49 PM]
    Thanks.  https://www.frontiersin.org/articles/10.3389/fncir.2013.00161/full
    Frontiers
    Induction and modulation of persistent activity in a layer V PFC microcircuit model
    Working memory refers to the temporary storage of information and is strongly associated with the prefrontal cortex (PFC). Persistent activity of cortical neurons, namely the activity that persists beyond the stimulus presentation, is considered the cellular correlate of working memory. Although past studies suggested that this type of activity is characteristic of large scale networks, recent experimental evidence imply that small, tightly interconnected clusters of neurons in the cortex may support similar functionalities. However, very little is known about the biophysical mechanisms giving rise to persistent activity in small-sized microcircuits in the prefrontal cortex. Here, we present… Show more

    sergio [4:50 PM]
    yes, I forgot that it was free

    joe [4:51 PM]
    No worries.  Subha doesn’t have access to Neurosim yet.
    I’m taking a look at the article to learn a bit about connectivity…
    Could you explain the gaba, and then the long range inputs?

    sergio [4:54 PM]
    sure
    for the GABA, I have params from salva’s model
    my idea was to model GABAA and GABAB but that was not stablished
    so I used the idea of Salva about GABA fast and slow
    Joe, can I connect in 30 mins?
    will you be therE?

    joe [5:02 PM]
    Sure thing, Serg.
    I’ll be around.

    sergio [5:04 PM]
    ok

    sergio [5:49 PM]
    here again

    joe [6:29 PM]
    Still around?

    sergio [6:36 PM]
    yep
    do you want to continue on long connectivity?

    joe [6:36 PM]
    Works for me.
    :slightly_smiling_face:

    sergio [6:37 PM]
    :+1:
    the inh cells are drive by long range inputs
    to control this I have a couple of switches
    `cfg.addLongConn`
    and `cfg.longConnPV5`
    this creates point cells
    you can control the number of cells with `cfg.numCellsLong`
    that creates a new pop
    the label is ‘dTC’

    joe [6:43 PM]
    dTC?

    sergio [6:44 PM]
    that is in the dict `cfg.ratesLong`

    joe [6:44 PM]
    Oh I found it.  In `netParams.py`

    sergio [6:44 PM]
    TC for ThalamoCortical
    and ‘d’ for …
    I think ‘deep’
    but on ‘rates’ the cells are supposed to be firing between 80 and 100 Hz
    then you can control the synaptic weight of this connections
    `cfg.weightLongInh`
    this control the background activity of PV5 cells

    joe [6:48 PM]
    And this only goes to PV cells, because you have `cfg.weightLong =  0.0 #2.8  # to PT5`  ?

    sergio [6:49 PM]
    at some point I was trying to drive the PT5 cells with this but we changed to synaptic noise
    I will be useful if planning to explorer the activity of the network with different long range input frequencies

    joe [6:50 PM]
    Okay, so synaptic noise just goes to PT cells, and long connections just go to PV cells?

    sergio [6:50 PM]
    yep

    joe [6:51 PM]
    Cool.
    Now, what’s the deal with gaba fast and gaba slow?

    sergio [6:53 PM]
    I haven’t read that much about it, but it is shared mech found in cortex
    let me look on salva’s model

    joe [7:04 PM]
    Cool.
    I’m looking in the cells dir.  Which all of those are in use?

    sergio [7:07 PM]
    CA229simp.py and FS3.hoc
    the FS3.hoc is from the M1 model
    but it is widely used

    joe [7:10 PM]
    Sounds good.  Thanks for walking me through!

    sergio [7:10 PM]
    no problem Joe

    joe [7:10 PM]
    I’m gonna play around with it.  I’m sure I’ll have questions.

    sergio [7:10 PM]
    I’ll be checking about the GABA

    joe [7:10 PM]
    Are you gonna be at the meeting tomorrow?

    sergio [7:11 PM]
    no, I can’t be at the meeting
    but for sure I will be around for qs

    joe [7:11 PM]
    Awesome.

    sergio [7:12 PM]
    thanks for taking into this!

    joe [7:12 PM]
    No problem.  Oh, one more thing…
    Awhile ago you shared a “game plan” that you and Salva had worked on…  I can’t find it in my notebook…  Could you find that again?

    sergio [7:13 PM]
    sure

    sergio [7:14 PM]
    mentioned salvadord’s Python snippet: * 18feb16 Meeting with Sergio about EEE net 
    ​
    ** 1) find net with reasonable rates and transient (not persistent) response
    - Select from batch sim
    ​
    ** 2) Quantify plateaus, to make sure Eact actually means something
    -- joe has some code
    -- quantify amplitude + duration
    -- quantify % of cells with plateau
    -- need to record voltage from all cells -- inc recordStep to 0.5?: 800 cells * 1000 * 2 = 1.6M 
    ​
    ** 3) compare Esync (apical input) with and without Eact (basal input)
    - Compare:
    -- only inputs to basal -- get plateaus + some spikes (minimize spikes)
    -- inputs to basal + apical simultaneously -- more spiking, more sync
    -- input to basal first + then to apical (delay of 200ms) 
    ​
    ** 4) Find control case with same amount of exc input but no plateau
    -- eg. if spread inputs (not clustered) do not generate plateau
    -- changing NMDA (taus) or other mech parameters to avoid plateau generation
    -- use inh inputs to avoid getting plateau -- but keep same total input
    Collapse 

    joe [7:16 PM]
    That’s what I was thinking of.  Thanks!

    sergio [7:17 PM]
    ok Joe, I’m leaving for today

    joe [7:20 PM]
    Cool man, hasta luego.

    sergio [7:21 PM]
    buena noche!


* 2018-04-24 -- EEE Meeting and Networking

EEE Project Meeting
Get minimal model to Subha
Clean up cell models, add switches
Combine Sergio and my repos, organize it
Work on RPPR


** Prepare minimal model

About to start cleaning everything up, so first a commit.

changeset:   559:e9f78664eb52

Moving all old batches to sim/misc/old_batches

Adding Penny's mod files to repo by removing 'sim/mod/' from .hgignore

changeset:   560:28cae3088852

There was a problem pushing to Neurosim:

    graham-mac% hgpush
    pushing to ssh://no.neurosim.downstate.edu//u/graham/projects/eee/
    searching for changes
    remote: adding changesets
    remote: adding manifests
    remote: adding file changes
    remote: added 1 changesets with 242 changes to 242 files
    Warning: No xauth data; using fake authentication data for X11 forwarding.
    sim/mod/gabab.mod: untracked file differs
    sim/mod/h_kole.mod: untracked file differs
    sim/mod/h_migliore.mod: untracked file differs
    sim/mod/kBK.mod: untracked file differs
    sim/mod/vecstim.mod: untracked file differs
    abort: untracked files in working directory differ from files in requested revision

Needed to delete old mod files and purge untracked files

    Purging: https://stackoverflow.com/questions/1212370/how-do-i-delete-all-untracked-files-from-my-working-directory-in-mercurial

    no% hg update
    sim/mod/gabab.mod: untracked file differs
    sim/mod/h_kole.mod: untracked file differs
    sim/mod/h_migliore.mod: untracked file differs
    sim/mod/kBK.mod: untracked file differs
    sim/mod/vecstim.mod: untracked file differs
    abort: untracked files in working directory differ from files in requested revision
    no% 
    no% hg update --clean
    244 files updated, 0 files merged, 222 files removed, 0 files unresolved
    no% 
    no% hg status
    ? sim/mod/AMPA.mod
    ? sim/mod/GABAA.mod
    ? sim/mod/IKsin.mod
    ? sim/mod/MyExp2SynBB.mod
    ? sim/mod/MyExp2SynNMDABB.mod
    ? sim/mod/cadad.mod
    ? sim/mod/cadyn.mod
    ? sim/mod/cal_mig.mod
    ? sim/mod/can_mig.mod
    ? sim/mod/canin.mod
    ? sim/mod/cat_mig.mod
    ? sim/mod/catcb.mod
    ? sim/mod/h_BS.mod
    ? sim/mod/hin.mod
    ? sim/mod/kap_BS.mod
    ? sim/mod/kapcb.mod
    ? sim/mod/kapin.mod
    ? sim/mod/kctin.mod
    ? sim/mod/kdmc_BS.mod
    ? sim/mod/kdr_BS.mod
    ? sim/mod/kdrin.mod
    ? sim/mod/misc.h
    ? sim/mod/nafx.mod
    ? sim/mod/nax_BS.mod
    ? sim/mod/nstim.mod
    ? sim/mod/vecst.mod
    no% 
    no% hg st -un0 | xargs -0 rm
    no% 
    no% hg status
    no% 

Copying: /u/graham/projects/eee/sim/eee_detailed_model/netpyne/batch_rearr 
     to: /u/graham/projects/eee/sim/batches_indcell/batch_20180424

Need to fix symlinks to:

    analyze.py
    batch_init.py
    instantiate.py
    runmybatches

Copying: /Users/graham/eee_serg/eee/sim/layersim
     to: /u/graham/projects/eee/sim/batches_network/batch_20180424

Need to update setup.py to symlink batch utils into batch dirs, compile mods, and place symlinked 
x86_64 dirs in appropriate places

Improved setup.py

changeset:   561:a062dcf899b2

Testing:

    graham-mac% rm -rf eee_temp ; mkdir eee_temp ; cd eee_temp ; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee ; cd eee ; ipython -i setup.py

Fixed a couple bugs and now it seems to work.

changeset:   563:9f8debe76b85


** Update mimimal model with new cell names, etc.

*** Individual cells

Running netParams:

    graham-mac% cd /u/graham/projects/eee/sim/batches_indcell/batch_20180424/ ; ipython -i netParams.py

Fixing bugs...  Now seems to be working.  Will try running batch.

    graham-mac% cd /u/graham/projects/eee/sim/batches_indcell/batch_20180424/ ; ./runmybatches; ipython -i analyze.py

It works for ind cells.  :)

changeset:   564:181b76244f17

*** Network

Running netParams:

    graham-mac% cd /u/graham/projects/eee/sim/batches_network/batch_20180424/ ; ipython -i netParams.py

Fixing bugs...

Getting a weird error:

    NEURON: syntax error
     in FS3.hoc near line 37
          insert Nafx
                    ^
            xopen("FS3.hoc")
          execute1("{xopen("FS...")
        load_file("/u/graham/...")
    /Users/graham/anaconda/bin/python.app: line 3: 16345 Segmentation fault: 11  /Users/graham/anaconda/python.app/Contents/MacOS/python "$@"
    graham-mac% 

I think maybe I don't have Nafx in the mod dir...  I just copied over Penny's mod dir, so I could be 
missing a few mod files for this model...

Copying /usr/site/nrniv/local/mod/nafx.mod into mod dir and running setup.py

Yeah, no longer crashes at Nafx.  Now it crashes at "insert kdrin"

Other mod files needed for FS3:

    Nafx
    kdrin
    IKsin 
    hin
    kapin
    canin
    kctin
    cadyn

Copying over to mod dir and recompiling.

Now netParams.py runs.

Trying to run entire sim.  Needs Gfluctp.mod, copying over from Neurosim

Also needs: 'MyExp2SynBB'

Seems to have run, but there was a problem saving data:

     Could not create target folder: ../../data/v46
    Saving output as ../../data/v46/network208.json  ... 
    Traceback (most recent call last):
      File "init.py", line 100, in <module>
        sim.saveData()                          # save params, cell info and sim output to file (pickle,mat,txt,etc)#
      File "/usr/site/nrniv/local/python/netpyne/netpyne/simFuncs.py", line 1591, in saveData
        with open(sim.cfg.filename+'.json', 'w') as fileObj:
    IOError: [Errno 2] No such file or directory: '../../data/v46/network208.json'
    >>> 

Looking into this...

Changed cfg.py line 77:
    cfg.saveFolder = 'batch_data' #'../../data/v46'

And now it works and saves output in batch_data dir.

changeset:   565:11e621b959e2

Trying it straight out of the box:

    rm -rf eee_temp ; mkdir eee_temp ; cd eee_temp ; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee ; cd eee ; python setup.py ; cd sim/batches_indcell/batch_20180424 ; ./runmybatches ; python analyze.py ; cd ../.. ; cd batches_network/batch_20180424 ; ./runsim

It works.  :)

Need to update README and then can share zip version with Subha and ssh version with others.

Updated.  

** README for this repo

    Author:  Joe Graham
    E-mail:  joe.w.graham@gmail.com
    Project: Embedded Ensemble Encoding (EEE) Model

    This is the directory for the EEE project.  The plan is to utilize the NEURON simulator and start with morphologically detailed single cell models and reproduce plateau behavior.  Morphologically simplified cells will then be developed and explored.  Simplified cells will then be utilized in network simulations.

    - File Structure

    -- setup.py                         : set up script for EEE project
    -- notebook.org                     : lab notebook for EEE project
    -- gif/                             : figures and attachments from notebook
    -- data/                            : location for input data
    --- BS0284_lstimamp.npy             : pulse stim series amplitudes array
    --- BS0284_tracedata_10KHz.npy      : experimental traces for amplitudes
    -- sim/                             : files for simulation
    --- sim/batches_indcell             : code for single cell models
    --- sim/batches_network             : code for network models
    --- cells/                          : cell model files
    ---- eeeD.py                        : morphologically detailed cell model
    ---- eeeS.py                        : morphologically simplified cell model
    ---- FS3.hoc                        : inhibitory cell used in network model
    --- mod/                            : mod files for NEURON simulator


    - Setup and Execution

    -- Get a copy of the EEE directory

        The project lives in Neurosim at /u/graham/projects/eee
        To get an initial copy, run the following where you want the directory:
            % hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee

    -- Set up directory structure and compile mod files

        Change to directory eee/ and enter: 
            % python setup.py

    -- Run and analyze single cell model batches

        Change to the batch directory of interest (e.g. cd eee/sim/batches_indcell/batch_20180424)
        Execute the following to run batch and analyze results:
            % ./runmybatches ; python analyze.py

        Output will be saved in dirs: `batch_data` and `batch_figs`

    -- Run and analyze network model batches

        Change to the batch directory of interest (e.g. cd eee/sim/batches_network/batch_20180424)
        Execute the following to run batch and analyze results:
            % ./runsim

        Output will be saved in dirs: `batch_data` and `batch_figs`



** Sharing repo

Posting on Slack
As zip file for Subha


* 2018-04-25 -- Reading

Reading up on network sims

https://www.frontiersin.org/articles/10.3389/fncir.2013.00161/full



* 2018-04-26 -- Networking

** Exploring network model

Here's the plan as far as I know it (will discuss in next meeting):

    1) find net with reasonable rates and transient (not persistent) response
    - Select from batch sim
    ​
     2) Quantify plateaus, to make sure Eact actually means something
    -- joe has some code
    -- quantify amplitude + duration
    -- quantify % of cells with plateau
    -- need to record voltage from all cells -- inc recordStep to 0.5?: 800 cells * 1000 * 2 = 1.6M 
    ​
    3) compare Esync (apical input) with and without Eact (basal input)
    - Compare:
    -- only inputs to basal -- get plateaus + some spikes (minimize spikes)
    -- inputs to basal + apical simultaneously -- more spiking, more sync
    -- input to basal first + then to apical (delay of 200ms) 
    ​
    4) Find control case with same amount of exc input but no plateau
    -- eg. if spread inputs (not clustered) do not generate plateau
    -- changing NMDA (taus) or other mech parameters to avoid plateau generation
    -- use inh inputs to avoid getting plateau -- but keep same total input


I am going to make a clean local clone of Sergio's repo, copy over his gif dir, and start 
going through his lab notebook.



* 2018-04-30 -- Abstractions

SfN Abstract (due Thursday)
RPPR (due in a couple weeks)
Work on network sim


** SfN abstract

*** Chats

    billl [12:05 PM]
    are we putting in another one joe?  you going to the meeeting?

    joe [12:05 PM]
    Yeah, I’m planning on going.

    billl [12:06 PM]
    great; so let's put one in
    heck you can drive there
    (i did once in opposite direction when SFN was in phoenix and i lived in SD)

    joe [12:07 PM]
    Sounds great.  (And I will drive!)
    For the abstract, I was thinking of discussing simplification of detailed  model and then network sims?

    billl [12:09 PM]
    yeah sounds good --guess can add new stuff to what we put in for BRAIN and CNS

    penny [12:09 PM]
    :+1:

    joe [12:10 PM]
    Cool.  I’ll get on that now.  Due Thursday.

*** Latest abstracts

Sergio's poster:
file:gif/20180430_124131.png

Penny's poster:
file:gif/20180405_104625.png

BRAIN:

    Embedded ensemble encoding: A hypothesis for reconciling cortical coding strategies
    Angulo, Sergio; Graham, Joe; Gao, Peng; Dura-Bernal, Salvador; Lytton, William; Antic, Srdjan
    M-30, Session 1

    Prefrontal cortex (PFC) plays a key role in advanced cognitive functions. Dendritic plateaus have been characterized in PFC layer 5 pyramidal neurons after the activation of AMPA and NMDA receptors in the basal dendrites, which induces prolonged depolarization closer to the threshold for action potentials. Based on these findings, our embedded-ensemble encoding theory (EEE) hypothesizes that dendritic plateaus put individual cells in a prepared state. Cells in this state have reduced threshold to firing and can more readily produce synchronized firing in response to afferent synaptic activity. Cells that are firing together are in the Active state, in which ensemble neurons exhibit synchronized firing within the column or across columns. We hypothesize that the generation of dendritic plateaus in pyramidal neurons will be relevant for the formation of neural ensembles. We studied the generation of dendritic plateaus in a multi-compartment cell model based on experimental data from PFC layer 5 pyramidal neurons, and created a network model to evaluate the effects of subpopulations of neurons in Prepared or Active states. Our results show that dendritic plateaus were generated upon the activation of AMPA and NMDA receptors in the dendritic spines of the basal dendrites in the single cell model, which mimicked the plateau amplitude and duration of the experimental data. The detailed cell model simulated both the synaptic and extrasynaptic NMDA inputs on basal dendrites. In addition, we explored the effects of input locations, AMPA/NMDA receptor conductances, calcium-activated potassium channels, and voltage-activated calcium channels on the amplitude and duration of plateau potentials in soma. The network model simulations showed increased synchrony during the dendritic plateau in the subsets with AMPA/NMDA receptors activation in the basal dendrite. These findings may help to understand the implications of dendritic plateaus at the cellular and network level, and may lead to a better understanding of ensemble synchronization and multimodal cortical information processing.

CNS:

    Recruitment of neurons into neural ensembles based on dendritic plateau potentials

    Prefrontal cortex plays a crucial role in advanced cognitive functions. Previous experimental observation has shown that glutamatergic inputs to the basal dendrites of cortical pyramidal neurons activate AMPA and NMDA receptors which can bring the dendrites into a long-lasting depolarized state: a dendritic plateau potential. These sustained depolarizations push the cell body towards spike threshold and reduce the membrane time constant. In such a "Prepared" state, the pyramidal cells can respond to other sparse synaptic inputs more quickly and easily, facilitating synchronization of firing. During the plateau depolarization, a neuron can tune into ongoing network activity and synchronize spiking with other neurons to provide a coordinated “Active” state (robust firing of somatic action potentials), which would permit "binding" of signals through coordination of neural activity across a population. Under this scenario, Active cells are recruited from cells in the Prepared state, and therefore the transient Active ensemble is embedded in the longer-lasting Prepared ensemble of neurons. We hypothesize that "embedded ensemble encoding" may be an important organizing principle in networks of neurons, explaining how electrical signaling endows central nervous system with capacity to form large number of neural ensembles. Also, embedded ensemble encoding pulls together two concepts (rate coding vs. temporal coding) that are typically seen to be in opposition.

    We have  developed  a morphologically-detailed model reconstructed from a cortical Layer 5 prefrontal pyramidal neuron in the NEURON simulator. Both synaptic AMPA/NMDA and extrasynaptic NMDA inputs are placed on basal dendrites to model the induction of plateau potentials (Fig 1.A-D). The active properties of the cell are tuned to match the amplitude and duration of experimentally observed plateau potentials utilizing voltage-sensitive dyes in dendrites and whole-cell patch recording in soma (Fig 1.E). In addition, the effects of input location, receptor conductance, calcium-activated potassium channels and voltage-activated calcium channels are explored in detail. These findings help us to better understand the implications of dendritic plateaus at the cellular and network level.  In the future, this detailed individual cell model can be used to develop cortical meso-scale network models for exploring the hypotheses pertaining to the recruitment of neurons into neural ensembles.


    Peng P. Gao1, Joe W Graham2, Sergio L Angulo2, Salvador Dura-Bernal2, Michael L Hines3, William W Lytton2, Srdjan D Antic1
     
    1Neuroscience Department, University of Connecticut Health Center, Farmington CT 06030, USA
    2Department Physiology & Pharmacology, SUNY Downstate, Brooklyn, NY 11203, USA
    3Neuroscience Department, Yale School of Medicine, New Haven, CT 06510, USA

    Figure 1. The activation of synaptic and extrasynaptic NMDARs by glutamate stimulation.
     
    Fig 1. (A) Glutamate stimulations activate the NMDA receptors (NMDARs) on dendritic spines (red blobs) and dendritic shaft (yellow blobs).  (B) Diagram of synaptic and extrasynaptic NMDARs placement in the model.  (C) The comparison of simulated traces with and without extrasynaptic NMDARs: red - somatic response evoked by synaptic NMDARs only; black -  somatic response evoked by synaptic and extrasynaptic NMDARs activation (activated AMPARs are presented in both condition).  (D) TTX condition for traces in C to eliminate the action potentials on top of plateau.  (E) The comparison of glutamate stimulation evoked plateau potentials in experiments and model simulations.

Penny's SfN 2018 abtract:

    Recruitment of neurons into neural ensembles based on dendritic plateau potentials

    Peng P. Gao1*, Joe W Graham2, Sergio L Angulo2, Salvador Dura-Bernal2, Michael L Hines3, William W Lytton2, Srdjan D Antic1
     
    1Neuroscience Dept., Univ. of Connecticut Health, Farmington CT 06030, USA
    2Physiology & Pharmacology Dept., SUNY Downstate, Brooklyn, NY 11203, USA
    3Neuroscience Dept., Yale School of Medicine, New Haven, CT 06510, USA

    Experimental observations have shown that glutamatergic inputs to the basal dendrites of cortical pyramidal neurons activate AMPA and NMDA receptors, which can bring the dendrites into a long-lasting depolarized state: a dendritic plateau potential. These sustained depolarizations push the cell body towards spike threshold and reduce the membrane time constant. In such a "Prepared" state, the pyramidal cells can respond to other sparse synaptic inputs more quickly and easily, facilitating synchronization of firing. During the plateau depolarization, a neuron can tune into ongoing network activity and synchronize spiking with other neurons to provide a coordinated “Active” state (robust firing of somatic action potentials), which would permit "binding" of signals through coordination of neural activity across a population. Under this scenario, Active cells are recruited from cells in the Prepared state, and therefore the transient Active ensemble is embedded in the longer-lasting Prepared ensemble of neurons. We hypothesize that "embedded ensemble encoding" may be an important organizing principle in networks of neurons, explaining how electrical signaling endows central nervous system with capacity to form large number of neural ensembles. We have developed a morphologically-detailed model reconstructed from a cortical Layer 5 prefrontal pyramidal cell in the NEURON simulator. Both synaptic AMPA/NMDA and extrasynaptic NMDA receptors are placed on basal dendrites to model the induction of plateau potentials. The active properties of the cell are tuned to match the amplitude and duration of plateau potentials recorded by voltage-sensitive dye imaging in dendrites and whole-cell patch measurements in soma. Then, the effects of input location, receptor conductance, calcium-activated potassium channels and voltage-activated calcium channels were explored in the model. These findings help us to better understand the implications of dendritic plateaus at the cellular and network level.  In the future, this detailed individual cell model can be used to develop cortical meso-scale network models for exploring the hypotheses pertaining to the recruitment of neurons into neural ensembles.
    Support:  NIH EB022903, EB017695.


* 2018-05-01 -- 

EEE Meeting 
SfN Abstract (due Thursday)
RPPR (due in a couple weeks)
Work on network sim


** Working on network sim

*** Chatting:

    Direct Message

    joe [7:25 AM]
    Good morning!

    sergio [7:26 AM]
    Hey Joe

    joe [7:27 AM]
    Bill keeps heckling me to work in #eee-theory instead of direct message, so I’m gonna give that a try.

    sergio [7:27 AM]
    ok

    penny [7:29 AM]
    Morning!

    joe [7:31 AM]
    Sergio, did you see that I cleaned up and organized the cells/sims a bit?  In my repo: eee/sim/batches_network/batch_20180424
    Cell models are now eeeD.py (detailed morph) and eeeS.py (simplified morph).

    sergio [7:32 AM]
    no I haven’t checked your repo

    joe [7:33 AM]
    Maybe you could start using these as well, so that our work stays somewhat aligned?

    sergio [7:33 AM]
    let me update the model form your repo
    sure
    so should be better to work directly on your repo?

    joe [7:34 AM]
    I think that would be a good way to go…

    sergio [7:34 AM]
    perfect
    what do you about the notebook part, should I add mine to your repo?

    joe [7:35 AM]
    I was just wondering about that!
    Probably should…
    Maybe we could have `notebook_jwg.org` and `notebook_sa.org` ?


    sergio [7:38 AM]
    it sounds good to me
    into `eee/sim/batches_network/`?

    joe [7:39 AM]
    I would think put in in the top level dir, same place as my nb.

    sergio [7:39 AM]
    ok

    joe [7:40 AM]
    Let me commit and push first, then you can pull and add nb (and we’ll try to stay synced)

    #eee-theory

    joe [7:29 AM]
    Hey Sergio, I’m running network sims, but with the current settings, there is no activity in the pyramidal cells…  What param(s) would you suggest I play around with first to start seeing some spiking?

    sergio [7:32 AM]
    the stim to PT5 cells is turned off. The stim to basal dends is on `cfg.NetStimSyn` and `cfg.NetStimExSyn`

    joe [7:41 AM]
    Yeah, I noticed that.  I wasn’t ready to add the stim back in yet, I just wanted to start seeing some background activity, as a baseline/control.

    sergio [7:43 AM]
    for the bkg activity we will need to increase the synaptic noise amplitude
    or drive the cells with a different input

    joe [7:45 AM]
    Okay, right now the synaptic noise comes from Gfluctp?
    I just pushed to my repo, so go ahead and pull and add your nb and we’ll try to stay synced.  :sweat_smile:

    sergio [7:46 AM]
    yep, synaptic noise from Gfluctp
    perfect, I’ll add my nb

    joe [7:47 AM]
    I’ll start setting up a batch of sims to explore different Gfluctp amplitudes.

    sergio [7:50 AM]
    ok


** Pulling from Neurosim

To get Sergio's nb:

    graham-mac% pwd
    /u/graham/projects/eee
    graham-mac% hg pull
    pulling from default
    abort: repository default not found!

Adding .hg/hgrc file:

    [paths]
    default = ssh://no.neurosim.downstate.edu://u/graham/projects/eee

Now it works.  


** Running a batch of network sims 

Sergio has a bunch of batch utilities in his eee/sim/batches_network/batch_20180424/batch.py

I prefer to have these in batch_utils, so that I don't have to copy them into each batch file

Working on this...

Copied over my_batches from indcell to network:
    
    eee/sim/batches_network/batch_20180424/my_batches.py

And set it up to vary excitatory noise amp in Gfluctp.

Now to run.

    graham-mac% cd /u/graham/projects/eee/sim/batches_network/batch_20180424/ ; ./runmybatches

Didn't work.  Debugging netParams.  Executed fine.  

Oh, I use batch_init.py instead of init.py.  Copying over from indcell.

Copying Gfluctp noise seed code from Sergio's init to the new batch_init

Okay, batch_init runs fine.  Time to run a batch of gluct amps

    # Varying Gfluctp excitatory noise amp
    batch = {}
    batch["label"] = "exc_noise_amp"
    batch["cfgFile"] = "cfg.py"
    batch["netParamsFile"] = "netParams.py"
    params = OrderedDict()
    params["exc_noise_amp"] = list(0.22 * np.array([1.0, 2.0, 10.0]))
    batch["params"] = params
    batches[batch["label"]] = batch

Ran a few more batches to find a decent range:

    file:gif/20180501_104729.png

    What background firing rate in the pyramidal cells are we looking for?
    Varying Gfluctp excitatory noise amplitude:
      1x → 0.5 Hz
      10x → 5.1 Hz
      20x → 27.7 Hz
      30x → 46.6 Hz


** Cleaning up network netParams file

First I'm going to clean up the network netParams.py file...  Needs indenting to be spaces
(instead of tabs) and it should be 4 spaces per indent.

Now to see if it still works...

Still works.  Committing now.


** To discuss in EEE meeting

- Simplifying network model (do we need 11 subpopulations?)

      No, bump it down, maybe to 4.

- Are we modeling in vivo, or slice?  

    -- What sort of firing rates do we want?  

          Low, to see plateau effect better.

    -- How do we get those rates?  (Gfluctp? Long-range inputs?)

          Gfluctp is fine

- SfN abstract

    -- Is Sergio's fig good?

        Skipping adding fig, just add more text.

    -- Any other results?

        Talk in general.


** Now to get the glutamate stim added back into network



* 2018-05-06 -- Need to catch up notebook

But pushing anyway to get Subha an analyze.py file that works out of the box

** Chatting with Subha

    joe [9:48 AM]
    Hey Subha, I’ll be around off and on today, let me know when’s good for you for a chat.
    It sounds like you’re looking at an older version of the repo, before I recently cleaned and organized.
    Try cloning the repo again (or use “hg purge” on existing to get rid of old, no-longer-tracked files).

    joe [9:54 AM]
    added this Plain Text snippet: README.txt 
    Author: Joe Graham
    E-mail: joe.w.graham@gmail.com
    Project: Embedded Ensemble Encoding (EEE) Model
    This is the directory for the EEE project. The plan is to utilize the NEURON simulator and start with morphologically detailed single cell models and reproduce plateau behavior. Morphologically simplified cells will then be developed and explored. Simplified cells will then be utilized in network simulations.

    joe [9:56 AM]
    The README explains how to run the individual cell and network sims.
    Best place to start, I think, is to make sure you can run the sims.
    Let me know when you’re available to chat.
    Hope you’re feeling better!

    subha [4:21 PM]
    Hi Joe thanks. I went back to work today and it was crazy and couldnt login earlier
    I will get the latest version and play around a bit.

    subha [5:35 PM]
    Hey Joe. I tried running the code and ran into this error

    subha [5:36 PM]
    added this Plain Text snippet: Untitled 
    $ python analyze.py 
    Traceback (most recent call last):
     File "analyze.py", line 7, in <module>
      import batch_analysis
    ImportError: No module named batch_analysis
    $ ls
    analyze.py batch_init.py  dev.py   netParams.py
    batch_data cfg.py   instantiate.py runmybatches
    batch_figs cfg.pyc   my_batches.py  x86_64
    $pwd
    /Users/subha/Documents/phd/joe/eee/sim/batches_indcell/batch_20180424
    Collapse 

    subha [5:36 PM]
    As you can see there is not batch_analysis.py in this dir
    I found that analyze.py is a symbolic link to the one existing one above this dir.
    but there was no batch_analysis.py there as well
    There is one under sim directory. Should I copy that one
    Btw I am just typing the Qs here like I would do with email. Please feel free to answer at your convenience

    joe [11:25 AM]
    Hey Subha, yeah, the batch_analysis you’re looking for is `eee/sim/batch_analysis.py`.
    I moved some things around when I was organizing the repo.
    I have `eee/sim` in my PYTHONPATH, but I’ll come up with a fix so that doesn’t need to be added to path…

    joe [12:02 PM]
    Okay, it should be fixed now.  I added the following to `analyze.py`:

    joe [12:03 PM]
    added this Python snippet: Untitled 
    try: 
      import batch_analysis
    except:
      curpath = os.getcwd()
      while os.path.split(curpath)[1] != "sim":
        curpath = os.path.split(curpath)[0]
      sys.path.append(curpath)
      import batch_analysis
    Collapse 

    joe [12:03 PM]
    It finds the `sim` dir and adds it to the path for this Python session.
    I pushed, so you should be able to pull and have it work.  :crossed_fingers:

    subha [3:19 PM]
    Hi Joe, I added the PYTHONPATH and tried it on Friday and got the following error.
    Traceback (most recent call last):
     File "analyze.py", line 89, in <module>
       plot_all()
     File "analyze.py", line 78, in plot_all
       batch_analysis.plot_vtraces(batch)
     File "/Users/subha/Documents/phd/joe/eee/sim/batch_analysis.py", line 1050, in plot_vtraces
       for cell in data[data.keys()[0]]['net']['cells']:
    IndexError: list index out of range
    Let me do a hg update and try again

    joe [3:25 PM]
    That looks like it might be because there’s no data to analyze…
    Are there `.json` and `.png` files in `eee/sim/batches_indcell/batch_20180424/batch_data/glutAmpAxon`?

    subha [3:26 PM]
    There are .json but no .png

    subha [3:26 PM]
    added this Plain Text snippet: Untitled 
    Subhashinis-MacBook-Pro:glutAmpAxon subha$ ls -ltr
    total 144
    -rw-r--r-- 1 subha staff 14460 May 6 15:16 glutAmpAxon_netParams.py
    -rw------- 1 subha staff  9408 May 6 15:16 glutAmpAxon_batchScript.py
    -rw-r--r-- 1 subha staff  633 May 6 15:16 glutAmpAxon_batch.json
    -rw-r--r-- 1 subha staff  6379 May 6 15:16 glutAmpAxon_0_cfg.json
    -rw-r--r-- 1 subha staff  6379 May 6 15:16 glutAmpAxon_1_cfg.json
    -rw-r--r-- 1 subha staff  6379 May 6 15:16 glutAmpAxon_2_cfg.json
    -rw-r--r-- 1 subha staff  6379 May 6 15:16 glutAmpAxon_3_cfg.json
    -rw-r--r-- 1 subha staff  6379 May 6 15:16 glutAmpAxon_4_cfg.json
    Collapse 

    joe [3:29 PM]
    Yeah, it looks like the simulations didn’t complete correctly.  You should also have `.png` figures of the voltage traces, and files like `glutAmpAxon_0.json`, `glutAmpAxon_1.json`, etc.

    subha [3:29 PM]
    I typed ./runmybatches
    and the last few lines are

    subha [3:30 PM]
    added this C snippet: Untitled 
    Job in rank id: 2.0
    nrniv batch_init.py simConfig=batch_data/glutAmpAxon/glutAmpAxon_4_cfg.json netParams=batch_data/glutAmpAxon/glutAmpAxon_netParams.py
    ​
    ​
    ​
    Completed my_batches.py
    Duration (s): 20.0665459633
    ​
    Current process:
    psutil.Process(pid=17743, name='nrniv')
    Parent process:
    psutil.Process(pid=17742, name='orterun')
    Attempting to terminate grandparent process:
    psutil.Process(pid=17741, name='bash')
    >>> Terminated: 15
    Collapse 

    joe [3:31 PM]
    That last bit is actually my ugly hack to get back to the command prompt after running a batch of sims in Netpyne…

    subha [3:32 PM]
    so it did ran successfully?

    joe [3:33 PM]
    No, it just didn’t fail where it should have… :sweat_smile:
    So Salva taught me the best way to debug when working with Netpyne is to run files in the following order:
    1) netParams.py
    2) batch_init.py (or init.py in some dirs)
    3) my_batches.py
    Can you go to the batch dir, execute `ipython -i netParams.py` and copy me the output?

    subha [3:38 PM]
    uploaded this image: Screenshot_netparams.png 


    joe [4:04 PM]
    Whoops.  Still some more cleaning up to do.  Those are all print statements so I was sure I knew what was going on with the synapses…

    subha [4:04 PM]
    Though the second step batch_init.py  completed. There was an error in between
    ERROR: SimConfig->'analysis'->'plotTraces': plotTraces must be a bool or dict with keys in list ['include', 'timeRange', 'overlay', 'oneFigPer', 'rerun', 'figSize', 'saveData', 'showFig']. Keys supplied are ['saveFig', 'timeRange', 'showFig', 'oneFigPer', 'include', 'figSize'].
    ERROR: SimConfig->'analysis'->'plotTraces'->'saveFig': saveFig must be tuple if specified. Value provided is True.

    joe [4:25 PM]
    Those errors are from having Netpyne set to Verbose, and aren’t actually a problem.
    I just commented out all the print statements.
    Could you run the following command and copy me the output?
    mkdir eee_temp ; cd eee_temp ; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee ; cd eee ; python setup.py ; cd sim/batches_indcell/batch_20180424 ; ipython -i netParams.py

    subha [4:27 PM]
    Ok will do..
    Just wanted to let you know that doing step by step as you suggested
    created a couple of png but no json ...
    bash-3.2$ ls -ltr
    total 5520
    drwxr-xr-x  26 subha  staff      884 May  6 16:03 glutAmpAxon
    -rw-r--r--   1 subha  staff  2709086 May  6 16:04 batch_rearr.json
    -rw-r--r--   1 subha  staff    59666 May  6 16:04 batch_rearr_traces_gid_1.png
    -rw-r--r--@  1 subha  staff    51594 May  6 16:04 batch_rearr_traces_gid_0.png

    subha [5:05 PM]
    Hmm the process is hung..
    Let me try to do step by step
    *******
     Note: NeuroML import failed; import/export functions for NeuroML will not be available.
     Install the pyNeuroML & libNeuroML Python packages: https://www.neuroml.org/getneuroml
    *******
    Couldn't import cfg from __main__
    Attempting to import cfg from cfg.
    geom_nseg: changed from  85  to  475  total segments
    eeeS original apical diam = 6.0
    eeeS new apical diam      = 6.0
    eeeS original basal_9 diam = 6.0
    eeeS new basal_9 diam      = 6.0
    And it is hung..

    joe [5:08 PM]
    Hmmm… That’s in netParams, where it shouldn’t hang…
    It doesn’t return to prompt?

    subha [5:11 PM]
    No
    I am running it step by step

    joe [5:12 PM]
    Okay, what step did you run before it hung?  `ipython -i netParams.py`?

    subha [5:13 PM]
    It is hung here
    bash-3.2$ ipython -i netParams.py > output_action
    NEURON -- VERSION 7.5 master (c693a84) 2017-12-07
    Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
    See http://neuron.yale.edu/neuron/credits

    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
    CaDynamics_E2.mod CaT.mod Ca_HVA.mod Cad.mod Gfluctp.mod IKsin.mod IL.mod Ih.mod MyExp2SynBB.mod NMDA.mod NMDAeee.mod PlateauConductance.mod SK_E2.mod ampa.mod ca.mod cadyn.mod canin.mod gabaa.mod gabab.mod glutamate.mod h_kole.mod h_migliore.mod hin.mod kBK.mod kadist.mod kapin.mod kaprox.mod kctin.mod kdrin.mod kv.mod na.mod nafx.mod vecstim.mod vmax.mod
    Sorry it is good
    ipython wont quit if I redirect

    joe [5:14 PM]
    Aha, good to know!

    subha [5:14 PM]
    Here is my output
    loading membrane mechanisms from x86_64/.libs/libnrnmech.so
    Additional mechanisms from files
    CaDynamics_E2.mod CaT.mod Ca_HVA.mod Cad.mod Gfluctp.mod IKsin.mod IL.mod Ih.mod MyExp2SynBB.mod NMDA.mod NMDAeee.mod PlateauConductance.mod SK_E2.mod ampa.mod ca.mod cadyn.mod canin.mod gabaa.mod gabab.mod glutamate.mod h_kole.mod h_migliore.mod hin.mod kBK.mod kadist.mod kapin.mod kaprox.mod kctin.mod kdrin.mod kv.mod na.mod nafx.mod vecstim.mod vmax.mod

    *******
     Note: NeuroML import failed; import/export functions for NeuroML will not be available.
     Install the pyNeuroML & libNeuroML Python packages: https://www.neuroml.org/getneuroml
    *******

    Couldn't import cfg from __main__
    Attempting to import cfg from cfg.
    geom_nseg: changed from  85  to  475  total segments
    eeeS original apical diam = 6.0
    eeeS new apical diam      = 6.0
    eeeS original basal_9 diam = 6.0
    eeeS new basal_9 diam      = 6.0

    In [1]:

    joe [5:14 PM]
    Okay, so netParams executes without a problem.

    subha [5:15 PM]
    Should i be concerned about Couldn't import cfg from __main__
    Attempting to import cfg from cfg

    joe [5:15 PM]
    Next is 2) batch_init.py
    Try running `ipython -i batch_init.py`

    subha [5:16 PM]
    Running simulation for 1000 ms...
    0.1 s
    0.2 s
    0.3 s
    0.4 s
    0.5 s
    0.6 s
    0.7 s
    0.8 s
    0.9 s
     Done; run time = 11.82 s; real-time ratio: 0.08.

    Gathering data...
     Done; gather time = 0.12 s.

    Analyzing...
     Cells: 2
     Connections: 2 (1.00 per cell)
     Synaptic contacts: 144 (72.00 per cell)
     Spikes: 4 (2.00 Hz)
      eeeD : 1.000 Hz
      eeeS : 3.000 Hz
     Simulated time: 1.0 s; 1 workers
     Run time: 11.82 s
    fatal: Not a git repository (or any of the parent directories): .git
    Saving output as batch_data/batch_rearr.json  ... 
    Finished saving!
     Done; saving time = 0.97 s.
    Plotting recorded cell traces ...
     Done; plotting time = 1.16 s

    Total time = 14.39 s

    In [1]:

    joe [5:16 PM]
    Don’t be concerned about cfg message, that happens when running netParams manually.
    I don’t know where this line comes from:
    fatal: Not a git repository (or any of the parent directories): .git
    But it ran without crashing, so new we’re on to step 3) my_batches.py
    `ipython -i my_batches.py`

    subha [5:19 PM]
    Maybe that is a question for Salva..Does his netpyne try to do something with git?
    I see he is online should I ask him

    joe [5:21 PM]
    Yeah, go for it…  I can’t seem to find how git could be involved in this…

    subha [5:21 PM]
    Last step completed
    Gathering data...
     Done; gather time = 0.11 s.

    Analyzing...
     Cells: 2
     Connections: 2 (1.00 per cell)
     Synaptic contacts: 144 (72.00 per cell)
     Spikes: 8 (4.00 Hz)
      eeeD : 3.000 Hz
      eeeS : 5.000 Hz
     Simulated time: 1.0 s; 1 workers
     Run time: 12.33 s
    Saving output as batch_data/glutAmpAxon/glutAmpAxon_4.json  ... 
    Finished saving!
     Done; saving time = 0.89 s.
    Plotting recorded cell traces ...
     Done; plotting time = 1.14 s

    Total time = 14.66 s


    Completed my_batches.py
    Duration (s): 100.384442091

    Current process:
    psutil.Process(pid=22261, name='python2.7')

    joe [5:23 PM]
    Oh great, so now there should be `.png` files in the `batch_data` dir
    And now running `analyze.py` should work

    subha [5:25 PM]
    There are 2 png files
    so ipython -i analyze.py

    subha [5:28 PM]
    uploaded this image: Screen Shot 2018-05-06 at 5.27.46 PM.png 


    subha [5:28 PM]
    didnt quite work I think

    joe [5:29 PM]
    That’s one I haven’t seen before…

    subha [5:30 PM]
    here is the entire message

    subha [5:30 PM]
    uploaded this image: Screen Shot 2018-05-06 at 5.30.04 PM.png 


    subha [5:31 PM]
    But wait

    joe [5:31 PM]
    What happens if you open `ipython`, then `import matplotlib.pyplot as plt`, then `fig = plt.figure()`
    ?

    subha [5:31 PM]
    the glutAmpAxon dir has all the files.. I have to open one to see
    does this look right

    subha [5:32 PM]
    uploaded this image: Screen Shot 2018-05-06 at 5.32.15 PM.png 


    joe [5:33 PM]
    That’s great, that `.png` means the simulations ran successfully.

    subha [5:34 PM]
    Ok great. Thanks. I have to figure out why the earlier step didnt work..or it worked but gave those error messages

    joe [5:35 PM]
    To me, your error looks like a problem with Python and the graphics backend…

    subha [5:35 PM]
    I tried what you asked me to do with matplotlib
    In [2]: import matplotlib.pyplot as plt

    In [3]: fig = plt.figure()

    In [4]:
    so that part looks fine

    joe [5:36 PM]
    I’ll bet someone else has had this problem.  Why don’t you ask about it in #tech ?

    subha [5:39 PM]
    Sure
    Thanks Joe. I will admire the beautiful plots and try to figure out whats happening.. .

    joe [5:39 PM]
    :grinning:

    subha [5:41 PM]
    Thanks a lot for taking time on Sunday to help me debug. Much appreciated

    joe [5:41 PM]
    No worries.  Anytime I’m online.

    subha [5:41 PM]
    I am planning to read teh papers that Penny suggested and then try to figure out what your ind cell model output means

    joe [5:42 PM]
    As soon as we figure out your backend problem, I’ll walk you through how to actually set up and run a batch of sims to explore whatever param we’re interested in

    subha [5:45 PM]
    Ok sounds good. So the notebook.org has your notes on what parameters were simplified

    joe [6:02 PM]
    I’m normally pretty good about keeping notes (perhaps too much so!).
    But yeah, the notebook is the place to see what I’ve been doing.
    It’s just a text file, but if you open it in emacs (Bill’s favorite, well, everything really) then it’s a nice outline mode expandable with `tab`s

    subha [6:05 PM]
    I think I found the issue with my ipython matplotlib
    looks like a known issue with an earlier version. I will do a reinstall
    Thanks Joe for all your help today.

    joe [6:24 PM]
    Perfect.  And no problem.

    subha [6:28 PM]
    just FYI.. got the ipython analyze.py to work..

    joe [6:32 AM]
    :+1:


 * 2018-05-08 -- EEE Meeting and misc

 EEE Meeting
 RPPR 
 Network model


 ** Resting membrane potential

Plateaus in network model aren't as high as in ind model

RMP seems to be the problem

    Network: cfg.vinit_PT5 = -70
    Indcell: cfg.e_pas     = -80.0 # resting membrane potential

I'm not sure the network model adjusts e_pas to RMP...



** Making figure for EEE meeting

Raster and trace:
    file:gif/20180508_074216.png

Number of spikes:
    file:gif/20180508_074259.png

Input is 5 epsps with 10 ms interval.  

I find it interesting that while very few individual cells spike five times, the network as a whole (raster) shows the five inputs pretty clearly…


** Running a long sim for meeting

Increasing exc noise to 6x normal
Increasing duration to 2 secs

network_jwg_004

Nothing very interesting.

** Meeting notes

Penny is having trouble with plateau duration as a function of glut puff location

Duration should be approx the same no matter where in dendrite glut is puffed

Srdjan: how to choose E->E weight/connectivity

Salva: plot some measure of synchrony versus E->E values

Srdjan: would like to see EPSP input every 50 ms, before during and after plateau

Salva: reducing E->E would reduce oscillations in non-plat cells

** Had to re- symlink 

Symlinked:
runmybatches, batch_init.py, and analyze.py in /u/graham/projects/eee/sim/batches_indcell/batch_20180424/


** Effect of glutamate puff location

file:gif/20180508_092309.png
file:gif/20180508_092328.png

file:gif/20180508_115046.png



* 2018-05-09 -- RPPR and network

RPPR 
Network model

** First to commit and sync repo with Sergio's work

Local hg status:

    graham-mac% hg status
    M notebook.org
    M sim/batches_indcell/batch_20180424/analyze.py
    M sim/batches_indcell/batch_20180424/batch_init.py
    M sim/batches_indcell/batch_20180424/cfg.py
    M sim/batches_indcell/batch_20180424/my_batches.py
    M sim/batches_indcell/batch_20180424/netParams.py
    M sim/batches_indcell/batch_20180424/runmybatches
    M sim/batches_network/batch_20180424/cfg.py
    M sim/batches_network/batch_20180424/dev_joe.py
    M sim/batches_network/batch_20180424/netParams.py
    ! sim/batches_network/batch_20180424/cfg_joe.py
    ? sim/batches_network/batch_20180424/cfg_serg.py

Saving cfg.py as cfg_joe.py so as not to lose Sergio's cfg
Saving cfg_serg.py as cfg.py

I'm concerned that I'm not using relative symlinks...  Trying an out-of-the-box 
run of sims and analysis:

    graham-mac% mkdir eee_temp ; cd eee_temp ; hg clone ssh://no.neurosim.downstate.edu://u/graham/projects/eee ; cd eee ; python setup.py ; cd sim/batches_indcell/batch_20180424 ; ./runmybatches ; python analyze.py

That worked fine.

Making a local copy of eee and then merging with Sergio.

    graham-mac% hg commit -m "Committing before merging with Sergio's repo"
    graham-mac% hgpush
    pushing to ssh://no.neurosim.downstate.edu//u/graham/projects/eee/
    searching for changes
    remote has heads on branch 'default' that are not known locally: 45d6b8c9dcda
    abort: push creates new remote head 4d1468a1336f!
    (pull and merge or see 'hg help push' for details about pushing new heads)
    Warning: No xauth data; using fake authentication data for X11 forwarding.
    2 files updated, 0 files merged, 0 files removed, 0 files unresolved
    graham-mac% 
    graham-mac% hg pull
    pulling from ssh://no.neurosim.downstate.edu//u/graham/projects/eee
    searching for changes
    adding changesets
    adding manifests
    adding file changes
    added 2 changesets with 4 changes to 2 files (+1 heads)
    (run 'hg heads' to see heads, 'hg merge' to merge)
    graham-mac% 
    graham-mac% hg merge
    2 files updated, 0 files merged, 0 files removed, 0 files unresolved
    (branch merge, don't forget to commit)
    graham-mac% 
    graham-mac% hgs
    M notebook_sa.org
    M sim/batches_network/batch_20180424/cfg.py
    graham-mac% 
    graham-mac% hgs
    M notebook_sa.org
    M sim/batches_network/batch_20180424/cfg.py
    graham-mac% 
    graham-mac% hg heads
    changeset:   579:45d6b8c9dcda
    tag:         tip
    user:        Sergio Angulo <sergio.angulo@gmail.com>
    date:        Tue May 08 18:19:28 2018 -0400
    summary:     network --2nd stim every 50 ms

    changeset:   577:4d1468a1336f
    user:        Joe Graham <joe.w.graham@gmail.com>
    date:        Wed May 09 10:17:43 2018 -0700
    summary:     Committing before merging with Sergio's repo

    graham-mac% 
    graham-mac% hg update
    abort: outstanding uncommitted merge
    graham-mac% 
    graham-mac% hg commit -m "Merge with Sergio's repo"
    graham-mac% 
    graham-mac% hg update
    0 files updated, 0 files merged, 0 files removed, 0 files unresolved
    graham-mac% 
    graham-mac% hgs
    graham-mac% 
    graham-mac% hgl
    changeset:   580:bc484ba72376
    tag:         tip
    parent:      577:4d1468a1336f
    parent:      579:45d6b8c9dcda
    user:        Joe Graham <joe.w.graham@gmail.com>
    date:        Wed May 09 10:19:15 2018 -0700
    summary:     Merge with Sergio's repo

    changeset:   579:45d6b8c9dcda
    user:        Sergio Angulo <sergio.angulo@gmail.com>
    date:        Tue May 08 18:19:28 2018 -0400
    summary:     network --2nd stim every 50 ms

    changeset:   578:73b7cda410b5
    parent:      576:2b2f002481f2
    user:        Sergio Angulo <sergio.angulo@gmail.com>
    date:        Tue May 08 16:29:48 2018 -0400
    summary:     network --increased EE and different stim loc (apical-basal)

    changeset:   577:4d1468a1336f
    user:        Joe Graham <joe.w.graham@gmail.com>
    date:        Wed May 09 10:17:43 2018 -0700
    summary:     Committing before merging with Sergio's repo

    changeset:   576:2b2f002481f2
    user:        Joe Graham <joe.w.graham@gmail.com>
    date:        Sun May 06 16:22:15 2018 -0700
    summary:     Removed print statements from indcell netParams

    graham-mac% hgpush
    pushing to ssh://no.neurosim.downstate.edu//u/graham/projects/eee/
    searching for changes
    remote: adding changesets
    remote: adding manifests
    remote: adding file changes
    remote: added 2 changesets with 10 changes to 10 files
    Warning: No xauth data; using fake authentication data for X11 forwarding.
    10 files updated, 0 files merged, 0 files removed, 0 files unresolved
    graham-mac% 

Seemed to work fine.  :)


** Trying Sergio's latest sim

graham-mac% cd /u/graham/projects/eee/sim/batches_network/batch_20180424/ ; ./runsim

Looks good, stim every 50 ms like Srdjan requested.

file:gif/20180509_104231.png

Need to find a way of measuring the sync for each stim...  

Perhaps looking for spikes within a few ms of each stim?

We should see more spikes in the time window during plateaus.



** Comparing use of init.py and batch_init.py

No apparent difference:
    file:gif/20180509_141653.png


* 2018-05-14 -- RPPR


* 2018-05-15 -- RPPR


* 2018-05-16 -- Oscillations

Get gamma oscillations

** Updating repo

Had some problems.  Lost some notebook entries.  Need to figure out a good Hg workflow.

I ended up deleting my local repo and recloning.

Mercurial workflow:
https://stackoverflow.com/questions/3241018/commit-pull-merge-push-or-pull-merge-commit-push

Suggested workflow:

	1) work on a feature
	2) commit -m "Worked on feature ABC"
	3) pull -u
	If branch:
	4) merge
	5) commit -m "Merge"
	6) push

Now to look into oscillations.

** Hunting oscillations

Sergio is adding gfluct to inhibitory cells.

I am reading up on gamma oscillations and looking for models that exhibit it.


* 2018-05-17 -- Oscillations

** Hg

Sergio added gfluct, now I need to pull his changes.

Trying new workflow:

		1) changed notebook
		2) hg commit -m "Trying new Hg workflow"
		3) pull -u

			pulling from ssh://no.neurosim.downstate.edu//u/graham/projects/eee
			searching for changes
			adding changesets
			adding manifests
			adding file changes
			added 2 changesets with 7 changes to 4 files (+1 heads)
			0 files updated, 0 files merged, 0 files removed, 0 files unresolved
			1 other heads for branch "default"
	
	If branch:

		4) merge
		5) commit -m "Merge"
		6) push

Seems to work.

** Playing with gfluct in inhib cells

graham-mac% cd /u/graham/projects/eee/sim/batches_network/batch_20180424/ ; ./runsim

Output:
	file:gif/20180517_093458.png

The saturation at -80 in the trace looks odd, I'll look into it.  

Exploring netParams to see how Sergio implemented the Gfluctp

		cellRule = netParams.importCellParams(label='PV5', conds={'cellType':'PV', 'cellModel':'HH_simple'}, fileName=PV_path, cellName='FScell1', cellInstance = True)

		if cfg.noise_PV5:
		        netParams.cellParams['PV5']['secs']['soma']['pointps']= {'noise': {'loc': 0.5, 
		                                                                          'std_e': 0.012*cfg.exc_noise_amp_icells,
		                                                                          'g_e0' : 0.0121, 
		                                                                          'tau_i': 10.49*cfg.noise_tau, 
		                                                                          'tau_e': 2.728*cfg.noise_tau, 
		                                                                          'std_i': 0.0264*cfg.inh_noise_amp_icells, 
		                                                                          'g_i0' : 0.0573, 
		                                                                          'E_e'  : cfg.e_exc_noise, 
		                                                                          'E_i'  : cfg.e_inh_noise, 
		                                                                          'mod'  : 'Gfluctp'}}

Looking into Gfluctp

** Gfluct (before changed to Gfluctp)

		TITLE Fluctuating conductances

		COMMENT
		-----------------------------------------------------------------------------

			Fluctuating conductance model for synaptic bombardment
			======================================================

		THEORY

		  Synaptic bombardment is represented by a stochastic model containing
		  two fluctuating conductances g_e(t) and g_i(t) descibed by:

		     Isyn = g_e(t) * [V - E_e] + g_i(t) * [V - E_i]
		     d g_e / dt = -(g_e - g_e0) / tau_e + sqrt(D_e) * Ft
		     d g_i / dt = -(g_i - g_i0) / tau_i + sqrt(D_i) * Ft

		  where E_e, E_i are the reversal potentials, g_e0, g_i0 are the average
		  conductances, tau_e, tau_i are time constants, D_e, D_i are noise diffusion
		  coefficients and Ft is a gaussian white noise of unit standard deviation.

		  g_e and g_i are described by an Ornstein-Uhlenbeck (OU) stochastic process
		  where tau_e and tau_i represent the "correlation" (if tau_e and tau_i are 
		  zero, g_e and g_i are white noise).  The estimation of OU parameters can
		  be made from the power spectrum:

		     S(w) =  2 * D * tau^2 / (1 + w^2 * tau^2)

		  and the diffusion coeffient D is estimated from the variance:

		     D = 2 * sigma^2 / tau


		NUMERICAL RESOLUTION

		  The numerical scheme for integration of OU processes takes advantage 
		  of the fact that these processes are gaussian, which led to an exact
		  update rule independent of the time step dt (see Gillespie DT, Am J Phys 
		  64: 225, 1996):

		     x(t+dt) = x(t) * exp(-dt/tau) + A * N(0,1)

		  where A = sqrt( D*tau/2 * (1-exp(-2*dt/tau)) ) and N(0,1) is a normal
		  random number (avg=0, sigma=1)


		IMPLEMENTATION

		  This mechanism is implemented as a nonspecific current defined as a
		  point process.


		PARAMETERS

		  The mechanism takes the following parameters:

		     E_e = 0  (mV)		: reversal potential of excitatory conductance
		     E_i = -75 (mV)		: reversal potential of inhibitory conductance

		     g_e0 = 0.0121 (umho)	: average excitatory conductance
		     g_i0 = 0.0573 (umho)	: average inhibitory conductance

		     std_e = 0.0030 (umho)	: standard dev of excitatory conductance
		     std_i = 0.0066 (umho)	: standard dev of inhibitory conductance

		     tau_e = 2.728 (ms)		: time constant of excitatory conductance
		     tau_i = 10.49 (ms)		: time constant of inhibitory conductance


		Gfluct2: conductance cannot be negative


		REFERENCE

		  Destexhe, A., Rudolph, M., Fellous, J-M. and Sejnowski, T.J.  
		  Fluctuating synaptic conductances recreate in-vivo--like activity in
		  neocortical neurons. Neuroscience 107: 13-24 (2001).

		  (electronic copy available at http://cns.iaf.cnrs-gif.fr)


		  A. Destexhe, 1999

		-----------------------------------------------------------------------------
		ENDCOMMENT



		INDEPENDENT {t FROM 0 TO 1 WITH 1 (ms)}

		NEURON {
			POINT_PROCESS Gfluct2
			RANGE g_e, g_i, E_e, E_i, g_e0, g_i0, g_e1, g_i1
			RANGE std_e, std_i, tau_e, tau_i, D_e, D_i
			RANGE seed
			NONSPECIFIC_CURRENT i
		}

		UNITS {
			(nA) = (nanoamp) 
			(mV) = (millivolt)
			(umho) = (micromho)
		}

		PARAMETER {
		        seed = 1
			dt		(ms)

			E_e	= 0 	(mV)	: reversal potential of excitatory conductance
			E_i	= -75 	(mV)	: reversal potential of inhibitory conductance

			g_e0	= 0.0121 (umho)	: average excitatory conductance
			g_i0	= 0.0573 (umho)	: average inhibitory conductance

			std_e	= 0.0030 (umho)	: standard dev of excitatory conductance
			std_i	= 0.0066 (umho)	: standard dev of inhibitory conductance

			tau_e	= 2.728	(ms)	: time constant of excitatory conductance
			tau_i	= 10.49	(ms)	: time constant of inhibitory conductance
		}

		ASSIGNED {
			v	(mV)		: membrane voltage
			i 	(nA)		: fluctuating current
			g_e	(umho)		: total excitatory conductance
			g_i	(umho)		: total inhibitory conductance
			g_e1	(umho)		: fluctuating excitatory conductance
			g_i1	(umho)		: fluctuating inhibitory conductance
			D_e	(umho umho /ms) : excitatory diffusion coefficient
			D_i	(umho umho /ms) : inhibitory diffusion coefficient
			exp_e
			exp_i
			amp_e	(umho)
			amp_i	(umho)
		}

		INITIAL {
			set_seed(seed)
			g_e1 = 0
			g_i1 = 0
			if(tau_e != 0) {
				D_e = 2 * std_e * std_e / tau_e
				exp_e = exp(-dt/tau_e)
				amp_e = std_e * sqrt( (1-exp(-2*dt/tau_e)) )
			}
			if(tau_i != 0) {
				D_i = 2 * std_i * std_i / tau_i
				exp_i = exp(-dt/tau_i)
				amp_i = std_i * sqrt( (1-exp(-2*dt/tau_i)) )
			}
		}

		BREAKPOINT {
			SOLVE oup
			if(tau_e==0) {
			   g_e = std_e * normrand(0,1)
			}
			if(tau_i==0) {
			   g_i = std_i * normrand(0,1)
			}
			g_e = g_e0 + g_e1
			if(g_e < 0) { g_e = 0 }
			g_i = g_i0 + g_i1
			if(g_i < 0) { g_i = 0 }
			i = g_e * (v - E_e) + g_i * (v - E_i)
		}


		PROCEDURE oup() {		: use Scop function normrand(mean, std_dev)
		   if(tau_e!=0) {
			g_e1 =  exp_e * g_e1 + amp_e * normrand(0,1)
		   }
		   if(tau_i!=0) {
			g_i1 =  exp_i * g_i1 + amp_i * normrand(0,1)
		   }
		}


		PROCEDURE new_seed(newseed) {		: procedure to set the seed
			set_seed(newseed)
			VERBATIM
			  printf("Setting random generator with seed = %g\n", _lnewseed);
			ENDVERBATIM
		}

** Gfluctp 

		TITLE Fluctuating conductances

		COMMENT
		-----------------------------------------------------------------------------

			Fluctuating conductance model for synaptic bombardment
			======================================================

		THEORY

		  Synaptic bombardment is represented by a stochastic model containing
		  two fluctuating conductances g_e(t) and g_i(t) descibed by:

		     Isyn = g_e(t) * [V - E_e] + g_i(t) * [V - E_i]
		     d g_e / dt = -(g_e - g_e0) / tau_e + sqrt(D_e) * Ft
		     d g_i / dt = -(g_i - g_i0) / tau_i + sqrt(D_i) * Ft

		  where E_e, E_i are the reversal potentials, g_e0, g_i0 are the average
		  conductances, tau_e, tau_i are time constants, D_e, D_i are noise diffusion
		  coefficients and Ft is a gaussian white noise of unit standard deviation.

		  g_e and g_i are described by an Ornstein-Uhlenbeck (OU) stochastic process
		  where tau_e and tau_i represent the "correlation" (if tau_e and tau_i are 
		  zero, g_e and g_i are white noise).  The estimation of OU parameters can
		  be made from the power spectrum:

		     S(w) =  2 * D * tau^2 / (1 + w^2 * tau^2)

		  and the diffusion coeffient D is estimated from the variance:

		     D = 2 * sigma^2 / tau


		NUMERICAL RESOLUTION

		  The numerical scheme for integration of OU processes takes advantage 
		  of the fact that these processes are gaussian, which led to an exact
		  update rule independent of the time step dt (see Gillespie DT, Am J Phys 
		  64: 225, 1996):

		     x(t+dt) = x(t) * exp(-dt/tau) + A * N(0,1)

		  where A = sqrt( D*tau/2 * (1-exp(-2*dt/tau)) ) and N(0,1) is a normal
		  random number (avg=0, sigma=1)


		IMPLEMENTATION

		  This mechanism is implemented as a nonspecific current defined as a
		  point process.


		PARAMETERS

		  The mechanism takes the following parameters:

		     E_e = 0  (mV)		: reversal potential of excitatory conductance
		     E_i = -75 (mV)		: reversal potential of inhibitory conductance

		     g_e0 = 0.0121 (umho)	: average excitatory conductance
		     g_i0 = 0.0573 (umho)	: average inhibitory conductance

		     std_e = 0.0030 (umho)	: standard dev of excitatory conductance
		     std_i = 0.0066 (umho)	: standard dev of inhibitory conductance

		     tau_e = 2.728 (ms)		: time constant of excitatory conductance
		     tau_i = 10.49 (ms)		: time constant of inhibitory conductance


		Gfluct2: conductance cannot be negative


		REFERENCE

		  Destexhe, A., Rudolph, M., Fellous, J-M. and Sejnowski, T.J.  
		  Fluctuating synaptic conductances recreate in-vivo--like activity in
		  neocortical neurons. Neuroscience 107: 13-24 (2001).

		  (electronic copy available at http://cns.iaf.cnrs-gif.fr)


		  A. Destexhe, 1999

		-----------------------------------------------------------------------------
		ENDCOMMENT



		INDEPENDENT {t FROM 0 TO 1 WITH 1 (ms)}

		NEURON {
			POINT_PROCESS Gfluct2
			RANGE g_e, g_i, E_e, E_i, g_e0, g_i0, g_e1, g_i1
			RANGE std_e, std_i, tau_e, tau_i, D_e, D_i
			RANGE seed
			NONSPECIFIC_CURRENT i
		}

		UNITS {
			(nA) = (nanoamp) 
			(mV) = (millivolt)
			(umho) = (micromho)
		}

		PARAMETER {
		        seed = 1
			dt		(ms)

			E_e	= 0 	(mV)	: reversal potential of excitatory conductance
			E_i	= -75 	(mV)	: reversal potential of inhibitory conductance

			g_e0	= 0.0121 (umho)	: average excitatory conductance
			g_i0	= 0.0573 (umho)	: average inhibitory conductance

			std_e	= 0.0030 (umho)	: standard dev of excitatory conductance
			std_i	= 0.0066 (umho)	: standard dev of inhibitory conductance

			tau_e	= 2.728	(ms)	: time constant of excitatory conductance
			tau_i	= 10.49	(ms)	: time constant of inhibitory conductance
		}

		ASSIGNED {
			v	(mV)		: membrane voltage
			i 	(nA)		: fluctuating current
			g_e	(umho)		: total excitatory conductance
			g_i	(umho)		: total inhibitory conductance
			g_e1	(umho)		: fluctuating excitatory conductance
			g_i1	(umho)		: fluctuating inhibitory conductance
			D_e	(umho umho /ms) : excitatory diffusion coefficient
			D_i	(umho umho /ms) : inhibitory diffusion coefficient
			exp_e
			exp_i
			amp_e	(umho)
			amp_i	(umho)
		}

		INITIAL {
			set_seed(seed)
			g_e1 = 0
			g_i1 = 0
			if(tau_e != 0) {
				D_e = 2 * std_e * std_e / tau_e
				exp_e = exp(-dt/tau_e)
				amp_e = std_e * sqrt( (1-exp(-2*dt/tau_e)) )
			}
			if(tau_i != 0) {
				D_i = 2 * std_i * std_i / tau_i
				exp_i = exp(-dt/tau_i)
				amp_i = std_i * sqrt( (1-exp(-2*dt/tau_i)) )
			}
		}

		BREAKPOINT {
			SOLVE oup
			if(tau_e==0) {
			   g_e = std_e * normrand(0,1)
			}
			if(tau_i==0) {
			   g_i = std_i * normrand(0,1)
			}
			g_e = g_e0 + g_e1
			if(g_e < 0) { g_e = 0 }
			g_i = g_i0 + g_i1
			if(g_i < 0) { g_i = 0 }
			i = g_e * (v - E_e) + g_i * (v - E_i)
		}


		PROCEDURE oup() {		: use Scop function normrand(mean, std_dev)
		   if(tau_e!=0) {
			g_e1 =  exp_e * g_e1 + amp_e * normrand(0,1)
		   }
		   if(tau_i!=0) {
			g_i1 =  exp_i * g_i1 + amp_i * normrand(0,1)
		   }
		}


		PROCEDURE new_seed(newseed) {		: procedure to set the seed
			set_seed(newseed)
			VERBATIM
			  printf("Setting random generator with seed = %g\n", _lnewseed);
			ENDVERBATIM
		}

** Differences between Gfluct and Gfluctp

Working in:
		/u/graham/projects/eee/sim/misc/gflucts/gfluct_comp.py

To run:
		graham-mac% cd /u/graham/projects/eee/sim/misc/gflucts/ ; ipython -i gfluct_comp.py
		
Output:
		file:gif/20180517_134043.png

While the mod file does this:
		Balancing each compartment to -73 mV

The FS3 cells get a resting membrane potential RMP of around -55 mV


** Running a network sim without long conns

The sim had the long connections turned on, but I think the Gfluctp is supposed to take care 
of all that

file:gif/20180517_153226.png

Top is with long conns, bottom is without.  Chatted on Slack, and we agreed to remove
long conns and let Gfluct be input to inhib cells.



* 2018-05-18 -- Oscillations

** Hg

I've made changes to netParams and cfg, and so has Sergio.  I want to lose my changes and 
keep his.

		graham-mac% hgs
		M notebook.org
		M sim/batches_network/batch_20180424/cfg.py
		M sim/batches_network/batch_20180424/netParams.py
		A sim/misc/gflucts/FS3.hoc
		A sim/misc/gflucts/Gfluct.mod
		A sim/misc/gflucts/Gfluctp.mod
		A sim/misc/gflucts/gfluct_comp.py
		A sim/misc/gflucts/mod/CaDynamics_E2.mod
		A sim/misc/gflucts/mod/CaT.mod
		A sim/misc/gflucts/mod/Ca_HVA.mod
		A sim/misc/gflucts/mod/Cad.mod
		A sim/misc/gflucts/mod/Gfluct.mod
		A sim/misc/gflucts/mod/Gfluctp.mod
		A sim/misc/gflucts/mod/IKsin.mod
		A sim/misc/gflucts/mod/IL.mod
		A sim/misc/gflucts/mod/Ih.mod
		A sim/misc/gflucts/mod/MyExp2SynBB.mod
		A sim/misc/gflucts/mod/NMDA.mod
		A sim/misc/gflucts/mod/NMDAeee.mod
		A sim/misc/gflucts/mod/PlateauConductance.mod
		A sim/misc/gflucts/mod/SK_E2.mod
		A sim/misc/gflucts/mod/ampa.mod
		A sim/misc/gflucts/mod/ca.mod
		A sim/misc/gflucts/mod/cadyn.mod
		A sim/misc/gflucts/mod/canin.mod
		A sim/misc/gflucts/mod/gabaa.mod
		A sim/misc/gflucts/mod/gabab.mod
		A sim/misc/gflucts/mod/ghk.inc
		A sim/misc/gflucts/mod/glutamate.mod
		A sim/misc/gflucts/mod/h_kole.mod
		A sim/misc/gflucts/mod/h_migliore.mod
		A sim/misc/gflucts/mod/hin.mod
		A sim/misc/gflucts/mod/kBK.mod
		A sim/misc/gflucts/mod/kadist.mod
		A sim/misc/gflucts/mod/kapin.mod
		A sim/misc/gflucts/mod/kaprox.mod
		A sim/misc/gflucts/mod/kctin.mod
		A sim/misc/gflucts/mod/kdrin.mod
		A sim/misc/gflucts/mod/kv.mod
		A sim/misc/gflucts/mod/na.mod
		A sim/misc/gflucts/mod/nafx.mod
		A sim/misc/gflucts/mod/vecstim.mod
		A sim/misc/gflucts/mod/vmax.mod

Hg commit options:

		 -A --addremove           mark new/missing files as added/removed before
		                          committing
		    --close-branch        mark a branch head as closed
		    --amend               amend the parent of the working directory
		 -s --secret              use the secret phase for committing
		 -e --edit                invoke editor on commit messages
		 -i --interactive         use interactive mode
		 -I --include PATTERN [+] include names matching the given patterns
		 -X --exclude PATTERN [+] exclude names matching the given patterns
		 -m --message TEXT        use text as commit message
		 -l --logfile FILE        read commit message from file
		 -d --date DATE           record the specified date as commit date
		 -u --user USER           record the specified user as committer
		 -S --subrepos            recurse into subrepositories

So I think I will try to exclude the netParams.py and cfg.py

		graham-mac% hg commit -m -X sim/batches_network/batch_20180424/cfg.py -X sim/batches_network/batch_20180424/netParams.py -m "Attempting partial commit to add nb changes and gflucts dir"
		graham-mac% 
		graham-mac% hg status
		M notebook.org
		M sim/batches_network/batch_20180424/netParams.py
		A sim/misc/gflucts/FS3.hoc
		...
		graham-mac% 
		graham-mac% hg log --limit 2
		changeset:   595:f5696148f683
		tag:         tip
		user:        Joe Graham <joe.w.graham@gmail.com>
		date:        Fri May 18 08:07:01 2018 -0700
		summary:     Attempting partial commit to add nb changes and gflucts dir

		changeset:   594:38050a725393
		parent:      593:935de654ef6c
		parent:      592:da954cb6617b
		user:        Joe Graham <joe.w.graham@gmail.com>
		date:        Thu May 17 09:12:57 2018 -0700
		summary:     Merge

Seems strange.  Why are there still most of the changes when I do hg status?

Ugh. Had some problems, but I think everything is good now.


** Sergio's changes to PV cell model

It looks like he just changed v_init in each PV sec to -55

In the model (FS3.hoc) it looks like e_pas in the soma is supposed to be -73, 
but:

		In [4]: gf.soma.e_pas
		Out[4]: 0.0

		In [5]: gf.axon.e_pas
		Out[5]: -73.0

		In [6]: gf.dend.e_pas
		Out[6]: -73.0

This could explain why the cell isn't sitting at -73 like I expected (more like -55)

I'll plot soma and axon for the cells.

Chatting with Serg:

		joe [10:02 AM]
		Hey Serg, there’s a problem with RMP.
		You’re trying to set RMP by changing vinit, but all vinit does is set the initial voltage for starting the simulation.
		e_pas is what controls RMP

		sergio [10:06 AM]
		I see

		sergio [10:12 AM]
		e_pas should be under this: `[sec]['mechs']['pas']['e']`?

		joe [10:12 AM]
		I’m fixing it now.  Gimme a sec and I’ll push.

		joe [10:12 AM]
		added this Python snippet: Untitled 
		  for secName,sec in cell_params['secs'].iteritems():     
		    sec['vinit'] = cfg.vinit_PV5
		​
		    if 'pas' in sec['mechs']:
		​
		      if sec['mechs']['pas']['e'] != cfg.vinit_PV5:
		      
		        print(cell_label)
		        print(secName)
		        print("e_pas orig:")
		        print(sec['mechs']['pas']['e'])
		        sec['mechs']['pas']['e'] = cfg.vinit_PV5
		        print("e_pas new:")
		        print(sec['mechs']['pas']['e'])
		Collapse 

		joe [10:13 AM]
		sec[‘mechs’][‘pas’][‘e’]

		sergio [10:14 AM]
		great let me add this

		joe [10:19 AM]
		I just pushed to repo.  I also fixed PT5.

		sergio [10:19 AM]
		thanks Joe! I'll pull the changes

		joe [10:20 AM]
		Perfect.

The RMP change doesn't seem to affect all cells...  Looking into netParams


* 2018-05-22 -- EEE Meeting and gfluctp

** EEE Meeting

Penny should start getting detailed model into network sims, i.e. start using Netpyne

What happens if two basals get plateaus?  

We should look for IPSPs, turn noise off to see clearer

Play around with delays, don't use distance to set delays

Hines: explore delays and II values

Bill: try without noise to see effects

Srdjan (via Bill): try long sims, look for emergent behavior (plateaus)

Bill: try convergence of 100, to kick cells in to plateau with network activity

      try increasing number of cells, convergence, E->E, etc.

Bill will improve Gfluctp so that the noiseFromRandom123() doesn't need to be called
(makes it more like NetStim)

** Syncing up with repo 

Will commit, then pull and merge.

I think I finally have it figured out:

		graham-mac% hgs
		M notebook.org
		M sim/batches_network/batch_20180424/noise.py
		M sim/misc/gflucts/gfluct_comp.py
		graham-mac% 
		graham-mac% hg commit -m "Syncing to main repo"
		graham-mac% hg pull
		pulling from ssh://no.neurosim.downstate.edu//u/graham/projects/eee
		searching for changes
		adding changesets
		adding manifests
		adding file changes
		added 6 changesets with 14 changes to 3 files (+1 heads)
		(run 'hg heads' to see heads, 'hg merge' to merge)
		graham-mac% hg merge
		3 files updated, 0 files merged, 0 files removed, 0 files unresolved
		(branch merge, don't forget to commit)
		graham-mac% hg commit -m "Merged"
		graham-mac% 
		graham-mac% hg push
		pushing to ssh://no.neurosim.downstate.edu//u/graham/projects/eee
		searching for changes
		remote: adding changesets
		remote: adding manifests
		remote: adding file changes
		remote: added 2 changesets with 3 changes to 3 files
		graham-mac% 


** Running latest sim

Command:
		graham-mac% cd /u/graham/projects/eee/sim/batches_network/batch_20180424/ ; ./runsim



* 2018-05-29 -- EEE Meeting and network sims

Need to:
	update lab notebook with sims from last week
	create separate dirs in repo
	try out Gfluctp


** Chats

joe [7:17 AM]
I found a good explanation of randomness in NEURON:  https://neuron.yale.edu/neuron/docs/randomness-neuron-models
neuron.yale.edu
Randomness in NEURON models | NEURON
There are many potential applications of randomness in modeling. These fall into two broad categories:
Did you ever get Gfluctp to work, Bill?

billl [7:18 AM]
didn't know anything wrong with it; though i was working on better incorporating into netpyne?
what is error?
ie initialization

joe [7:19 AM]
Not an error, per se, but right now it requires us to to call noiseFromRandom123()
Instead of applying default seeds (like Netstim)

billl [7:20 AM]
yes so would be easy to try putting that call into INITIAL block; i'm still stuck on trying to get my system back up and now have to finish a paper so that was weekend activity ... sorry :(

joe [7:20 AM]
No worries, I was just curious.

billl [7:24 AM]
want to just try dumping that call into init block? -- i can do and you can try it out
done -- ** v1177 call noiseFromRandom123() from INITIAL block [mod/Gfluctp.mod] (mod)
compiles and runs
now whether it does anything good is another matter
at one point we had a small test program for this
gfluct_comp.py maybe?
in your dir
/mod pushed to neurosim

joe [7:28 AM]
Awesome, thanks! I’ll try it out now.

billl [7:28 AM]
sure ... sorry about delay
since calling without any args will require that the params be set -- seed1, seed2, seed3
those are range so would end up being unique for each
if this works we could reduce to just 1 or 2 seeds -- 3 seeds is overkill
be much simpler with just 1 seed but i'm not sure which is the main seed

joe [7:30 AM]
I was wondering what the reason for three seeds was.

billl [7:31 AM]
3 seeds is since such a superrandomizer -- hmm that's not much of an explanation -- anyway offers a lot of flexibility in terms of setting streams and substreams but we don't need all that ;; maybe that explanation you found tells which stream is which i forget


** Gfluctp

Moved Gfluctp.mod to Gfluctp_old.mod, and renamed internally: Gfluctp_old
Copied over Bill's new Gfluctp.mod

Now to compile and try out.  Working in /u/graham/projects/eee/sim/misc/gflucts

graham-mac% cd /u/graham/projects/eee/sim/misc/gflucts/mod/
graham-mac% nrnivmodl
graham-mac% cd ..
graham-mac% pwd
/u/graham/projects/eee/sim/misc/gflucts
graham-mac% ln -s mod/x86_64 


** EEE Meeting

Srdjan shows data of NMDA spike and NMDA plateau in dends

Bill: we should get back to plateaus and not worry so much about noise and 
      oscillations

Sergio will work on short sims, looking at inhib oscillations

Joe will work on long sims, looking at plateaus and seeking emergent behaviors

Sergio presents nice oscillations

Everyone agrees to use low noise value

Why 3 seeds?

	1) global identifier
	2) purpose
	3) synaptic instance

Salvador will incorporate Gfluctp into Netpyne


** Working on Gfluctp

Copying over Bill's updated copy to try it out

Network copy command:
		scp graham@no.neurosim.downstate.edu://usr/site/nrniv/local/mod/Gfluctp.mod /Users/graham/Desktop/



* 2018-05-31 -- 

** Updating my subdir

Will commit, pull, merge, and then start with Sergio's latest

Now running:
		graham-mac% cd /u/graham/projects/eee/sim/batches_network/batch_joe/ ; ./runsim

Looks like Sergio has added some pops...

		Creating network of 7 cell populations
   	PT5_1 : 4.873 Hz
   	PT5_2 : 4.727 Hz
   	PT5_3 : 4.580 Hz
   	PT5_4 : 4.567 Hz
   	PV5 : 64.090 Hz
   	plateau_stim : 1.667 Hz
   	Stim_apic : 40.000 Hz


** Getting organized

Cleaning up and organizing cfg and netParams

Removing batch_utils import and testing... works.

Rearranging cfg... works.

Cleaning init.py... works.

Trying additional analyses... worked except for one plot:

		Error: plotSpikeStats() requires the PySpike python package to calculate synchrony (try: pip install pyspike)

Installing:
		graham-mac% pip install pyspike

Plot works now.

Looking into NetPyNE analysis functions.

http://www.neurosimlab.com/netpyne/reference.html#analysis-functions



* 2018-06-04 -- PSPs

** Looking for PSPs

I'm going to crank up the connection weights until I can actually see EPSPs and IPSPs

First I'll run the sim.  Recording all cells.

		graham-mac% cd /u/graham/projects/eee/sim/batches_network/batch_joe/ ; ./runsim

That takes a long time to simulate (250 s).  I'm just going to record/plot a couple cells
from each population

Okay, cranking up the inhib gains

		cfg.EEgain = 7.5 #40.0 # basal dend 
		cfg.IEgain = 100 #0.1 #0.5    #PV to Exc 
		cfg.EIgain = 1.0 #2.0  #Exc to PV
		cfg.IIgain = 100 #0.1 #1.0 #1.0 # PV to PV

Good, there are IPSPs, but hard to interpret with crazy huge IPSPS.

Turning noise off

Reducing inhib gains to 10 
Reducing to 1.0

** Running a long sim

Trying one for 10,000 ms


** Pulling repo to see how Sergio's sims are looking

And running:
    graham-mac% cd /u/graham/projects/eee/sim/batches_network/batch_sergio/ ; ./runsim


** Long sim

10k ms was way too long, but it did eventually finish (network017)

The behavior is weird...  Running just 1000 ms (network018)

** Netpyne connectivity plots don't seem to show any connectivity

Will look into this...

file:gif/20180605_065136.png


* 2018-06-05 -- EEE Meeting and OCNS prep

** Chatting with Sergio about connectivity plots

joe [6:53 AM]
uploaded this image: 20180605_065136.png 


joe [6:54 AM]
Hey Sergio, I was playing around with some of the other Netpyne analyses, but I don’t see the connectivity…  Do you have any idea what the problem could be?
I just uncommented from your cfg file:

joe [6:54 AM]
added this Python snippet: Untitled 
cfg.analysis['plotConn'] = {'includePre':L5, 'includePost':L5,'feature': 'strength','synOrConn':'conn','synMech':['AMPA'],'groupBy': 'pop', 'saveFig': True, 'showFig': False}
​
cfg.analysis['plot2Dnet'] = {'include': L5, 'view': 'xy', 'showConns': True, 'showFig': False, 'saveFig': True}

ergio [6:55 AM]
it had worked in the past for me, but the last time I tried it didn’t work

the plotConn analysis is very interesting but I am not sure if I did something wrong

joe [6:57 AM]
Hmmm… Okay, I’ll have to dig around…

sergio [6:57 AM]
I tried to check the comments section on the netpyne analysis file

joe [6:58 AM]
What have you been working on?  Got anything to present at the meeting?
I’ve been really busy with other stuff… I don’t have much to present…  :grimacing:

sergio [6:59 AM]
yep, I tried stims at different frequencies

joe [6:59 AM]
Find anything interesting?

sergio [7:00 AM]
more or less, but I just don’t know with bill

sergio [7:00 AM]
so the higher the freq of the stim, you can induce persistent activity and sync across exc cells
but for me, I just have one more meeting with the group
and then I’m going to start the clinical thing

joe [7:04 AM]
Oh, no!  Don’t leave us!


** Installing Netpyne gui

First I'll try to install on my machine, then on the OCNC VM.

Repo:
    https://github.com/Neurosim-lab/netpyne_workspace.git

Instructions:    
    https://github.com/MetaCell/NetPyNE-UI/blob/master/README.md

Need to install Docker:
    https://www.docker.com/get-docker
    https://store.docker.com/editions/community/docker-ce-desktop-mac

Docker is installed (my username: joewgraham)

    graham-mac% docker version
    Client:
     Version:      18.03.1-ce
     API version:  1.37
     Go version:   go1.9.5
     Git commit:   9ee9f40
     Built:        Thu Apr 26 07:13:02 2018
     OS/Arch:      darwin/amd64
     Experimental: false
     Orchestrator: swarm

    Server:
     Engine:
      Version:      18.03.1-ce
      API version:  1.37 (minimum version 1.12)
      Go version:   go1.9.5
      Git commit:   9ee9f40
      Built:        Thu Apr 26 07:22:38 2018
      OS/Arch:      linux/amd64
      Experimental: true
    graham-mac% 


Install NEURON-UI using Docker from command line
To pull the docker container:

docker pull metacell/netpyne-ui

To run the docker container:

docker run -it -p 8888:8888 metacell/netpyne-ui

Or alternatively, if you want a local folder outside of the Docker container to host the NetPyNE-UI workspace (where you can import models from, export models to, inspect the log and the jupyter notebook) you can execute the following command:

docker run -it -v ~/folder_in_your_computer:/home/jovyan/netpyne_workspace -p 8888:8888 metacell/netpyne-ui
This will mount your local folder folder_in_your_computer as a volume inside the container and will be used to host the NetPyNE-UI workspace (/home/jovyan/netpyne_workspace inside the container).

Once you run your container you can open your browser and connect to http://localhost:8888/geppetto.

    graham-mac% docker pull metacell/netpyne-ui
    Using default tag: latest
    latest: Pulling from metacell/netpyne-ui
    693502eb7dfb: Pulling fs layer 
    a3782c2efb41: Pulling fs layer 
    9cb32b776a40: Pulling fs layer 
    e539f5722cd5: Pull complete 
    b4690d4047c6: Pull complete 
    121dc465f5c6: Pull complete 
    c352772bbcfd: Pull complete 
    eeda14d1c421: Pull complete 
    0057b9e76c8a: Pull complete 
    e63bd87d75dd: Pull complete 
    055904fbc069: Pull complete 
    d336770b8a83: Pull complete 
    d61dbef85c7d: Pull complete 
    7679ac4ad93a: Pull complete 
    efcda1c28a0e: Pull complete 
    457697ae619c: Pull complete 
    a2e2980f2cdc: Pull complete 
    c465c1354ccc: Pull complete 
    9b2bc23b5587: Pull complete 
    b55e349b3f83: Pull complete 
    af4cf0141067: Pull complete 
    1fcf40ebbb45: Pull complete 
    1e2963812db2: Pull complete 
    2b8dfb6034bb: Pull complete 
    ad414fa7a8b4: Pull complete 
    d1bbf7efda2a: Pull complete 
    a9d03e5c11eb: Pull complete 
    7a3792e56f2a: Pull complete 
    Digest: sha256:61ffd70dc16efa51d09a017b657692f4e883799e5e634ba225f336717212735f
    Status: Downloaded newer image for metacell/netpyne-ui:latest
    graham-mac% 



docker run -it -v ~/folder_in_your_computer:/home/jovyan/netpyne_workspace -p 8888:8888 metacell/netpyne-ui

Should bceome:

docker run -it -v ~/netpyne_gui:/home/graham/netpyne_workspace -p 8888:8888 metacell/netpyne-ui

Actually, I guess it should stay /home/jovyan/netpyne_workspace

Trying again:

docker run -it -v ~/netpyne_gui:/home/jovyan/netpyne_workspace -p 8888:8888 metacell/netpyne-ui


** EEE Meeting

Look into apical stim and plateaus: does plateau continue, or just activity?

Bill thinks we're driving model too hard.

Look into more input frequencies: 2 Hz, 5 Hz, 10 Hz, etc.

Are our plateaus NMDA?  If they last too long, they start to seem pathological

Compare "latch-up" activity with NMDA plateau activity


** Re-reading EEE article

Embedded ensemble encoding hypothesis:
The role of the “Prepared” cell
Srdjan D. Antic1 | Michael Hines2 | William W. Lytton3,4

https://paperpile.com/view/dbf0ce01-29f2-099c-ab80-ce6cf7c4927d

"The key physiological observation is that the dendritic plateau potential produces sustained 
depolarization of the cell body (amplitude 10–20 mV, duration 200–500 ms)."



** Reading Guy Major article

Active Properties of Neocortical Pyramidal Neuron Dendrites
Guy Major,1 Matthew E. Larkum,2,∗ and Jackie Schiller3,∗

https://paperpile.com/view/e69526d3-8b92-008b-bd99-4920ed6840ad

"We emphasize ... NMDARs because these transmitter-gated
channels seem to provide the major nonlinear depolarizing drive
in thin dendrites, even allowing full-blown NMDA spikes...  a dominant
NMDAR contribution would indicate that the input-output relations
of thin dendrites are dynamically set by network activity and cannot be
fully predicted by purely reductionist approaches."


** Need to find a way to take notes on articles

Maybe should ask in Slack


* 2018-06-06 -- OCNS course prep

TODO:
Get Docker running smoothly
Explore NetPyne gui
Write blurbs for Jonah

** EEE chats

    billl [2:39 PM]
    so getting a plat in all of them
    since all get EE stim into bdend NMDA

    sergio [2:40 PM]
    yes, the EE induce the plateau

    billl [2:40 PM]
    ok so that's an NMDA latchup situation -- perhaps comparable to what XJ Wang described -- his was NMDA dependent
    ok so maybe switch over to the slower stims
    if 'normal' plateau lasts 300 ms
    then could do 10 hz and get 2 or 3 in there

    sergio [2:41 PM]
    2-3 spikes, correct?
    during the plateau

    billl [2:44 PM]
    y
    or could do 20 hz too -- 4-6 spikes

    sergio [2:44 PM]
    ok

    salvadord [6:05 PM]
    so getting NMDA plateau due to EE is a good thing right? less artificial… or am I missing something?

    billl [6:20 PM]
    maybe good -- a contrast anyway -- the idea was that the plateau would be due self limiting and would be due to intrinsic process of the cell which would then set up that particular cell as a member of an ensemble;  in the case that sergio shows it seems that all the cells are latched up -- partly due to NMDA -- and that therefore the ensemble is the entire set and the plateau is due to the network rather than a particular (programmed) set of cell-by-cell activations

    salvadord [7:02 PM]
    hmm ic kind of… so (excuse my ignorance) where would these intrinsic processes /programmed activations come from if not from EE?

    billl [7:18 PM]
    No ignorance— we made up the theory so can remake it. Thought was that the standby (prepared, plateau) ensemble could be topdown Bayesian prepared set and embedded ensemble would be bottomup info.  But could also do a plateau locally as a hop net

    salvadord [7:39 PM]
    ah ok yeah that sounds familiar — so currently topdown is modeled as netstim (“plateau_stim”)

    billl [7:41 PM]
    y, both are via netsrims

    salvadord [7:41 PM]
    uploaded and commented on this image: image.png 

    your review paper shows this though…

    salvadord [7:46 PM]
    uploaded and commented on this image: Pasted image at 2018-06-05, 10:46 PM 

    here main distinction seems to be clustered (plateau) vs dsitributed inputs

    billl [7:48 PM]
    to get the plat need a massive input to 1 bdend so clustered
    E0 to E5 here can all be from areas external to where this neuron is

    salvadord [7:50 PM]
    right ic
    so the “local input” label in prev fig makes sense?

    billl [7:58 PM]
    not sure, was thinking we meant local or focal on the individual neuron but does seem srdjan has diff  viewpoint so maybe not,  he’s always asking for plats emerging from our network so asking for hop net mutual reinforcement?  hmm but to get that the cells need to be spiking so won’t work to st off plats
    if local to network has to be ensemble all firing together due to the.
    EE which then sets off another group of plats
    following a slower osc window of delta or theta
    interesting

    salvadord [8:04 PM]
    sounds complicated :slightly_smiling_face:
    for netpyne grant revision was asked to provide proof of concept of evol algos feasibility to tune networks
    so plan to add to netpyne, and maybe useful for this kind of problems

    billl [8:06 PM]
    want to tune this one?

    salvadord [8:06 PM]
    maybe something interesting for subha too since evol algs will require hpcs
    maybe could use this one as case study

    billl [8:07 PM]
    sure

    salvadord [6:13 AM]
    So the features that characterize the EEE “Prepared state” plateau vs the “latch-up” plateau are: 1) distributed inputs to single basal branch, 2) plateau in that basal branch, 3) NMDA synapses, 4) glut spillover, 5) inputs from other regions (mostly top-down) — is this correct? missing something?

    billl [6:13 AM]
    transience
    i think latch up will involve 3, 4, maybe 5
    selectivity
    transience -- plateau for a particular cell should go away;  selectivity -- that cell is selected/prepared and not all the cell

    salvadord [6:19 AM]
    what do u mean “not all cell”?

    billl [6:46 AM]
    not all of the cells -- with latchup everybody is going while with selection of prepared cells just a few cells form an ensemble

    salvadord [7:13 AM]
    ic thx
    so guess transience+selectivity mostly consequence of source of inputs to cell — eg. transient because inputs stop

    billl [7:24 AM]
    confluent input is punctate in time -- other inputs might keep coming in to same basilar dend -- one idea was that at some plats bdend1 makes the plat and bdend2 has the temporal inputs (which now we have going in to apical dend) while at some other time bdend2 might get the confluent input->plat and  bdend1 gets the timed which gives the EE




** Get Docker running smoothly

Figure out workflow.



** Become familiar with Netpyne GUI

Go through tutorial.

